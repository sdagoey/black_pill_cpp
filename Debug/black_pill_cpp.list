
black_pill_cpp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006cb4  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08006e48  08006e48  00016e48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006ea0  08006ea0  0002019c  2**0
                  CONTENTS
  4 .ARM          00000008  08006ea0  08006ea0  00016ea0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006ea8  08006ea8  0002019c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ea8  08006ea8  00016ea8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006eac  08006eac  00016eac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000019c  20000000  08006eb0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001338  2000019c  0800704c  0002019c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200014d4  0800704c  000214d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002019c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017920  00000000  00000000  000201cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000333d  00000000  00000000  00037aec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001060  00000000  00000000  0003ae30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f08  00000000  00000000  0003be90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018eda  00000000  00000000  0003cd98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000135cc  00000000  00000000  00055c72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008eada  00000000  00000000  0006923e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f7d18  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000043f8  00000000  00000000  000f7d6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000019c 	.word	0x2000019c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08006e30 	.word	0x08006e30

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	200001a0 	.word	0x200001a0
 80001d0:	08006e30 	.word	0x08006e30

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e8:	f000 b96e 	b.w	80004c8 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	468c      	mov	ip, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	f040 8083 	bne.w	800031a <__udivmoddi4+0x116>
 8000214:	428a      	cmp	r2, r1
 8000216:	4617      	mov	r7, r2
 8000218:	d947      	bls.n	80002aa <__udivmoddi4+0xa6>
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	b142      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 8000220:	f1c2 0020 	rsb	r0, r2, #32
 8000224:	fa24 f000 	lsr.w	r0, r4, r0
 8000228:	4091      	lsls	r1, r2
 800022a:	4097      	lsls	r7, r2
 800022c:	ea40 0c01 	orr.w	ip, r0, r1
 8000230:	4094      	lsls	r4, r2
 8000232:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000236:	0c23      	lsrs	r3, r4, #16
 8000238:	fbbc f6f8 	udiv	r6, ip, r8
 800023c:	fa1f fe87 	uxth.w	lr, r7
 8000240:	fb08 c116 	mls	r1, r8, r6, ip
 8000244:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000248:	fb06 f10e 	mul.w	r1, r6, lr
 800024c:	4299      	cmp	r1, r3
 800024e:	d909      	bls.n	8000264 <__udivmoddi4+0x60>
 8000250:	18fb      	adds	r3, r7, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000256:	f080 8119 	bcs.w	800048c <__udivmoddi4+0x288>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 8116 	bls.w	800048c <__udivmoddi4+0x288>
 8000260:	3e02      	subs	r6, #2
 8000262:	443b      	add	r3, r7
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 fe0e 	mul.w	lr, r0, lr
 8000278:	45a6      	cmp	lr, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x8c>
 800027c:	193c      	adds	r4, r7, r4
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000282:	f080 8105 	bcs.w	8000490 <__udivmoddi4+0x28c>
 8000286:	45a6      	cmp	lr, r4
 8000288:	f240 8102 	bls.w	8000490 <__udivmoddi4+0x28c>
 800028c:	3802      	subs	r0, #2
 800028e:	443c      	add	r4, r7
 8000290:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000294:	eba4 040e 	sub.w	r4, r4, lr
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa0>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	b902      	cbnz	r2, 80002ae <__udivmoddi4+0xaa>
 80002ac:	deff      	udf	#255	; 0xff
 80002ae:	fab2 f282 	clz	r2, r2
 80002b2:	2a00      	cmp	r2, #0
 80002b4:	d150      	bne.n	8000358 <__udivmoddi4+0x154>
 80002b6:	1bcb      	subs	r3, r1, r7
 80002b8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002bc:	fa1f f887 	uxth.w	r8, r7
 80002c0:	2601      	movs	r6, #1
 80002c2:	fbb3 fcfe 	udiv	ip, r3, lr
 80002c6:	0c21      	lsrs	r1, r4, #16
 80002c8:	fb0e 331c 	mls	r3, lr, ip, r3
 80002cc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d0:	fb08 f30c 	mul.w	r3, r8, ip
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d907      	bls.n	80002e8 <__udivmoddi4+0xe4>
 80002d8:	1879      	adds	r1, r7, r1
 80002da:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002de:	d202      	bcs.n	80002e6 <__udivmoddi4+0xe2>
 80002e0:	428b      	cmp	r3, r1
 80002e2:	f200 80e9 	bhi.w	80004b8 <__udivmoddi4+0x2b4>
 80002e6:	4684      	mov	ip, r0
 80002e8:	1ac9      	subs	r1, r1, r3
 80002ea:	b2a3      	uxth	r3, r4
 80002ec:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f0:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f8:	fb08 f800 	mul.w	r8, r8, r0
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	d907      	bls.n	8000310 <__udivmoddi4+0x10c>
 8000300:	193c      	adds	r4, r7, r4
 8000302:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000306:	d202      	bcs.n	800030e <__udivmoddi4+0x10a>
 8000308:	45a0      	cmp	r8, r4
 800030a:	f200 80d9 	bhi.w	80004c0 <__udivmoddi4+0x2bc>
 800030e:	4618      	mov	r0, r3
 8000310:	eba4 0408 	sub.w	r4, r4, r8
 8000314:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000318:	e7bf      	b.n	800029a <__udivmoddi4+0x96>
 800031a:	428b      	cmp	r3, r1
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0x12e>
 800031e:	2d00      	cmp	r5, #0
 8000320:	f000 80b1 	beq.w	8000486 <__udivmoddi4+0x282>
 8000324:	2600      	movs	r6, #0
 8000326:	e9c5 0100 	strd	r0, r1, [r5]
 800032a:	4630      	mov	r0, r6
 800032c:	4631      	mov	r1, r6
 800032e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000332:	fab3 f683 	clz	r6, r3
 8000336:	2e00      	cmp	r6, #0
 8000338:	d14a      	bne.n	80003d0 <__udivmoddi4+0x1cc>
 800033a:	428b      	cmp	r3, r1
 800033c:	d302      	bcc.n	8000344 <__udivmoddi4+0x140>
 800033e:	4282      	cmp	r2, r0
 8000340:	f200 80b8 	bhi.w	80004b4 <__udivmoddi4+0x2b0>
 8000344:	1a84      	subs	r4, r0, r2
 8000346:	eb61 0103 	sbc.w	r1, r1, r3
 800034a:	2001      	movs	r0, #1
 800034c:	468c      	mov	ip, r1
 800034e:	2d00      	cmp	r5, #0
 8000350:	d0a8      	beq.n	80002a4 <__udivmoddi4+0xa0>
 8000352:	e9c5 4c00 	strd	r4, ip, [r5]
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000358:	f1c2 0320 	rsb	r3, r2, #32
 800035c:	fa20 f603 	lsr.w	r6, r0, r3
 8000360:	4097      	lsls	r7, r2
 8000362:	fa01 f002 	lsl.w	r0, r1, r2
 8000366:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036a:	40d9      	lsrs	r1, r3
 800036c:	4330      	orrs	r0, r6
 800036e:	0c03      	lsrs	r3, r0, #16
 8000370:	fbb1 f6fe 	udiv	r6, r1, lr
 8000374:	fa1f f887 	uxth.w	r8, r7
 8000378:	fb0e 1116 	mls	r1, lr, r6, r1
 800037c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000380:	fb06 f108 	mul.w	r1, r6, r8
 8000384:	4299      	cmp	r1, r3
 8000386:	fa04 f402 	lsl.w	r4, r4, r2
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x19c>
 800038c:	18fb      	adds	r3, r7, r3
 800038e:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000392:	f080 808d 	bcs.w	80004b0 <__udivmoddi4+0x2ac>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 808a 	bls.w	80004b0 <__udivmoddi4+0x2ac>
 800039c:	3e02      	subs	r6, #2
 800039e:	443b      	add	r3, r7
 80003a0:	1a5b      	subs	r3, r3, r1
 80003a2:	b281      	uxth	r1, r0
 80003a4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b0:	fb00 f308 	mul.w	r3, r0, r8
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d907      	bls.n	80003c8 <__udivmoddi4+0x1c4>
 80003b8:	1879      	adds	r1, r7, r1
 80003ba:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003be:	d273      	bcs.n	80004a8 <__udivmoddi4+0x2a4>
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d971      	bls.n	80004a8 <__udivmoddi4+0x2a4>
 80003c4:	3802      	subs	r0, #2
 80003c6:	4439      	add	r1, r7
 80003c8:	1acb      	subs	r3, r1, r3
 80003ca:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ce:	e778      	b.n	80002c2 <__udivmoddi4+0xbe>
 80003d0:	f1c6 0c20 	rsb	ip, r6, #32
 80003d4:	fa03 f406 	lsl.w	r4, r3, r6
 80003d8:	fa22 f30c 	lsr.w	r3, r2, ip
 80003dc:	431c      	orrs	r4, r3
 80003de:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e2:	fa01 f306 	lsl.w	r3, r1, r6
 80003e6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ea:	fa21 f10c 	lsr.w	r1, r1, ip
 80003ee:	431f      	orrs	r7, r3
 80003f0:	0c3b      	lsrs	r3, r7, #16
 80003f2:	fbb1 f9fe 	udiv	r9, r1, lr
 80003f6:	fa1f f884 	uxth.w	r8, r4
 80003fa:	fb0e 1119 	mls	r1, lr, r9, r1
 80003fe:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000402:	fb09 fa08 	mul.w	sl, r9, r8
 8000406:	458a      	cmp	sl, r1
 8000408:	fa02 f206 	lsl.w	r2, r2, r6
 800040c:	fa00 f306 	lsl.w	r3, r0, r6
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x220>
 8000412:	1861      	adds	r1, r4, r1
 8000414:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000418:	d248      	bcs.n	80004ac <__udivmoddi4+0x2a8>
 800041a:	458a      	cmp	sl, r1
 800041c:	d946      	bls.n	80004ac <__udivmoddi4+0x2a8>
 800041e:	f1a9 0902 	sub.w	r9, r9, #2
 8000422:	4421      	add	r1, r4
 8000424:	eba1 010a 	sub.w	r1, r1, sl
 8000428:	b2bf      	uxth	r7, r7
 800042a:	fbb1 f0fe 	udiv	r0, r1, lr
 800042e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000432:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000436:	fb00 f808 	mul.w	r8, r0, r8
 800043a:	45b8      	cmp	r8, r7
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x24a>
 800043e:	19e7      	adds	r7, r4, r7
 8000440:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000444:	d22e      	bcs.n	80004a4 <__udivmoddi4+0x2a0>
 8000446:	45b8      	cmp	r8, r7
 8000448:	d92c      	bls.n	80004a4 <__udivmoddi4+0x2a0>
 800044a:	3802      	subs	r0, #2
 800044c:	4427      	add	r7, r4
 800044e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000452:	eba7 0708 	sub.w	r7, r7, r8
 8000456:	fba0 8902 	umull	r8, r9, r0, r2
 800045a:	454f      	cmp	r7, r9
 800045c:	46c6      	mov	lr, r8
 800045e:	4649      	mov	r1, r9
 8000460:	d31a      	bcc.n	8000498 <__udivmoddi4+0x294>
 8000462:	d017      	beq.n	8000494 <__udivmoddi4+0x290>
 8000464:	b15d      	cbz	r5, 800047e <__udivmoddi4+0x27a>
 8000466:	ebb3 020e 	subs.w	r2, r3, lr
 800046a:	eb67 0701 	sbc.w	r7, r7, r1
 800046e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000472:	40f2      	lsrs	r2, r6
 8000474:	ea4c 0202 	orr.w	r2, ip, r2
 8000478:	40f7      	lsrs	r7, r6
 800047a:	e9c5 2700 	strd	r2, r7, [r5]
 800047e:	2600      	movs	r6, #0
 8000480:	4631      	mov	r1, r6
 8000482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000486:	462e      	mov	r6, r5
 8000488:	4628      	mov	r0, r5
 800048a:	e70b      	b.n	80002a4 <__udivmoddi4+0xa0>
 800048c:	4606      	mov	r6, r0
 800048e:	e6e9      	b.n	8000264 <__udivmoddi4+0x60>
 8000490:	4618      	mov	r0, r3
 8000492:	e6fd      	b.n	8000290 <__udivmoddi4+0x8c>
 8000494:	4543      	cmp	r3, r8
 8000496:	d2e5      	bcs.n	8000464 <__udivmoddi4+0x260>
 8000498:	ebb8 0e02 	subs.w	lr, r8, r2
 800049c:	eb69 0104 	sbc.w	r1, r9, r4
 80004a0:	3801      	subs	r0, #1
 80004a2:	e7df      	b.n	8000464 <__udivmoddi4+0x260>
 80004a4:	4608      	mov	r0, r1
 80004a6:	e7d2      	b.n	800044e <__udivmoddi4+0x24a>
 80004a8:	4660      	mov	r0, ip
 80004aa:	e78d      	b.n	80003c8 <__udivmoddi4+0x1c4>
 80004ac:	4681      	mov	r9, r0
 80004ae:	e7b9      	b.n	8000424 <__udivmoddi4+0x220>
 80004b0:	4666      	mov	r6, ip
 80004b2:	e775      	b.n	80003a0 <__udivmoddi4+0x19c>
 80004b4:	4630      	mov	r0, r6
 80004b6:	e74a      	b.n	800034e <__udivmoddi4+0x14a>
 80004b8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004bc:	4439      	add	r1, r7
 80004be:	e713      	b.n	80002e8 <__udivmoddi4+0xe4>
 80004c0:	3802      	subs	r0, #2
 80004c2:	443c      	add	r4, r7
 80004c4:	e724      	b.n	8000310 <__udivmoddi4+0x10c>
 80004c6:	bf00      	nop

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d0:	f000 fa20 	bl	8000914 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d4:	f000 f810 	bl	80004f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d8:	f000 f8c8 	bl	800066c <MX_GPIO_Init>
  MX_TIM4_Init();
 80004dc:	f000 f876 	bl	80005cc <MX_TIM4_Init>
  MX_USB_DEVICE_Init();
 80004e0:	f005 ff6a 	bl	80063b8 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin,1);
 80004e4:	2201      	movs	r2, #1
 80004e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004ea:	4802      	ldr	r0, [pc, #8]	; (80004f4 <main+0x28>)
 80004ec:	f000 fd3e 	bl	8000f6c <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004f0:	e7fe      	b.n	80004f0 <main+0x24>
 80004f2:	bf00      	nop
 80004f4:	40020800 	.word	0x40020800

080004f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b094      	sub	sp, #80	; 0x50
 80004fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004fe:	f107 0320 	add.w	r3, r7, #32
 8000502:	2230      	movs	r2, #48	; 0x30
 8000504:	2100      	movs	r1, #0
 8000506:	4618      	mov	r0, r3
 8000508:	f006 fc8a 	bl	8006e20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800050c:	f107 030c 	add.w	r3, r7, #12
 8000510:	2200      	movs	r2, #0
 8000512:	601a      	str	r2, [r3, #0]
 8000514:	605a      	str	r2, [r3, #4]
 8000516:	609a      	str	r2, [r3, #8]
 8000518:	60da      	str	r2, [r3, #12]
 800051a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800051c:	2300      	movs	r3, #0
 800051e:	60bb      	str	r3, [r7, #8]
 8000520:	4b28      	ldr	r3, [pc, #160]	; (80005c4 <SystemClock_Config+0xcc>)
 8000522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000524:	4a27      	ldr	r2, [pc, #156]	; (80005c4 <SystemClock_Config+0xcc>)
 8000526:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800052a:	6413      	str	r3, [r2, #64]	; 0x40
 800052c:	4b25      	ldr	r3, [pc, #148]	; (80005c4 <SystemClock_Config+0xcc>)
 800052e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000530:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000534:	60bb      	str	r3, [r7, #8]
 8000536:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000538:	2300      	movs	r3, #0
 800053a:	607b      	str	r3, [r7, #4]
 800053c:	4b22      	ldr	r3, [pc, #136]	; (80005c8 <SystemClock_Config+0xd0>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000544:	4a20      	ldr	r2, [pc, #128]	; (80005c8 <SystemClock_Config+0xd0>)
 8000546:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800054a:	6013      	str	r3, [r2, #0]
 800054c:	4b1e      	ldr	r3, [pc, #120]	; (80005c8 <SystemClock_Config+0xd0>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000554:	607b      	str	r3, [r7, #4]
 8000556:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000558:	2301      	movs	r3, #1
 800055a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800055c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000560:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000562:	2302      	movs	r3, #2
 8000564:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000566:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800056a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 800056c:	230f      	movs	r3, #15
 800056e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8000570:	2390      	movs	r3, #144	; 0x90
 8000572:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000574:	2304      	movs	r3, #4
 8000576:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000578:	2305      	movs	r3, #5
 800057a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800057c:	f107 0320 	add.w	r3, r7, #32
 8000580:	4618      	mov	r0, r3
 8000582:	f001 fea9 	bl	80022d8 <HAL_RCC_OscConfig>
 8000586:	4603      	mov	r3, r0
 8000588:	2b00      	cmp	r3, #0
 800058a:	d001      	beq.n	8000590 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800058c:	f000 f8f2 	bl	8000774 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000590:	230f      	movs	r3, #15
 8000592:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000594:	2302      	movs	r3, #2
 8000596:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000598:	2300      	movs	r3, #0
 800059a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800059c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005a0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005a2:	2300      	movs	r3, #0
 80005a4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005a6:	f107 030c 	add.w	r3, r7, #12
 80005aa:	2101      	movs	r1, #1
 80005ac:	4618      	mov	r0, r3
 80005ae:	f002 f90b 	bl	80027c8 <HAL_RCC_ClockConfig>
 80005b2:	4603      	mov	r3, r0
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d001      	beq.n	80005bc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80005b8:	f000 f8dc 	bl	8000774 <Error_Handler>
  }
}
 80005bc:	bf00      	nop
 80005be:	3750      	adds	r7, #80	; 0x50
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd80      	pop	{r7, pc}
 80005c4:	40023800 	.word	0x40023800
 80005c8:	40007000 	.word	0x40007000

080005cc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b086      	sub	sp, #24
 80005d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005d2:	f107 0308 	add.w	r3, r7, #8
 80005d6:	2200      	movs	r2, #0
 80005d8:	601a      	str	r2, [r3, #0]
 80005da:	605a      	str	r2, [r3, #4]
 80005dc:	609a      	str	r2, [r3, #8]
 80005de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005e0:	463b      	mov	r3, r7
 80005e2:	2200      	movs	r2, #0
 80005e4:	601a      	str	r2, [r3, #0]
 80005e6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80005e8:	4b1e      	ldr	r3, [pc, #120]	; (8000664 <MX_TIM4_Init+0x98>)
 80005ea:	4a1f      	ldr	r2, [pc, #124]	; (8000668 <MX_TIM4_Init+0x9c>)
 80005ec:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 60;
 80005ee:	4b1d      	ldr	r3, [pc, #116]	; (8000664 <MX_TIM4_Init+0x98>)
 80005f0:	223c      	movs	r2, #60	; 0x3c
 80005f2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005f4:	4b1b      	ldr	r3, [pc, #108]	; (8000664 <MX_TIM4_Init+0x98>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000;
 80005fa:	4b1a      	ldr	r3, [pc, #104]	; (8000664 <MX_TIM4_Init+0x98>)
 80005fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000600:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000602:	4b18      	ldr	r3, [pc, #96]	; (8000664 <MX_TIM4_Init+0x98>)
 8000604:	2200      	movs	r2, #0
 8000606:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000608:	4b16      	ldr	r3, [pc, #88]	; (8000664 <MX_TIM4_Init+0x98>)
 800060a:	2280      	movs	r2, #128	; 0x80
 800060c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800060e:	4815      	ldr	r0, [pc, #84]	; (8000664 <MX_TIM4_Init+0x98>)
 8000610:	f002 fa82 	bl	8002b18 <HAL_TIM_Base_Init>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d001      	beq.n	800061e <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800061a:	f000 f8ab 	bl	8000774 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800061e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000622:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000624:	f107 0308 	add.w	r3, r7, #8
 8000628:	4619      	mov	r1, r3
 800062a:	480e      	ldr	r0, [pc, #56]	; (8000664 <MX_TIM4_Init+0x98>)
 800062c:	f002 fc2e 	bl	8002e8c <HAL_TIM_ConfigClockSource>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8000636:	f000 f89d 	bl	8000774 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800063a:	2300      	movs	r3, #0
 800063c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800063e:	2300      	movs	r3, #0
 8000640:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000642:	463b      	mov	r3, r7
 8000644:	4619      	mov	r1, r3
 8000646:	4807      	ldr	r0, [pc, #28]	; (8000664 <MX_TIM4_Init+0x98>)
 8000648:	f002 fe2a 	bl	80032a0 <HAL_TIMEx_MasterConfigSynchronization>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d001      	beq.n	8000656 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8000652:	f000 f88f 	bl	8000774 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */
  HAL_TIM_Base_Start_IT(&htim4);
 8000656:	4803      	ldr	r0, [pc, #12]	; (8000664 <MX_TIM4_Init+0x98>)
 8000658:	f002 faae 	bl	8002bb8 <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM4_Init 2 */

}
 800065c:	bf00      	nop
 800065e:	3718      	adds	r7, #24
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}
 8000664:	200003e0 	.word	0x200003e0
 8000668:	40000800 	.word	0x40000800

0800066c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b088      	sub	sp, #32
 8000670:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000672:	f107 030c 	add.w	r3, r7, #12
 8000676:	2200      	movs	r2, #0
 8000678:	601a      	str	r2, [r3, #0]
 800067a:	605a      	str	r2, [r3, #4]
 800067c:	609a      	str	r2, [r3, #8]
 800067e:	60da      	str	r2, [r3, #12]
 8000680:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000682:	2300      	movs	r3, #0
 8000684:	60bb      	str	r3, [r7, #8]
 8000686:	4b26      	ldr	r3, [pc, #152]	; (8000720 <MX_GPIO_Init+0xb4>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068a:	4a25      	ldr	r2, [pc, #148]	; (8000720 <MX_GPIO_Init+0xb4>)
 800068c:	f043 0304 	orr.w	r3, r3, #4
 8000690:	6313      	str	r3, [r2, #48]	; 0x30
 8000692:	4b23      	ldr	r3, [pc, #140]	; (8000720 <MX_GPIO_Init+0xb4>)
 8000694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000696:	f003 0304 	and.w	r3, r3, #4
 800069a:	60bb      	str	r3, [r7, #8]
 800069c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800069e:	2300      	movs	r3, #0
 80006a0:	607b      	str	r3, [r7, #4]
 80006a2:	4b1f      	ldr	r3, [pc, #124]	; (8000720 <MX_GPIO_Init+0xb4>)
 80006a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a6:	4a1e      	ldr	r2, [pc, #120]	; (8000720 <MX_GPIO_Init+0xb4>)
 80006a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006ac:	6313      	str	r3, [r2, #48]	; 0x30
 80006ae:	4b1c      	ldr	r3, [pc, #112]	; (8000720 <MX_GPIO_Init+0xb4>)
 80006b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006b6:	607b      	str	r3, [r7, #4]
 80006b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ba:	2300      	movs	r3, #0
 80006bc:	603b      	str	r3, [r7, #0]
 80006be:	4b18      	ldr	r3, [pc, #96]	; (8000720 <MX_GPIO_Init+0xb4>)
 80006c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c2:	4a17      	ldr	r2, [pc, #92]	; (8000720 <MX_GPIO_Init+0xb4>)
 80006c4:	f043 0301 	orr.w	r3, r3, #1
 80006c8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ca:	4b15      	ldr	r3, [pc, #84]	; (8000720 <MX_GPIO_Init+0xb4>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ce:	f003 0301 	and.w	r3, r3, #1
 80006d2:	603b      	str	r3, [r7, #0]
 80006d4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80006d6:	2200      	movs	r2, #0
 80006d8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006dc:	4811      	ldr	r0, [pc, #68]	; (8000724 <MX_GPIO_Init+0xb8>)
 80006de:	f000 fc45 	bl	8000f6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80006e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006e8:	2301      	movs	r3, #1
 80006ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ec:	2300      	movs	r3, #0
 80006ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006f0:	2300      	movs	r3, #0
 80006f2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80006f4:	f107 030c 	add.w	r3, r7, #12
 80006f8:	4619      	mov	r1, r3
 80006fa:	480a      	ldr	r0, [pc, #40]	; (8000724 <MX_GPIO_Init+0xb8>)
 80006fc:	f000 fab2 	bl	8000c64 <HAL_GPIO_Init>

  /*Configure GPIO pin : KEY_Pin */
  GPIO_InitStruct.Pin = KEY_Pin;
 8000700:	2301      	movs	r3, #1
 8000702:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000704:	2300      	movs	r3, #0
 8000706:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000708:	2301      	movs	r3, #1
 800070a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(KEY_GPIO_Port, &GPIO_InitStruct);
 800070c:	f107 030c 	add.w	r3, r7, #12
 8000710:	4619      	mov	r1, r3
 8000712:	4805      	ldr	r0, [pc, #20]	; (8000728 <MX_GPIO_Init+0xbc>)
 8000714:	f000 faa6 	bl	8000c64 <HAL_GPIO_Init>

}
 8000718:	bf00      	nop
 800071a:	3720      	adds	r7, #32
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	40023800 	.word	0x40023800
 8000724:	40020800 	.word	0x40020800
 8000728:	40020000 	.word	0x40020000

0800072c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim){
 800072c:	b580      	push	{r7, lr}
 800072e:	b082      	sub	sp, #8
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
	if(mscount == 500){
 8000734:	4b0c      	ldr	r3, [pc, #48]	; (8000768 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800073c:	d10b      	bne.n	8000756 <HAL_TIM_PeriodElapsedCallback+0x2a>
		mscount = 0;
 800073e:	4b0a      	ldr	r3, [pc, #40]	; (8000768 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000740:	2200      	movs	r2, #0
 8000742:	601a      	str	r2, [r3, #0]
		CDC_Transmit_FS(&test_data, sizeof(test_data));
 8000744:	211b      	movs	r1, #27
 8000746:	4809      	ldr	r0, [pc, #36]	; (800076c <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000748:	f005 fef4 	bl	8006534 <CDC_Transmit_FS>
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800074c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000750:	4807      	ldr	r0, [pc, #28]	; (8000770 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000752:	f000 fc24 	bl	8000f9e <HAL_GPIO_TogglePin>
	}
	mscount += 1;
 8000756:	4b04      	ldr	r3, [pc, #16]	; (8000768 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	3301      	adds	r3, #1
 800075c:	4a02      	ldr	r2, [pc, #8]	; (8000768 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800075e:	6013      	str	r3, [r2, #0]
}
 8000760:	bf00      	nop
 8000762:	3708      	adds	r7, #8
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}
 8000768:	200001b8 	.word	0x200001b8
 800076c:	20000000 	.word	0x20000000
 8000770:	40020800 	.word	0x40020800

08000774 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000774:	b480      	push	{r7}
 8000776:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000778:	b672      	cpsid	i
}
 800077a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800077c:	e7fe      	b.n	800077c <Error_Handler+0x8>
	...

08000780 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000780:	b480      	push	{r7}
 8000782:	b083      	sub	sp, #12
 8000784:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000786:	2300      	movs	r3, #0
 8000788:	607b      	str	r3, [r7, #4]
 800078a:	4b10      	ldr	r3, [pc, #64]	; (80007cc <HAL_MspInit+0x4c>)
 800078c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800078e:	4a0f      	ldr	r2, [pc, #60]	; (80007cc <HAL_MspInit+0x4c>)
 8000790:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000794:	6453      	str	r3, [r2, #68]	; 0x44
 8000796:	4b0d      	ldr	r3, [pc, #52]	; (80007cc <HAL_MspInit+0x4c>)
 8000798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800079a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800079e:	607b      	str	r3, [r7, #4]
 80007a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007a2:	2300      	movs	r3, #0
 80007a4:	603b      	str	r3, [r7, #0]
 80007a6:	4b09      	ldr	r3, [pc, #36]	; (80007cc <HAL_MspInit+0x4c>)
 80007a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007aa:	4a08      	ldr	r2, [pc, #32]	; (80007cc <HAL_MspInit+0x4c>)
 80007ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007b0:	6413      	str	r3, [r2, #64]	; 0x40
 80007b2:	4b06      	ldr	r3, [pc, #24]	; (80007cc <HAL_MspInit+0x4c>)
 80007b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007ba:	603b      	str	r3, [r7, #0]
 80007bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007be:	bf00      	nop
 80007c0:	370c      	adds	r7, #12
 80007c2:	46bd      	mov	sp, r7
 80007c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c8:	4770      	bx	lr
 80007ca:	bf00      	nop
 80007cc:	40023800 	.word	0x40023800

080007d0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b084      	sub	sp, #16
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	4a0e      	ldr	r2, [pc, #56]	; (8000818 <HAL_TIM_Base_MspInit+0x48>)
 80007de:	4293      	cmp	r3, r2
 80007e0:	d115      	bne.n	800080e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80007e2:	2300      	movs	r3, #0
 80007e4:	60fb      	str	r3, [r7, #12]
 80007e6:	4b0d      	ldr	r3, [pc, #52]	; (800081c <HAL_TIM_Base_MspInit+0x4c>)
 80007e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ea:	4a0c      	ldr	r2, [pc, #48]	; (800081c <HAL_TIM_Base_MspInit+0x4c>)
 80007ec:	f043 0304 	orr.w	r3, r3, #4
 80007f0:	6413      	str	r3, [r2, #64]	; 0x40
 80007f2:	4b0a      	ldr	r3, [pc, #40]	; (800081c <HAL_TIM_Base_MspInit+0x4c>)
 80007f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007f6:	f003 0304 	and.w	r3, r3, #4
 80007fa:	60fb      	str	r3, [r7, #12]
 80007fc:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80007fe:	2200      	movs	r2, #0
 8000800:	2100      	movs	r1, #0
 8000802:	201e      	movs	r0, #30
 8000804:	f000 f9f7 	bl	8000bf6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000808:	201e      	movs	r0, #30
 800080a:	f000 fa10 	bl	8000c2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800080e:	bf00      	nop
 8000810:	3710      	adds	r7, #16
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	40000800 	.word	0x40000800
 800081c:	40023800 	.word	0x40023800

08000820 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000824:	e7fe      	b.n	8000824 <NMI_Handler+0x4>

08000826 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000826:	b480      	push	{r7}
 8000828:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800082a:	e7fe      	b.n	800082a <HardFault_Handler+0x4>

0800082c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000830:	e7fe      	b.n	8000830 <MemManage_Handler+0x4>

08000832 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000832:	b480      	push	{r7}
 8000834:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000836:	e7fe      	b.n	8000836 <BusFault_Handler+0x4>

08000838 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800083c:	e7fe      	b.n	800083c <UsageFault_Handler+0x4>

0800083e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800083e:	b480      	push	{r7}
 8000840:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000842:	bf00      	nop
 8000844:	46bd      	mov	sp, r7
 8000846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084a:	4770      	bx	lr

0800084c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000850:	bf00      	nop
 8000852:	46bd      	mov	sp, r7
 8000854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000858:	4770      	bx	lr

0800085a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800085a:	b480      	push	{r7}
 800085c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800085e:	bf00      	nop
 8000860:	46bd      	mov	sp, r7
 8000862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000866:	4770      	bx	lr

08000868 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800086c:	f000 f8a4 	bl	80009b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000870:	bf00      	nop
 8000872:	bd80      	pop	{r7, pc}

08000874 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000878:	4802      	ldr	r0, [pc, #8]	; (8000884 <TIM4_IRQHandler+0x10>)
 800087a:	f002 f9ff 	bl	8002c7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800087e:	bf00      	nop
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	200003e0 	.word	0x200003e0

08000888 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800088c:	4802      	ldr	r0, [pc, #8]	; (8000898 <OTG_FS_IRQHandler+0x10>)
 800088e:	f000 fcf0 	bl	8001272 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000892:	bf00      	nop
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	200010cc 	.word	0x200010cc

0800089c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008a0:	4b06      	ldr	r3, [pc, #24]	; (80008bc <SystemInit+0x20>)
 80008a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008a6:	4a05      	ldr	r2, [pc, #20]	; (80008bc <SystemInit+0x20>)
 80008a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008b0:	bf00      	nop
 80008b2:	46bd      	mov	sp, r7
 80008b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b8:	4770      	bx	lr
 80008ba:	bf00      	nop
 80008bc:	e000ed00 	.word	0xe000ed00

080008c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80008c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80008f8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80008c4:	480d      	ldr	r0, [pc, #52]	; (80008fc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80008c6:	490e      	ldr	r1, [pc, #56]	; (8000900 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80008c8:	4a0e      	ldr	r2, [pc, #56]	; (8000904 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80008ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008cc:	e002      	b.n	80008d4 <LoopCopyDataInit>

080008ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008d2:	3304      	adds	r3, #4

080008d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008d8:	d3f9      	bcc.n	80008ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008da:	4a0b      	ldr	r2, [pc, #44]	; (8000908 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80008dc:	4c0b      	ldr	r4, [pc, #44]	; (800090c <LoopFillZerobss+0x26>)
  movs r3, #0
 80008de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008e0:	e001      	b.n	80008e6 <LoopFillZerobss>

080008e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008e4:	3204      	adds	r2, #4

080008e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008e8:	d3fb      	bcc.n	80008e2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80008ea:	f7ff ffd7 	bl	800089c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80008ee:	f006 fa73 	bl	8006dd8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80008f2:	f7ff fdeb 	bl	80004cc <main>
  bx  lr    
 80008f6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80008f8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80008fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000900:	2000019c 	.word	0x2000019c
  ldr r2, =_sidata
 8000904:	08006eb0 	.word	0x08006eb0
  ldr r2, =_sbss
 8000908:	2000019c 	.word	0x2000019c
  ldr r4, =_ebss
 800090c:	200014d4 	.word	0x200014d4

08000910 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000910:	e7fe      	b.n	8000910 <ADC_IRQHandler>
	...

08000914 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000918:	4b0e      	ldr	r3, [pc, #56]	; (8000954 <HAL_Init+0x40>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	4a0d      	ldr	r2, [pc, #52]	; (8000954 <HAL_Init+0x40>)
 800091e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000922:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000924:	4b0b      	ldr	r3, [pc, #44]	; (8000954 <HAL_Init+0x40>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	4a0a      	ldr	r2, [pc, #40]	; (8000954 <HAL_Init+0x40>)
 800092a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800092e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000930:	4b08      	ldr	r3, [pc, #32]	; (8000954 <HAL_Init+0x40>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	4a07      	ldr	r2, [pc, #28]	; (8000954 <HAL_Init+0x40>)
 8000936:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800093a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800093c:	2003      	movs	r0, #3
 800093e:	f000 f94f 	bl	8000be0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000942:	200f      	movs	r0, #15
 8000944:	f000 f808 	bl	8000958 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000948:	f7ff ff1a 	bl	8000780 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800094c:	2300      	movs	r3, #0
}
 800094e:	4618      	mov	r0, r3
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	40023c00 	.word	0x40023c00

08000958 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b082      	sub	sp, #8
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000960:	4b12      	ldr	r3, [pc, #72]	; (80009ac <HAL_InitTick+0x54>)
 8000962:	681a      	ldr	r2, [r3, #0]
 8000964:	4b12      	ldr	r3, [pc, #72]	; (80009b0 <HAL_InitTick+0x58>)
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	4619      	mov	r1, r3
 800096a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800096e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000972:	fbb2 f3f3 	udiv	r3, r2, r3
 8000976:	4618      	mov	r0, r3
 8000978:	f000 f967 	bl	8000c4a <HAL_SYSTICK_Config>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000982:	2301      	movs	r3, #1
 8000984:	e00e      	b.n	80009a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	2b0f      	cmp	r3, #15
 800098a:	d80a      	bhi.n	80009a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800098c:	2200      	movs	r2, #0
 800098e:	6879      	ldr	r1, [r7, #4]
 8000990:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000994:	f000 f92f 	bl	8000bf6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000998:	4a06      	ldr	r2, [pc, #24]	; (80009b4 <HAL_InitTick+0x5c>)
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800099e:	2300      	movs	r3, #0
 80009a0:	e000      	b.n	80009a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009a2:	2301      	movs	r3, #1
}
 80009a4:	4618      	mov	r0, r3
 80009a6:	3708      	adds	r7, #8
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	2000001c 	.word	0x2000001c
 80009b0:	20000024 	.word	0x20000024
 80009b4:	20000020 	.word	0x20000020

080009b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009bc:	4b06      	ldr	r3, [pc, #24]	; (80009d8 <HAL_IncTick+0x20>)
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	461a      	mov	r2, r3
 80009c2:	4b06      	ldr	r3, [pc, #24]	; (80009dc <HAL_IncTick+0x24>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	4413      	add	r3, r2
 80009c8:	4a04      	ldr	r2, [pc, #16]	; (80009dc <HAL_IncTick+0x24>)
 80009ca:	6013      	str	r3, [r2, #0]
}
 80009cc:	bf00      	nop
 80009ce:	46bd      	mov	sp, r7
 80009d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d4:	4770      	bx	lr
 80009d6:	bf00      	nop
 80009d8:	20000024 	.word	0x20000024
 80009dc:	20000428 	.word	0x20000428

080009e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  return uwTick;
 80009e4:	4b03      	ldr	r3, [pc, #12]	; (80009f4 <HAL_GetTick+0x14>)
 80009e6:	681b      	ldr	r3, [r3, #0]
}
 80009e8:	4618      	mov	r0, r3
 80009ea:	46bd      	mov	sp, r7
 80009ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f0:	4770      	bx	lr
 80009f2:	bf00      	nop
 80009f4:	20000428 	.word	0x20000428

080009f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b084      	sub	sp, #16
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a00:	f7ff ffee 	bl	80009e0 <HAL_GetTick>
 8000a04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a0a:	68fb      	ldr	r3, [r7, #12]
 8000a0c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000a10:	d005      	beq.n	8000a1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a12:	4b0a      	ldr	r3, [pc, #40]	; (8000a3c <HAL_Delay+0x44>)
 8000a14:	781b      	ldrb	r3, [r3, #0]
 8000a16:	461a      	mov	r2, r3
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	4413      	add	r3, r2
 8000a1c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000a1e:	bf00      	nop
 8000a20:	f7ff ffde 	bl	80009e0 <HAL_GetTick>
 8000a24:	4602      	mov	r2, r0
 8000a26:	68bb      	ldr	r3, [r7, #8]
 8000a28:	1ad3      	subs	r3, r2, r3
 8000a2a:	68fa      	ldr	r2, [r7, #12]
 8000a2c:	429a      	cmp	r2, r3
 8000a2e:	d8f7      	bhi.n	8000a20 <HAL_Delay+0x28>
  {
  }
}
 8000a30:	bf00      	nop
 8000a32:	bf00      	nop
 8000a34:	3710      	adds	r7, #16
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	20000024 	.word	0x20000024

08000a40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a40:	b480      	push	{r7}
 8000a42:	b085      	sub	sp, #20
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	f003 0307 	and.w	r3, r3, #7
 8000a4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a50:	4b0c      	ldr	r3, [pc, #48]	; (8000a84 <__NVIC_SetPriorityGrouping+0x44>)
 8000a52:	68db      	ldr	r3, [r3, #12]
 8000a54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a56:	68ba      	ldr	r2, [r7, #8]
 8000a58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a5c:	4013      	ands	r3, r2
 8000a5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a64:	68bb      	ldr	r3, [r7, #8]
 8000a66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a68:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a72:	4a04      	ldr	r2, [pc, #16]	; (8000a84 <__NVIC_SetPriorityGrouping+0x44>)
 8000a74:	68bb      	ldr	r3, [r7, #8]
 8000a76:	60d3      	str	r3, [r2, #12]
}
 8000a78:	bf00      	nop
 8000a7a:	3714      	adds	r7, #20
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a82:	4770      	bx	lr
 8000a84:	e000ed00 	.word	0xe000ed00

08000a88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a8c:	4b04      	ldr	r3, [pc, #16]	; (8000aa0 <__NVIC_GetPriorityGrouping+0x18>)
 8000a8e:	68db      	ldr	r3, [r3, #12]
 8000a90:	0a1b      	lsrs	r3, r3, #8
 8000a92:	f003 0307 	and.w	r3, r3, #7
}
 8000a96:	4618      	mov	r0, r3
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9e:	4770      	bx	lr
 8000aa0:	e000ed00 	.word	0xe000ed00

08000aa4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	b083      	sub	sp, #12
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	4603      	mov	r3, r0
 8000aac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000aae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	db0b      	blt.n	8000ace <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ab6:	79fb      	ldrb	r3, [r7, #7]
 8000ab8:	f003 021f 	and.w	r2, r3, #31
 8000abc:	4907      	ldr	r1, [pc, #28]	; (8000adc <__NVIC_EnableIRQ+0x38>)
 8000abe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ac2:	095b      	lsrs	r3, r3, #5
 8000ac4:	2001      	movs	r0, #1
 8000ac6:	fa00 f202 	lsl.w	r2, r0, r2
 8000aca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ace:	bf00      	nop
 8000ad0:	370c      	adds	r7, #12
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop
 8000adc:	e000e100 	.word	0xe000e100

08000ae0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b083      	sub	sp, #12
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	6039      	str	r1, [r7, #0]
 8000aea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000aec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	db0a      	blt.n	8000b0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	b2da      	uxtb	r2, r3
 8000af8:	490c      	ldr	r1, [pc, #48]	; (8000b2c <__NVIC_SetPriority+0x4c>)
 8000afa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000afe:	0112      	lsls	r2, r2, #4
 8000b00:	b2d2      	uxtb	r2, r2
 8000b02:	440b      	add	r3, r1
 8000b04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b08:	e00a      	b.n	8000b20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b0a:	683b      	ldr	r3, [r7, #0]
 8000b0c:	b2da      	uxtb	r2, r3
 8000b0e:	4908      	ldr	r1, [pc, #32]	; (8000b30 <__NVIC_SetPriority+0x50>)
 8000b10:	79fb      	ldrb	r3, [r7, #7]
 8000b12:	f003 030f 	and.w	r3, r3, #15
 8000b16:	3b04      	subs	r3, #4
 8000b18:	0112      	lsls	r2, r2, #4
 8000b1a:	b2d2      	uxtb	r2, r2
 8000b1c:	440b      	add	r3, r1
 8000b1e:	761a      	strb	r2, [r3, #24]
}
 8000b20:	bf00      	nop
 8000b22:	370c      	adds	r7, #12
 8000b24:	46bd      	mov	sp, r7
 8000b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2a:	4770      	bx	lr
 8000b2c:	e000e100 	.word	0xe000e100
 8000b30:	e000ed00 	.word	0xe000ed00

08000b34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b089      	sub	sp, #36	; 0x24
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	60f8      	str	r0, [r7, #12]
 8000b3c:	60b9      	str	r1, [r7, #8]
 8000b3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	f003 0307 	and.w	r3, r3, #7
 8000b46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b48:	69fb      	ldr	r3, [r7, #28]
 8000b4a:	f1c3 0307 	rsb	r3, r3, #7
 8000b4e:	2b04      	cmp	r3, #4
 8000b50:	bf28      	it	cs
 8000b52:	2304      	movcs	r3, #4
 8000b54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b56:	69fb      	ldr	r3, [r7, #28]
 8000b58:	3304      	adds	r3, #4
 8000b5a:	2b06      	cmp	r3, #6
 8000b5c:	d902      	bls.n	8000b64 <NVIC_EncodePriority+0x30>
 8000b5e:	69fb      	ldr	r3, [r7, #28]
 8000b60:	3b03      	subs	r3, #3
 8000b62:	e000      	b.n	8000b66 <NVIC_EncodePriority+0x32>
 8000b64:	2300      	movs	r3, #0
 8000b66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b68:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000b6c:	69bb      	ldr	r3, [r7, #24]
 8000b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b72:	43da      	mvns	r2, r3
 8000b74:	68bb      	ldr	r3, [r7, #8]
 8000b76:	401a      	ands	r2, r3
 8000b78:	697b      	ldr	r3, [r7, #20]
 8000b7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b7c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000b80:	697b      	ldr	r3, [r7, #20]
 8000b82:	fa01 f303 	lsl.w	r3, r1, r3
 8000b86:	43d9      	mvns	r1, r3
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b8c:	4313      	orrs	r3, r2
         );
}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	3724      	adds	r7, #36	; 0x24
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr
	...

08000b9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	3b01      	subs	r3, #1
 8000ba8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000bac:	d301      	bcc.n	8000bb2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bae:	2301      	movs	r3, #1
 8000bb0:	e00f      	b.n	8000bd2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bb2:	4a0a      	ldr	r2, [pc, #40]	; (8000bdc <SysTick_Config+0x40>)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	3b01      	subs	r3, #1
 8000bb8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bba:	210f      	movs	r1, #15
 8000bbc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bc0:	f7ff ff8e 	bl	8000ae0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bc4:	4b05      	ldr	r3, [pc, #20]	; (8000bdc <SysTick_Config+0x40>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bca:	4b04      	ldr	r3, [pc, #16]	; (8000bdc <SysTick_Config+0x40>)
 8000bcc:	2207      	movs	r2, #7
 8000bce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bd0:	2300      	movs	r3, #0
}
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	3708      	adds	r7, #8
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	e000e010 	.word	0xe000e010

08000be0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000be8:	6878      	ldr	r0, [r7, #4]
 8000bea:	f7ff ff29 	bl	8000a40 <__NVIC_SetPriorityGrouping>
}
 8000bee:	bf00      	nop
 8000bf0:	3708      	adds	r7, #8
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}

08000bf6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bf6:	b580      	push	{r7, lr}
 8000bf8:	b086      	sub	sp, #24
 8000bfa:	af00      	add	r7, sp, #0
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	60b9      	str	r1, [r7, #8]
 8000c00:	607a      	str	r2, [r7, #4]
 8000c02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c04:	2300      	movs	r3, #0
 8000c06:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c08:	f7ff ff3e 	bl	8000a88 <__NVIC_GetPriorityGrouping>
 8000c0c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c0e:	687a      	ldr	r2, [r7, #4]
 8000c10:	68b9      	ldr	r1, [r7, #8]
 8000c12:	6978      	ldr	r0, [r7, #20]
 8000c14:	f7ff ff8e 	bl	8000b34 <NVIC_EncodePriority>
 8000c18:	4602      	mov	r2, r0
 8000c1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c1e:	4611      	mov	r1, r2
 8000c20:	4618      	mov	r0, r3
 8000c22:	f7ff ff5d 	bl	8000ae0 <__NVIC_SetPriority>
}
 8000c26:	bf00      	nop
 8000c28:	3718      	adds	r7, #24
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}

08000c2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c2e:	b580      	push	{r7, lr}
 8000c30:	b082      	sub	sp, #8
 8000c32:	af00      	add	r7, sp, #0
 8000c34:	4603      	mov	r3, r0
 8000c36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f7ff ff31 	bl	8000aa4 <__NVIC_EnableIRQ>
}
 8000c42:	bf00      	nop
 8000c44:	3708      	adds	r7, #8
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}

08000c4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c4a:	b580      	push	{r7, lr}
 8000c4c:	b082      	sub	sp, #8
 8000c4e:	af00      	add	r7, sp, #0
 8000c50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c52:	6878      	ldr	r0, [r7, #4]
 8000c54:	f7ff ffa2 	bl	8000b9c <SysTick_Config>
 8000c58:	4603      	mov	r3, r0
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	3708      	adds	r7, #8
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
	...

08000c64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b089      	sub	sp, #36	; 0x24
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
 8000c6c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c72:	2300      	movs	r3, #0
 8000c74:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000c76:	2300      	movs	r3, #0
 8000c78:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	61fb      	str	r3, [r7, #28]
 8000c7e:	e159      	b.n	8000f34 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000c80:	2201      	movs	r2, #1
 8000c82:	69fb      	ldr	r3, [r7, #28]
 8000c84:	fa02 f303 	lsl.w	r3, r2, r3
 8000c88:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	697a      	ldr	r2, [r7, #20]
 8000c90:	4013      	ands	r3, r2
 8000c92:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000c94:	693a      	ldr	r2, [r7, #16]
 8000c96:	697b      	ldr	r3, [r7, #20]
 8000c98:	429a      	cmp	r2, r3
 8000c9a:	f040 8148 	bne.w	8000f2e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	685b      	ldr	r3, [r3, #4]
 8000ca2:	f003 0303 	and.w	r3, r3, #3
 8000ca6:	2b01      	cmp	r3, #1
 8000ca8:	d005      	beq.n	8000cb6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	685b      	ldr	r3, [r3, #4]
 8000cae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000cb2:	2b02      	cmp	r3, #2
 8000cb4:	d130      	bne.n	8000d18 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	689b      	ldr	r3, [r3, #8]
 8000cba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000cbc:	69fb      	ldr	r3, [r7, #28]
 8000cbe:	005b      	lsls	r3, r3, #1
 8000cc0:	2203      	movs	r2, #3
 8000cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc6:	43db      	mvns	r3, r3
 8000cc8:	69ba      	ldr	r2, [r7, #24]
 8000cca:	4013      	ands	r3, r2
 8000ccc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	68da      	ldr	r2, [r3, #12]
 8000cd2:	69fb      	ldr	r3, [r7, #28]
 8000cd4:	005b      	lsls	r3, r3, #1
 8000cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cda:	69ba      	ldr	r2, [r7, #24]
 8000cdc:	4313      	orrs	r3, r2
 8000cde:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	69ba      	ldr	r2, [r7, #24]
 8000ce4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	685b      	ldr	r3, [r3, #4]
 8000cea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000cec:	2201      	movs	r2, #1
 8000cee:	69fb      	ldr	r3, [r7, #28]
 8000cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf4:	43db      	mvns	r3, r3
 8000cf6:	69ba      	ldr	r2, [r7, #24]
 8000cf8:	4013      	ands	r3, r2
 8000cfa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	685b      	ldr	r3, [r3, #4]
 8000d00:	091b      	lsrs	r3, r3, #4
 8000d02:	f003 0201 	and.w	r2, r3, #1
 8000d06:	69fb      	ldr	r3, [r7, #28]
 8000d08:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0c:	69ba      	ldr	r2, [r7, #24]
 8000d0e:	4313      	orrs	r3, r2
 8000d10:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	69ba      	ldr	r2, [r7, #24]
 8000d16:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	685b      	ldr	r3, [r3, #4]
 8000d1c:	f003 0303 	and.w	r3, r3, #3
 8000d20:	2b03      	cmp	r3, #3
 8000d22:	d017      	beq.n	8000d54 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	68db      	ldr	r3, [r3, #12]
 8000d28:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d2a:	69fb      	ldr	r3, [r7, #28]
 8000d2c:	005b      	lsls	r3, r3, #1
 8000d2e:	2203      	movs	r2, #3
 8000d30:	fa02 f303 	lsl.w	r3, r2, r3
 8000d34:	43db      	mvns	r3, r3
 8000d36:	69ba      	ldr	r2, [r7, #24]
 8000d38:	4013      	ands	r3, r2
 8000d3a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	689a      	ldr	r2, [r3, #8]
 8000d40:	69fb      	ldr	r3, [r7, #28]
 8000d42:	005b      	lsls	r3, r3, #1
 8000d44:	fa02 f303 	lsl.w	r3, r2, r3
 8000d48:	69ba      	ldr	r2, [r7, #24]
 8000d4a:	4313      	orrs	r3, r2
 8000d4c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	69ba      	ldr	r2, [r7, #24]
 8000d52:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	685b      	ldr	r3, [r3, #4]
 8000d58:	f003 0303 	and.w	r3, r3, #3
 8000d5c:	2b02      	cmp	r3, #2
 8000d5e:	d123      	bne.n	8000da8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d60:	69fb      	ldr	r3, [r7, #28]
 8000d62:	08da      	lsrs	r2, r3, #3
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	3208      	adds	r2, #8
 8000d68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d6e:	69fb      	ldr	r3, [r7, #28]
 8000d70:	f003 0307 	and.w	r3, r3, #7
 8000d74:	009b      	lsls	r3, r3, #2
 8000d76:	220f      	movs	r2, #15
 8000d78:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7c:	43db      	mvns	r3, r3
 8000d7e:	69ba      	ldr	r2, [r7, #24]
 8000d80:	4013      	ands	r3, r2
 8000d82:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	691a      	ldr	r2, [r3, #16]
 8000d88:	69fb      	ldr	r3, [r7, #28]
 8000d8a:	f003 0307 	and.w	r3, r3, #7
 8000d8e:	009b      	lsls	r3, r3, #2
 8000d90:	fa02 f303 	lsl.w	r3, r2, r3
 8000d94:	69ba      	ldr	r2, [r7, #24]
 8000d96:	4313      	orrs	r3, r2
 8000d98:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d9a:	69fb      	ldr	r3, [r7, #28]
 8000d9c:	08da      	lsrs	r2, r3, #3
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	3208      	adds	r2, #8
 8000da2:	69b9      	ldr	r1, [r7, #24]
 8000da4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000dae:	69fb      	ldr	r3, [r7, #28]
 8000db0:	005b      	lsls	r3, r3, #1
 8000db2:	2203      	movs	r2, #3
 8000db4:	fa02 f303 	lsl.w	r3, r2, r3
 8000db8:	43db      	mvns	r3, r3
 8000dba:	69ba      	ldr	r2, [r7, #24]
 8000dbc:	4013      	ands	r3, r2
 8000dbe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	685b      	ldr	r3, [r3, #4]
 8000dc4:	f003 0203 	and.w	r2, r3, #3
 8000dc8:	69fb      	ldr	r3, [r7, #28]
 8000dca:	005b      	lsls	r3, r3, #1
 8000dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd0:	69ba      	ldr	r2, [r7, #24]
 8000dd2:	4313      	orrs	r3, r2
 8000dd4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	69ba      	ldr	r2, [r7, #24]
 8000dda:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	685b      	ldr	r3, [r3, #4]
 8000de0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	f000 80a2 	beq.w	8000f2e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dea:	2300      	movs	r3, #0
 8000dec:	60fb      	str	r3, [r7, #12]
 8000dee:	4b57      	ldr	r3, [pc, #348]	; (8000f4c <HAL_GPIO_Init+0x2e8>)
 8000df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000df2:	4a56      	ldr	r2, [pc, #344]	; (8000f4c <HAL_GPIO_Init+0x2e8>)
 8000df4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000df8:	6453      	str	r3, [r2, #68]	; 0x44
 8000dfa:	4b54      	ldr	r3, [pc, #336]	; (8000f4c <HAL_GPIO_Init+0x2e8>)
 8000dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e02:	60fb      	str	r3, [r7, #12]
 8000e04:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e06:	4a52      	ldr	r2, [pc, #328]	; (8000f50 <HAL_GPIO_Init+0x2ec>)
 8000e08:	69fb      	ldr	r3, [r7, #28]
 8000e0a:	089b      	lsrs	r3, r3, #2
 8000e0c:	3302      	adds	r3, #2
 8000e0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e12:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e14:	69fb      	ldr	r3, [r7, #28]
 8000e16:	f003 0303 	and.w	r3, r3, #3
 8000e1a:	009b      	lsls	r3, r3, #2
 8000e1c:	220f      	movs	r2, #15
 8000e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e22:	43db      	mvns	r3, r3
 8000e24:	69ba      	ldr	r2, [r7, #24]
 8000e26:	4013      	ands	r3, r2
 8000e28:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	4a49      	ldr	r2, [pc, #292]	; (8000f54 <HAL_GPIO_Init+0x2f0>)
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	d019      	beq.n	8000e66 <HAL_GPIO_Init+0x202>
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	4a48      	ldr	r2, [pc, #288]	; (8000f58 <HAL_GPIO_Init+0x2f4>)
 8000e36:	4293      	cmp	r3, r2
 8000e38:	d013      	beq.n	8000e62 <HAL_GPIO_Init+0x1fe>
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	4a47      	ldr	r2, [pc, #284]	; (8000f5c <HAL_GPIO_Init+0x2f8>)
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d00d      	beq.n	8000e5e <HAL_GPIO_Init+0x1fa>
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	4a46      	ldr	r2, [pc, #280]	; (8000f60 <HAL_GPIO_Init+0x2fc>)
 8000e46:	4293      	cmp	r3, r2
 8000e48:	d007      	beq.n	8000e5a <HAL_GPIO_Init+0x1f6>
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	4a45      	ldr	r2, [pc, #276]	; (8000f64 <HAL_GPIO_Init+0x300>)
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d101      	bne.n	8000e56 <HAL_GPIO_Init+0x1f2>
 8000e52:	2304      	movs	r3, #4
 8000e54:	e008      	b.n	8000e68 <HAL_GPIO_Init+0x204>
 8000e56:	2307      	movs	r3, #7
 8000e58:	e006      	b.n	8000e68 <HAL_GPIO_Init+0x204>
 8000e5a:	2303      	movs	r3, #3
 8000e5c:	e004      	b.n	8000e68 <HAL_GPIO_Init+0x204>
 8000e5e:	2302      	movs	r3, #2
 8000e60:	e002      	b.n	8000e68 <HAL_GPIO_Init+0x204>
 8000e62:	2301      	movs	r3, #1
 8000e64:	e000      	b.n	8000e68 <HAL_GPIO_Init+0x204>
 8000e66:	2300      	movs	r3, #0
 8000e68:	69fa      	ldr	r2, [r7, #28]
 8000e6a:	f002 0203 	and.w	r2, r2, #3
 8000e6e:	0092      	lsls	r2, r2, #2
 8000e70:	4093      	lsls	r3, r2
 8000e72:	69ba      	ldr	r2, [r7, #24]
 8000e74:	4313      	orrs	r3, r2
 8000e76:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e78:	4935      	ldr	r1, [pc, #212]	; (8000f50 <HAL_GPIO_Init+0x2ec>)
 8000e7a:	69fb      	ldr	r3, [r7, #28]
 8000e7c:	089b      	lsrs	r3, r3, #2
 8000e7e:	3302      	adds	r3, #2
 8000e80:	69ba      	ldr	r2, [r7, #24]
 8000e82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e86:	4b38      	ldr	r3, [pc, #224]	; (8000f68 <HAL_GPIO_Init+0x304>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e8c:	693b      	ldr	r3, [r7, #16]
 8000e8e:	43db      	mvns	r3, r3
 8000e90:	69ba      	ldr	r2, [r7, #24]
 8000e92:	4013      	ands	r3, r2
 8000e94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	685b      	ldr	r3, [r3, #4]
 8000e9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d003      	beq.n	8000eaa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000ea2:	69ba      	ldr	r2, [r7, #24]
 8000ea4:	693b      	ldr	r3, [r7, #16]
 8000ea6:	4313      	orrs	r3, r2
 8000ea8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000eaa:	4a2f      	ldr	r2, [pc, #188]	; (8000f68 <HAL_GPIO_Init+0x304>)
 8000eac:	69bb      	ldr	r3, [r7, #24]
 8000eae:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000eb0:	4b2d      	ldr	r3, [pc, #180]	; (8000f68 <HAL_GPIO_Init+0x304>)
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000eb6:	693b      	ldr	r3, [r7, #16]
 8000eb8:	43db      	mvns	r3, r3
 8000eba:	69ba      	ldr	r2, [r7, #24]
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	685b      	ldr	r3, [r3, #4]
 8000ec4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d003      	beq.n	8000ed4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000ecc:	69ba      	ldr	r2, [r7, #24]
 8000ece:	693b      	ldr	r3, [r7, #16]
 8000ed0:	4313      	orrs	r3, r2
 8000ed2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000ed4:	4a24      	ldr	r2, [pc, #144]	; (8000f68 <HAL_GPIO_Init+0x304>)
 8000ed6:	69bb      	ldr	r3, [r7, #24]
 8000ed8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000eda:	4b23      	ldr	r3, [pc, #140]	; (8000f68 <HAL_GPIO_Init+0x304>)
 8000edc:	689b      	ldr	r3, [r3, #8]
 8000ede:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ee0:	693b      	ldr	r3, [r7, #16]
 8000ee2:	43db      	mvns	r3, r3
 8000ee4:	69ba      	ldr	r2, [r7, #24]
 8000ee6:	4013      	ands	r3, r2
 8000ee8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	685b      	ldr	r3, [r3, #4]
 8000eee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d003      	beq.n	8000efe <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000ef6:	69ba      	ldr	r2, [r7, #24]
 8000ef8:	693b      	ldr	r3, [r7, #16]
 8000efa:	4313      	orrs	r3, r2
 8000efc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000efe:	4a1a      	ldr	r2, [pc, #104]	; (8000f68 <HAL_GPIO_Init+0x304>)
 8000f00:	69bb      	ldr	r3, [r7, #24]
 8000f02:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f04:	4b18      	ldr	r3, [pc, #96]	; (8000f68 <HAL_GPIO_Init+0x304>)
 8000f06:	68db      	ldr	r3, [r3, #12]
 8000f08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f0a:	693b      	ldr	r3, [r7, #16]
 8000f0c:	43db      	mvns	r3, r3
 8000f0e:	69ba      	ldr	r2, [r7, #24]
 8000f10:	4013      	ands	r3, r2
 8000f12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d003      	beq.n	8000f28 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000f20:	69ba      	ldr	r2, [r7, #24]
 8000f22:	693b      	ldr	r3, [r7, #16]
 8000f24:	4313      	orrs	r3, r2
 8000f26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f28:	4a0f      	ldr	r2, [pc, #60]	; (8000f68 <HAL_GPIO_Init+0x304>)
 8000f2a:	69bb      	ldr	r3, [r7, #24]
 8000f2c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f2e:	69fb      	ldr	r3, [r7, #28]
 8000f30:	3301      	adds	r3, #1
 8000f32:	61fb      	str	r3, [r7, #28]
 8000f34:	69fb      	ldr	r3, [r7, #28]
 8000f36:	2b0f      	cmp	r3, #15
 8000f38:	f67f aea2 	bls.w	8000c80 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000f3c:	bf00      	nop
 8000f3e:	bf00      	nop
 8000f40:	3724      	adds	r7, #36	; 0x24
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop
 8000f4c:	40023800 	.word	0x40023800
 8000f50:	40013800 	.word	0x40013800
 8000f54:	40020000 	.word	0x40020000
 8000f58:	40020400 	.word	0x40020400
 8000f5c:	40020800 	.word	0x40020800
 8000f60:	40020c00 	.word	0x40020c00
 8000f64:	40021000 	.word	0x40021000
 8000f68:	40013c00 	.word	0x40013c00

08000f6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b083      	sub	sp, #12
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
 8000f74:	460b      	mov	r3, r1
 8000f76:	807b      	strh	r3, [r7, #2]
 8000f78:	4613      	mov	r3, r2
 8000f7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f7c:	787b      	ldrb	r3, [r7, #1]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d003      	beq.n	8000f8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f82:	887a      	ldrh	r2, [r7, #2]
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000f88:	e003      	b.n	8000f92 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000f8a:	887b      	ldrh	r3, [r7, #2]
 8000f8c:	041a      	lsls	r2, r3, #16
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	619a      	str	r2, [r3, #24]
}
 8000f92:	bf00      	nop
 8000f94:	370c      	adds	r7, #12
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr

08000f9e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000f9e:	b480      	push	{r7}
 8000fa0:	b085      	sub	sp, #20
 8000fa2:	af00      	add	r7, sp, #0
 8000fa4:	6078      	str	r0, [r7, #4]
 8000fa6:	460b      	mov	r3, r1
 8000fa8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	695b      	ldr	r3, [r3, #20]
 8000fae:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000fb0:	887a      	ldrh	r2, [r7, #2]
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	041a      	lsls	r2, r3, #16
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	43d9      	mvns	r1, r3
 8000fbc:	887b      	ldrh	r3, [r7, #2]
 8000fbe:	400b      	ands	r3, r1
 8000fc0:	431a      	orrs	r2, r3
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	619a      	str	r2, [r3, #24]
}
 8000fc6:	bf00      	nop
 8000fc8:	3714      	adds	r7, #20
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr

08000fd2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000fd2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fd4:	b08f      	sub	sp, #60	; 0x3c
 8000fd6:	af0a      	add	r7, sp, #40	; 0x28
 8000fd8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d101      	bne.n	8000fe4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	e10f      	b.n	8001204 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8000ff0:	b2db      	uxtb	r3, r3
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d106      	bne.n	8001004 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000ffe:	6878      	ldr	r0, [r7, #4]
 8001000:	f005 fbe0 	bl	80067c4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	2203      	movs	r2, #3
 8001008:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800100c:	68bb      	ldr	r3, [r7, #8]
 800100e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001010:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001014:	2b00      	cmp	r3, #0
 8001016:	d102      	bne.n	800101e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	2200      	movs	r2, #0
 800101c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	4618      	mov	r0, r3
 8001024:	f002 fad3 	bl	80035ce <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	603b      	str	r3, [r7, #0]
 800102e:	687e      	ldr	r6, [r7, #4]
 8001030:	466d      	mov	r5, sp
 8001032:	f106 0410 	add.w	r4, r6, #16
 8001036:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001038:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800103a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800103c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800103e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001042:	e885 0003 	stmia.w	r5, {r0, r1}
 8001046:	1d33      	adds	r3, r6, #4
 8001048:	cb0e      	ldmia	r3, {r1, r2, r3}
 800104a:	6838      	ldr	r0, [r7, #0]
 800104c:	f002 f9aa 	bl	80033a4 <USB_CoreInit>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d005      	beq.n	8001062 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	2202      	movs	r2, #2
 800105a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800105e:	2301      	movs	r3, #1
 8001060:	e0d0      	b.n	8001204 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	2100      	movs	r1, #0
 8001068:	4618      	mov	r0, r3
 800106a:	f002 fac1 	bl	80035f0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800106e:	2300      	movs	r3, #0
 8001070:	73fb      	strb	r3, [r7, #15]
 8001072:	e04a      	b.n	800110a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001074:	7bfa      	ldrb	r2, [r7, #15]
 8001076:	6879      	ldr	r1, [r7, #4]
 8001078:	4613      	mov	r3, r2
 800107a:	00db      	lsls	r3, r3, #3
 800107c:	1a9b      	subs	r3, r3, r2
 800107e:	009b      	lsls	r3, r3, #2
 8001080:	440b      	add	r3, r1
 8001082:	333d      	adds	r3, #61	; 0x3d
 8001084:	2201      	movs	r2, #1
 8001086:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001088:	7bfa      	ldrb	r2, [r7, #15]
 800108a:	6879      	ldr	r1, [r7, #4]
 800108c:	4613      	mov	r3, r2
 800108e:	00db      	lsls	r3, r3, #3
 8001090:	1a9b      	subs	r3, r3, r2
 8001092:	009b      	lsls	r3, r3, #2
 8001094:	440b      	add	r3, r1
 8001096:	333c      	adds	r3, #60	; 0x3c
 8001098:	7bfa      	ldrb	r2, [r7, #15]
 800109a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800109c:	7bfa      	ldrb	r2, [r7, #15]
 800109e:	7bfb      	ldrb	r3, [r7, #15]
 80010a0:	b298      	uxth	r0, r3
 80010a2:	6879      	ldr	r1, [r7, #4]
 80010a4:	4613      	mov	r3, r2
 80010a6:	00db      	lsls	r3, r3, #3
 80010a8:	1a9b      	subs	r3, r3, r2
 80010aa:	009b      	lsls	r3, r3, #2
 80010ac:	440b      	add	r3, r1
 80010ae:	3342      	adds	r3, #66	; 0x42
 80010b0:	4602      	mov	r2, r0
 80010b2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80010b4:	7bfa      	ldrb	r2, [r7, #15]
 80010b6:	6879      	ldr	r1, [r7, #4]
 80010b8:	4613      	mov	r3, r2
 80010ba:	00db      	lsls	r3, r3, #3
 80010bc:	1a9b      	subs	r3, r3, r2
 80010be:	009b      	lsls	r3, r3, #2
 80010c0:	440b      	add	r3, r1
 80010c2:	333f      	adds	r3, #63	; 0x3f
 80010c4:	2200      	movs	r2, #0
 80010c6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80010c8:	7bfa      	ldrb	r2, [r7, #15]
 80010ca:	6879      	ldr	r1, [r7, #4]
 80010cc:	4613      	mov	r3, r2
 80010ce:	00db      	lsls	r3, r3, #3
 80010d0:	1a9b      	subs	r3, r3, r2
 80010d2:	009b      	lsls	r3, r3, #2
 80010d4:	440b      	add	r3, r1
 80010d6:	3344      	adds	r3, #68	; 0x44
 80010d8:	2200      	movs	r2, #0
 80010da:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80010dc:	7bfa      	ldrb	r2, [r7, #15]
 80010de:	6879      	ldr	r1, [r7, #4]
 80010e0:	4613      	mov	r3, r2
 80010e2:	00db      	lsls	r3, r3, #3
 80010e4:	1a9b      	subs	r3, r3, r2
 80010e6:	009b      	lsls	r3, r3, #2
 80010e8:	440b      	add	r3, r1
 80010ea:	3348      	adds	r3, #72	; 0x48
 80010ec:	2200      	movs	r2, #0
 80010ee:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80010f0:	7bfa      	ldrb	r2, [r7, #15]
 80010f2:	6879      	ldr	r1, [r7, #4]
 80010f4:	4613      	mov	r3, r2
 80010f6:	00db      	lsls	r3, r3, #3
 80010f8:	1a9b      	subs	r3, r3, r2
 80010fa:	009b      	lsls	r3, r3, #2
 80010fc:	440b      	add	r3, r1
 80010fe:	3350      	adds	r3, #80	; 0x50
 8001100:	2200      	movs	r2, #0
 8001102:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001104:	7bfb      	ldrb	r3, [r7, #15]
 8001106:	3301      	adds	r3, #1
 8001108:	73fb      	strb	r3, [r7, #15]
 800110a:	7bfa      	ldrb	r2, [r7, #15]
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	429a      	cmp	r2, r3
 8001112:	d3af      	bcc.n	8001074 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001114:	2300      	movs	r3, #0
 8001116:	73fb      	strb	r3, [r7, #15]
 8001118:	e044      	b.n	80011a4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800111a:	7bfa      	ldrb	r2, [r7, #15]
 800111c:	6879      	ldr	r1, [r7, #4]
 800111e:	4613      	mov	r3, r2
 8001120:	00db      	lsls	r3, r3, #3
 8001122:	1a9b      	subs	r3, r3, r2
 8001124:	009b      	lsls	r3, r3, #2
 8001126:	440b      	add	r3, r1
 8001128:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800112c:	2200      	movs	r2, #0
 800112e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001130:	7bfa      	ldrb	r2, [r7, #15]
 8001132:	6879      	ldr	r1, [r7, #4]
 8001134:	4613      	mov	r3, r2
 8001136:	00db      	lsls	r3, r3, #3
 8001138:	1a9b      	subs	r3, r3, r2
 800113a:	009b      	lsls	r3, r3, #2
 800113c:	440b      	add	r3, r1
 800113e:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001142:	7bfa      	ldrb	r2, [r7, #15]
 8001144:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001146:	7bfa      	ldrb	r2, [r7, #15]
 8001148:	6879      	ldr	r1, [r7, #4]
 800114a:	4613      	mov	r3, r2
 800114c:	00db      	lsls	r3, r3, #3
 800114e:	1a9b      	subs	r3, r3, r2
 8001150:	009b      	lsls	r3, r3, #2
 8001152:	440b      	add	r3, r1
 8001154:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001158:	2200      	movs	r2, #0
 800115a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800115c:	7bfa      	ldrb	r2, [r7, #15]
 800115e:	6879      	ldr	r1, [r7, #4]
 8001160:	4613      	mov	r3, r2
 8001162:	00db      	lsls	r3, r3, #3
 8001164:	1a9b      	subs	r3, r3, r2
 8001166:	009b      	lsls	r3, r3, #2
 8001168:	440b      	add	r3, r1
 800116a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800116e:	2200      	movs	r2, #0
 8001170:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001172:	7bfa      	ldrb	r2, [r7, #15]
 8001174:	6879      	ldr	r1, [r7, #4]
 8001176:	4613      	mov	r3, r2
 8001178:	00db      	lsls	r3, r3, #3
 800117a:	1a9b      	subs	r3, r3, r2
 800117c:	009b      	lsls	r3, r3, #2
 800117e:	440b      	add	r3, r1
 8001180:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001184:	2200      	movs	r2, #0
 8001186:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001188:	7bfa      	ldrb	r2, [r7, #15]
 800118a:	6879      	ldr	r1, [r7, #4]
 800118c:	4613      	mov	r3, r2
 800118e:	00db      	lsls	r3, r3, #3
 8001190:	1a9b      	subs	r3, r3, r2
 8001192:	009b      	lsls	r3, r3, #2
 8001194:	440b      	add	r3, r1
 8001196:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800119a:	2200      	movs	r2, #0
 800119c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800119e:	7bfb      	ldrb	r3, [r7, #15]
 80011a0:	3301      	adds	r3, #1
 80011a2:	73fb      	strb	r3, [r7, #15]
 80011a4:	7bfa      	ldrb	r2, [r7, #15]
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	429a      	cmp	r2, r3
 80011ac:	d3b5      	bcc.n	800111a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	603b      	str	r3, [r7, #0]
 80011b4:	687e      	ldr	r6, [r7, #4]
 80011b6:	466d      	mov	r5, sp
 80011b8:	f106 0410 	add.w	r4, r6, #16
 80011bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011c4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80011c8:	e885 0003 	stmia.w	r5, {r0, r1}
 80011cc:	1d33      	adds	r3, r6, #4
 80011ce:	cb0e      	ldmia	r3, {r1, r2, r3}
 80011d0:	6838      	ldr	r0, [r7, #0]
 80011d2:	f002 fa59 	bl	8003688 <USB_DevInit>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d005      	beq.n	80011e8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	2202      	movs	r2, #2
 80011e0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80011e4:	2301      	movs	r3, #1
 80011e6:	e00d      	b.n	8001204 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	2200      	movs	r2, #0
 80011ec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2201      	movs	r2, #1
 80011f4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4618      	mov	r0, r3
 80011fe:	f003 fad5 	bl	80047ac <USB_DevDisconnect>

  return HAL_OK;
 8001202:	2300      	movs	r3, #0
}
 8001204:	4618      	mov	r0, r3
 8001206:	3714      	adds	r7, #20
 8001208:	46bd      	mov	sp, r7
 800120a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800120c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b084      	sub	sp, #16
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001220:	2b01      	cmp	r3, #1
 8001222:	d101      	bne.n	8001228 <HAL_PCD_Start+0x1c>
 8001224:	2302      	movs	r3, #2
 8001226:	e020      	b.n	800126a <HAL_PCD_Start+0x5e>
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	2201      	movs	r2, #1
 800122c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001234:	2b01      	cmp	r3, #1
 8001236:	d109      	bne.n	800124c <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800123c:	2b01      	cmp	r3, #1
 800123e:	d005      	beq.n	800124c <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001244:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4618      	mov	r0, r3
 8001252:	f002 f9ab 	bl	80035ac <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4618      	mov	r0, r3
 800125c:	f003 fa85 	bl	800476a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	2200      	movs	r2, #0
 8001264:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001268:	2300      	movs	r3, #0
}
 800126a:	4618      	mov	r0, r3
 800126c:	3710      	adds	r7, #16
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}

08001272 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001272:	b590      	push	{r4, r7, lr}
 8001274:	b08d      	sub	sp, #52	; 0x34
 8001276:	af00      	add	r7, sp, #0
 8001278:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001280:	6a3b      	ldr	r3, [r7, #32]
 8001282:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4618      	mov	r0, r3
 800128a:	f003 fb43 	bl	8004914 <USB_GetMode>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	f040 839d 	bne.w	80019d0 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4618      	mov	r0, r3
 800129c:	f003 faa7 	bl	80047ee <USB_ReadInterrupts>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	f000 8393 	beq.w	80019ce <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4618      	mov	r0, r3
 80012ae:	f003 fa9e 	bl	80047ee <USB_ReadInterrupts>
 80012b2:	4603      	mov	r3, r0
 80012b4:	f003 0302 	and.w	r3, r3, #2
 80012b8:	2b02      	cmp	r3, #2
 80012ba:	d107      	bne.n	80012cc <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	695a      	ldr	r2, [r3, #20]
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f002 0202 	and.w	r2, r2, #2
 80012ca:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4618      	mov	r0, r3
 80012d2:	f003 fa8c 	bl	80047ee <USB_ReadInterrupts>
 80012d6:	4603      	mov	r3, r0
 80012d8:	f003 0310 	and.w	r3, r3, #16
 80012dc:	2b10      	cmp	r3, #16
 80012de:	d161      	bne.n	80013a4 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	699a      	ldr	r2, [r3, #24]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f022 0210 	bic.w	r2, r2, #16
 80012ee:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80012f0:	6a3b      	ldr	r3, [r7, #32]
 80012f2:	6a1b      	ldr	r3, [r3, #32]
 80012f4:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80012f6:	69bb      	ldr	r3, [r7, #24]
 80012f8:	f003 020f 	and.w	r2, r3, #15
 80012fc:	4613      	mov	r3, r2
 80012fe:	00db      	lsls	r3, r3, #3
 8001300:	1a9b      	subs	r3, r3, r2
 8001302:	009b      	lsls	r3, r3, #2
 8001304:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001308:	687a      	ldr	r2, [r7, #4]
 800130a:	4413      	add	r3, r2
 800130c:	3304      	adds	r3, #4
 800130e:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001310:	69bb      	ldr	r3, [r7, #24]
 8001312:	0c5b      	lsrs	r3, r3, #17
 8001314:	f003 030f 	and.w	r3, r3, #15
 8001318:	2b02      	cmp	r3, #2
 800131a:	d124      	bne.n	8001366 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800131c:	69ba      	ldr	r2, [r7, #24]
 800131e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001322:	4013      	ands	r3, r2
 8001324:	2b00      	cmp	r3, #0
 8001326:	d035      	beq.n	8001394 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800132c:	69bb      	ldr	r3, [r7, #24]
 800132e:	091b      	lsrs	r3, r3, #4
 8001330:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001332:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001336:	b29b      	uxth	r3, r3
 8001338:	461a      	mov	r2, r3
 800133a:	6a38      	ldr	r0, [r7, #32]
 800133c:	f003 f8c3 	bl	80044c6 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	68da      	ldr	r2, [r3, #12]
 8001344:	69bb      	ldr	r3, [r7, #24]
 8001346:	091b      	lsrs	r3, r3, #4
 8001348:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800134c:	441a      	add	r2, r3
 800134e:	697b      	ldr	r3, [r7, #20]
 8001350:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001352:	697b      	ldr	r3, [r7, #20]
 8001354:	699a      	ldr	r2, [r3, #24]
 8001356:	69bb      	ldr	r3, [r7, #24]
 8001358:	091b      	lsrs	r3, r3, #4
 800135a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800135e:	441a      	add	r2, r3
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	619a      	str	r2, [r3, #24]
 8001364:	e016      	b.n	8001394 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8001366:	69bb      	ldr	r3, [r7, #24]
 8001368:	0c5b      	lsrs	r3, r3, #17
 800136a:	f003 030f 	and.w	r3, r3, #15
 800136e:	2b06      	cmp	r3, #6
 8001370:	d110      	bne.n	8001394 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001378:	2208      	movs	r2, #8
 800137a:	4619      	mov	r1, r3
 800137c:	6a38      	ldr	r0, [r7, #32]
 800137e:	f003 f8a2 	bl	80044c6 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001382:	697b      	ldr	r3, [r7, #20]
 8001384:	699a      	ldr	r2, [r3, #24]
 8001386:	69bb      	ldr	r3, [r7, #24]
 8001388:	091b      	lsrs	r3, r3, #4
 800138a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800138e:	441a      	add	r2, r3
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	699a      	ldr	r2, [r3, #24]
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f042 0210 	orr.w	r2, r2, #16
 80013a2:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4618      	mov	r0, r3
 80013aa:	f003 fa20 	bl	80047ee <USB_ReadInterrupts>
 80013ae:	4603      	mov	r3, r0
 80013b0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80013b4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80013b8:	d16e      	bne.n	8001498 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80013ba:	2300      	movs	r3, #0
 80013bc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4618      	mov	r0, r3
 80013c4:	f003 fa26 	bl	8004814 <USB_ReadDevAllOutEpInterrupt>
 80013c8:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80013ca:	e062      	b.n	8001492 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80013cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013ce:	f003 0301 	and.w	r3, r3, #1
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d057      	beq.n	8001486 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013dc:	b2d2      	uxtb	r2, r2
 80013de:	4611      	mov	r1, r2
 80013e0:	4618      	mov	r0, r3
 80013e2:	f003 fa4b 	bl	800487c <USB_ReadDevOutEPInterrupt>
 80013e6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80013e8:	693b      	ldr	r3, [r7, #16]
 80013ea:	f003 0301 	and.w	r3, r3, #1
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d00c      	beq.n	800140c <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80013f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013f4:	015a      	lsls	r2, r3, #5
 80013f6:	69fb      	ldr	r3, [r7, #28]
 80013f8:	4413      	add	r3, r2
 80013fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80013fe:	461a      	mov	r2, r3
 8001400:	2301      	movs	r3, #1
 8001402:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001404:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001406:	6878      	ldr	r0, [r7, #4]
 8001408:	f000 fdb0 	bl	8001f6c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800140c:	693b      	ldr	r3, [r7, #16]
 800140e:	f003 0308 	and.w	r3, r3, #8
 8001412:	2b00      	cmp	r3, #0
 8001414:	d00c      	beq.n	8001430 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001418:	015a      	lsls	r2, r3, #5
 800141a:	69fb      	ldr	r3, [r7, #28]
 800141c:	4413      	add	r3, r2
 800141e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001422:	461a      	mov	r2, r3
 8001424:	2308      	movs	r3, #8
 8001426:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001428:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800142a:	6878      	ldr	r0, [r7, #4]
 800142c:	f000 feaa 	bl	8002184 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001430:	693b      	ldr	r3, [r7, #16]
 8001432:	f003 0310 	and.w	r3, r3, #16
 8001436:	2b00      	cmp	r3, #0
 8001438:	d008      	beq.n	800144c <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800143a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800143c:	015a      	lsls	r2, r3, #5
 800143e:	69fb      	ldr	r3, [r7, #28]
 8001440:	4413      	add	r3, r2
 8001442:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001446:	461a      	mov	r2, r3
 8001448:	2310      	movs	r3, #16
 800144a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800144c:	693b      	ldr	r3, [r7, #16]
 800144e:	f003 0320 	and.w	r3, r3, #32
 8001452:	2b00      	cmp	r3, #0
 8001454:	d008      	beq.n	8001468 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001458:	015a      	lsls	r2, r3, #5
 800145a:	69fb      	ldr	r3, [r7, #28]
 800145c:	4413      	add	r3, r2
 800145e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001462:	461a      	mov	r2, r3
 8001464:	2320      	movs	r3, #32
 8001466:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001468:	693b      	ldr	r3, [r7, #16]
 800146a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800146e:	2b00      	cmp	r3, #0
 8001470:	d009      	beq.n	8001486 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001474:	015a      	lsls	r2, r3, #5
 8001476:	69fb      	ldr	r3, [r7, #28]
 8001478:	4413      	add	r3, r2
 800147a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800147e:	461a      	mov	r2, r3
 8001480:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001484:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001488:	3301      	adds	r3, #1
 800148a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800148c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800148e:	085b      	lsrs	r3, r3, #1
 8001490:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001494:	2b00      	cmp	r3, #0
 8001496:	d199      	bne.n	80013cc <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4618      	mov	r0, r3
 800149e:	f003 f9a6 	bl	80047ee <USB_ReadInterrupts>
 80014a2:	4603      	mov	r3, r0
 80014a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80014a8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80014ac:	f040 80c0 	bne.w	8001630 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4618      	mov	r0, r3
 80014b6:	f003 f9c7 	bl	8004848 <USB_ReadDevAllInEpInterrupt>
 80014ba:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80014bc:	2300      	movs	r3, #0
 80014be:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80014c0:	e0b2      	b.n	8001628 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80014c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014c4:	f003 0301 	and.w	r3, r3, #1
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	f000 80a7 	beq.w	800161c <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014d4:	b2d2      	uxtb	r2, r2
 80014d6:	4611      	mov	r1, r2
 80014d8:	4618      	mov	r0, r3
 80014da:	f003 f9ed 	bl	80048b8 <USB_ReadDevInEPInterrupt>
 80014de:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80014e0:	693b      	ldr	r3, [r7, #16]
 80014e2:	f003 0301 	and.w	r3, r3, #1
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d057      	beq.n	800159a <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80014ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ec:	f003 030f 	and.w	r3, r3, #15
 80014f0:	2201      	movs	r2, #1
 80014f2:	fa02 f303 	lsl.w	r3, r2, r3
 80014f6:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80014f8:	69fb      	ldr	r3, [r7, #28]
 80014fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80014fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	43db      	mvns	r3, r3
 8001504:	69f9      	ldr	r1, [r7, #28]
 8001506:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800150a:	4013      	ands	r3, r2
 800150c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800150e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001510:	015a      	lsls	r2, r3, #5
 8001512:	69fb      	ldr	r3, [r7, #28]
 8001514:	4413      	add	r3, r2
 8001516:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800151a:	461a      	mov	r2, r3
 800151c:	2301      	movs	r3, #1
 800151e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	691b      	ldr	r3, [r3, #16]
 8001524:	2b01      	cmp	r3, #1
 8001526:	d132      	bne.n	800158e <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001528:	6879      	ldr	r1, [r7, #4]
 800152a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800152c:	4613      	mov	r3, r2
 800152e:	00db      	lsls	r3, r3, #3
 8001530:	1a9b      	subs	r3, r3, r2
 8001532:	009b      	lsls	r3, r3, #2
 8001534:	440b      	add	r3, r1
 8001536:	3348      	adds	r3, #72	; 0x48
 8001538:	6819      	ldr	r1, [r3, #0]
 800153a:	6878      	ldr	r0, [r7, #4]
 800153c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800153e:	4613      	mov	r3, r2
 8001540:	00db      	lsls	r3, r3, #3
 8001542:	1a9b      	subs	r3, r3, r2
 8001544:	009b      	lsls	r3, r3, #2
 8001546:	4403      	add	r3, r0
 8001548:	3344      	adds	r3, #68	; 0x44
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4419      	add	r1, r3
 800154e:	6878      	ldr	r0, [r7, #4]
 8001550:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001552:	4613      	mov	r3, r2
 8001554:	00db      	lsls	r3, r3, #3
 8001556:	1a9b      	subs	r3, r3, r2
 8001558:	009b      	lsls	r3, r3, #2
 800155a:	4403      	add	r3, r0
 800155c:	3348      	adds	r3, #72	; 0x48
 800155e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001562:	2b00      	cmp	r3, #0
 8001564:	d113      	bne.n	800158e <HAL_PCD_IRQHandler+0x31c>
 8001566:	6879      	ldr	r1, [r7, #4]
 8001568:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800156a:	4613      	mov	r3, r2
 800156c:	00db      	lsls	r3, r3, #3
 800156e:	1a9b      	subs	r3, r3, r2
 8001570:	009b      	lsls	r3, r3, #2
 8001572:	440b      	add	r3, r1
 8001574:	3350      	adds	r3, #80	; 0x50
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d108      	bne.n	800158e <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6818      	ldr	r0, [r3, #0]
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001586:	461a      	mov	r2, r3
 8001588:	2101      	movs	r1, #1
 800158a:	f003 f9f5 	bl	8004978 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800158e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001590:	b2db      	uxtb	r3, r3
 8001592:	4619      	mov	r1, r3
 8001594:	6878      	ldr	r0, [r7, #4]
 8001596:	f005 f996 	bl	80068c6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800159a:	693b      	ldr	r3, [r7, #16]
 800159c:	f003 0308 	and.w	r3, r3, #8
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d008      	beq.n	80015b6 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80015a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a6:	015a      	lsls	r2, r3, #5
 80015a8:	69fb      	ldr	r3, [r7, #28]
 80015aa:	4413      	add	r3, r2
 80015ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80015b0:	461a      	mov	r2, r3
 80015b2:	2308      	movs	r3, #8
 80015b4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80015b6:	693b      	ldr	r3, [r7, #16]
 80015b8:	f003 0310 	and.w	r3, r3, #16
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d008      	beq.n	80015d2 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80015c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c2:	015a      	lsls	r2, r3, #5
 80015c4:	69fb      	ldr	r3, [r7, #28]
 80015c6:	4413      	add	r3, r2
 80015c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80015cc:	461a      	mov	r2, r3
 80015ce:	2310      	movs	r3, #16
 80015d0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80015d2:	693b      	ldr	r3, [r7, #16]
 80015d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d008      	beq.n	80015ee <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80015dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015de:	015a      	lsls	r2, r3, #5
 80015e0:	69fb      	ldr	r3, [r7, #28]
 80015e2:	4413      	add	r3, r2
 80015e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80015e8:	461a      	mov	r2, r3
 80015ea:	2340      	movs	r3, #64	; 0x40
 80015ec:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	f003 0302 	and.w	r3, r3, #2
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d008      	beq.n	800160a <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80015f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015fa:	015a      	lsls	r2, r3, #5
 80015fc:	69fb      	ldr	r3, [r7, #28]
 80015fe:	4413      	add	r3, r2
 8001600:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001604:	461a      	mov	r2, r3
 8001606:	2302      	movs	r3, #2
 8001608:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800160a:	693b      	ldr	r3, [r7, #16]
 800160c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001610:	2b00      	cmp	r3, #0
 8001612:	d003      	beq.n	800161c <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001614:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001616:	6878      	ldr	r0, [r7, #4]
 8001618:	f000 fc1b 	bl	8001e52 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800161c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800161e:	3301      	adds	r3, #1
 8001620:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001624:	085b      	lsrs	r3, r3, #1
 8001626:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800162a:	2b00      	cmp	r3, #0
 800162c:	f47f af49 	bne.w	80014c2 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4618      	mov	r0, r3
 8001636:	f003 f8da 	bl	80047ee <USB_ReadInterrupts>
 800163a:	4603      	mov	r3, r0
 800163c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001640:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001644:	d122      	bne.n	800168c <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001646:	69fb      	ldr	r3, [r7, #28]
 8001648:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	69fa      	ldr	r2, [r7, #28]
 8001650:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001654:	f023 0301 	bic.w	r3, r3, #1
 8001658:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8001660:	2b01      	cmp	r3, #1
 8001662:	d108      	bne.n	8001676 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2200      	movs	r2, #0
 8001668:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800166c:	2100      	movs	r1, #0
 800166e:	6878      	ldr	r0, [r7, #4]
 8001670:	f000 fe26 	bl	80022c0 <HAL_PCDEx_LPM_Callback>
 8001674:	e002      	b.n	800167c <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001676:	6878      	ldr	r0, [r7, #4]
 8001678:	f005 f992 	bl	80069a0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	695a      	ldr	r2, [r3, #20]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800168a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4618      	mov	r0, r3
 8001692:	f003 f8ac 	bl	80047ee <USB_ReadInterrupts>
 8001696:	4603      	mov	r3, r0
 8001698:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800169c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80016a0:	d112      	bne.n	80016c8 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80016a2:	69fb      	ldr	r3, [r7, #28]
 80016a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016a8:	689b      	ldr	r3, [r3, #8]
 80016aa:	f003 0301 	and.w	r3, r3, #1
 80016ae:	2b01      	cmp	r3, #1
 80016b0:	d102      	bne.n	80016b8 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80016b2:	6878      	ldr	r0, [r7, #4]
 80016b4:	f005 f94e 	bl	8006954 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	695a      	ldr	r2, [r3, #20]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80016c6:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4618      	mov	r0, r3
 80016ce:	f003 f88e 	bl	80047ee <USB_ReadInterrupts>
 80016d2:	4603      	mov	r3, r0
 80016d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80016dc:	f040 80c7 	bne.w	800186e <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80016e0:	69fb      	ldr	r3, [r7, #28]
 80016e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	69fa      	ldr	r2, [r7, #28]
 80016ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80016ee:	f023 0301 	bic.w	r3, r3, #1
 80016f2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	2110      	movs	r1, #16
 80016fa:	4618      	mov	r0, r3
 80016fc:	f002 f928 	bl	8003950 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001700:	2300      	movs	r3, #0
 8001702:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001704:	e056      	b.n	80017b4 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001708:	015a      	lsls	r2, r3, #5
 800170a:	69fb      	ldr	r3, [r7, #28]
 800170c:	4413      	add	r3, r2
 800170e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001712:	461a      	mov	r2, r3
 8001714:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001718:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800171a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800171c:	015a      	lsls	r2, r3, #5
 800171e:	69fb      	ldr	r3, [r7, #28]
 8001720:	4413      	add	r3, r2
 8001722:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800172a:	0151      	lsls	r1, r2, #5
 800172c:	69fa      	ldr	r2, [r7, #28]
 800172e:	440a      	add	r2, r1
 8001730:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001734:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001738:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800173a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800173c:	015a      	lsls	r2, r3, #5
 800173e:	69fb      	ldr	r3, [r7, #28]
 8001740:	4413      	add	r3, r2
 8001742:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800174a:	0151      	lsls	r1, r2, #5
 800174c:	69fa      	ldr	r2, [r7, #28]
 800174e:	440a      	add	r2, r1
 8001750:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001754:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001758:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800175a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800175c:	015a      	lsls	r2, r3, #5
 800175e:	69fb      	ldr	r3, [r7, #28]
 8001760:	4413      	add	r3, r2
 8001762:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001766:	461a      	mov	r2, r3
 8001768:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800176c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800176e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001770:	015a      	lsls	r2, r3, #5
 8001772:	69fb      	ldr	r3, [r7, #28]
 8001774:	4413      	add	r3, r2
 8001776:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800177e:	0151      	lsls	r1, r2, #5
 8001780:	69fa      	ldr	r2, [r7, #28]
 8001782:	440a      	add	r2, r1
 8001784:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001788:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800178c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800178e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001790:	015a      	lsls	r2, r3, #5
 8001792:	69fb      	ldr	r3, [r7, #28]
 8001794:	4413      	add	r3, r2
 8001796:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800179e:	0151      	lsls	r1, r2, #5
 80017a0:	69fa      	ldr	r2, [r7, #28]
 80017a2:	440a      	add	r2, r1
 80017a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80017a8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80017ac:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017b0:	3301      	adds	r3, #1
 80017b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80017ba:	429a      	cmp	r2, r3
 80017bc:	d3a3      	bcc.n	8001706 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80017be:	69fb      	ldr	r3, [r7, #28]
 80017c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017c4:	69db      	ldr	r3, [r3, #28]
 80017c6:	69fa      	ldr	r2, [r7, #28]
 80017c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80017cc:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80017d0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d016      	beq.n	8001808 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80017da:	69fb      	ldr	r3, [r7, #28]
 80017dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80017e4:	69fa      	ldr	r2, [r7, #28]
 80017e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80017ea:	f043 030b 	orr.w	r3, r3, #11
 80017ee:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80017f2:	69fb      	ldr	r3, [r7, #28]
 80017f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017fa:	69fa      	ldr	r2, [r7, #28]
 80017fc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001800:	f043 030b 	orr.w	r3, r3, #11
 8001804:	6453      	str	r3, [r2, #68]	; 0x44
 8001806:	e015      	b.n	8001834 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001808:	69fb      	ldr	r3, [r7, #28]
 800180a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800180e:	695b      	ldr	r3, [r3, #20]
 8001810:	69fa      	ldr	r2, [r7, #28]
 8001812:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001816:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800181a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800181e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001820:	69fb      	ldr	r3, [r7, #28]
 8001822:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001826:	691b      	ldr	r3, [r3, #16]
 8001828:	69fa      	ldr	r2, [r7, #28]
 800182a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800182e:	f043 030b 	orr.w	r3, r3, #11
 8001832:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001834:	69fb      	ldr	r3, [r7, #28]
 8001836:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	69fa      	ldr	r2, [r7, #28]
 800183e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001842:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001846:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6818      	ldr	r0, [r3, #0]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	691b      	ldr	r3, [r3, #16]
 8001850:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001858:	461a      	mov	r2, r3
 800185a:	f003 f88d 	bl	8004978 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	695a      	ldr	r2, [r3, #20]
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800186c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4618      	mov	r0, r3
 8001874:	f002 ffbb 	bl	80047ee <USB_ReadInterrupts>
 8001878:	4603      	mov	r3, r0
 800187a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800187e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001882:	d124      	bne.n	80018ce <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4618      	mov	r0, r3
 800188a:	f003 f851 	bl	8004930 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4618      	mov	r0, r3
 8001894:	f002 f8b9 	bl	8003a0a <USB_GetDevSpeed>
 8001898:	4603      	mov	r3, r0
 800189a:	461a      	mov	r2, r3
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681c      	ldr	r4, [r3, #0]
 80018a4:	f001 f92c 	bl	8002b00 <HAL_RCC_GetHCLKFreq>
 80018a8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80018ae:	b2db      	uxtb	r3, r3
 80018b0:	461a      	mov	r2, r3
 80018b2:	4620      	mov	r0, r4
 80018b4:	f001 fdd8 	bl	8003468 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80018b8:	6878      	ldr	r0, [r7, #4]
 80018ba:	f005 f82c 	bl	8006916 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	695a      	ldr	r2, [r3, #20]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80018cc:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4618      	mov	r0, r3
 80018d4:	f002 ff8b 	bl	80047ee <USB_ReadInterrupts>
 80018d8:	4603      	mov	r3, r0
 80018da:	f003 0308 	and.w	r3, r3, #8
 80018de:	2b08      	cmp	r3, #8
 80018e0:	d10a      	bne.n	80018f8 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80018e2:	6878      	ldr	r0, [r7, #4]
 80018e4:	f005 f809 	bl	80068fa <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	695a      	ldr	r2, [r3, #20]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f002 0208 	and.w	r2, r2, #8
 80018f6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4618      	mov	r0, r3
 80018fe:	f002 ff76 	bl	80047ee <USB_ReadInterrupts>
 8001902:	4603      	mov	r3, r0
 8001904:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001908:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800190c:	d10f      	bne.n	800192e <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800190e:	2300      	movs	r3, #0
 8001910:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001914:	b2db      	uxtb	r3, r3
 8001916:	4619      	mov	r1, r3
 8001918:	6878      	ldr	r0, [r7, #4]
 800191a:	f005 f861 	bl	80069e0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	695a      	ldr	r2, [r3, #20]
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800192c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4618      	mov	r0, r3
 8001934:	f002 ff5b 	bl	80047ee <USB_ReadInterrupts>
 8001938:	4603      	mov	r3, r0
 800193a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800193e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001942:	d10f      	bne.n	8001964 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001944:	2300      	movs	r3, #0
 8001946:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800194a:	b2db      	uxtb	r3, r3
 800194c:	4619      	mov	r1, r3
 800194e:	6878      	ldr	r0, [r7, #4]
 8001950:	f005 f834 	bl	80069bc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	695a      	ldr	r2, [r3, #20]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001962:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4618      	mov	r0, r3
 800196a:	f002 ff40 	bl	80047ee <USB_ReadInterrupts>
 800196e:	4603      	mov	r3, r0
 8001970:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001974:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001978:	d10a      	bne.n	8001990 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800197a:	6878      	ldr	r0, [r7, #4]
 800197c:	f005 f842 	bl	8006a04 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	695a      	ldr	r2, [r3, #20]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800198e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4618      	mov	r0, r3
 8001996:	f002 ff2a 	bl	80047ee <USB_ReadInterrupts>
 800199a:	4603      	mov	r3, r0
 800199c:	f003 0304 	and.w	r3, r3, #4
 80019a0:	2b04      	cmp	r3, #4
 80019a2:	d115      	bne.n	80019d0 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80019ac:	69bb      	ldr	r3, [r7, #24]
 80019ae:	f003 0304 	and.w	r3, r3, #4
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d002      	beq.n	80019bc <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80019b6:	6878      	ldr	r0, [r7, #4]
 80019b8:	f005 f832 	bl	8006a20 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	6859      	ldr	r1, [r3, #4]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	69ba      	ldr	r2, [r7, #24]
 80019c8:	430a      	orrs	r2, r1
 80019ca:	605a      	str	r2, [r3, #4]
 80019cc:	e000      	b.n	80019d0 <HAL_PCD_IRQHandler+0x75e>
      return;
 80019ce:	bf00      	nop
    }
  }
}
 80019d0:	3734      	adds	r7, #52	; 0x34
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd90      	pop	{r4, r7, pc}

080019d6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80019d6:	b580      	push	{r7, lr}
 80019d8:	b082      	sub	sp, #8
 80019da:	af00      	add	r7, sp, #0
 80019dc:	6078      	str	r0, [r7, #4]
 80019de:	460b      	mov	r3, r1
 80019e0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80019e8:	2b01      	cmp	r3, #1
 80019ea:	d101      	bne.n	80019f0 <HAL_PCD_SetAddress+0x1a>
 80019ec:	2302      	movs	r3, #2
 80019ee:	e013      	b.n	8001a18 <HAL_PCD_SetAddress+0x42>
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2201      	movs	r2, #1
 80019f4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	78fa      	ldrb	r2, [r7, #3]
 80019fc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	78fa      	ldrb	r2, [r7, #3]
 8001a06:	4611      	mov	r1, r2
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f002 fe88 	bl	800471e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2200      	movs	r2, #0
 8001a12:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001a16:	2300      	movs	r3, #0
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	3708      	adds	r7, #8
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}

08001a20 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b084      	sub	sp, #16
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
 8001a28:	4608      	mov	r0, r1
 8001a2a:	4611      	mov	r1, r2
 8001a2c:	461a      	mov	r2, r3
 8001a2e:	4603      	mov	r3, r0
 8001a30:	70fb      	strb	r3, [r7, #3]
 8001a32:	460b      	mov	r3, r1
 8001a34:	803b      	strh	r3, [r7, #0]
 8001a36:	4613      	mov	r3, r2
 8001a38:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001a3e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	da0f      	bge.n	8001a66 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a46:	78fb      	ldrb	r3, [r7, #3]
 8001a48:	f003 020f 	and.w	r2, r3, #15
 8001a4c:	4613      	mov	r3, r2
 8001a4e:	00db      	lsls	r3, r3, #3
 8001a50:	1a9b      	subs	r3, r3, r2
 8001a52:	009b      	lsls	r3, r3, #2
 8001a54:	3338      	adds	r3, #56	; 0x38
 8001a56:	687a      	ldr	r2, [r7, #4]
 8001a58:	4413      	add	r3, r2
 8001a5a:	3304      	adds	r3, #4
 8001a5c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	2201      	movs	r2, #1
 8001a62:	705a      	strb	r2, [r3, #1]
 8001a64:	e00f      	b.n	8001a86 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a66:	78fb      	ldrb	r3, [r7, #3]
 8001a68:	f003 020f 	and.w	r2, r3, #15
 8001a6c:	4613      	mov	r3, r2
 8001a6e:	00db      	lsls	r3, r3, #3
 8001a70:	1a9b      	subs	r3, r3, r2
 8001a72:	009b      	lsls	r3, r3, #2
 8001a74:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001a78:	687a      	ldr	r2, [r7, #4]
 8001a7a:	4413      	add	r3, r2
 8001a7c:	3304      	adds	r3, #4
 8001a7e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	2200      	movs	r2, #0
 8001a84:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001a86:	78fb      	ldrb	r3, [r7, #3]
 8001a88:	f003 030f 	and.w	r3, r3, #15
 8001a8c:	b2da      	uxtb	r2, r3
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001a92:	883a      	ldrh	r2, [r7, #0]
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	78ba      	ldrb	r2, [r7, #2]
 8001a9c:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	785b      	ldrb	r3, [r3, #1]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d004      	beq.n	8001ab0 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	781b      	ldrb	r3, [r3, #0]
 8001aaa:	b29a      	uxth	r2, r3
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001ab0:	78bb      	ldrb	r3, [r7, #2]
 8001ab2:	2b02      	cmp	r3, #2
 8001ab4:	d102      	bne.n	8001abc <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	2200      	movs	r2, #0
 8001aba:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001ac2:	2b01      	cmp	r3, #1
 8001ac4:	d101      	bne.n	8001aca <HAL_PCD_EP_Open+0xaa>
 8001ac6:	2302      	movs	r3, #2
 8001ac8:	e00e      	b.n	8001ae8 <HAL_PCD_EP_Open+0xc8>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2201      	movs	r2, #1
 8001ace:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	68f9      	ldr	r1, [r7, #12]
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f001 ffbb 	bl	8003a54 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8001ae6:	7afb      	ldrb	r3, [r7, #11]
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	3710      	adds	r7, #16
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}

08001af0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b084      	sub	sp, #16
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
 8001af8:	460b      	mov	r3, r1
 8001afa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001afc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	da0f      	bge.n	8001b24 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b04:	78fb      	ldrb	r3, [r7, #3]
 8001b06:	f003 020f 	and.w	r2, r3, #15
 8001b0a:	4613      	mov	r3, r2
 8001b0c:	00db      	lsls	r3, r3, #3
 8001b0e:	1a9b      	subs	r3, r3, r2
 8001b10:	009b      	lsls	r3, r3, #2
 8001b12:	3338      	adds	r3, #56	; 0x38
 8001b14:	687a      	ldr	r2, [r7, #4]
 8001b16:	4413      	add	r3, r2
 8001b18:	3304      	adds	r3, #4
 8001b1a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	2201      	movs	r2, #1
 8001b20:	705a      	strb	r2, [r3, #1]
 8001b22:	e00f      	b.n	8001b44 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b24:	78fb      	ldrb	r3, [r7, #3]
 8001b26:	f003 020f 	and.w	r2, r3, #15
 8001b2a:	4613      	mov	r3, r2
 8001b2c:	00db      	lsls	r3, r3, #3
 8001b2e:	1a9b      	subs	r3, r3, r2
 8001b30:	009b      	lsls	r3, r3, #2
 8001b32:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001b36:	687a      	ldr	r2, [r7, #4]
 8001b38:	4413      	add	r3, r2
 8001b3a:	3304      	adds	r3, #4
 8001b3c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	2200      	movs	r2, #0
 8001b42:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001b44:	78fb      	ldrb	r3, [r7, #3]
 8001b46:	f003 030f 	and.w	r3, r3, #15
 8001b4a:	b2da      	uxtb	r2, r3
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001b56:	2b01      	cmp	r3, #1
 8001b58:	d101      	bne.n	8001b5e <HAL_PCD_EP_Close+0x6e>
 8001b5a:	2302      	movs	r3, #2
 8001b5c:	e00e      	b.n	8001b7c <HAL_PCD_EP_Close+0x8c>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2201      	movs	r2, #1
 8001b62:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	68f9      	ldr	r1, [r7, #12]
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f001 fff9 	bl	8003b64 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2200      	movs	r2, #0
 8001b76:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001b7a:	2300      	movs	r3, #0
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	3710      	adds	r7, #16
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}

08001b84 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b086      	sub	sp, #24
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	60f8      	str	r0, [r7, #12]
 8001b8c:	607a      	str	r2, [r7, #4]
 8001b8e:	603b      	str	r3, [r7, #0]
 8001b90:	460b      	mov	r3, r1
 8001b92:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b94:	7afb      	ldrb	r3, [r7, #11]
 8001b96:	f003 020f 	and.w	r2, r3, #15
 8001b9a:	4613      	mov	r3, r2
 8001b9c:	00db      	lsls	r3, r3, #3
 8001b9e:	1a9b      	subs	r3, r3, r2
 8001ba0:	009b      	lsls	r3, r3, #2
 8001ba2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001ba6:	68fa      	ldr	r2, [r7, #12]
 8001ba8:	4413      	add	r3, r2
 8001baa:	3304      	adds	r3, #4
 8001bac:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	687a      	ldr	r2, [r7, #4]
 8001bb2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	683a      	ldr	r2, [r7, #0]
 8001bb8:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001bc6:	7afb      	ldrb	r3, [r7, #11]
 8001bc8:	f003 030f 	and.w	r3, r3, #15
 8001bcc:	b2da      	uxtb	r2, r3
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	691b      	ldr	r3, [r3, #16]
 8001bd6:	2b01      	cmp	r3, #1
 8001bd8:	d102      	bne.n	8001be0 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001bda:	687a      	ldr	r2, [r7, #4]
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001be0:	7afb      	ldrb	r3, [r7, #11]
 8001be2:	f003 030f 	and.w	r3, r3, #15
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d109      	bne.n	8001bfe <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	6818      	ldr	r0, [r3, #0]
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	691b      	ldr	r3, [r3, #16]
 8001bf2:	b2db      	uxtb	r3, r3
 8001bf4:	461a      	mov	r2, r3
 8001bf6:	6979      	ldr	r1, [r7, #20]
 8001bf8:	f002 fad4 	bl	80041a4 <USB_EP0StartXfer>
 8001bfc:	e008      	b.n	8001c10 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	6818      	ldr	r0, [r3, #0]
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	691b      	ldr	r3, [r3, #16]
 8001c06:	b2db      	uxtb	r3, r3
 8001c08:	461a      	mov	r2, r3
 8001c0a:	6979      	ldr	r1, [r7, #20]
 8001c0c:	f002 f886 	bl	8003d1c <USB_EPStartXfer>
  }

  return HAL_OK;
 8001c10:	2300      	movs	r3, #0
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	3718      	adds	r7, #24
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}

08001c1a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001c1a:	b480      	push	{r7}
 8001c1c:	b083      	sub	sp, #12
 8001c1e:	af00      	add	r7, sp, #0
 8001c20:	6078      	str	r0, [r7, #4]
 8001c22:	460b      	mov	r3, r1
 8001c24:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001c26:	78fb      	ldrb	r3, [r7, #3]
 8001c28:	f003 020f 	and.w	r2, r3, #15
 8001c2c:	6879      	ldr	r1, [r7, #4]
 8001c2e:	4613      	mov	r3, r2
 8001c30:	00db      	lsls	r3, r3, #3
 8001c32:	1a9b      	subs	r3, r3, r2
 8001c34:	009b      	lsls	r3, r3, #2
 8001c36:	440b      	add	r3, r1
 8001c38:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001c3c:	681b      	ldr	r3, [r3, #0]
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	370c      	adds	r7, #12
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr

08001c4a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001c4a:	b580      	push	{r7, lr}
 8001c4c:	b086      	sub	sp, #24
 8001c4e:	af00      	add	r7, sp, #0
 8001c50:	60f8      	str	r0, [r7, #12]
 8001c52:	607a      	str	r2, [r7, #4]
 8001c54:	603b      	str	r3, [r7, #0]
 8001c56:	460b      	mov	r3, r1
 8001c58:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c5a:	7afb      	ldrb	r3, [r7, #11]
 8001c5c:	f003 020f 	and.w	r2, r3, #15
 8001c60:	4613      	mov	r3, r2
 8001c62:	00db      	lsls	r3, r3, #3
 8001c64:	1a9b      	subs	r3, r3, r2
 8001c66:	009b      	lsls	r3, r3, #2
 8001c68:	3338      	adds	r3, #56	; 0x38
 8001c6a:	68fa      	ldr	r2, [r7, #12]
 8001c6c:	4413      	add	r3, r2
 8001c6e:	3304      	adds	r3, #4
 8001c70:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	687a      	ldr	r2, [r7, #4]
 8001c76:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	683a      	ldr	r2, [r7, #0]
 8001c7c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	2200      	movs	r2, #0
 8001c82:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	2201      	movs	r2, #1
 8001c88:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c8a:	7afb      	ldrb	r3, [r7, #11]
 8001c8c:	f003 030f 	and.w	r3, r3, #15
 8001c90:	b2da      	uxtb	r2, r3
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	691b      	ldr	r3, [r3, #16]
 8001c9a:	2b01      	cmp	r3, #1
 8001c9c:	d102      	bne.n	8001ca4 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001c9e:	687a      	ldr	r2, [r7, #4]
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001ca4:	7afb      	ldrb	r3, [r7, #11]
 8001ca6:	f003 030f 	and.w	r3, r3, #15
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d109      	bne.n	8001cc2 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	6818      	ldr	r0, [r3, #0]
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	691b      	ldr	r3, [r3, #16]
 8001cb6:	b2db      	uxtb	r3, r3
 8001cb8:	461a      	mov	r2, r3
 8001cba:	6979      	ldr	r1, [r7, #20]
 8001cbc:	f002 fa72 	bl	80041a4 <USB_EP0StartXfer>
 8001cc0:	e008      	b.n	8001cd4 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	6818      	ldr	r0, [r3, #0]
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	691b      	ldr	r3, [r3, #16]
 8001cca:	b2db      	uxtb	r3, r3
 8001ccc:	461a      	mov	r2, r3
 8001cce:	6979      	ldr	r1, [r7, #20]
 8001cd0:	f002 f824 	bl	8003d1c <USB_EPStartXfer>
  }

  return HAL_OK;
 8001cd4:	2300      	movs	r3, #0
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	3718      	adds	r7, #24
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}

08001cde <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001cde:	b580      	push	{r7, lr}
 8001ce0:	b084      	sub	sp, #16
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	6078      	str	r0, [r7, #4]
 8001ce6:	460b      	mov	r3, r1
 8001ce8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001cea:	78fb      	ldrb	r3, [r7, #3]
 8001cec:	f003 020f 	and.w	r2, r3, #15
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	d901      	bls.n	8001cfc <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	e050      	b.n	8001d9e <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001cfc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	da0f      	bge.n	8001d24 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d04:	78fb      	ldrb	r3, [r7, #3]
 8001d06:	f003 020f 	and.w	r2, r3, #15
 8001d0a:	4613      	mov	r3, r2
 8001d0c:	00db      	lsls	r3, r3, #3
 8001d0e:	1a9b      	subs	r3, r3, r2
 8001d10:	009b      	lsls	r3, r3, #2
 8001d12:	3338      	adds	r3, #56	; 0x38
 8001d14:	687a      	ldr	r2, [r7, #4]
 8001d16:	4413      	add	r3, r2
 8001d18:	3304      	adds	r3, #4
 8001d1a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	2201      	movs	r2, #1
 8001d20:	705a      	strb	r2, [r3, #1]
 8001d22:	e00d      	b.n	8001d40 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001d24:	78fa      	ldrb	r2, [r7, #3]
 8001d26:	4613      	mov	r3, r2
 8001d28:	00db      	lsls	r3, r3, #3
 8001d2a:	1a9b      	subs	r3, r3, r2
 8001d2c:	009b      	lsls	r3, r3, #2
 8001d2e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001d32:	687a      	ldr	r2, [r7, #4]
 8001d34:	4413      	add	r3, r2
 8001d36:	3304      	adds	r3, #4
 8001d38:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	2201      	movs	r2, #1
 8001d44:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d46:	78fb      	ldrb	r3, [r7, #3]
 8001d48:	f003 030f 	and.w	r3, r3, #15
 8001d4c:	b2da      	uxtb	r2, r3
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001d58:	2b01      	cmp	r3, #1
 8001d5a:	d101      	bne.n	8001d60 <HAL_PCD_EP_SetStall+0x82>
 8001d5c:	2302      	movs	r3, #2
 8001d5e:	e01e      	b.n	8001d9e <HAL_PCD_EP_SetStall+0xc0>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2201      	movs	r2, #1
 8001d64:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	68f9      	ldr	r1, [r7, #12]
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f002 fc01 	bl	8004576 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001d74:	78fb      	ldrb	r3, [r7, #3]
 8001d76:	f003 030f 	and.w	r3, r3, #15
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d10a      	bne.n	8001d94 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6818      	ldr	r0, [r3, #0]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	691b      	ldr	r3, [r3, #16]
 8001d86:	b2d9      	uxtb	r1, r3
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001d8e:	461a      	mov	r2, r3
 8001d90:	f002 fdf2 	bl	8004978 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2200      	movs	r2, #0
 8001d98:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001d9c:	2300      	movs	r3, #0
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	3710      	adds	r7, #16
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}

08001da6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001da6:	b580      	push	{r7, lr}
 8001da8:	b084      	sub	sp, #16
 8001daa:	af00      	add	r7, sp, #0
 8001dac:	6078      	str	r0, [r7, #4]
 8001dae:	460b      	mov	r3, r1
 8001db0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001db2:	78fb      	ldrb	r3, [r7, #3]
 8001db4:	f003 020f 	and.w	r2, r3, #15
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	d901      	bls.n	8001dc4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	e042      	b.n	8001e4a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001dc4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	da0f      	bge.n	8001dec <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001dcc:	78fb      	ldrb	r3, [r7, #3]
 8001dce:	f003 020f 	and.w	r2, r3, #15
 8001dd2:	4613      	mov	r3, r2
 8001dd4:	00db      	lsls	r3, r3, #3
 8001dd6:	1a9b      	subs	r3, r3, r2
 8001dd8:	009b      	lsls	r3, r3, #2
 8001dda:	3338      	adds	r3, #56	; 0x38
 8001ddc:	687a      	ldr	r2, [r7, #4]
 8001dde:	4413      	add	r3, r2
 8001de0:	3304      	adds	r3, #4
 8001de2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	2201      	movs	r2, #1
 8001de8:	705a      	strb	r2, [r3, #1]
 8001dea:	e00f      	b.n	8001e0c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001dec:	78fb      	ldrb	r3, [r7, #3]
 8001dee:	f003 020f 	and.w	r2, r3, #15
 8001df2:	4613      	mov	r3, r2
 8001df4:	00db      	lsls	r3, r3, #3
 8001df6:	1a9b      	subs	r3, r3, r2
 8001df8:	009b      	lsls	r3, r3, #2
 8001dfa:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001dfe:	687a      	ldr	r2, [r7, #4]
 8001e00:	4413      	add	r3, r2
 8001e02:	3304      	adds	r3, #4
 8001e04:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	2200      	movs	r2, #0
 8001e0a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	2200      	movs	r2, #0
 8001e10:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e12:	78fb      	ldrb	r3, [r7, #3]
 8001e14:	f003 030f 	and.w	r3, r3, #15
 8001e18:	b2da      	uxtb	r2, r3
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001e24:	2b01      	cmp	r3, #1
 8001e26:	d101      	bne.n	8001e2c <HAL_PCD_EP_ClrStall+0x86>
 8001e28:	2302      	movs	r3, #2
 8001e2a:	e00e      	b.n	8001e4a <HAL_PCD_EP_ClrStall+0xa4>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2201      	movs	r2, #1
 8001e30:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	68f9      	ldr	r1, [r7, #12]
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f002 fc09 	bl	8004652 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2200      	movs	r2, #0
 8001e44:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001e48:	2300      	movs	r3, #0
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	3710      	adds	r7, #16
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}

08001e52 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001e52:	b580      	push	{r7, lr}
 8001e54:	b08a      	sub	sp, #40	; 0x28
 8001e56:	af02      	add	r7, sp, #8
 8001e58:	6078      	str	r0, [r7, #4]
 8001e5a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001e62:	697b      	ldr	r3, [r7, #20]
 8001e64:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8001e66:	683a      	ldr	r2, [r7, #0]
 8001e68:	4613      	mov	r3, r2
 8001e6a:	00db      	lsls	r3, r3, #3
 8001e6c:	1a9b      	subs	r3, r3, r2
 8001e6e:	009b      	lsls	r3, r3, #2
 8001e70:	3338      	adds	r3, #56	; 0x38
 8001e72:	687a      	ldr	r2, [r7, #4]
 8001e74:	4413      	add	r3, r2
 8001e76:	3304      	adds	r3, #4
 8001e78:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	699a      	ldr	r2, [r3, #24]
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	695b      	ldr	r3, [r3, #20]
 8001e82:	429a      	cmp	r2, r3
 8001e84:	d901      	bls.n	8001e8a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	e06c      	b.n	8001f64 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	695a      	ldr	r2, [r3, #20]
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	699b      	ldr	r3, [r3, #24]
 8001e92:	1ad3      	subs	r3, r2, r3
 8001e94:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	689b      	ldr	r3, [r3, #8]
 8001e9a:	69fa      	ldr	r2, [r7, #28]
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	d902      	bls.n	8001ea6 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	689b      	ldr	r3, [r3, #8]
 8001ea4:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8001ea6:	69fb      	ldr	r3, [r7, #28]
 8001ea8:	3303      	adds	r3, #3
 8001eaa:	089b      	lsrs	r3, r3, #2
 8001eac:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001eae:	e02b      	b.n	8001f08 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	695a      	ldr	r2, [r3, #20]
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	699b      	ldr	r3, [r3, #24]
 8001eb8:	1ad3      	subs	r3, r2, r3
 8001eba:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	69fa      	ldr	r2, [r7, #28]
 8001ec2:	429a      	cmp	r2, r3
 8001ec4:	d902      	bls.n	8001ecc <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	689b      	ldr	r3, [r3, #8]
 8001eca:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8001ecc:	69fb      	ldr	r3, [r7, #28]
 8001ece:	3303      	adds	r3, #3
 8001ed0:	089b      	lsrs	r3, r3, #2
 8001ed2:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	68d9      	ldr	r1, [r3, #12]
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	b2da      	uxtb	r2, r3
 8001edc:	69fb      	ldr	r3, [r7, #28]
 8001ede:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001ee4:	b2db      	uxtb	r3, r3
 8001ee6:	9300      	str	r3, [sp, #0]
 8001ee8:	4603      	mov	r3, r0
 8001eea:	6978      	ldr	r0, [r7, #20]
 8001eec:	f002 faad 	bl	800444a <USB_WritePacket>

    ep->xfer_buff  += len;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	68da      	ldr	r2, [r3, #12]
 8001ef4:	69fb      	ldr	r3, [r7, #28]
 8001ef6:	441a      	add	r2, r3
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	699a      	ldr	r2, [r3, #24]
 8001f00:	69fb      	ldr	r3, [r7, #28]
 8001f02:	441a      	add	r2, r3
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	015a      	lsls	r2, r3, #5
 8001f0c:	693b      	ldr	r3, [r7, #16]
 8001f0e:	4413      	add	r3, r2
 8001f10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001f14:	699b      	ldr	r3, [r3, #24]
 8001f16:	b29b      	uxth	r3, r3
 8001f18:	69ba      	ldr	r2, [r7, #24]
 8001f1a:	429a      	cmp	r2, r3
 8001f1c:	d809      	bhi.n	8001f32 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	699a      	ldr	r2, [r3, #24]
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001f26:	429a      	cmp	r2, r3
 8001f28:	d203      	bcs.n	8001f32 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	695b      	ldr	r3, [r3, #20]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d1be      	bne.n	8001eb0 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	695a      	ldr	r2, [r3, #20]
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	699b      	ldr	r3, [r3, #24]
 8001f3a:	429a      	cmp	r2, r3
 8001f3c:	d811      	bhi.n	8001f62 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	f003 030f 	and.w	r3, r3, #15
 8001f44:	2201      	movs	r2, #1
 8001f46:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f52:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	43db      	mvns	r3, r3
 8001f58:	6939      	ldr	r1, [r7, #16]
 8001f5a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001f5e:	4013      	ands	r3, r2
 8001f60:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8001f62:	2300      	movs	r3, #0
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	3720      	adds	r7, #32
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}

08001f6c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b086      	sub	sp, #24
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
 8001f74:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	333c      	adds	r3, #60	; 0x3c
 8001f84:	3304      	adds	r3, #4
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	015a      	lsls	r2, r3, #5
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	4413      	add	r3, r2
 8001f92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	691b      	ldr	r3, [r3, #16]
 8001f9e:	2b01      	cmp	r3, #1
 8001fa0:	f040 80a0 	bne.w	80020e4 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8001fa4:	68bb      	ldr	r3, [r7, #8]
 8001fa6:	f003 0308 	and.w	r3, r3, #8
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d015      	beq.n	8001fda <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	4a72      	ldr	r2, [pc, #456]	; (800217c <PCD_EP_OutXfrComplete_int+0x210>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	f240 80dd 	bls.w	8002172 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	f000 80d7 	beq.w	8002172 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	015a      	lsls	r2, r3, #5
 8001fc8:	693b      	ldr	r3, [r7, #16]
 8001fca:	4413      	add	r3, r2
 8001fcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001fd0:	461a      	mov	r2, r3
 8001fd2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001fd6:	6093      	str	r3, [r2, #8]
 8001fd8:	e0cb      	b.n	8002172 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8001fda:	68bb      	ldr	r3, [r7, #8]
 8001fdc:	f003 0320 	and.w	r3, r3, #32
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d009      	beq.n	8001ff8 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	015a      	lsls	r2, r3, #5
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	4413      	add	r3, r2
 8001fec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ff0:	461a      	mov	r2, r3
 8001ff2:	2320      	movs	r3, #32
 8001ff4:	6093      	str	r3, [r2, #8]
 8001ff6:	e0bc      	b.n	8002172 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8001ff8:	68bb      	ldr	r3, [r7, #8]
 8001ffa:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	f040 80b7 	bne.w	8002172 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	4a5d      	ldr	r2, [pc, #372]	; (800217c <PCD_EP_OutXfrComplete_int+0x210>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d90f      	bls.n	800202c <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002012:	2b00      	cmp	r3, #0
 8002014:	d00a      	beq.n	800202c <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	015a      	lsls	r2, r3, #5
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	4413      	add	r3, r2
 800201e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002022:	461a      	mov	r2, r3
 8002024:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002028:	6093      	str	r3, [r2, #8]
 800202a:	e0a2      	b.n	8002172 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 800202c:	6879      	ldr	r1, [r7, #4]
 800202e:	683a      	ldr	r2, [r7, #0]
 8002030:	4613      	mov	r3, r2
 8002032:	00db      	lsls	r3, r3, #3
 8002034:	1a9b      	subs	r3, r3, r2
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	440b      	add	r3, r1
 800203a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800203e:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	0159      	lsls	r1, r3, #5
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	440b      	add	r3, r1
 8002048:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800204c:	691b      	ldr	r3, [r3, #16]
 800204e:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8002052:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8002054:	6878      	ldr	r0, [r7, #4]
 8002056:	683a      	ldr	r2, [r7, #0]
 8002058:	4613      	mov	r3, r2
 800205a:	00db      	lsls	r3, r3, #3
 800205c:	1a9b      	subs	r3, r3, r2
 800205e:	009b      	lsls	r3, r3, #2
 8002060:	4403      	add	r3, r0
 8002062:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002066:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8002068:	6879      	ldr	r1, [r7, #4]
 800206a:	683a      	ldr	r2, [r7, #0]
 800206c:	4613      	mov	r3, r2
 800206e:	00db      	lsls	r3, r3, #3
 8002070:	1a9b      	subs	r3, r3, r2
 8002072:	009b      	lsls	r3, r3, #2
 8002074:	440b      	add	r3, r1
 8002076:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800207a:	6819      	ldr	r1, [r3, #0]
 800207c:	6878      	ldr	r0, [r7, #4]
 800207e:	683a      	ldr	r2, [r7, #0]
 8002080:	4613      	mov	r3, r2
 8002082:	00db      	lsls	r3, r3, #3
 8002084:	1a9b      	subs	r3, r3, r2
 8002086:	009b      	lsls	r3, r3, #2
 8002088:	4403      	add	r3, r0
 800208a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4419      	add	r1, r3
 8002092:	6878      	ldr	r0, [r7, #4]
 8002094:	683a      	ldr	r2, [r7, #0]
 8002096:	4613      	mov	r3, r2
 8002098:	00db      	lsls	r3, r3, #3
 800209a:	1a9b      	subs	r3, r3, r2
 800209c:	009b      	lsls	r3, r3, #2
 800209e:	4403      	add	r3, r0
 80020a0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80020a4:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d114      	bne.n	80020d6 <PCD_EP_OutXfrComplete_int+0x16a>
 80020ac:	6879      	ldr	r1, [r7, #4]
 80020ae:	683a      	ldr	r2, [r7, #0]
 80020b0:	4613      	mov	r3, r2
 80020b2:	00db      	lsls	r3, r3, #3
 80020b4:	1a9b      	subs	r3, r3, r2
 80020b6:	009b      	lsls	r3, r3, #2
 80020b8:	440b      	add	r3, r1
 80020ba:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d108      	bne.n	80020d6 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6818      	ldr	r0, [r3, #0]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80020ce:	461a      	mov	r2, r3
 80020d0:	2101      	movs	r1, #1
 80020d2:	f002 fc51 	bl	8004978 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	b2db      	uxtb	r3, r3
 80020da:	4619      	mov	r1, r3
 80020dc:	6878      	ldr	r0, [r7, #4]
 80020de:	f004 fbd7 	bl	8006890 <HAL_PCD_DataOutStageCallback>
 80020e2:	e046      	b.n	8002172 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	4a26      	ldr	r2, [pc, #152]	; (8002180 <PCD_EP_OutXfrComplete_int+0x214>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d124      	bne.n	8002136 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d00a      	beq.n	800210c <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	015a      	lsls	r2, r3, #5
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	4413      	add	r3, r2
 80020fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002102:	461a      	mov	r2, r3
 8002104:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002108:	6093      	str	r3, [r2, #8]
 800210a:	e032      	b.n	8002172 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	f003 0320 	and.w	r3, r3, #32
 8002112:	2b00      	cmp	r3, #0
 8002114:	d008      	beq.n	8002128 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	015a      	lsls	r2, r3, #5
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	4413      	add	r3, r2
 800211e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002122:	461a      	mov	r2, r3
 8002124:	2320      	movs	r3, #32
 8002126:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	b2db      	uxtb	r3, r3
 800212c:	4619      	mov	r1, r3
 800212e:	6878      	ldr	r0, [r7, #4]
 8002130:	f004 fbae 	bl	8006890 <HAL_PCD_DataOutStageCallback>
 8002134:	e01d      	b.n	8002172 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d114      	bne.n	8002166 <PCD_EP_OutXfrComplete_int+0x1fa>
 800213c:	6879      	ldr	r1, [r7, #4]
 800213e:	683a      	ldr	r2, [r7, #0]
 8002140:	4613      	mov	r3, r2
 8002142:	00db      	lsls	r3, r3, #3
 8002144:	1a9b      	subs	r3, r3, r2
 8002146:	009b      	lsls	r3, r3, #2
 8002148:	440b      	add	r3, r1
 800214a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d108      	bne.n	8002166 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6818      	ldr	r0, [r3, #0]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800215e:	461a      	mov	r2, r3
 8002160:	2100      	movs	r1, #0
 8002162:	f002 fc09 	bl	8004978 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	b2db      	uxtb	r3, r3
 800216a:	4619      	mov	r1, r3
 800216c:	6878      	ldr	r0, [r7, #4]
 800216e:	f004 fb8f 	bl	8006890 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002172:	2300      	movs	r3, #0
}
 8002174:	4618      	mov	r0, r3
 8002176:	3718      	adds	r7, #24
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}
 800217c:	4f54300a 	.word	0x4f54300a
 8002180:	4f54310a 	.word	0x4f54310a

08002184 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b086      	sub	sp, #24
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
 800218c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	333c      	adds	r3, #60	; 0x3c
 800219c:	3304      	adds	r3, #4
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	015a      	lsls	r2, r3, #5
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	4413      	add	r3, r2
 80021aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	4a15      	ldr	r2, [pc, #84]	; (800220c <PCD_EP_OutSetupPacket_int+0x88>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d90e      	bls.n	80021d8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d009      	beq.n	80021d8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	015a      	lsls	r2, r3, #5
 80021c8:	693b      	ldr	r3, [r7, #16]
 80021ca:	4413      	add	r3, r2
 80021cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021d0:	461a      	mov	r2, r3
 80021d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80021d6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80021d8:	6878      	ldr	r0, [r7, #4]
 80021da:	f004 fb47 	bl	800686c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	4a0a      	ldr	r2, [pc, #40]	; (800220c <PCD_EP_OutSetupPacket_int+0x88>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d90c      	bls.n	8002200 <PCD_EP_OutSetupPacket_int+0x7c>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	691b      	ldr	r3, [r3, #16]
 80021ea:	2b01      	cmp	r3, #1
 80021ec:	d108      	bne.n	8002200 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6818      	ldr	r0, [r3, #0]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80021f8:	461a      	mov	r2, r3
 80021fa:	2101      	movs	r1, #1
 80021fc:	f002 fbbc 	bl	8004978 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002200:	2300      	movs	r3, #0
}
 8002202:	4618      	mov	r0, r3
 8002204:	3718      	adds	r7, #24
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	4f54300a 	.word	0x4f54300a

08002210 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002210:	b480      	push	{r7}
 8002212:	b085      	sub	sp, #20
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
 8002218:	460b      	mov	r3, r1
 800221a:	70fb      	strb	r3, [r7, #3]
 800221c:	4613      	mov	r3, r2
 800221e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002226:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002228:	78fb      	ldrb	r3, [r7, #3]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d107      	bne.n	800223e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800222e:	883b      	ldrh	r3, [r7, #0]
 8002230:	0419      	lsls	r1, r3, #16
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	68ba      	ldr	r2, [r7, #8]
 8002238:	430a      	orrs	r2, r1
 800223a:	629a      	str	r2, [r3, #40]	; 0x28
 800223c:	e028      	b.n	8002290 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002244:	0c1b      	lsrs	r3, r3, #16
 8002246:	68ba      	ldr	r2, [r7, #8]
 8002248:	4413      	add	r3, r2
 800224a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800224c:	2300      	movs	r3, #0
 800224e:	73fb      	strb	r3, [r7, #15]
 8002250:	e00d      	b.n	800226e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	7bfb      	ldrb	r3, [r7, #15]
 8002258:	3340      	adds	r3, #64	; 0x40
 800225a:	009b      	lsls	r3, r3, #2
 800225c:	4413      	add	r3, r2
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	0c1b      	lsrs	r3, r3, #16
 8002262:	68ba      	ldr	r2, [r7, #8]
 8002264:	4413      	add	r3, r2
 8002266:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002268:	7bfb      	ldrb	r3, [r7, #15]
 800226a:	3301      	adds	r3, #1
 800226c:	73fb      	strb	r3, [r7, #15]
 800226e:	7bfa      	ldrb	r2, [r7, #15]
 8002270:	78fb      	ldrb	r3, [r7, #3]
 8002272:	3b01      	subs	r3, #1
 8002274:	429a      	cmp	r2, r3
 8002276:	d3ec      	bcc.n	8002252 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002278:	883b      	ldrh	r3, [r7, #0]
 800227a:	0418      	lsls	r0, r3, #16
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6819      	ldr	r1, [r3, #0]
 8002280:	78fb      	ldrb	r3, [r7, #3]
 8002282:	3b01      	subs	r3, #1
 8002284:	68ba      	ldr	r2, [r7, #8]
 8002286:	4302      	orrs	r2, r0
 8002288:	3340      	adds	r3, #64	; 0x40
 800228a:	009b      	lsls	r3, r3, #2
 800228c:	440b      	add	r3, r1
 800228e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002290:	2300      	movs	r3, #0
}
 8002292:	4618      	mov	r0, r3
 8002294:	3714      	adds	r7, #20
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr

0800229e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800229e:	b480      	push	{r7}
 80022a0:	b083      	sub	sp, #12
 80022a2:	af00      	add	r7, sp, #0
 80022a4:	6078      	str	r0, [r7, #4]
 80022a6:	460b      	mov	r3, r1
 80022a8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	887a      	ldrh	r2, [r7, #2]
 80022b0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80022b2:	2300      	movs	r3, #0
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	370c      	adds	r7, #12
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr

080022c0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b083      	sub	sp, #12
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
 80022c8:	460b      	mov	r3, r1
 80022ca:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80022cc:	bf00      	nop
 80022ce:	370c      	adds	r7, #12
 80022d0:	46bd      	mov	sp, r7
 80022d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d6:	4770      	bx	lr

080022d8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b086      	sub	sp, #24
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d101      	bne.n	80022ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	e264      	b.n	80027b4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f003 0301 	and.w	r3, r3, #1
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d075      	beq.n	80023e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80022f6:	4ba3      	ldr	r3, [pc, #652]	; (8002584 <HAL_RCC_OscConfig+0x2ac>)
 80022f8:	689b      	ldr	r3, [r3, #8]
 80022fa:	f003 030c 	and.w	r3, r3, #12
 80022fe:	2b04      	cmp	r3, #4
 8002300:	d00c      	beq.n	800231c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002302:	4ba0      	ldr	r3, [pc, #640]	; (8002584 <HAL_RCC_OscConfig+0x2ac>)
 8002304:	689b      	ldr	r3, [r3, #8]
 8002306:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800230a:	2b08      	cmp	r3, #8
 800230c:	d112      	bne.n	8002334 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800230e:	4b9d      	ldr	r3, [pc, #628]	; (8002584 <HAL_RCC_OscConfig+0x2ac>)
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002316:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800231a:	d10b      	bne.n	8002334 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800231c:	4b99      	ldr	r3, [pc, #612]	; (8002584 <HAL_RCC_OscConfig+0x2ac>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002324:	2b00      	cmp	r3, #0
 8002326:	d05b      	beq.n	80023e0 <HAL_RCC_OscConfig+0x108>
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d157      	bne.n	80023e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002330:	2301      	movs	r3, #1
 8002332:	e23f      	b.n	80027b4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800233c:	d106      	bne.n	800234c <HAL_RCC_OscConfig+0x74>
 800233e:	4b91      	ldr	r3, [pc, #580]	; (8002584 <HAL_RCC_OscConfig+0x2ac>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a90      	ldr	r2, [pc, #576]	; (8002584 <HAL_RCC_OscConfig+0x2ac>)
 8002344:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002348:	6013      	str	r3, [r2, #0]
 800234a:	e01d      	b.n	8002388 <HAL_RCC_OscConfig+0xb0>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002354:	d10c      	bne.n	8002370 <HAL_RCC_OscConfig+0x98>
 8002356:	4b8b      	ldr	r3, [pc, #556]	; (8002584 <HAL_RCC_OscConfig+0x2ac>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a8a      	ldr	r2, [pc, #552]	; (8002584 <HAL_RCC_OscConfig+0x2ac>)
 800235c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002360:	6013      	str	r3, [r2, #0]
 8002362:	4b88      	ldr	r3, [pc, #544]	; (8002584 <HAL_RCC_OscConfig+0x2ac>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a87      	ldr	r2, [pc, #540]	; (8002584 <HAL_RCC_OscConfig+0x2ac>)
 8002368:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800236c:	6013      	str	r3, [r2, #0]
 800236e:	e00b      	b.n	8002388 <HAL_RCC_OscConfig+0xb0>
 8002370:	4b84      	ldr	r3, [pc, #528]	; (8002584 <HAL_RCC_OscConfig+0x2ac>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a83      	ldr	r2, [pc, #524]	; (8002584 <HAL_RCC_OscConfig+0x2ac>)
 8002376:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800237a:	6013      	str	r3, [r2, #0]
 800237c:	4b81      	ldr	r3, [pc, #516]	; (8002584 <HAL_RCC_OscConfig+0x2ac>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a80      	ldr	r2, [pc, #512]	; (8002584 <HAL_RCC_OscConfig+0x2ac>)
 8002382:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002386:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d013      	beq.n	80023b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002390:	f7fe fb26 	bl	80009e0 <HAL_GetTick>
 8002394:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002396:	e008      	b.n	80023aa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002398:	f7fe fb22 	bl	80009e0 <HAL_GetTick>
 800239c:	4602      	mov	r2, r0
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	1ad3      	subs	r3, r2, r3
 80023a2:	2b64      	cmp	r3, #100	; 0x64
 80023a4:	d901      	bls.n	80023aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80023a6:	2303      	movs	r3, #3
 80023a8:	e204      	b.n	80027b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023aa:	4b76      	ldr	r3, [pc, #472]	; (8002584 <HAL_RCC_OscConfig+0x2ac>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d0f0      	beq.n	8002398 <HAL_RCC_OscConfig+0xc0>
 80023b6:	e014      	b.n	80023e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023b8:	f7fe fb12 	bl	80009e0 <HAL_GetTick>
 80023bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023be:	e008      	b.n	80023d2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023c0:	f7fe fb0e 	bl	80009e0 <HAL_GetTick>
 80023c4:	4602      	mov	r2, r0
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	1ad3      	subs	r3, r2, r3
 80023ca:	2b64      	cmp	r3, #100	; 0x64
 80023cc:	d901      	bls.n	80023d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80023ce:	2303      	movs	r3, #3
 80023d0:	e1f0      	b.n	80027b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023d2:	4b6c      	ldr	r3, [pc, #432]	; (8002584 <HAL_RCC_OscConfig+0x2ac>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d1f0      	bne.n	80023c0 <HAL_RCC_OscConfig+0xe8>
 80023de:	e000      	b.n	80023e2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 0302 	and.w	r3, r3, #2
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d063      	beq.n	80024b6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80023ee:	4b65      	ldr	r3, [pc, #404]	; (8002584 <HAL_RCC_OscConfig+0x2ac>)
 80023f0:	689b      	ldr	r3, [r3, #8]
 80023f2:	f003 030c 	and.w	r3, r3, #12
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d00b      	beq.n	8002412 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023fa:	4b62      	ldr	r3, [pc, #392]	; (8002584 <HAL_RCC_OscConfig+0x2ac>)
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002402:	2b08      	cmp	r3, #8
 8002404:	d11c      	bne.n	8002440 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002406:	4b5f      	ldr	r3, [pc, #380]	; (8002584 <HAL_RCC_OscConfig+0x2ac>)
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800240e:	2b00      	cmp	r3, #0
 8002410:	d116      	bne.n	8002440 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002412:	4b5c      	ldr	r3, [pc, #368]	; (8002584 <HAL_RCC_OscConfig+0x2ac>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 0302 	and.w	r3, r3, #2
 800241a:	2b00      	cmp	r3, #0
 800241c:	d005      	beq.n	800242a <HAL_RCC_OscConfig+0x152>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	68db      	ldr	r3, [r3, #12]
 8002422:	2b01      	cmp	r3, #1
 8002424:	d001      	beq.n	800242a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	e1c4      	b.n	80027b4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800242a:	4b56      	ldr	r3, [pc, #344]	; (8002584 <HAL_RCC_OscConfig+0x2ac>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	691b      	ldr	r3, [r3, #16]
 8002436:	00db      	lsls	r3, r3, #3
 8002438:	4952      	ldr	r1, [pc, #328]	; (8002584 <HAL_RCC_OscConfig+0x2ac>)
 800243a:	4313      	orrs	r3, r2
 800243c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800243e:	e03a      	b.n	80024b6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	68db      	ldr	r3, [r3, #12]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d020      	beq.n	800248a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002448:	4b4f      	ldr	r3, [pc, #316]	; (8002588 <HAL_RCC_OscConfig+0x2b0>)
 800244a:	2201      	movs	r2, #1
 800244c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800244e:	f7fe fac7 	bl	80009e0 <HAL_GetTick>
 8002452:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002454:	e008      	b.n	8002468 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002456:	f7fe fac3 	bl	80009e0 <HAL_GetTick>
 800245a:	4602      	mov	r2, r0
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	1ad3      	subs	r3, r2, r3
 8002460:	2b02      	cmp	r3, #2
 8002462:	d901      	bls.n	8002468 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002464:	2303      	movs	r3, #3
 8002466:	e1a5      	b.n	80027b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002468:	4b46      	ldr	r3, [pc, #280]	; (8002584 <HAL_RCC_OscConfig+0x2ac>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f003 0302 	and.w	r3, r3, #2
 8002470:	2b00      	cmp	r3, #0
 8002472:	d0f0      	beq.n	8002456 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002474:	4b43      	ldr	r3, [pc, #268]	; (8002584 <HAL_RCC_OscConfig+0x2ac>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	691b      	ldr	r3, [r3, #16]
 8002480:	00db      	lsls	r3, r3, #3
 8002482:	4940      	ldr	r1, [pc, #256]	; (8002584 <HAL_RCC_OscConfig+0x2ac>)
 8002484:	4313      	orrs	r3, r2
 8002486:	600b      	str	r3, [r1, #0]
 8002488:	e015      	b.n	80024b6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800248a:	4b3f      	ldr	r3, [pc, #252]	; (8002588 <HAL_RCC_OscConfig+0x2b0>)
 800248c:	2200      	movs	r2, #0
 800248e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002490:	f7fe faa6 	bl	80009e0 <HAL_GetTick>
 8002494:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002496:	e008      	b.n	80024aa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002498:	f7fe faa2 	bl	80009e0 <HAL_GetTick>
 800249c:	4602      	mov	r2, r0
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	1ad3      	subs	r3, r2, r3
 80024a2:	2b02      	cmp	r3, #2
 80024a4:	d901      	bls.n	80024aa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80024a6:	2303      	movs	r3, #3
 80024a8:	e184      	b.n	80027b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024aa:	4b36      	ldr	r3, [pc, #216]	; (8002584 <HAL_RCC_OscConfig+0x2ac>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 0302 	and.w	r3, r3, #2
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d1f0      	bne.n	8002498 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f003 0308 	and.w	r3, r3, #8
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d030      	beq.n	8002524 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	695b      	ldr	r3, [r3, #20]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d016      	beq.n	80024f8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024ca:	4b30      	ldr	r3, [pc, #192]	; (800258c <HAL_RCC_OscConfig+0x2b4>)
 80024cc:	2201      	movs	r2, #1
 80024ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024d0:	f7fe fa86 	bl	80009e0 <HAL_GetTick>
 80024d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024d6:	e008      	b.n	80024ea <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024d8:	f7fe fa82 	bl	80009e0 <HAL_GetTick>
 80024dc:	4602      	mov	r2, r0
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	1ad3      	subs	r3, r2, r3
 80024e2:	2b02      	cmp	r3, #2
 80024e4:	d901      	bls.n	80024ea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80024e6:	2303      	movs	r3, #3
 80024e8:	e164      	b.n	80027b4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024ea:	4b26      	ldr	r3, [pc, #152]	; (8002584 <HAL_RCC_OscConfig+0x2ac>)
 80024ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024ee:	f003 0302 	and.w	r3, r3, #2
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d0f0      	beq.n	80024d8 <HAL_RCC_OscConfig+0x200>
 80024f6:	e015      	b.n	8002524 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024f8:	4b24      	ldr	r3, [pc, #144]	; (800258c <HAL_RCC_OscConfig+0x2b4>)
 80024fa:	2200      	movs	r2, #0
 80024fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024fe:	f7fe fa6f 	bl	80009e0 <HAL_GetTick>
 8002502:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002504:	e008      	b.n	8002518 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002506:	f7fe fa6b 	bl	80009e0 <HAL_GetTick>
 800250a:	4602      	mov	r2, r0
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	1ad3      	subs	r3, r2, r3
 8002510:	2b02      	cmp	r3, #2
 8002512:	d901      	bls.n	8002518 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002514:	2303      	movs	r3, #3
 8002516:	e14d      	b.n	80027b4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002518:	4b1a      	ldr	r3, [pc, #104]	; (8002584 <HAL_RCC_OscConfig+0x2ac>)
 800251a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800251c:	f003 0302 	and.w	r3, r3, #2
 8002520:	2b00      	cmp	r3, #0
 8002522:	d1f0      	bne.n	8002506 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f003 0304 	and.w	r3, r3, #4
 800252c:	2b00      	cmp	r3, #0
 800252e:	f000 80a0 	beq.w	8002672 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002532:	2300      	movs	r3, #0
 8002534:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002536:	4b13      	ldr	r3, [pc, #76]	; (8002584 <HAL_RCC_OscConfig+0x2ac>)
 8002538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800253a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800253e:	2b00      	cmp	r3, #0
 8002540:	d10f      	bne.n	8002562 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002542:	2300      	movs	r3, #0
 8002544:	60bb      	str	r3, [r7, #8]
 8002546:	4b0f      	ldr	r3, [pc, #60]	; (8002584 <HAL_RCC_OscConfig+0x2ac>)
 8002548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254a:	4a0e      	ldr	r2, [pc, #56]	; (8002584 <HAL_RCC_OscConfig+0x2ac>)
 800254c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002550:	6413      	str	r3, [r2, #64]	; 0x40
 8002552:	4b0c      	ldr	r3, [pc, #48]	; (8002584 <HAL_RCC_OscConfig+0x2ac>)
 8002554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002556:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800255a:	60bb      	str	r3, [r7, #8]
 800255c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800255e:	2301      	movs	r3, #1
 8002560:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002562:	4b0b      	ldr	r3, [pc, #44]	; (8002590 <HAL_RCC_OscConfig+0x2b8>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800256a:	2b00      	cmp	r3, #0
 800256c:	d121      	bne.n	80025b2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800256e:	4b08      	ldr	r3, [pc, #32]	; (8002590 <HAL_RCC_OscConfig+0x2b8>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a07      	ldr	r2, [pc, #28]	; (8002590 <HAL_RCC_OscConfig+0x2b8>)
 8002574:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002578:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800257a:	f7fe fa31 	bl	80009e0 <HAL_GetTick>
 800257e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002580:	e011      	b.n	80025a6 <HAL_RCC_OscConfig+0x2ce>
 8002582:	bf00      	nop
 8002584:	40023800 	.word	0x40023800
 8002588:	42470000 	.word	0x42470000
 800258c:	42470e80 	.word	0x42470e80
 8002590:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002594:	f7fe fa24 	bl	80009e0 <HAL_GetTick>
 8002598:	4602      	mov	r2, r0
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	1ad3      	subs	r3, r2, r3
 800259e:	2b02      	cmp	r3, #2
 80025a0:	d901      	bls.n	80025a6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80025a2:	2303      	movs	r3, #3
 80025a4:	e106      	b.n	80027b4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025a6:	4b85      	ldr	r3, [pc, #532]	; (80027bc <HAL_RCC_OscConfig+0x4e4>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d0f0      	beq.n	8002594 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	689b      	ldr	r3, [r3, #8]
 80025b6:	2b01      	cmp	r3, #1
 80025b8:	d106      	bne.n	80025c8 <HAL_RCC_OscConfig+0x2f0>
 80025ba:	4b81      	ldr	r3, [pc, #516]	; (80027c0 <HAL_RCC_OscConfig+0x4e8>)
 80025bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025be:	4a80      	ldr	r2, [pc, #512]	; (80027c0 <HAL_RCC_OscConfig+0x4e8>)
 80025c0:	f043 0301 	orr.w	r3, r3, #1
 80025c4:	6713      	str	r3, [r2, #112]	; 0x70
 80025c6:	e01c      	b.n	8002602 <HAL_RCC_OscConfig+0x32a>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	2b05      	cmp	r3, #5
 80025ce:	d10c      	bne.n	80025ea <HAL_RCC_OscConfig+0x312>
 80025d0:	4b7b      	ldr	r3, [pc, #492]	; (80027c0 <HAL_RCC_OscConfig+0x4e8>)
 80025d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025d4:	4a7a      	ldr	r2, [pc, #488]	; (80027c0 <HAL_RCC_OscConfig+0x4e8>)
 80025d6:	f043 0304 	orr.w	r3, r3, #4
 80025da:	6713      	str	r3, [r2, #112]	; 0x70
 80025dc:	4b78      	ldr	r3, [pc, #480]	; (80027c0 <HAL_RCC_OscConfig+0x4e8>)
 80025de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025e0:	4a77      	ldr	r2, [pc, #476]	; (80027c0 <HAL_RCC_OscConfig+0x4e8>)
 80025e2:	f043 0301 	orr.w	r3, r3, #1
 80025e6:	6713      	str	r3, [r2, #112]	; 0x70
 80025e8:	e00b      	b.n	8002602 <HAL_RCC_OscConfig+0x32a>
 80025ea:	4b75      	ldr	r3, [pc, #468]	; (80027c0 <HAL_RCC_OscConfig+0x4e8>)
 80025ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025ee:	4a74      	ldr	r2, [pc, #464]	; (80027c0 <HAL_RCC_OscConfig+0x4e8>)
 80025f0:	f023 0301 	bic.w	r3, r3, #1
 80025f4:	6713      	str	r3, [r2, #112]	; 0x70
 80025f6:	4b72      	ldr	r3, [pc, #456]	; (80027c0 <HAL_RCC_OscConfig+0x4e8>)
 80025f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025fa:	4a71      	ldr	r2, [pc, #452]	; (80027c0 <HAL_RCC_OscConfig+0x4e8>)
 80025fc:	f023 0304 	bic.w	r3, r3, #4
 8002600:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	689b      	ldr	r3, [r3, #8]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d015      	beq.n	8002636 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800260a:	f7fe f9e9 	bl	80009e0 <HAL_GetTick>
 800260e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002610:	e00a      	b.n	8002628 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002612:	f7fe f9e5 	bl	80009e0 <HAL_GetTick>
 8002616:	4602      	mov	r2, r0
 8002618:	693b      	ldr	r3, [r7, #16]
 800261a:	1ad3      	subs	r3, r2, r3
 800261c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002620:	4293      	cmp	r3, r2
 8002622:	d901      	bls.n	8002628 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002624:	2303      	movs	r3, #3
 8002626:	e0c5      	b.n	80027b4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002628:	4b65      	ldr	r3, [pc, #404]	; (80027c0 <HAL_RCC_OscConfig+0x4e8>)
 800262a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800262c:	f003 0302 	and.w	r3, r3, #2
 8002630:	2b00      	cmp	r3, #0
 8002632:	d0ee      	beq.n	8002612 <HAL_RCC_OscConfig+0x33a>
 8002634:	e014      	b.n	8002660 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002636:	f7fe f9d3 	bl	80009e0 <HAL_GetTick>
 800263a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800263c:	e00a      	b.n	8002654 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800263e:	f7fe f9cf 	bl	80009e0 <HAL_GetTick>
 8002642:	4602      	mov	r2, r0
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	1ad3      	subs	r3, r2, r3
 8002648:	f241 3288 	movw	r2, #5000	; 0x1388
 800264c:	4293      	cmp	r3, r2
 800264e:	d901      	bls.n	8002654 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002650:	2303      	movs	r3, #3
 8002652:	e0af      	b.n	80027b4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002654:	4b5a      	ldr	r3, [pc, #360]	; (80027c0 <HAL_RCC_OscConfig+0x4e8>)
 8002656:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002658:	f003 0302 	and.w	r3, r3, #2
 800265c:	2b00      	cmp	r3, #0
 800265e:	d1ee      	bne.n	800263e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002660:	7dfb      	ldrb	r3, [r7, #23]
 8002662:	2b01      	cmp	r3, #1
 8002664:	d105      	bne.n	8002672 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002666:	4b56      	ldr	r3, [pc, #344]	; (80027c0 <HAL_RCC_OscConfig+0x4e8>)
 8002668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266a:	4a55      	ldr	r2, [pc, #340]	; (80027c0 <HAL_RCC_OscConfig+0x4e8>)
 800266c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002670:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	699b      	ldr	r3, [r3, #24]
 8002676:	2b00      	cmp	r3, #0
 8002678:	f000 809b 	beq.w	80027b2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800267c:	4b50      	ldr	r3, [pc, #320]	; (80027c0 <HAL_RCC_OscConfig+0x4e8>)
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	f003 030c 	and.w	r3, r3, #12
 8002684:	2b08      	cmp	r3, #8
 8002686:	d05c      	beq.n	8002742 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	699b      	ldr	r3, [r3, #24]
 800268c:	2b02      	cmp	r3, #2
 800268e:	d141      	bne.n	8002714 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002690:	4b4c      	ldr	r3, [pc, #304]	; (80027c4 <HAL_RCC_OscConfig+0x4ec>)
 8002692:	2200      	movs	r2, #0
 8002694:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002696:	f7fe f9a3 	bl	80009e0 <HAL_GetTick>
 800269a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800269c:	e008      	b.n	80026b0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800269e:	f7fe f99f 	bl	80009e0 <HAL_GetTick>
 80026a2:	4602      	mov	r2, r0
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	1ad3      	subs	r3, r2, r3
 80026a8:	2b02      	cmp	r3, #2
 80026aa:	d901      	bls.n	80026b0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80026ac:	2303      	movs	r3, #3
 80026ae:	e081      	b.n	80027b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026b0:	4b43      	ldr	r3, [pc, #268]	; (80027c0 <HAL_RCC_OscConfig+0x4e8>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d1f0      	bne.n	800269e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	69da      	ldr	r2, [r3, #28]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6a1b      	ldr	r3, [r3, #32]
 80026c4:	431a      	orrs	r2, r3
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ca:	019b      	lsls	r3, r3, #6
 80026cc:	431a      	orrs	r2, r3
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026d2:	085b      	lsrs	r3, r3, #1
 80026d4:	3b01      	subs	r3, #1
 80026d6:	041b      	lsls	r3, r3, #16
 80026d8:	431a      	orrs	r2, r3
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026de:	061b      	lsls	r3, r3, #24
 80026e0:	4937      	ldr	r1, [pc, #220]	; (80027c0 <HAL_RCC_OscConfig+0x4e8>)
 80026e2:	4313      	orrs	r3, r2
 80026e4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026e6:	4b37      	ldr	r3, [pc, #220]	; (80027c4 <HAL_RCC_OscConfig+0x4ec>)
 80026e8:	2201      	movs	r2, #1
 80026ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026ec:	f7fe f978 	bl	80009e0 <HAL_GetTick>
 80026f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026f2:	e008      	b.n	8002706 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026f4:	f7fe f974 	bl	80009e0 <HAL_GetTick>
 80026f8:	4602      	mov	r2, r0
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	1ad3      	subs	r3, r2, r3
 80026fe:	2b02      	cmp	r3, #2
 8002700:	d901      	bls.n	8002706 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002702:	2303      	movs	r3, #3
 8002704:	e056      	b.n	80027b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002706:	4b2e      	ldr	r3, [pc, #184]	; (80027c0 <HAL_RCC_OscConfig+0x4e8>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800270e:	2b00      	cmp	r3, #0
 8002710:	d0f0      	beq.n	80026f4 <HAL_RCC_OscConfig+0x41c>
 8002712:	e04e      	b.n	80027b2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002714:	4b2b      	ldr	r3, [pc, #172]	; (80027c4 <HAL_RCC_OscConfig+0x4ec>)
 8002716:	2200      	movs	r2, #0
 8002718:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800271a:	f7fe f961 	bl	80009e0 <HAL_GetTick>
 800271e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002720:	e008      	b.n	8002734 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002722:	f7fe f95d 	bl	80009e0 <HAL_GetTick>
 8002726:	4602      	mov	r2, r0
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	1ad3      	subs	r3, r2, r3
 800272c:	2b02      	cmp	r3, #2
 800272e:	d901      	bls.n	8002734 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002730:	2303      	movs	r3, #3
 8002732:	e03f      	b.n	80027b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002734:	4b22      	ldr	r3, [pc, #136]	; (80027c0 <HAL_RCC_OscConfig+0x4e8>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800273c:	2b00      	cmp	r3, #0
 800273e:	d1f0      	bne.n	8002722 <HAL_RCC_OscConfig+0x44a>
 8002740:	e037      	b.n	80027b2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	699b      	ldr	r3, [r3, #24]
 8002746:	2b01      	cmp	r3, #1
 8002748:	d101      	bne.n	800274e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	e032      	b.n	80027b4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800274e:	4b1c      	ldr	r3, [pc, #112]	; (80027c0 <HAL_RCC_OscConfig+0x4e8>)
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	699b      	ldr	r3, [r3, #24]
 8002758:	2b01      	cmp	r3, #1
 800275a:	d028      	beq.n	80027ae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002766:	429a      	cmp	r2, r3
 8002768:	d121      	bne.n	80027ae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002774:	429a      	cmp	r2, r3
 8002776:	d11a      	bne.n	80027ae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002778:	68fa      	ldr	r2, [r7, #12]
 800277a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800277e:	4013      	ands	r3, r2
 8002780:	687a      	ldr	r2, [r7, #4]
 8002782:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002784:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002786:	4293      	cmp	r3, r2
 8002788:	d111      	bne.n	80027ae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002794:	085b      	lsrs	r3, r3, #1
 8002796:	3b01      	subs	r3, #1
 8002798:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800279a:	429a      	cmp	r2, r3
 800279c:	d107      	bne.n	80027ae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027a8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80027aa:	429a      	cmp	r2, r3
 80027ac:	d001      	beq.n	80027b2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	e000      	b.n	80027b4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80027b2:	2300      	movs	r3, #0
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	3718      	adds	r7, #24
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}
 80027bc:	40007000 	.word	0x40007000
 80027c0:	40023800 	.word	0x40023800
 80027c4:	42470060 	.word	0x42470060

080027c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b084      	sub	sp, #16
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
 80027d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d101      	bne.n	80027dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027d8:	2301      	movs	r3, #1
 80027da:	e0cc      	b.n	8002976 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80027dc:	4b68      	ldr	r3, [pc, #416]	; (8002980 <HAL_RCC_ClockConfig+0x1b8>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f003 0307 	and.w	r3, r3, #7
 80027e4:	683a      	ldr	r2, [r7, #0]
 80027e6:	429a      	cmp	r2, r3
 80027e8:	d90c      	bls.n	8002804 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027ea:	4b65      	ldr	r3, [pc, #404]	; (8002980 <HAL_RCC_ClockConfig+0x1b8>)
 80027ec:	683a      	ldr	r2, [r7, #0]
 80027ee:	b2d2      	uxtb	r2, r2
 80027f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027f2:	4b63      	ldr	r3, [pc, #396]	; (8002980 <HAL_RCC_ClockConfig+0x1b8>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 0307 	and.w	r3, r3, #7
 80027fa:	683a      	ldr	r2, [r7, #0]
 80027fc:	429a      	cmp	r2, r3
 80027fe:	d001      	beq.n	8002804 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	e0b8      	b.n	8002976 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 0302 	and.w	r3, r3, #2
 800280c:	2b00      	cmp	r3, #0
 800280e:	d020      	beq.n	8002852 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 0304 	and.w	r3, r3, #4
 8002818:	2b00      	cmp	r3, #0
 800281a:	d005      	beq.n	8002828 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800281c:	4b59      	ldr	r3, [pc, #356]	; (8002984 <HAL_RCC_ClockConfig+0x1bc>)
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	4a58      	ldr	r2, [pc, #352]	; (8002984 <HAL_RCC_ClockConfig+0x1bc>)
 8002822:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002826:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f003 0308 	and.w	r3, r3, #8
 8002830:	2b00      	cmp	r3, #0
 8002832:	d005      	beq.n	8002840 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002834:	4b53      	ldr	r3, [pc, #332]	; (8002984 <HAL_RCC_ClockConfig+0x1bc>)
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	4a52      	ldr	r2, [pc, #328]	; (8002984 <HAL_RCC_ClockConfig+0x1bc>)
 800283a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800283e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002840:	4b50      	ldr	r3, [pc, #320]	; (8002984 <HAL_RCC_ClockConfig+0x1bc>)
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	494d      	ldr	r1, [pc, #308]	; (8002984 <HAL_RCC_ClockConfig+0x1bc>)
 800284e:	4313      	orrs	r3, r2
 8002850:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f003 0301 	and.w	r3, r3, #1
 800285a:	2b00      	cmp	r3, #0
 800285c:	d044      	beq.n	80028e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	2b01      	cmp	r3, #1
 8002864:	d107      	bne.n	8002876 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002866:	4b47      	ldr	r3, [pc, #284]	; (8002984 <HAL_RCC_ClockConfig+0x1bc>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800286e:	2b00      	cmp	r3, #0
 8002870:	d119      	bne.n	80028a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	e07f      	b.n	8002976 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	2b02      	cmp	r3, #2
 800287c:	d003      	beq.n	8002886 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002882:	2b03      	cmp	r3, #3
 8002884:	d107      	bne.n	8002896 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002886:	4b3f      	ldr	r3, [pc, #252]	; (8002984 <HAL_RCC_ClockConfig+0x1bc>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800288e:	2b00      	cmp	r3, #0
 8002890:	d109      	bne.n	80028a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	e06f      	b.n	8002976 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002896:	4b3b      	ldr	r3, [pc, #236]	; (8002984 <HAL_RCC_ClockConfig+0x1bc>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f003 0302 	and.w	r3, r3, #2
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d101      	bne.n	80028a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	e067      	b.n	8002976 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028a6:	4b37      	ldr	r3, [pc, #220]	; (8002984 <HAL_RCC_ClockConfig+0x1bc>)
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	f023 0203 	bic.w	r2, r3, #3
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	4934      	ldr	r1, [pc, #208]	; (8002984 <HAL_RCC_ClockConfig+0x1bc>)
 80028b4:	4313      	orrs	r3, r2
 80028b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028b8:	f7fe f892 	bl	80009e0 <HAL_GetTick>
 80028bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028be:	e00a      	b.n	80028d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028c0:	f7fe f88e 	bl	80009e0 <HAL_GetTick>
 80028c4:	4602      	mov	r2, r0
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	1ad3      	subs	r3, r2, r3
 80028ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d901      	bls.n	80028d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80028d2:	2303      	movs	r3, #3
 80028d4:	e04f      	b.n	8002976 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028d6:	4b2b      	ldr	r3, [pc, #172]	; (8002984 <HAL_RCC_ClockConfig+0x1bc>)
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	f003 020c 	and.w	r2, r3, #12
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	009b      	lsls	r3, r3, #2
 80028e4:	429a      	cmp	r2, r3
 80028e6:	d1eb      	bne.n	80028c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80028e8:	4b25      	ldr	r3, [pc, #148]	; (8002980 <HAL_RCC_ClockConfig+0x1b8>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f003 0307 	and.w	r3, r3, #7
 80028f0:	683a      	ldr	r2, [r7, #0]
 80028f2:	429a      	cmp	r2, r3
 80028f4:	d20c      	bcs.n	8002910 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028f6:	4b22      	ldr	r3, [pc, #136]	; (8002980 <HAL_RCC_ClockConfig+0x1b8>)
 80028f8:	683a      	ldr	r2, [r7, #0]
 80028fa:	b2d2      	uxtb	r2, r2
 80028fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028fe:	4b20      	ldr	r3, [pc, #128]	; (8002980 <HAL_RCC_ClockConfig+0x1b8>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 0307 	and.w	r3, r3, #7
 8002906:	683a      	ldr	r2, [r7, #0]
 8002908:	429a      	cmp	r2, r3
 800290a:	d001      	beq.n	8002910 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800290c:	2301      	movs	r3, #1
 800290e:	e032      	b.n	8002976 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f003 0304 	and.w	r3, r3, #4
 8002918:	2b00      	cmp	r3, #0
 800291a:	d008      	beq.n	800292e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800291c:	4b19      	ldr	r3, [pc, #100]	; (8002984 <HAL_RCC_ClockConfig+0x1bc>)
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	68db      	ldr	r3, [r3, #12]
 8002928:	4916      	ldr	r1, [pc, #88]	; (8002984 <HAL_RCC_ClockConfig+0x1bc>)
 800292a:	4313      	orrs	r3, r2
 800292c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f003 0308 	and.w	r3, r3, #8
 8002936:	2b00      	cmp	r3, #0
 8002938:	d009      	beq.n	800294e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800293a:	4b12      	ldr	r3, [pc, #72]	; (8002984 <HAL_RCC_ClockConfig+0x1bc>)
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	691b      	ldr	r3, [r3, #16]
 8002946:	00db      	lsls	r3, r3, #3
 8002948:	490e      	ldr	r1, [pc, #56]	; (8002984 <HAL_RCC_ClockConfig+0x1bc>)
 800294a:	4313      	orrs	r3, r2
 800294c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800294e:	f000 f821 	bl	8002994 <HAL_RCC_GetSysClockFreq>
 8002952:	4602      	mov	r2, r0
 8002954:	4b0b      	ldr	r3, [pc, #44]	; (8002984 <HAL_RCC_ClockConfig+0x1bc>)
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	091b      	lsrs	r3, r3, #4
 800295a:	f003 030f 	and.w	r3, r3, #15
 800295e:	490a      	ldr	r1, [pc, #40]	; (8002988 <HAL_RCC_ClockConfig+0x1c0>)
 8002960:	5ccb      	ldrb	r3, [r1, r3]
 8002962:	fa22 f303 	lsr.w	r3, r2, r3
 8002966:	4a09      	ldr	r2, [pc, #36]	; (800298c <HAL_RCC_ClockConfig+0x1c4>)
 8002968:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800296a:	4b09      	ldr	r3, [pc, #36]	; (8002990 <HAL_RCC_ClockConfig+0x1c8>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4618      	mov	r0, r3
 8002970:	f7fd fff2 	bl	8000958 <HAL_InitTick>

  return HAL_OK;
 8002974:	2300      	movs	r3, #0
}
 8002976:	4618      	mov	r0, r3
 8002978:	3710      	adds	r7, #16
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}
 800297e:	bf00      	nop
 8002980:	40023c00 	.word	0x40023c00
 8002984:	40023800 	.word	0x40023800
 8002988:	08006e90 	.word	0x08006e90
 800298c:	2000001c 	.word	0x2000001c
 8002990:	20000020 	.word	0x20000020

08002994 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002994:	b5b0      	push	{r4, r5, r7, lr}
 8002996:	b084      	sub	sp, #16
 8002998:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800299a:	2100      	movs	r1, #0
 800299c:	6079      	str	r1, [r7, #4]
 800299e:	2100      	movs	r1, #0
 80029a0:	60f9      	str	r1, [r7, #12]
 80029a2:	2100      	movs	r1, #0
 80029a4:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80029a6:	2100      	movs	r1, #0
 80029a8:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80029aa:	4952      	ldr	r1, [pc, #328]	; (8002af4 <HAL_RCC_GetSysClockFreq+0x160>)
 80029ac:	6889      	ldr	r1, [r1, #8]
 80029ae:	f001 010c 	and.w	r1, r1, #12
 80029b2:	2908      	cmp	r1, #8
 80029b4:	d00d      	beq.n	80029d2 <HAL_RCC_GetSysClockFreq+0x3e>
 80029b6:	2908      	cmp	r1, #8
 80029b8:	f200 8094 	bhi.w	8002ae4 <HAL_RCC_GetSysClockFreq+0x150>
 80029bc:	2900      	cmp	r1, #0
 80029be:	d002      	beq.n	80029c6 <HAL_RCC_GetSysClockFreq+0x32>
 80029c0:	2904      	cmp	r1, #4
 80029c2:	d003      	beq.n	80029cc <HAL_RCC_GetSysClockFreq+0x38>
 80029c4:	e08e      	b.n	8002ae4 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80029c6:	4b4c      	ldr	r3, [pc, #304]	; (8002af8 <HAL_RCC_GetSysClockFreq+0x164>)
 80029c8:	60bb      	str	r3, [r7, #8]
       break;
 80029ca:	e08e      	b.n	8002aea <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80029cc:	4b4b      	ldr	r3, [pc, #300]	; (8002afc <HAL_RCC_GetSysClockFreq+0x168>)
 80029ce:	60bb      	str	r3, [r7, #8]
      break;
 80029d0:	e08b      	b.n	8002aea <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80029d2:	4948      	ldr	r1, [pc, #288]	; (8002af4 <HAL_RCC_GetSysClockFreq+0x160>)
 80029d4:	6849      	ldr	r1, [r1, #4]
 80029d6:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80029da:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80029dc:	4945      	ldr	r1, [pc, #276]	; (8002af4 <HAL_RCC_GetSysClockFreq+0x160>)
 80029de:	6849      	ldr	r1, [r1, #4]
 80029e0:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80029e4:	2900      	cmp	r1, #0
 80029e6:	d024      	beq.n	8002a32 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029e8:	4942      	ldr	r1, [pc, #264]	; (8002af4 <HAL_RCC_GetSysClockFreq+0x160>)
 80029ea:	6849      	ldr	r1, [r1, #4]
 80029ec:	0989      	lsrs	r1, r1, #6
 80029ee:	4608      	mov	r0, r1
 80029f0:	f04f 0100 	mov.w	r1, #0
 80029f4:	f240 14ff 	movw	r4, #511	; 0x1ff
 80029f8:	f04f 0500 	mov.w	r5, #0
 80029fc:	ea00 0204 	and.w	r2, r0, r4
 8002a00:	ea01 0305 	and.w	r3, r1, r5
 8002a04:	493d      	ldr	r1, [pc, #244]	; (8002afc <HAL_RCC_GetSysClockFreq+0x168>)
 8002a06:	fb01 f003 	mul.w	r0, r1, r3
 8002a0a:	2100      	movs	r1, #0
 8002a0c:	fb01 f102 	mul.w	r1, r1, r2
 8002a10:	1844      	adds	r4, r0, r1
 8002a12:	493a      	ldr	r1, [pc, #232]	; (8002afc <HAL_RCC_GetSysClockFreq+0x168>)
 8002a14:	fba2 0101 	umull	r0, r1, r2, r1
 8002a18:	1863      	adds	r3, r4, r1
 8002a1a:	4619      	mov	r1, r3
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	461a      	mov	r2, r3
 8002a20:	f04f 0300 	mov.w	r3, #0
 8002a24:	f7fd fbd6 	bl	80001d4 <__aeabi_uldivmod>
 8002a28:	4602      	mov	r2, r0
 8002a2a:	460b      	mov	r3, r1
 8002a2c:	4613      	mov	r3, r2
 8002a2e:	60fb      	str	r3, [r7, #12]
 8002a30:	e04a      	b.n	8002ac8 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a32:	4b30      	ldr	r3, [pc, #192]	; (8002af4 <HAL_RCC_GetSysClockFreq+0x160>)
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	099b      	lsrs	r3, r3, #6
 8002a38:	461a      	mov	r2, r3
 8002a3a:	f04f 0300 	mov.w	r3, #0
 8002a3e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002a42:	f04f 0100 	mov.w	r1, #0
 8002a46:	ea02 0400 	and.w	r4, r2, r0
 8002a4a:	ea03 0501 	and.w	r5, r3, r1
 8002a4e:	4620      	mov	r0, r4
 8002a50:	4629      	mov	r1, r5
 8002a52:	f04f 0200 	mov.w	r2, #0
 8002a56:	f04f 0300 	mov.w	r3, #0
 8002a5a:	014b      	lsls	r3, r1, #5
 8002a5c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002a60:	0142      	lsls	r2, r0, #5
 8002a62:	4610      	mov	r0, r2
 8002a64:	4619      	mov	r1, r3
 8002a66:	1b00      	subs	r0, r0, r4
 8002a68:	eb61 0105 	sbc.w	r1, r1, r5
 8002a6c:	f04f 0200 	mov.w	r2, #0
 8002a70:	f04f 0300 	mov.w	r3, #0
 8002a74:	018b      	lsls	r3, r1, #6
 8002a76:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002a7a:	0182      	lsls	r2, r0, #6
 8002a7c:	1a12      	subs	r2, r2, r0
 8002a7e:	eb63 0301 	sbc.w	r3, r3, r1
 8002a82:	f04f 0000 	mov.w	r0, #0
 8002a86:	f04f 0100 	mov.w	r1, #0
 8002a8a:	00d9      	lsls	r1, r3, #3
 8002a8c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002a90:	00d0      	lsls	r0, r2, #3
 8002a92:	4602      	mov	r2, r0
 8002a94:	460b      	mov	r3, r1
 8002a96:	1912      	adds	r2, r2, r4
 8002a98:	eb45 0303 	adc.w	r3, r5, r3
 8002a9c:	f04f 0000 	mov.w	r0, #0
 8002aa0:	f04f 0100 	mov.w	r1, #0
 8002aa4:	0299      	lsls	r1, r3, #10
 8002aa6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002aaa:	0290      	lsls	r0, r2, #10
 8002aac:	4602      	mov	r2, r0
 8002aae:	460b      	mov	r3, r1
 8002ab0:	4610      	mov	r0, r2
 8002ab2:	4619      	mov	r1, r3
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	461a      	mov	r2, r3
 8002ab8:	f04f 0300 	mov.w	r3, #0
 8002abc:	f7fd fb8a 	bl	80001d4 <__aeabi_uldivmod>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	460b      	mov	r3, r1
 8002ac4:	4613      	mov	r3, r2
 8002ac6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002ac8:	4b0a      	ldr	r3, [pc, #40]	; (8002af4 <HAL_RCC_GetSysClockFreq+0x160>)
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	0c1b      	lsrs	r3, r3, #16
 8002ace:	f003 0303 	and.w	r3, r3, #3
 8002ad2:	3301      	adds	r3, #1
 8002ad4:	005b      	lsls	r3, r3, #1
 8002ad6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002ad8:	68fa      	ldr	r2, [r7, #12]
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ae0:	60bb      	str	r3, [r7, #8]
      break;
 8002ae2:	e002      	b.n	8002aea <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ae4:	4b04      	ldr	r3, [pc, #16]	; (8002af8 <HAL_RCC_GetSysClockFreq+0x164>)
 8002ae6:	60bb      	str	r3, [r7, #8]
      break;
 8002ae8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002aea:	68bb      	ldr	r3, [r7, #8]
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	3710      	adds	r7, #16
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bdb0      	pop	{r4, r5, r7, pc}
 8002af4:	40023800 	.word	0x40023800
 8002af8:	00f42400 	.word	0x00f42400
 8002afc:	017d7840 	.word	0x017d7840

08002b00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b00:	b480      	push	{r7}
 8002b02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b04:	4b03      	ldr	r3, [pc, #12]	; (8002b14 <HAL_RCC_GetHCLKFreq+0x14>)
 8002b06:	681b      	ldr	r3, [r3, #0]
}
 8002b08:	4618      	mov	r0, r3
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b10:	4770      	bx	lr
 8002b12:	bf00      	nop
 8002b14:	2000001c 	.word	0x2000001c

08002b18 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b082      	sub	sp, #8
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d101      	bne.n	8002b2a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	e041      	b.n	8002bae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d106      	bne.n	8002b44 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b3e:	6878      	ldr	r0, [r7, #4]
 8002b40:	f7fd fe46 	bl	80007d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2202      	movs	r2, #2
 8002b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681a      	ldr	r2, [r3, #0]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	3304      	adds	r3, #4
 8002b54:	4619      	mov	r1, r3
 8002b56:	4610      	mov	r0, r2
 8002b58:	f000 fa88 	bl	800306c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2201      	movs	r2, #1
 8002b60:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2201      	movs	r2, #1
 8002b68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2201      	movs	r2, #1
 8002b70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2201      	movs	r2, #1
 8002b78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2201      	movs	r2, #1
 8002b80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2201      	movs	r2, #1
 8002b88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2201      	movs	r2, #1
 8002b90:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2201      	movs	r2, #1
 8002b98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002bac:	2300      	movs	r3, #0
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	3708      	adds	r7, #8
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}
	...

08002bb8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b085      	sub	sp, #20
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bc6:	b2db      	uxtb	r3, r3
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	d001      	beq.n	8002bd0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	e044      	b.n	8002c5a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2202      	movs	r2, #2
 8002bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	68da      	ldr	r2, [r3, #12]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f042 0201 	orr.w	r2, r2, #1
 8002be6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a1e      	ldr	r2, [pc, #120]	; (8002c68 <HAL_TIM_Base_Start_IT+0xb0>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d018      	beq.n	8002c24 <HAL_TIM_Base_Start_IT+0x6c>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bfa:	d013      	beq.n	8002c24 <HAL_TIM_Base_Start_IT+0x6c>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a1a      	ldr	r2, [pc, #104]	; (8002c6c <HAL_TIM_Base_Start_IT+0xb4>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d00e      	beq.n	8002c24 <HAL_TIM_Base_Start_IT+0x6c>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a19      	ldr	r2, [pc, #100]	; (8002c70 <HAL_TIM_Base_Start_IT+0xb8>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d009      	beq.n	8002c24 <HAL_TIM_Base_Start_IT+0x6c>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a17      	ldr	r2, [pc, #92]	; (8002c74 <HAL_TIM_Base_Start_IT+0xbc>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d004      	beq.n	8002c24 <HAL_TIM_Base_Start_IT+0x6c>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a16      	ldr	r2, [pc, #88]	; (8002c78 <HAL_TIM_Base_Start_IT+0xc0>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d111      	bne.n	8002c48 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	f003 0307 	and.w	r3, r3, #7
 8002c2e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	2b06      	cmp	r3, #6
 8002c34:	d010      	beq.n	8002c58 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f042 0201 	orr.w	r2, r2, #1
 8002c44:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c46:	e007      	b.n	8002c58 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f042 0201 	orr.w	r2, r2, #1
 8002c56:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c58:	2300      	movs	r3, #0
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	3714      	adds	r7, #20
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr
 8002c66:	bf00      	nop
 8002c68:	40010000 	.word	0x40010000
 8002c6c:	40000400 	.word	0x40000400
 8002c70:	40000800 	.word	0x40000800
 8002c74:	40000c00 	.word	0x40000c00
 8002c78:	40014000 	.word	0x40014000

08002c7c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b082      	sub	sp, #8
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	691b      	ldr	r3, [r3, #16]
 8002c8a:	f003 0302 	and.w	r3, r3, #2
 8002c8e:	2b02      	cmp	r3, #2
 8002c90:	d122      	bne.n	8002cd8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	68db      	ldr	r3, [r3, #12]
 8002c98:	f003 0302 	and.w	r3, r3, #2
 8002c9c:	2b02      	cmp	r3, #2
 8002c9e:	d11b      	bne.n	8002cd8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f06f 0202 	mvn.w	r2, #2
 8002ca8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2201      	movs	r2, #1
 8002cae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	699b      	ldr	r3, [r3, #24]
 8002cb6:	f003 0303 	and.w	r3, r3, #3
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d003      	beq.n	8002cc6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002cbe:	6878      	ldr	r0, [r7, #4]
 8002cc0:	f000 f9b5 	bl	800302e <HAL_TIM_IC_CaptureCallback>
 8002cc4:	e005      	b.n	8002cd2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	f000 f9a7 	bl	800301a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ccc:	6878      	ldr	r0, [r7, #4]
 8002cce:	f000 f9b8 	bl	8003042 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	691b      	ldr	r3, [r3, #16]
 8002cde:	f003 0304 	and.w	r3, r3, #4
 8002ce2:	2b04      	cmp	r3, #4
 8002ce4:	d122      	bne.n	8002d2c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	68db      	ldr	r3, [r3, #12]
 8002cec:	f003 0304 	and.w	r3, r3, #4
 8002cf0:	2b04      	cmp	r3, #4
 8002cf2:	d11b      	bne.n	8002d2c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f06f 0204 	mvn.w	r2, #4
 8002cfc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2202      	movs	r2, #2
 8002d02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	699b      	ldr	r3, [r3, #24]
 8002d0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d003      	beq.n	8002d1a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d12:	6878      	ldr	r0, [r7, #4]
 8002d14:	f000 f98b 	bl	800302e <HAL_TIM_IC_CaptureCallback>
 8002d18:	e005      	b.n	8002d26 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	f000 f97d 	bl	800301a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d20:	6878      	ldr	r0, [r7, #4]
 8002d22:	f000 f98e 	bl	8003042 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	691b      	ldr	r3, [r3, #16]
 8002d32:	f003 0308 	and.w	r3, r3, #8
 8002d36:	2b08      	cmp	r3, #8
 8002d38:	d122      	bne.n	8002d80 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	68db      	ldr	r3, [r3, #12]
 8002d40:	f003 0308 	and.w	r3, r3, #8
 8002d44:	2b08      	cmp	r3, #8
 8002d46:	d11b      	bne.n	8002d80 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f06f 0208 	mvn.w	r2, #8
 8002d50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2204      	movs	r2, #4
 8002d56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	69db      	ldr	r3, [r3, #28]
 8002d5e:	f003 0303 	and.w	r3, r3, #3
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d003      	beq.n	8002d6e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	f000 f961 	bl	800302e <HAL_TIM_IC_CaptureCallback>
 8002d6c:	e005      	b.n	8002d7a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d6e:	6878      	ldr	r0, [r7, #4]
 8002d70:	f000 f953 	bl	800301a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d74:	6878      	ldr	r0, [r7, #4]
 8002d76:	f000 f964 	bl	8003042 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	691b      	ldr	r3, [r3, #16]
 8002d86:	f003 0310 	and.w	r3, r3, #16
 8002d8a:	2b10      	cmp	r3, #16
 8002d8c:	d122      	bne.n	8002dd4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	68db      	ldr	r3, [r3, #12]
 8002d94:	f003 0310 	and.w	r3, r3, #16
 8002d98:	2b10      	cmp	r3, #16
 8002d9a:	d11b      	bne.n	8002dd4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f06f 0210 	mvn.w	r2, #16
 8002da4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2208      	movs	r2, #8
 8002daa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	69db      	ldr	r3, [r3, #28]
 8002db2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d003      	beq.n	8002dc2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	f000 f937 	bl	800302e <HAL_TIM_IC_CaptureCallback>
 8002dc0:	e005      	b.n	8002dce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dc2:	6878      	ldr	r0, [r7, #4]
 8002dc4:	f000 f929 	bl	800301a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002dc8:	6878      	ldr	r0, [r7, #4]
 8002dca:	f000 f93a 	bl	8003042 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	691b      	ldr	r3, [r3, #16]
 8002dda:	f003 0301 	and.w	r3, r3, #1
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	d10e      	bne.n	8002e00 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	68db      	ldr	r3, [r3, #12]
 8002de8:	f003 0301 	and.w	r3, r3, #1
 8002dec:	2b01      	cmp	r3, #1
 8002dee:	d107      	bne.n	8002e00 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f06f 0201 	mvn.w	r2, #1
 8002df8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002dfa:	6878      	ldr	r0, [r7, #4]
 8002dfc:	f7fd fc96 	bl	800072c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	691b      	ldr	r3, [r3, #16]
 8002e06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e0a:	2b80      	cmp	r3, #128	; 0x80
 8002e0c:	d10e      	bne.n	8002e2c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	68db      	ldr	r3, [r3, #12]
 8002e14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e18:	2b80      	cmp	r3, #128	; 0x80
 8002e1a:	d107      	bne.n	8002e2c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002e24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	f000 fab2 	bl	8003390 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	691b      	ldr	r3, [r3, #16]
 8002e32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e36:	2b40      	cmp	r3, #64	; 0x40
 8002e38:	d10e      	bne.n	8002e58 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	68db      	ldr	r3, [r3, #12]
 8002e40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e44:	2b40      	cmp	r3, #64	; 0x40
 8002e46:	d107      	bne.n	8002e58 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002e50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002e52:	6878      	ldr	r0, [r7, #4]
 8002e54:	f000 f8ff 	bl	8003056 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	691b      	ldr	r3, [r3, #16]
 8002e5e:	f003 0320 	and.w	r3, r3, #32
 8002e62:	2b20      	cmp	r3, #32
 8002e64:	d10e      	bne.n	8002e84 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	68db      	ldr	r3, [r3, #12]
 8002e6c:	f003 0320 	and.w	r3, r3, #32
 8002e70:	2b20      	cmp	r3, #32
 8002e72:	d107      	bne.n	8002e84 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f06f 0220 	mvn.w	r2, #32
 8002e7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002e7e:	6878      	ldr	r0, [r7, #4]
 8002e80:	f000 fa7c 	bl	800337c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002e84:	bf00      	nop
 8002e86:	3708      	adds	r7, #8
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}

08002e8c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b084      	sub	sp, #16
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
 8002e94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e96:	2300      	movs	r3, #0
 8002e98:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ea0:	2b01      	cmp	r3, #1
 8002ea2:	d101      	bne.n	8002ea8 <HAL_TIM_ConfigClockSource+0x1c>
 8002ea4:	2302      	movs	r3, #2
 8002ea6:	e0b4      	b.n	8003012 <HAL_TIM_ConfigClockSource+0x186>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2201      	movs	r2, #1
 8002eac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2202      	movs	r2, #2
 8002eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002ec6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002ece:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	68ba      	ldr	r2, [r7, #8]
 8002ed6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ee0:	d03e      	beq.n	8002f60 <HAL_TIM_ConfigClockSource+0xd4>
 8002ee2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ee6:	f200 8087 	bhi.w	8002ff8 <HAL_TIM_ConfigClockSource+0x16c>
 8002eea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002eee:	f000 8086 	beq.w	8002ffe <HAL_TIM_ConfigClockSource+0x172>
 8002ef2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ef6:	d87f      	bhi.n	8002ff8 <HAL_TIM_ConfigClockSource+0x16c>
 8002ef8:	2b70      	cmp	r3, #112	; 0x70
 8002efa:	d01a      	beq.n	8002f32 <HAL_TIM_ConfigClockSource+0xa6>
 8002efc:	2b70      	cmp	r3, #112	; 0x70
 8002efe:	d87b      	bhi.n	8002ff8 <HAL_TIM_ConfigClockSource+0x16c>
 8002f00:	2b60      	cmp	r3, #96	; 0x60
 8002f02:	d050      	beq.n	8002fa6 <HAL_TIM_ConfigClockSource+0x11a>
 8002f04:	2b60      	cmp	r3, #96	; 0x60
 8002f06:	d877      	bhi.n	8002ff8 <HAL_TIM_ConfigClockSource+0x16c>
 8002f08:	2b50      	cmp	r3, #80	; 0x50
 8002f0a:	d03c      	beq.n	8002f86 <HAL_TIM_ConfigClockSource+0xfa>
 8002f0c:	2b50      	cmp	r3, #80	; 0x50
 8002f0e:	d873      	bhi.n	8002ff8 <HAL_TIM_ConfigClockSource+0x16c>
 8002f10:	2b40      	cmp	r3, #64	; 0x40
 8002f12:	d058      	beq.n	8002fc6 <HAL_TIM_ConfigClockSource+0x13a>
 8002f14:	2b40      	cmp	r3, #64	; 0x40
 8002f16:	d86f      	bhi.n	8002ff8 <HAL_TIM_ConfigClockSource+0x16c>
 8002f18:	2b30      	cmp	r3, #48	; 0x30
 8002f1a:	d064      	beq.n	8002fe6 <HAL_TIM_ConfigClockSource+0x15a>
 8002f1c:	2b30      	cmp	r3, #48	; 0x30
 8002f1e:	d86b      	bhi.n	8002ff8 <HAL_TIM_ConfigClockSource+0x16c>
 8002f20:	2b20      	cmp	r3, #32
 8002f22:	d060      	beq.n	8002fe6 <HAL_TIM_ConfigClockSource+0x15a>
 8002f24:	2b20      	cmp	r3, #32
 8002f26:	d867      	bhi.n	8002ff8 <HAL_TIM_ConfigClockSource+0x16c>
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d05c      	beq.n	8002fe6 <HAL_TIM_ConfigClockSource+0x15a>
 8002f2c:	2b10      	cmp	r3, #16
 8002f2e:	d05a      	beq.n	8002fe6 <HAL_TIM_ConfigClockSource+0x15a>
 8002f30:	e062      	b.n	8002ff8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6818      	ldr	r0, [r3, #0]
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	6899      	ldr	r1, [r3, #8]
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	685a      	ldr	r2, [r3, #4]
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	68db      	ldr	r3, [r3, #12]
 8002f42:	f000 f98d 	bl	8003260 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002f54:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	68ba      	ldr	r2, [r7, #8]
 8002f5c:	609a      	str	r2, [r3, #8]
      break;
 8002f5e:	e04f      	b.n	8003000 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6818      	ldr	r0, [r3, #0]
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	6899      	ldr	r1, [r3, #8]
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	685a      	ldr	r2, [r3, #4]
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	68db      	ldr	r3, [r3, #12]
 8002f70:	f000 f976 	bl	8003260 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	689a      	ldr	r2, [r3, #8]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f82:	609a      	str	r2, [r3, #8]
      break;
 8002f84:	e03c      	b.n	8003000 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6818      	ldr	r0, [r3, #0]
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	6859      	ldr	r1, [r3, #4]
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	68db      	ldr	r3, [r3, #12]
 8002f92:	461a      	mov	r2, r3
 8002f94:	f000 f8ea 	bl	800316c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	2150      	movs	r1, #80	; 0x50
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f000 f943 	bl	800322a <TIM_ITRx_SetConfig>
      break;
 8002fa4:	e02c      	b.n	8003000 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6818      	ldr	r0, [r3, #0]
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	6859      	ldr	r1, [r3, #4]
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	68db      	ldr	r3, [r3, #12]
 8002fb2:	461a      	mov	r2, r3
 8002fb4:	f000 f909 	bl	80031ca <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	2160      	movs	r1, #96	; 0x60
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f000 f933 	bl	800322a <TIM_ITRx_SetConfig>
      break;
 8002fc4:	e01c      	b.n	8003000 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6818      	ldr	r0, [r3, #0]
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	6859      	ldr	r1, [r3, #4]
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	68db      	ldr	r3, [r3, #12]
 8002fd2:	461a      	mov	r2, r3
 8002fd4:	f000 f8ca 	bl	800316c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	2140      	movs	r1, #64	; 0x40
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f000 f923 	bl	800322a <TIM_ITRx_SetConfig>
      break;
 8002fe4:	e00c      	b.n	8003000 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681a      	ldr	r2, [r3, #0]
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4619      	mov	r1, r3
 8002ff0:	4610      	mov	r0, r2
 8002ff2:	f000 f91a 	bl	800322a <TIM_ITRx_SetConfig>
      break;
 8002ff6:	e003      	b.n	8003000 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	73fb      	strb	r3, [r7, #15]
      break;
 8002ffc:	e000      	b.n	8003000 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002ffe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2201      	movs	r2, #1
 8003004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2200      	movs	r2, #0
 800300c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003010:	7bfb      	ldrb	r3, [r7, #15]
}
 8003012:	4618      	mov	r0, r3
 8003014:	3710      	adds	r7, #16
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}

0800301a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800301a:	b480      	push	{r7}
 800301c:	b083      	sub	sp, #12
 800301e:	af00      	add	r7, sp, #0
 8003020:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003022:	bf00      	nop
 8003024:	370c      	adds	r7, #12
 8003026:	46bd      	mov	sp, r7
 8003028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302c:	4770      	bx	lr

0800302e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800302e:	b480      	push	{r7}
 8003030:	b083      	sub	sp, #12
 8003032:	af00      	add	r7, sp, #0
 8003034:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003036:	bf00      	nop
 8003038:	370c      	adds	r7, #12
 800303a:	46bd      	mov	sp, r7
 800303c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003040:	4770      	bx	lr

08003042 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003042:	b480      	push	{r7}
 8003044:	b083      	sub	sp, #12
 8003046:	af00      	add	r7, sp, #0
 8003048:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800304a:	bf00      	nop
 800304c:	370c      	adds	r7, #12
 800304e:	46bd      	mov	sp, r7
 8003050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003054:	4770      	bx	lr

08003056 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003056:	b480      	push	{r7}
 8003058:	b083      	sub	sp, #12
 800305a:	af00      	add	r7, sp, #0
 800305c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800305e:	bf00      	nop
 8003060:	370c      	adds	r7, #12
 8003062:	46bd      	mov	sp, r7
 8003064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003068:	4770      	bx	lr
	...

0800306c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800306c:	b480      	push	{r7}
 800306e:	b085      	sub	sp, #20
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
 8003074:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	4a34      	ldr	r2, [pc, #208]	; (8003150 <TIM_Base_SetConfig+0xe4>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d00f      	beq.n	80030a4 <TIM_Base_SetConfig+0x38>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800308a:	d00b      	beq.n	80030a4 <TIM_Base_SetConfig+0x38>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	4a31      	ldr	r2, [pc, #196]	; (8003154 <TIM_Base_SetConfig+0xe8>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d007      	beq.n	80030a4 <TIM_Base_SetConfig+0x38>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	4a30      	ldr	r2, [pc, #192]	; (8003158 <TIM_Base_SetConfig+0xec>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d003      	beq.n	80030a4 <TIM_Base_SetConfig+0x38>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	4a2f      	ldr	r2, [pc, #188]	; (800315c <TIM_Base_SetConfig+0xf0>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d108      	bne.n	80030b6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	68fa      	ldr	r2, [r7, #12]
 80030b2:	4313      	orrs	r3, r2
 80030b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	4a25      	ldr	r2, [pc, #148]	; (8003150 <TIM_Base_SetConfig+0xe4>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d01b      	beq.n	80030f6 <TIM_Base_SetConfig+0x8a>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030c4:	d017      	beq.n	80030f6 <TIM_Base_SetConfig+0x8a>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	4a22      	ldr	r2, [pc, #136]	; (8003154 <TIM_Base_SetConfig+0xe8>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d013      	beq.n	80030f6 <TIM_Base_SetConfig+0x8a>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	4a21      	ldr	r2, [pc, #132]	; (8003158 <TIM_Base_SetConfig+0xec>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d00f      	beq.n	80030f6 <TIM_Base_SetConfig+0x8a>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	4a20      	ldr	r2, [pc, #128]	; (800315c <TIM_Base_SetConfig+0xf0>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d00b      	beq.n	80030f6 <TIM_Base_SetConfig+0x8a>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	4a1f      	ldr	r2, [pc, #124]	; (8003160 <TIM_Base_SetConfig+0xf4>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d007      	beq.n	80030f6 <TIM_Base_SetConfig+0x8a>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	4a1e      	ldr	r2, [pc, #120]	; (8003164 <TIM_Base_SetConfig+0xf8>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d003      	beq.n	80030f6 <TIM_Base_SetConfig+0x8a>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	4a1d      	ldr	r2, [pc, #116]	; (8003168 <TIM_Base_SetConfig+0xfc>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d108      	bne.n	8003108 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	68db      	ldr	r3, [r3, #12]
 8003102:	68fa      	ldr	r2, [r7, #12]
 8003104:	4313      	orrs	r3, r2
 8003106:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	695b      	ldr	r3, [r3, #20]
 8003112:	4313      	orrs	r3, r2
 8003114:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	68fa      	ldr	r2, [r7, #12]
 800311a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	689a      	ldr	r2, [r3, #8]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	681a      	ldr	r2, [r3, #0]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	4a08      	ldr	r2, [pc, #32]	; (8003150 <TIM_Base_SetConfig+0xe4>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d103      	bne.n	800313c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	691a      	ldr	r2, [r3, #16]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2201      	movs	r2, #1
 8003140:	615a      	str	r2, [r3, #20]
}
 8003142:	bf00      	nop
 8003144:	3714      	adds	r7, #20
 8003146:	46bd      	mov	sp, r7
 8003148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314c:	4770      	bx	lr
 800314e:	bf00      	nop
 8003150:	40010000 	.word	0x40010000
 8003154:	40000400 	.word	0x40000400
 8003158:	40000800 	.word	0x40000800
 800315c:	40000c00 	.word	0x40000c00
 8003160:	40014000 	.word	0x40014000
 8003164:	40014400 	.word	0x40014400
 8003168:	40014800 	.word	0x40014800

0800316c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800316c:	b480      	push	{r7}
 800316e:	b087      	sub	sp, #28
 8003170:	af00      	add	r7, sp, #0
 8003172:	60f8      	str	r0, [r7, #12]
 8003174:	60b9      	str	r1, [r7, #8]
 8003176:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	6a1b      	ldr	r3, [r3, #32]
 800317c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	6a1b      	ldr	r3, [r3, #32]
 8003182:	f023 0201 	bic.w	r2, r3, #1
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	699b      	ldr	r3, [r3, #24]
 800318e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003196:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	011b      	lsls	r3, r3, #4
 800319c:	693a      	ldr	r2, [r7, #16]
 800319e:	4313      	orrs	r3, r2
 80031a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	f023 030a 	bic.w	r3, r3, #10
 80031a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80031aa:	697a      	ldr	r2, [r7, #20]
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	4313      	orrs	r3, r2
 80031b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	693a      	ldr	r2, [r7, #16]
 80031b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	697a      	ldr	r2, [r7, #20]
 80031bc:	621a      	str	r2, [r3, #32]
}
 80031be:	bf00      	nop
 80031c0:	371c      	adds	r7, #28
 80031c2:	46bd      	mov	sp, r7
 80031c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c8:	4770      	bx	lr

080031ca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80031ca:	b480      	push	{r7}
 80031cc:	b087      	sub	sp, #28
 80031ce:	af00      	add	r7, sp, #0
 80031d0:	60f8      	str	r0, [r7, #12]
 80031d2:	60b9      	str	r1, [r7, #8]
 80031d4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	6a1b      	ldr	r3, [r3, #32]
 80031da:	f023 0210 	bic.w	r2, r3, #16
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	699b      	ldr	r3, [r3, #24]
 80031e6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	6a1b      	ldr	r3, [r3, #32]
 80031ec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80031f4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	031b      	lsls	r3, r3, #12
 80031fa:	697a      	ldr	r2, [r7, #20]
 80031fc:	4313      	orrs	r3, r2
 80031fe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003200:	693b      	ldr	r3, [r7, #16]
 8003202:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003206:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	011b      	lsls	r3, r3, #4
 800320c:	693a      	ldr	r2, [r7, #16]
 800320e:	4313      	orrs	r3, r2
 8003210:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	697a      	ldr	r2, [r7, #20]
 8003216:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	693a      	ldr	r2, [r7, #16]
 800321c:	621a      	str	r2, [r3, #32]
}
 800321e:	bf00      	nop
 8003220:	371c      	adds	r7, #28
 8003222:	46bd      	mov	sp, r7
 8003224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003228:	4770      	bx	lr

0800322a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800322a:	b480      	push	{r7}
 800322c:	b085      	sub	sp, #20
 800322e:	af00      	add	r7, sp, #0
 8003230:	6078      	str	r0, [r7, #4]
 8003232:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003240:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003242:	683a      	ldr	r2, [r7, #0]
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	4313      	orrs	r3, r2
 8003248:	f043 0307 	orr.w	r3, r3, #7
 800324c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	68fa      	ldr	r2, [r7, #12]
 8003252:	609a      	str	r2, [r3, #8]
}
 8003254:	bf00      	nop
 8003256:	3714      	adds	r7, #20
 8003258:	46bd      	mov	sp, r7
 800325a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325e:	4770      	bx	lr

08003260 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003260:	b480      	push	{r7}
 8003262:	b087      	sub	sp, #28
 8003264:	af00      	add	r7, sp, #0
 8003266:	60f8      	str	r0, [r7, #12]
 8003268:	60b9      	str	r1, [r7, #8]
 800326a:	607a      	str	r2, [r7, #4]
 800326c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800327a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	021a      	lsls	r2, r3, #8
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	431a      	orrs	r2, r3
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	4313      	orrs	r3, r2
 8003288:	697a      	ldr	r2, [r7, #20]
 800328a:	4313      	orrs	r3, r2
 800328c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	697a      	ldr	r2, [r7, #20]
 8003292:	609a      	str	r2, [r3, #8]
}
 8003294:	bf00      	nop
 8003296:	371c      	adds	r7, #28
 8003298:	46bd      	mov	sp, r7
 800329a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329e:	4770      	bx	lr

080032a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b085      	sub	sp, #20
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
 80032a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032b0:	2b01      	cmp	r3, #1
 80032b2:	d101      	bne.n	80032b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80032b4:	2302      	movs	r3, #2
 80032b6:	e050      	b.n	800335a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2201      	movs	r2, #1
 80032bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2202      	movs	r2, #2
 80032c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	689b      	ldr	r3, [r3, #8]
 80032d6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	68fa      	ldr	r2, [r7, #12]
 80032e6:	4313      	orrs	r3, r2
 80032e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	68fa      	ldr	r2, [r7, #12]
 80032f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a1c      	ldr	r2, [pc, #112]	; (8003368 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d018      	beq.n	800332e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003304:	d013      	beq.n	800332e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a18      	ldr	r2, [pc, #96]	; (800336c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d00e      	beq.n	800332e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a16      	ldr	r2, [pc, #88]	; (8003370 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d009      	beq.n	800332e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a15      	ldr	r2, [pc, #84]	; (8003374 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d004      	beq.n	800332e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a13      	ldr	r2, [pc, #76]	; (8003378 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d10c      	bne.n	8003348 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800332e:	68bb      	ldr	r3, [r7, #8]
 8003330:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003334:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	68ba      	ldr	r2, [r7, #8]
 800333c:	4313      	orrs	r3, r2
 800333e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	68ba      	ldr	r2, [r7, #8]
 8003346:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2201      	movs	r2, #1
 800334c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2200      	movs	r2, #0
 8003354:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003358:	2300      	movs	r3, #0
}
 800335a:	4618      	mov	r0, r3
 800335c:	3714      	adds	r7, #20
 800335e:	46bd      	mov	sp, r7
 8003360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003364:	4770      	bx	lr
 8003366:	bf00      	nop
 8003368:	40010000 	.word	0x40010000
 800336c:	40000400 	.word	0x40000400
 8003370:	40000800 	.word	0x40000800
 8003374:	40000c00 	.word	0x40000c00
 8003378:	40014000 	.word	0x40014000

0800337c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800337c:	b480      	push	{r7}
 800337e:	b083      	sub	sp, #12
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003384:	bf00      	nop
 8003386:	370c      	adds	r7, #12
 8003388:	46bd      	mov	sp, r7
 800338a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338e:	4770      	bx	lr

08003390 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003390:	b480      	push	{r7}
 8003392:	b083      	sub	sp, #12
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003398:	bf00      	nop
 800339a:	370c      	adds	r7, #12
 800339c:	46bd      	mov	sp, r7
 800339e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a2:	4770      	bx	lr

080033a4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80033a4:	b084      	sub	sp, #16
 80033a6:	b580      	push	{r7, lr}
 80033a8:	b084      	sub	sp, #16
 80033aa:	af00      	add	r7, sp, #0
 80033ac:	6078      	str	r0, [r7, #4]
 80033ae:	f107 001c 	add.w	r0, r7, #28
 80033b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80033b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033b8:	2b01      	cmp	r3, #1
 80033ba:	d122      	bne.n	8003402 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033c0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	68db      	ldr	r3, [r3, #12]
 80033cc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80033d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80033d4:	687a      	ldr	r2, [r7, #4]
 80033d6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	68db      	ldr	r3, [r3, #12]
 80033dc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80033e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033e6:	2b01      	cmp	r3, #1
 80033e8:	d105      	bne.n	80033f6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	68db      	ldr	r3, [r3, #12]
 80033ee:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	f001 fb1c 	bl	8004a34 <USB_CoreReset>
 80033fc:	4603      	mov	r3, r0
 80033fe:	73fb      	strb	r3, [r7, #15]
 8003400:	e01a      	b.n	8003438 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	68db      	ldr	r3, [r3, #12]
 8003406:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800340e:	6878      	ldr	r0, [r7, #4]
 8003410:	f001 fb10 	bl	8004a34 <USB_CoreReset>
 8003414:	4603      	mov	r3, r0
 8003416:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003418:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800341a:	2b00      	cmp	r3, #0
 800341c:	d106      	bne.n	800342c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003422:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	639a      	str	r2, [r3, #56]	; 0x38
 800342a:	e005      	b.n	8003438 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003430:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800343a:	2b01      	cmp	r3, #1
 800343c:	d10b      	bne.n	8003456 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	689b      	ldr	r3, [r3, #8]
 8003442:	f043 0206 	orr.w	r2, r3, #6
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	f043 0220 	orr.w	r2, r3, #32
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003456:	7bfb      	ldrb	r3, [r7, #15]
}
 8003458:	4618      	mov	r0, r3
 800345a:	3710      	adds	r7, #16
 800345c:	46bd      	mov	sp, r7
 800345e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003462:	b004      	add	sp, #16
 8003464:	4770      	bx	lr
	...

08003468 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003468:	b480      	push	{r7}
 800346a:	b087      	sub	sp, #28
 800346c:	af00      	add	r7, sp, #0
 800346e:	60f8      	str	r0, [r7, #12]
 8003470:	60b9      	str	r1, [r7, #8]
 8003472:	4613      	mov	r3, r2
 8003474:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003476:	79fb      	ldrb	r3, [r7, #7]
 8003478:	2b02      	cmp	r3, #2
 800347a:	d165      	bne.n	8003548 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	4a41      	ldr	r2, [pc, #260]	; (8003584 <USB_SetTurnaroundTime+0x11c>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d906      	bls.n	8003492 <USB_SetTurnaroundTime+0x2a>
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	4a40      	ldr	r2, [pc, #256]	; (8003588 <USB_SetTurnaroundTime+0x120>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d202      	bcs.n	8003492 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800348c:	230f      	movs	r3, #15
 800348e:	617b      	str	r3, [r7, #20]
 8003490:	e062      	b.n	8003558 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	4a3c      	ldr	r2, [pc, #240]	; (8003588 <USB_SetTurnaroundTime+0x120>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d306      	bcc.n	80034a8 <USB_SetTurnaroundTime+0x40>
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	4a3b      	ldr	r2, [pc, #236]	; (800358c <USB_SetTurnaroundTime+0x124>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d202      	bcs.n	80034a8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80034a2:	230e      	movs	r3, #14
 80034a4:	617b      	str	r3, [r7, #20]
 80034a6:	e057      	b.n	8003558 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	4a38      	ldr	r2, [pc, #224]	; (800358c <USB_SetTurnaroundTime+0x124>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d306      	bcc.n	80034be <USB_SetTurnaroundTime+0x56>
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	4a37      	ldr	r2, [pc, #220]	; (8003590 <USB_SetTurnaroundTime+0x128>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d202      	bcs.n	80034be <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80034b8:	230d      	movs	r3, #13
 80034ba:	617b      	str	r3, [r7, #20]
 80034bc:	e04c      	b.n	8003558 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	4a33      	ldr	r2, [pc, #204]	; (8003590 <USB_SetTurnaroundTime+0x128>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d306      	bcc.n	80034d4 <USB_SetTurnaroundTime+0x6c>
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	4a32      	ldr	r2, [pc, #200]	; (8003594 <USB_SetTurnaroundTime+0x12c>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d802      	bhi.n	80034d4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80034ce:	230c      	movs	r3, #12
 80034d0:	617b      	str	r3, [r7, #20]
 80034d2:	e041      	b.n	8003558 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	4a2f      	ldr	r2, [pc, #188]	; (8003594 <USB_SetTurnaroundTime+0x12c>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d906      	bls.n	80034ea <USB_SetTurnaroundTime+0x82>
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	4a2e      	ldr	r2, [pc, #184]	; (8003598 <USB_SetTurnaroundTime+0x130>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d802      	bhi.n	80034ea <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80034e4:	230b      	movs	r3, #11
 80034e6:	617b      	str	r3, [r7, #20]
 80034e8:	e036      	b.n	8003558 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	4a2a      	ldr	r2, [pc, #168]	; (8003598 <USB_SetTurnaroundTime+0x130>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d906      	bls.n	8003500 <USB_SetTurnaroundTime+0x98>
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	4a29      	ldr	r2, [pc, #164]	; (800359c <USB_SetTurnaroundTime+0x134>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d802      	bhi.n	8003500 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80034fa:	230a      	movs	r3, #10
 80034fc:	617b      	str	r3, [r7, #20]
 80034fe:	e02b      	b.n	8003558 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	4a26      	ldr	r2, [pc, #152]	; (800359c <USB_SetTurnaroundTime+0x134>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d906      	bls.n	8003516 <USB_SetTurnaroundTime+0xae>
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	4a25      	ldr	r2, [pc, #148]	; (80035a0 <USB_SetTurnaroundTime+0x138>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d202      	bcs.n	8003516 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003510:	2309      	movs	r3, #9
 8003512:	617b      	str	r3, [r7, #20]
 8003514:	e020      	b.n	8003558 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	4a21      	ldr	r2, [pc, #132]	; (80035a0 <USB_SetTurnaroundTime+0x138>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d306      	bcc.n	800352c <USB_SetTurnaroundTime+0xc4>
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	4a20      	ldr	r2, [pc, #128]	; (80035a4 <USB_SetTurnaroundTime+0x13c>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d802      	bhi.n	800352c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003526:	2308      	movs	r3, #8
 8003528:	617b      	str	r3, [r7, #20]
 800352a:	e015      	b.n	8003558 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	4a1d      	ldr	r2, [pc, #116]	; (80035a4 <USB_SetTurnaroundTime+0x13c>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d906      	bls.n	8003542 <USB_SetTurnaroundTime+0xda>
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	4a1c      	ldr	r2, [pc, #112]	; (80035a8 <USB_SetTurnaroundTime+0x140>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d202      	bcs.n	8003542 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800353c:	2307      	movs	r3, #7
 800353e:	617b      	str	r3, [r7, #20]
 8003540:	e00a      	b.n	8003558 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003542:	2306      	movs	r3, #6
 8003544:	617b      	str	r3, [r7, #20]
 8003546:	e007      	b.n	8003558 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003548:	79fb      	ldrb	r3, [r7, #7]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d102      	bne.n	8003554 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800354e:	2309      	movs	r3, #9
 8003550:	617b      	str	r3, [r7, #20]
 8003552:	e001      	b.n	8003558 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003554:	2309      	movs	r3, #9
 8003556:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	68db      	ldr	r3, [r3, #12]
 800355c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	68da      	ldr	r2, [r3, #12]
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	029b      	lsls	r3, r3, #10
 800356c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003570:	431a      	orrs	r2, r3
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003576:	2300      	movs	r3, #0
}
 8003578:	4618      	mov	r0, r3
 800357a:	371c      	adds	r7, #28
 800357c:	46bd      	mov	sp, r7
 800357e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003582:	4770      	bx	lr
 8003584:	00d8acbf 	.word	0x00d8acbf
 8003588:	00e4e1c0 	.word	0x00e4e1c0
 800358c:	00f42400 	.word	0x00f42400
 8003590:	01067380 	.word	0x01067380
 8003594:	011a499f 	.word	0x011a499f
 8003598:	01312cff 	.word	0x01312cff
 800359c:	014ca43f 	.word	0x014ca43f
 80035a0:	016e3600 	.word	0x016e3600
 80035a4:	01a6ab1f 	.word	0x01a6ab1f
 80035a8:	01e84800 	.word	0x01e84800

080035ac <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b083      	sub	sp, #12
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	689b      	ldr	r3, [r3, #8]
 80035b8:	f043 0201 	orr.w	r2, r3, #1
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80035c0:	2300      	movs	r3, #0
}
 80035c2:	4618      	mov	r0, r3
 80035c4:	370c      	adds	r7, #12
 80035c6:	46bd      	mov	sp, r7
 80035c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035cc:	4770      	bx	lr

080035ce <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80035ce:	b480      	push	{r7}
 80035d0:	b083      	sub	sp, #12
 80035d2:	af00      	add	r7, sp, #0
 80035d4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	689b      	ldr	r3, [r3, #8]
 80035da:	f023 0201 	bic.w	r2, r3, #1
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80035e2:	2300      	movs	r3, #0
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	370c      	adds	r7, #12
 80035e8:	46bd      	mov	sp, r7
 80035ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ee:	4770      	bx	lr

080035f0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b084      	sub	sp, #16
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
 80035f8:	460b      	mov	r3, r1
 80035fa:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80035fc:	2300      	movs	r3, #0
 80035fe:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	68db      	ldr	r3, [r3, #12]
 8003604:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800360c:	78fb      	ldrb	r3, [r7, #3]
 800360e:	2b01      	cmp	r3, #1
 8003610:	d115      	bne.n	800363e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	68db      	ldr	r3, [r3, #12]
 8003616:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800361e:	2001      	movs	r0, #1
 8003620:	f7fd f9ea 	bl	80009f8 <HAL_Delay>
      ms++;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	3301      	adds	r3, #1
 8003628:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800362a:	6878      	ldr	r0, [r7, #4]
 800362c:	f001 f972 	bl	8004914 <USB_GetMode>
 8003630:	4603      	mov	r3, r0
 8003632:	2b01      	cmp	r3, #1
 8003634:	d01e      	beq.n	8003674 <USB_SetCurrentMode+0x84>
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	2b31      	cmp	r3, #49	; 0x31
 800363a:	d9f0      	bls.n	800361e <USB_SetCurrentMode+0x2e>
 800363c:	e01a      	b.n	8003674 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800363e:	78fb      	ldrb	r3, [r7, #3]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d115      	bne.n	8003670 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	68db      	ldr	r3, [r3, #12]
 8003648:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003650:	2001      	movs	r0, #1
 8003652:	f7fd f9d1 	bl	80009f8 <HAL_Delay>
      ms++;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	3301      	adds	r3, #1
 800365a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800365c:	6878      	ldr	r0, [r7, #4]
 800365e:	f001 f959 	bl	8004914 <USB_GetMode>
 8003662:	4603      	mov	r3, r0
 8003664:	2b00      	cmp	r3, #0
 8003666:	d005      	beq.n	8003674 <USB_SetCurrentMode+0x84>
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2b31      	cmp	r3, #49	; 0x31
 800366c:	d9f0      	bls.n	8003650 <USB_SetCurrentMode+0x60>
 800366e:	e001      	b.n	8003674 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003670:	2301      	movs	r3, #1
 8003672:	e005      	b.n	8003680 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	2b32      	cmp	r3, #50	; 0x32
 8003678:	d101      	bne.n	800367e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	e000      	b.n	8003680 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800367e:	2300      	movs	r3, #0
}
 8003680:	4618      	mov	r0, r3
 8003682:	3710      	adds	r7, #16
 8003684:	46bd      	mov	sp, r7
 8003686:	bd80      	pop	{r7, pc}

08003688 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003688:	b084      	sub	sp, #16
 800368a:	b580      	push	{r7, lr}
 800368c:	b086      	sub	sp, #24
 800368e:	af00      	add	r7, sp, #0
 8003690:	6078      	str	r0, [r7, #4]
 8003692:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003696:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800369a:	2300      	movs	r3, #0
 800369c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80036a2:	2300      	movs	r3, #0
 80036a4:	613b      	str	r3, [r7, #16]
 80036a6:	e009      	b.n	80036bc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80036a8:	687a      	ldr	r2, [r7, #4]
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	3340      	adds	r3, #64	; 0x40
 80036ae:	009b      	lsls	r3, r3, #2
 80036b0:	4413      	add	r3, r2
 80036b2:	2200      	movs	r2, #0
 80036b4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	3301      	adds	r3, #1
 80036ba:	613b      	str	r3, [r7, #16]
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	2b0e      	cmp	r3, #14
 80036c0:	d9f2      	bls.n	80036a8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80036c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d11c      	bne.n	8003702 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	68fa      	ldr	r2, [r7, #12]
 80036d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80036d6:	f043 0302 	orr.w	r3, r3, #2
 80036da:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036e0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036ec:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036f8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	639a      	str	r2, [r3, #56]	; 0x38
 8003700:	e00b      	b.n	800371a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003706:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003712:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003720:	461a      	mov	r2, r3
 8003722:	2300      	movs	r3, #0
 8003724:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800372c:	4619      	mov	r1, r3
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003734:	461a      	mov	r2, r3
 8003736:	680b      	ldr	r3, [r1, #0]
 8003738:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800373a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800373c:	2b01      	cmp	r3, #1
 800373e:	d10c      	bne.n	800375a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003742:	2b00      	cmp	r3, #0
 8003744:	d104      	bne.n	8003750 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003746:	2100      	movs	r1, #0
 8003748:	6878      	ldr	r0, [r7, #4]
 800374a:	f000 f945 	bl	80039d8 <USB_SetDevSpeed>
 800374e:	e008      	b.n	8003762 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003750:	2101      	movs	r1, #1
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	f000 f940 	bl	80039d8 <USB_SetDevSpeed>
 8003758:	e003      	b.n	8003762 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800375a:	2103      	movs	r1, #3
 800375c:	6878      	ldr	r0, [r7, #4]
 800375e:	f000 f93b 	bl	80039d8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003762:	2110      	movs	r1, #16
 8003764:	6878      	ldr	r0, [r7, #4]
 8003766:	f000 f8f3 	bl	8003950 <USB_FlushTxFifo>
 800376a:	4603      	mov	r3, r0
 800376c:	2b00      	cmp	r3, #0
 800376e:	d001      	beq.n	8003774 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003770:	2301      	movs	r3, #1
 8003772:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003774:	6878      	ldr	r0, [r7, #4]
 8003776:	f000 f90f 	bl	8003998 <USB_FlushRxFifo>
 800377a:	4603      	mov	r3, r0
 800377c:	2b00      	cmp	r3, #0
 800377e:	d001      	beq.n	8003784 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003780:	2301      	movs	r3, #1
 8003782:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800378a:	461a      	mov	r2, r3
 800378c:	2300      	movs	r3, #0
 800378e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003796:	461a      	mov	r2, r3
 8003798:	2300      	movs	r3, #0
 800379a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037a2:	461a      	mov	r2, r3
 80037a4:	2300      	movs	r3, #0
 80037a6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80037a8:	2300      	movs	r3, #0
 80037aa:	613b      	str	r3, [r7, #16]
 80037ac:	e043      	b.n	8003836 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	015a      	lsls	r2, r3, #5
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	4413      	add	r3, r2
 80037b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80037c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80037c4:	d118      	bne.n	80037f8 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d10a      	bne.n	80037e2 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	015a      	lsls	r2, r3, #5
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	4413      	add	r3, r2
 80037d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037d8:	461a      	mov	r2, r3
 80037da:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80037de:	6013      	str	r3, [r2, #0]
 80037e0:	e013      	b.n	800380a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	015a      	lsls	r2, r3, #5
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	4413      	add	r3, r2
 80037ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037ee:	461a      	mov	r2, r3
 80037f0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80037f4:	6013      	str	r3, [r2, #0]
 80037f6:	e008      	b.n	800380a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80037f8:	693b      	ldr	r3, [r7, #16]
 80037fa:	015a      	lsls	r2, r3, #5
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	4413      	add	r3, r2
 8003800:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003804:	461a      	mov	r2, r3
 8003806:	2300      	movs	r3, #0
 8003808:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	015a      	lsls	r2, r3, #5
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	4413      	add	r3, r2
 8003812:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003816:	461a      	mov	r2, r3
 8003818:	2300      	movs	r3, #0
 800381a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	015a      	lsls	r2, r3, #5
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	4413      	add	r3, r2
 8003824:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003828:	461a      	mov	r2, r3
 800382a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800382e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003830:	693b      	ldr	r3, [r7, #16]
 8003832:	3301      	adds	r3, #1
 8003834:	613b      	str	r3, [r7, #16]
 8003836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003838:	693a      	ldr	r2, [r7, #16]
 800383a:	429a      	cmp	r2, r3
 800383c:	d3b7      	bcc.n	80037ae <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800383e:	2300      	movs	r3, #0
 8003840:	613b      	str	r3, [r7, #16]
 8003842:	e043      	b.n	80038cc <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003844:	693b      	ldr	r3, [r7, #16]
 8003846:	015a      	lsls	r2, r3, #5
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	4413      	add	r3, r2
 800384c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003856:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800385a:	d118      	bne.n	800388e <USB_DevInit+0x206>
    {
      if (i == 0U)
 800385c:	693b      	ldr	r3, [r7, #16]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d10a      	bne.n	8003878 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003862:	693b      	ldr	r3, [r7, #16]
 8003864:	015a      	lsls	r2, r3, #5
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	4413      	add	r3, r2
 800386a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800386e:	461a      	mov	r2, r3
 8003870:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003874:	6013      	str	r3, [r2, #0]
 8003876:	e013      	b.n	80038a0 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	015a      	lsls	r2, r3, #5
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	4413      	add	r3, r2
 8003880:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003884:	461a      	mov	r2, r3
 8003886:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800388a:	6013      	str	r3, [r2, #0]
 800388c:	e008      	b.n	80038a0 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	015a      	lsls	r2, r3, #5
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	4413      	add	r3, r2
 8003896:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800389a:	461a      	mov	r2, r3
 800389c:	2300      	movs	r3, #0
 800389e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80038a0:	693b      	ldr	r3, [r7, #16]
 80038a2:	015a      	lsls	r2, r3, #5
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	4413      	add	r3, r2
 80038a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038ac:	461a      	mov	r2, r3
 80038ae:	2300      	movs	r3, #0
 80038b0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	015a      	lsls	r2, r3, #5
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	4413      	add	r3, r2
 80038ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038be:	461a      	mov	r2, r3
 80038c0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80038c4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	3301      	adds	r3, #1
 80038ca:	613b      	str	r3, [r7, #16]
 80038cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ce:	693a      	ldr	r2, [r7, #16]
 80038d0:	429a      	cmp	r2, r3
 80038d2:	d3b7      	bcc.n	8003844 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038da:	691b      	ldr	r3, [r3, #16]
 80038dc:	68fa      	ldr	r2, [r7, #12]
 80038de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80038e2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80038e6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2200      	movs	r2, #0
 80038ec:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80038f4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80038f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d105      	bne.n	8003908 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	699b      	ldr	r3, [r3, #24]
 8003900:	f043 0210 	orr.w	r2, r3, #16
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	699a      	ldr	r2, [r3, #24]
 800390c:	4b0f      	ldr	r3, [pc, #60]	; (800394c <USB_DevInit+0x2c4>)
 800390e:	4313      	orrs	r3, r2
 8003910:	687a      	ldr	r2, [r7, #4]
 8003912:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003914:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003916:	2b00      	cmp	r3, #0
 8003918:	d005      	beq.n	8003926 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	699b      	ldr	r3, [r3, #24]
 800391e:	f043 0208 	orr.w	r2, r3, #8
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003926:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003928:	2b01      	cmp	r3, #1
 800392a:	d107      	bne.n	800393c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	699b      	ldr	r3, [r3, #24]
 8003930:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003934:	f043 0304 	orr.w	r3, r3, #4
 8003938:	687a      	ldr	r2, [r7, #4]
 800393a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800393c:	7dfb      	ldrb	r3, [r7, #23]
}
 800393e:	4618      	mov	r0, r3
 8003940:	3718      	adds	r7, #24
 8003942:	46bd      	mov	sp, r7
 8003944:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003948:	b004      	add	sp, #16
 800394a:	4770      	bx	lr
 800394c:	803c3800 	.word	0x803c3800

08003950 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003950:	b480      	push	{r7}
 8003952:	b085      	sub	sp, #20
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
 8003958:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800395a:	2300      	movs	r3, #0
 800395c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	019b      	lsls	r3, r3, #6
 8003962:	f043 0220 	orr.w	r2, r3, #32
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	3301      	adds	r3, #1
 800396e:	60fb      	str	r3, [r7, #12]
 8003970:	4a08      	ldr	r2, [pc, #32]	; (8003994 <USB_FlushTxFifo+0x44>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d901      	bls.n	800397a <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8003976:	2303      	movs	r3, #3
 8003978:	e006      	b.n	8003988 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	691b      	ldr	r3, [r3, #16]
 800397e:	f003 0320 	and.w	r3, r3, #32
 8003982:	2b20      	cmp	r3, #32
 8003984:	d0f1      	beq.n	800396a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8003986:	2300      	movs	r3, #0
}
 8003988:	4618      	mov	r0, r3
 800398a:	3714      	adds	r7, #20
 800398c:	46bd      	mov	sp, r7
 800398e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003992:	4770      	bx	lr
 8003994:	00030d40 	.word	0x00030d40

08003998 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003998:	b480      	push	{r7}
 800399a:	b085      	sub	sp, #20
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80039a0:	2300      	movs	r3, #0
 80039a2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2210      	movs	r2, #16
 80039a8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	3301      	adds	r3, #1
 80039ae:	60fb      	str	r3, [r7, #12]
 80039b0:	4a08      	ldr	r2, [pc, #32]	; (80039d4 <USB_FlushRxFifo+0x3c>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d901      	bls.n	80039ba <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 80039b6:	2303      	movs	r3, #3
 80039b8:	e006      	b.n	80039c8 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	691b      	ldr	r3, [r3, #16]
 80039be:	f003 0310 	and.w	r3, r3, #16
 80039c2:	2b10      	cmp	r3, #16
 80039c4:	d0f1      	beq.n	80039aa <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80039c6:	2300      	movs	r3, #0
}
 80039c8:	4618      	mov	r0, r3
 80039ca:	3714      	adds	r7, #20
 80039cc:	46bd      	mov	sp, r7
 80039ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d2:	4770      	bx	lr
 80039d4:	00030d40 	.word	0x00030d40

080039d8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80039d8:	b480      	push	{r7}
 80039da:	b085      	sub	sp, #20
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
 80039e0:	460b      	mov	r3, r1
 80039e2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039ee:	681a      	ldr	r2, [r3, #0]
 80039f0:	78fb      	ldrb	r3, [r7, #3]
 80039f2:	68f9      	ldr	r1, [r7, #12]
 80039f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80039f8:	4313      	orrs	r3, r2
 80039fa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80039fc:	2300      	movs	r3, #0
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	3714      	adds	r7, #20
 8003a02:	46bd      	mov	sp, r7
 8003a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a08:	4770      	bx	lr

08003a0a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8003a0a:	b480      	push	{r7}
 8003a0c:	b087      	sub	sp, #28
 8003a0e:	af00      	add	r7, sp, #0
 8003a10:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	f003 0306 	and.w	r3, r3, #6
 8003a22:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d102      	bne.n	8003a30 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	75fb      	strb	r3, [r7, #23]
 8003a2e:	e00a      	b.n	8003a46 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2b02      	cmp	r3, #2
 8003a34:	d002      	beq.n	8003a3c <USB_GetDevSpeed+0x32>
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	2b06      	cmp	r3, #6
 8003a3a:	d102      	bne.n	8003a42 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003a3c:	2302      	movs	r3, #2
 8003a3e:	75fb      	strb	r3, [r7, #23]
 8003a40:	e001      	b.n	8003a46 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003a42:	230f      	movs	r3, #15
 8003a44:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003a46:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a48:	4618      	mov	r0, r3
 8003a4a:	371c      	adds	r7, #28
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a52:	4770      	bx	lr

08003a54 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003a54:	b480      	push	{r7}
 8003a56:	b085      	sub	sp, #20
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
 8003a5c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	781b      	ldrb	r3, [r3, #0]
 8003a66:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	785b      	ldrb	r3, [r3, #1]
 8003a6c:	2b01      	cmp	r3, #1
 8003a6e:	d13a      	bne.n	8003ae6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a76:	69da      	ldr	r2, [r3, #28]
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	781b      	ldrb	r3, [r3, #0]
 8003a7c:	f003 030f 	and.w	r3, r3, #15
 8003a80:	2101      	movs	r1, #1
 8003a82:	fa01 f303 	lsl.w	r3, r1, r3
 8003a86:	b29b      	uxth	r3, r3
 8003a88:	68f9      	ldr	r1, [r7, #12]
 8003a8a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	015a      	lsls	r2, r3, #5
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	4413      	add	r3, r2
 8003a9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d155      	bne.n	8003b54 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	015a      	lsls	r2, r3, #5
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	4413      	add	r3, r2
 8003ab0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ab4:	681a      	ldr	r2, [r3, #0]
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	78db      	ldrb	r3, [r3, #3]
 8003ac2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003ac4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	059b      	lsls	r3, r3, #22
 8003aca:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003acc:	4313      	orrs	r3, r2
 8003ace:	68ba      	ldr	r2, [r7, #8]
 8003ad0:	0151      	lsls	r1, r2, #5
 8003ad2:	68fa      	ldr	r2, [r7, #12]
 8003ad4:	440a      	add	r2, r1
 8003ad6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ada:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ade:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ae2:	6013      	str	r3, [r2, #0]
 8003ae4:	e036      	b.n	8003b54 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003aec:	69da      	ldr	r2, [r3, #28]
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	781b      	ldrb	r3, [r3, #0]
 8003af2:	f003 030f 	and.w	r3, r3, #15
 8003af6:	2101      	movs	r1, #1
 8003af8:	fa01 f303 	lsl.w	r3, r1, r3
 8003afc:	041b      	lsls	r3, r3, #16
 8003afe:	68f9      	ldr	r1, [r7, #12]
 8003b00:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003b04:	4313      	orrs	r3, r2
 8003b06:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	015a      	lsls	r2, r3, #5
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	4413      	add	r3, r2
 8003b10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d11a      	bne.n	8003b54 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	015a      	lsls	r2, r3, #5
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	4413      	add	r3, r2
 8003b26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	78db      	ldrb	r3, [r3, #3]
 8003b38:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003b3a:	430b      	orrs	r3, r1
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	68ba      	ldr	r2, [r7, #8]
 8003b40:	0151      	lsls	r1, r2, #5
 8003b42:	68fa      	ldr	r2, [r7, #12]
 8003b44:	440a      	add	r2, r1
 8003b46:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003b4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b52:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003b54:	2300      	movs	r3, #0
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	3714      	adds	r7, #20
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b60:	4770      	bx	lr
	...

08003b64 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b085      	sub	sp, #20
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
 8003b6c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	781b      	ldrb	r3, [r3, #0]
 8003b76:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	785b      	ldrb	r3, [r3, #1]
 8003b7c:	2b01      	cmp	r3, #1
 8003b7e:	d161      	bne.n	8003c44 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	015a      	lsls	r2, r3, #5
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	4413      	add	r3, r2
 8003b88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003b92:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003b96:	d11f      	bne.n	8003bd8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	015a      	lsls	r2, r3, #5
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	4413      	add	r3, r2
 8003ba0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	68ba      	ldr	r2, [r7, #8]
 8003ba8:	0151      	lsls	r1, r2, #5
 8003baa:	68fa      	ldr	r2, [r7, #12]
 8003bac:	440a      	add	r2, r1
 8003bae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003bb2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003bb6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	015a      	lsls	r2, r3, #5
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	4413      	add	r3, r2
 8003bc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	68ba      	ldr	r2, [r7, #8]
 8003bc8:	0151      	lsls	r1, r2, #5
 8003bca:	68fa      	ldr	r2, [r7, #12]
 8003bcc:	440a      	add	r2, r1
 8003bce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003bd2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003bd6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bde:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	781b      	ldrb	r3, [r3, #0]
 8003be4:	f003 030f 	and.w	r3, r3, #15
 8003be8:	2101      	movs	r1, #1
 8003bea:	fa01 f303 	lsl.w	r3, r1, r3
 8003bee:	b29b      	uxth	r3, r3
 8003bf0:	43db      	mvns	r3, r3
 8003bf2:	68f9      	ldr	r1, [r7, #12]
 8003bf4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003bf8:	4013      	ands	r3, r2
 8003bfa:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c02:	69da      	ldr	r2, [r3, #28]
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	781b      	ldrb	r3, [r3, #0]
 8003c08:	f003 030f 	and.w	r3, r3, #15
 8003c0c:	2101      	movs	r1, #1
 8003c0e:	fa01 f303 	lsl.w	r3, r1, r3
 8003c12:	b29b      	uxth	r3, r3
 8003c14:	43db      	mvns	r3, r3
 8003c16:	68f9      	ldr	r1, [r7, #12]
 8003c18:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003c1c:	4013      	ands	r3, r2
 8003c1e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	015a      	lsls	r2, r3, #5
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	4413      	add	r3, r2
 8003c28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c2c:	681a      	ldr	r2, [r3, #0]
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	0159      	lsls	r1, r3, #5
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	440b      	add	r3, r1
 8003c36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c3a:	4619      	mov	r1, r3
 8003c3c:	4b35      	ldr	r3, [pc, #212]	; (8003d14 <USB_DeactivateEndpoint+0x1b0>)
 8003c3e:	4013      	ands	r3, r2
 8003c40:	600b      	str	r3, [r1, #0]
 8003c42:	e060      	b.n	8003d06 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	015a      	lsls	r2, r3, #5
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	4413      	add	r3, r2
 8003c4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003c56:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003c5a:	d11f      	bne.n	8003c9c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	015a      	lsls	r2, r3, #5
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	4413      	add	r3, r2
 8003c64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	68ba      	ldr	r2, [r7, #8]
 8003c6c:	0151      	lsls	r1, r2, #5
 8003c6e:	68fa      	ldr	r2, [r7, #12]
 8003c70:	440a      	add	r2, r1
 8003c72:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c76:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003c7a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	015a      	lsls	r2, r3, #5
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	4413      	add	r3, r2
 8003c84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	68ba      	ldr	r2, [r7, #8]
 8003c8c:	0151      	lsls	r1, r2, #5
 8003c8e:	68fa      	ldr	r2, [r7, #12]
 8003c90:	440a      	add	r2, r1
 8003c92:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c96:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003c9a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ca2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	781b      	ldrb	r3, [r3, #0]
 8003ca8:	f003 030f 	and.w	r3, r3, #15
 8003cac:	2101      	movs	r1, #1
 8003cae:	fa01 f303 	lsl.w	r3, r1, r3
 8003cb2:	041b      	lsls	r3, r3, #16
 8003cb4:	43db      	mvns	r3, r3
 8003cb6:	68f9      	ldr	r1, [r7, #12]
 8003cb8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003cbc:	4013      	ands	r3, r2
 8003cbe:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cc6:	69da      	ldr	r2, [r3, #28]
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	781b      	ldrb	r3, [r3, #0]
 8003ccc:	f003 030f 	and.w	r3, r3, #15
 8003cd0:	2101      	movs	r1, #1
 8003cd2:	fa01 f303 	lsl.w	r3, r1, r3
 8003cd6:	041b      	lsls	r3, r3, #16
 8003cd8:	43db      	mvns	r3, r3
 8003cda:	68f9      	ldr	r1, [r7, #12]
 8003cdc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003ce0:	4013      	ands	r3, r2
 8003ce2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	015a      	lsls	r2, r3, #5
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	4413      	add	r3, r2
 8003cec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cf0:	681a      	ldr	r2, [r3, #0]
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	0159      	lsls	r1, r3, #5
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	440b      	add	r3, r1
 8003cfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cfe:	4619      	mov	r1, r3
 8003d00:	4b05      	ldr	r3, [pc, #20]	; (8003d18 <USB_DeactivateEndpoint+0x1b4>)
 8003d02:	4013      	ands	r3, r2
 8003d04:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8003d06:	2300      	movs	r3, #0
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	3714      	adds	r7, #20
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d12:	4770      	bx	lr
 8003d14:	ec337800 	.word	0xec337800
 8003d18:	eff37800 	.word	0xeff37800

08003d1c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b08a      	sub	sp, #40	; 0x28
 8003d20:	af02      	add	r7, sp, #8
 8003d22:	60f8      	str	r0, [r7, #12]
 8003d24:	60b9      	str	r1, [r7, #8]
 8003d26:	4613      	mov	r3, r2
 8003d28:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	781b      	ldrb	r3, [r3, #0]
 8003d32:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	785b      	ldrb	r3, [r3, #1]
 8003d38:	2b01      	cmp	r3, #1
 8003d3a:	f040 815c 	bne.w	8003ff6 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	695b      	ldr	r3, [r3, #20]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d132      	bne.n	8003dac <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003d46:	69bb      	ldr	r3, [r7, #24]
 8003d48:	015a      	lsls	r2, r3, #5
 8003d4a:	69fb      	ldr	r3, [r7, #28]
 8003d4c:	4413      	add	r3, r2
 8003d4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d52:	691b      	ldr	r3, [r3, #16]
 8003d54:	69ba      	ldr	r2, [r7, #24]
 8003d56:	0151      	lsls	r1, r2, #5
 8003d58:	69fa      	ldr	r2, [r7, #28]
 8003d5a:	440a      	add	r2, r1
 8003d5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d60:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003d64:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003d68:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003d6a:	69bb      	ldr	r3, [r7, #24]
 8003d6c:	015a      	lsls	r2, r3, #5
 8003d6e:	69fb      	ldr	r3, [r7, #28]
 8003d70:	4413      	add	r3, r2
 8003d72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d76:	691b      	ldr	r3, [r3, #16]
 8003d78:	69ba      	ldr	r2, [r7, #24]
 8003d7a:	0151      	lsls	r1, r2, #5
 8003d7c:	69fa      	ldr	r2, [r7, #28]
 8003d7e:	440a      	add	r2, r1
 8003d80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d84:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003d88:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003d8a:	69bb      	ldr	r3, [r7, #24]
 8003d8c:	015a      	lsls	r2, r3, #5
 8003d8e:	69fb      	ldr	r3, [r7, #28]
 8003d90:	4413      	add	r3, r2
 8003d92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d96:	691b      	ldr	r3, [r3, #16]
 8003d98:	69ba      	ldr	r2, [r7, #24]
 8003d9a:	0151      	lsls	r1, r2, #5
 8003d9c:	69fa      	ldr	r2, [r7, #28]
 8003d9e:	440a      	add	r2, r1
 8003da0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003da4:	0cdb      	lsrs	r3, r3, #19
 8003da6:	04db      	lsls	r3, r3, #19
 8003da8:	6113      	str	r3, [r2, #16]
 8003daa:	e074      	b.n	8003e96 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003dac:	69bb      	ldr	r3, [r7, #24]
 8003dae:	015a      	lsls	r2, r3, #5
 8003db0:	69fb      	ldr	r3, [r7, #28]
 8003db2:	4413      	add	r3, r2
 8003db4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003db8:	691b      	ldr	r3, [r3, #16]
 8003dba:	69ba      	ldr	r2, [r7, #24]
 8003dbc:	0151      	lsls	r1, r2, #5
 8003dbe:	69fa      	ldr	r2, [r7, #28]
 8003dc0:	440a      	add	r2, r1
 8003dc2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003dc6:	0cdb      	lsrs	r3, r3, #19
 8003dc8:	04db      	lsls	r3, r3, #19
 8003dca:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003dcc:	69bb      	ldr	r3, [r7, #24]
 8003dce:	015a      	lsls	r2, r3, #5
 8003dd0:	69fb      	ldr	r3, [r7, #28]
 8003dd2:	4413      	add	r3, r2
 8003dd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dd8:	691b      	ldr	r3, [r3, #16]
 8003dda:	69ba      	ldr	r2, [r7, #24]
 8003ddc:	0151      	lsls	r1, r2, #5
 8003dde:	69fa      	ldr	r2, [r7, #28]
 8003de0:	440a      	add	r2, r1
 8003de2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003de6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003dea:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003dee:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003df0:	69bb      	ldr	r3, [r7, #24]
 8003df2:	015a      	lsls	r2, r3, #5
 8003df4:	69fb      	ldr	r3, [r7, #28]
 8003df6:	4413      	add	r3, r2
 8003df8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dfc:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	6959      	ldr	r1, [r3, #20]
 8003e02:	68bb      	ldr	r3, [r7, #8]
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	440b      	add	r3, r1
 8003e08:	1e59      	subs	r1, r3, #1
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003e12:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003e14:	4b9d      	ldr	r3, [pc, #628]	; (800408c <USB_EPStartXfer+0x370>)
 8003e16:	400b      	ands	r3, r1
 8003e18:	69b9      	ldr	r1, [r7, #24]
 8003e1a:	0148      	lsls	r0, r1, #5
 8003e1c:	69f9      	ldr	r1, [r7, #28]
 8003e1e:	4401      	add	r1, r0
 8003e20:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003e24:	4313      	orrs	r3, r2
 8003e26:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003e28:	69bb      	ldr	r3, [r7, #24]
 8003e2a:	015a      	lsls	r2, r3, #5
 8003e2c:	69fb      	ldr	r3, [r7, #28]
 8003e2e:	4413      	add	r3, r2
 8003e30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e34:	691a      	ldr	r2, [r3, #16]
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	695b      	ldr	r3, [r3, #20]
 8003e3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e3e:	69b9      	ldr	r1, [r7, #24]
 8003e40:	0148      	lsls	r0, r1, #5
 8003e42:	69f9      	ldr	r1, [r7, #28]
 8003e44:	4401      	add	r1, r0
 8003e46:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	78db      	ldrb	r3, [r3, #3]
 8003e52:	2b01      	cmp	r3, #1
 8003e54:	d11f      	bne.n	8003e96 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8003e56:	69bb      	ldr	r3, [r7, #24]
 8003e58:	015a      	lsls	r2, r3, #5
 8003e5a:	69fb      	ldr	r3, [r7, #28]
 8003e5c:	4413      	add	r3, r2
 8003e5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e62:	691b      	ldr	r3, [r3, #16]
 8003e64:	69ba      	ldr	r2, [r7, #24]
 8003e66:	0151      	lsls	r1, r2, #5
 8003e68:	69fa      	ldr	r2, [r7, #28]
 8003e6a:	440a      	add	r2, r1
 8003e6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e70:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8003e74:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8003e76:	69bb      	ldr	r3, [r7, #24]
 8003e78:	015a      	lsls	r2, r3, #5
 8003e7a:	69fb      	ldr	r3, [r7, #28]
 8003e7c:	4413      	add	r3, r2
 8003e7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e82:	691b      	ldr	r3, [r3, #16]
 8003e84:	69ba      	ldr	r2, [r7, #24]
 8003e86:	0151      	lsls	r1, r2, #5
 8003e88:	69fa      	ldr	r2, [r7, #28]
 8003e8a:	440a      	add	r2, r1
 8003e8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e90:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003e94:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8003e96:	79fb      	ldrb	r3, [r7, #7]
 8003e98:	2b01      	cmp	r3, #1
 8003e9a:	d14b      	bne.n	8003f34 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	691b      	ldr	r3, [r3, #16]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d009      	beq.n	8003eb8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003ea4:	69bb      	ldr	r3, [r7, #24]
 8003ea6:	015a      	lsls	r2, r3, #5
 8003ea8:	69fb      	ldr	r3, [r7, #28]
 8003eaa:	4413      	add	r3, r2
 8003eac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003eb0:	461a      	mov	r2, r3
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	691b      	ldr	r3, [r3, #16]
 8003eb6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	78db      	ldrb	r3, [r3, #3]
 8003ebc:	2b01      	cmp	r3, #1
 8003ebe:	d128      	bne.n	8003f12 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003ec0:	69fb      	ldr	r3, [r7, #28]
 8003ec2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ec6:	689b      	ldr	r3, [r3, #8]
 8003ec8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d110      	bne.n	8003ef2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003ed0:	69bb      	ldr	r3, [r7, #24]
 8003ed2:	015a      	lsls	r2, r3, #5
 8003ed4:	69fb      	ldr	r3, [r7, #28]
 8003ed6:	4413      	add	r3, r2
 8003ed8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	69ba      	ldr	r2, [r7, #24]
 8003ee0:	0151      	lsls	r1, r2, #5
 8003ee2:	69fa      	ldr	r2, [r7, #28]
 8003ee4:	440a      	add	r2, r1
 8003ee6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003eea:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003eee:	6013      	str	r3, [r2, #0]
 8003ef0:	e00f      	b.n	8003f12 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003ef2:	69bb      	ldr	r3, [r7, #24]
 8003ef4:	015a      	lsls	r2, r3, #5
 8003ef6:	69fb      	ldr	r3, [r7, #28]
 8003ef8:	4413      	add	r3, r2
 8003efa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	69ba      	ldr	r2, [r7, #24]
 8003f02:	0151      	lsls	r1, r2, #5
 8003f04:	69fa      	ldr	r2, [r7, #28]
 8003f06:	440a      	add	r2, r1
 8003f08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f10:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003f12:	69bb      	ldr	r3, [r7, #24]
 8003f14:	015a      	lsls	r2, r3, #5
 8003f16:	69fb      	ldr	r3, [r7, #28]
 8003f18:	4413      	add	r3, r2
 8003f1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	69ba      	ldr	r2, [r7, #24]
 8003f22:	0151      	lsls	r1, r2, #5
 8003f24:	69fa      	ldr	r2, [r7, #28]
 8003f26:	440a      	add	r2, r1
 8003f28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f2c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003f30:	6013      	str	r3, [r2, #0]
 8003f32:	e12f      	b.n	8004194 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003f34:	69bb      	ldr	r3, [r7, #24]
 8003f36:	015a      	lsls	r2, r3, #5
 8003f38:	69fb      	ldr	r3, [r7, #28]
 8003f3a:	4413      	add	r3, r2
 8003f3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	69ba      	ldr	r2, [r7, #24]
 8003f44:	0151      	lsls	r1, r2, #5
 8003f46:	69fa      	ldr	r2, [r7, #28]
 8003f48:	440a      	add	r2, r1
 8003f4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f4e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003f52:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	78db      	ldrb	r3, [r3, #3]
 8003f58:	2b01      	cmp	r3, #1
 8003f5a:	d015      	beq.n	8003f88 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	695b      	ldr	r3, [r3, #20]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	f000 8117 	beq.w	8004194 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003f66:	69fb      	ldr	r3, [r7, #28]
 8003f68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f6e:	68bb      	ldr	r3, [r7, #8]
 8003f70:	781b      	ldrb	r3, [r3, #0]
 8003f72:	f003 030f 	and.w	r3, r3, #15
 8003f76:	2101      	movs	r1, #1
 8003f78:	fa01 f303 	lsl.w	r3, r1, r3
 8003f7c:	69f9      	ldr	r1, [r7, #28]
 8003f7e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f82:	4313      	orrs	r3, r2
 8003f84:	634b      	str	r3, [r1, #52]	; 0x34
 8003f86:	e105      	b.n	8004194 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003f88:	69fb      	ldr	r3, [r7, #28]
 8003f8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f8e:	689b      	ldr	r3, [r3, #8]
 8003f90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d110      	bne.n	8003fba <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003f98:	69bb      	ldr	r3, [r7, #24]
 8003f9a:	015a      	lsls	r2, r3, #5
 8003f9c:	69fb      	ldr	r3, [r7, #28]
 8003f9e:	4413      	add	r3, r2
 8003fa0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	69ba      	ldr	r2, [r7, #24]
 8003fa8:	0151      	lsls	r1, r2, #5
 8003faa:	69fa      	ldr	r2, [r7, #28]
 8003fac:	440a      	add	r2, r1
 8003fae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003fb2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003fb6:	6013      	str	r3, [r2, #0]
 8003fb8:	e00f      	b.n	8003fda <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003fba:	69bb      	ldr	r3, [r7, #24]
 8003fbc:	015a      	lsls	r2, r3, #5
 8003fbe:	69fb      	ldr	r3, [r7, #28]
 8003fc0:	4413      	add	r3, r2
 8003fc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	69ba      	ldr	r2, [r7, #24]
 8003fca:	0151      	lsls	r1, r2, #5
 8003fcc:	69fa      	ldr	r2, [r7, #28]
 8003fce:	440a      	add	r2, r1
 8003fd0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003fd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fd8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	68d9      	ldr	r1, [r3, #12]
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	781a      	ldrb	r2, [r3, #0]
 8003fe2:	68bb      	ldr	r3, [r7, #8]
 8003fe4:	695b      	ldr	r3, [r3, #20]
 8003fe6:	b298      	uxth	r0, r3
 8003fe8:	79fb      	ldrb	r3, [r7, #7]
 8003fea:	9300      	str	r3, [sp, #0]
 8003fec:	4603      	mov	r3, r0
 8003fee:	68f8      	ldr	r0, [r7, #12]
 8003ff0:	f000 fa2b 	bl	800444a <USB_WritePacket>
 8003ff4:	e0ce      	b.n	8004194 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003ff6:	69bb      	ldr	r3, [r7, #24]
 8003ff8:	015a      	lsls	r2, r3, #5
 8003ffa:	69fb      	ldr	r3, [r7, #28]
 8003ffc:	4413      	add	r3, r2
 8003ffe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004002:	691b      	ldr	r3, [r3, #16]
 8004004:	69ba      	ldr	r2, [r7, #24]
 8004006:	0151      	lsls	r1, r2, #5
 8004008:	69fa      	ldr	r2, [r7, #28]
 800400a:	440a      	add	r2, r1
 800400c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004010:	0cdb      	lsrs	r3, r3, #19
 8004012:	04db      	lsls	r3, r3, #19
 8004014:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004016:	69bb      	ldr	r3, [r7, #24]
 8004018:	015a      	lsls	r2, r3, #5
 800401a:	69fb      	ldr	r3, [r7, #28]
 800401c:	4413      	add	r3, r2
 800401e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004022:	691b      	ldr	r3, [r3, #16]
 8004024:	69ba      	ldr	r2, [r7, #24]
 8004026:	0151      	lsls	r1, r2, #5
 8004028:	69fa      	ldr	r2, [r7, #28]
 800402a:	440a      	add	r2, r1
 800402c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004030:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004034:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004038:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	695b      	ldr	r3, [r3, #20]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d126      	bne.n	8004090 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004042:	69bb      	ldr	r3, [r7, #24]
 8004044:	015a      	lsls	r2, r3, #5
 8004046:	69fb      	ldr	r3, [r7, #28]
 8004048:	4413      	add	r3, r2
 800404a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800404e:	691a      	ldr	r2, [r3, #16]
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	689b      	ldr	r3, [r3, #8]
 8004054:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004058:	69b9      	ldr	r1, [r7, #24]
 800405a:	0148      	lsls	r0, r1, #5
 800405c:	69f9      	ldr	r1, [r7, #28]
 800405e:	4401      	add	r1, r0
 8004060:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004064:	4313      	orrs	r3, r2
 8004066:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004068:	69bb      	ldr	r3, [r7, #24]
 800406a:	015a      	lsls	r2, r3, #5
 800406c:	69fb      	ldr	r3, [r7, #28]
 800406e:	4413      	add	r3, r2
 8004070:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004074:	691b      	ldr	r3, [r3, #16]
 8004076:	69ba      	ldr	r2, [r7, #24]
 8004078:	0151      	lsls	r1, r2, #5
 800407a:	69fa      	ldr	r2, [r7, #28]
 800407c:	440a      	add	r2, r1
 800407e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004082:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004086:	6113      	str	r3, [r2, #16]
 8004088:	e036      	b.n	80040f8 <USB_EPStartXfer+0x3dc>
 800408a:	bf00      	nop
 800408c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	695a      	ldr	r2, [r3, #20]
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	689b      	ldr	r3, [r3, #8]
 8004098:	4413      	add	r3, r2
 800409a:	1e5a      	subs	r2, r3, #1
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	689b      	ldr	r3, [r3, #8]
 80040a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80040a4:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80040a6:	69bb      	ldr	r3, [r7, #24]
 80040a8:	015a      	lsls	r2, r3, #5
 80040aa:	69fb      	ldr	r3, [r7, #28]
 80040ac:	4413      	add	r3, r2
 80040ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040b2:	691a      	ldr	r2, [r3, #16]
 80040b4:	8afb      	ldrh	r3, [r7, #22]
 80040b6:	04d9      	lsls	r1, r3, #19
 80040b8:	4b39      	ldr	r3, [pc, #228]	; (80041a0 <USB_EPStartXfer+0x484>)
 80040ba:	400b      	ands	r3, r1
 80040bc:	69b9      	ldr	r1, [r7, #24]
 80040be:	0148      	lsls	r0, r1, #5
 80040c0:	69f9      	ldr	r1, [r7, #28]
 80040c2:	4401      	add	r1, r0
 80040c4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80040c8:	4313      	orrs	r3, r2
 80040ca:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80040cc:	69bb      	ldr	r3, [r7, #24]
 80040ce:	015a      	lsls	r2, r3, #5
 80040d0:	69fb      	ldr	r3, [r7, #28]
 80040d2:	4413      	add	r3, r2
 80040d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040d8:	691a      	ldr	r2, [r3, #16]
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	689b      	ldr	r3, [r3, #8]
 80040de:	8af9      	ldrh	r1, [r7, #22]
 80040e0:	fb01 f303 	mul.w	r3, r1, r3
 80040e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040e8:	69b9      	ldr	r1, [r7, #24]
 80040ea:	0148      	lsls	r0, r1, #5
 80040ec:	69f9      	ldr	r1, [r7, #28]
 80040ee:	4401      	add	r1, r0
 80040f0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80040f4:	4313      	orrs	r3, r2
 80040f6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80040f8:	79fb      	ldrb	r3, [r7, #7]
 80040fa:	2b01      	cmp	r3, #1
 80040fc:	d10d      	bne.n	800411a <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	68db      	ldr	r3, [r3, #12]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d009      	beq.n	800411a <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	68d9      	ldr	r1, [r3, #12]
 800410a:	69bb      	ldr	r3, [r7, #24]
 800410c:	015a      	lsls	r2, r3, #5
 800410e:	69fb      	ldr	r3, [r7, #28]
 8004110:	4413      	add	r3, r2
 8004112:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004116:	460a      	mov	r2, r1
 8004118:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800411a:	68bb      	ldr	r3, [r7, #8]
 800411c:	78db      	ldrb	r3, [r3, #3]
 800411e:	2b01      	cmp	r3, #1
 8004120:	d128      	bne.n	8004174 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004122:	69fb      	ldr	r3, [r7, #28]
 8004124:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004128:	689b      	ldr	r3, [r3, #8]
 800412a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800412e:	2b00      	cmp	r3, #0
 8004130:	d110      	bne.n	8004154 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004132:	69bb      	ldr	r3, [r7, #24]
 8004134:	015a      	lsls	r2, r3, #5
 8004136:	69fb      	ldr	r3, [r7, #28]
 8004138:	4413      	add	r3, r2
 800413a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	69ba      	ldr	r2, [r7, #24]
 8004142:	0151      	lsls	r1, r2, #5
 8004144:	69fa      	ldr	r2, [r7, #28]
 8004146:	440a      	add	r2, r1
 8004148:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800414c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004150:	6013      	str	r3, [r2, #0]
 8004152:	e00f      	b.n	8004174 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004154:	69bb      	ldr	r3, [r7, #24]
 8004156:	015a      	lsls	r2, r3, #5
 8004158:	69fb      	ldr	r3, [r7, #28]
 800415a:	4413      	add	r3, r2
 800415c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	69ba      	ldr	r2, [r7, #24]
 8004164:	0151      	lsls	r1, r2, #5
 8004166:	69fa      	ldr	r2, [r7, #28]
 8004168:	440a      	add	r2, r1
 800416a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800416e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004172:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004174:	69bb      	ldr	r3, [r7, #24]
 8004176:	015a      	lsls	r2, r3, #5
 8004178:	69fb      	ldr	r3, [r7, #28]
 800417a:	4413      	add	r3, r2
 800417c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	69ba      	ldr	r2, [r7, #24]
 8004184:	0151      	lsls	r1, r2, #5
 8004186:	69fa      	ldr	r2, [r7, #28]
 8004188:	440a      	add	r2, r1
 800418a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800418e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004192:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004194:	2300      	movs	r3, #0
}
 8004196:	4618      	mov	r0, r3
 8004198:	3720      	adds	r7, #32
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}
 800419e:	bf00      	nop
 80041a0:	1ff80000 	.word	0x1ff80000

080041a4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80041a4:	b480      	push	{r7}
 80041a6:	b087      	sub	sp, #28
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	60f8      	str	r0, [r7, #12]
 80041ac:	60b9      	str	r1, [r7, #8]
 80041ae:	4613      	mov	r3, r2
 80041b0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	781b      	ldrb	r3, [r3, #0]
 80041ba:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	785b      	ldrb	r3, [r3, #1]
 80041c0:	2b01      	cmp	r3, #1
 80041c2:	f040 80cd 	bne.w	8004360 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	695b      	ldr	r3, [r3, #20]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d132      	bne.n	8004234 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80041ce:	693b      	ldr	r3, [r7, #16]
 80041d0:	015a      	lsls	r2, r3, #5
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	4413      	add	r3, r2
 80041d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041da:	691b      	ldr	r3, [r3, #16]
 80041dc:	693a      	ldr	r2, [r7, #16]
 80041de:	0151      	lsls	r1, r2, #5
 80041e0:	697a      	ldr	r2, [r7, #20]
 80041e2:	440a      	add	r2, r1
 80041e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041e8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80041ec:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80041f0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	015a      	lsls	r2, r3, #5
 80041f6:	697b      	ldr	r3, [r7, #20]
 80041f8:	4413      	add	r3, r2
 80041fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041fe:	691b      	ldr	r3, [r3, #16]
 8004200:	693a      	ldr	r2, [r7, #16]
 8004202:	0151      	lsls	r1, r2, #5
 8004204:	697a      	ldr	r2, [r7, #20]
 8004206:	440a      	add	r2, r1
 8004208:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800420c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004210:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004212:	693b      	ldr	r3, [r7, #16]
 8004214:	015a      	lsls	r2, r3, #5
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	4413      	add	r3, r2
 800421a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800421e:	691b      	ldr	r3, [r3, #16]
 8004220:	693a      	ldr	r2, [r7, #16]
 8004222:	0151      	lsls	r1, r2, #5
 8004224:	697a      	ldr	r2, [r7, #20]
 8004226:	440a      	add	r2, r1
 8004228:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800422c:	0cdb      	lsrs	r3, r3, #19
 800422e:	04db      	lsls	r3, r3, #19
 8004230:	6113      	str	r3, [r2, #16]
 8004232:	e04e      	b.n	80042d2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004234:	693b      	ldr	r3, [r7, #16]
 8004236:	015a      	lsls	r2, r3, #5
 8004238:	697b      	ldr	r3, [r7, #20]
 800423a:	4413      	add	r3, r2
 800423c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004240:	691b      	ldr	r3, [r3, #16]
 8004242:	693a      	ldr	r2, [r7, #16]
 8004244:	0151      	lsls	r1, r2, #5
 8004246:	697a      	ldr	r2, [r7, #20]
 8004248:	440a      	add	r2, r1
 800424a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800424e:	0cdb      	lsrs	r3, r3, #19
 8004250:	04db      	lsls	r3, r3, #19
 8004252:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	015a      	lsls	r2, r3, #5
 8004258:	697b      	ldr	r3, [r7, #20]
 800425a:	4413      	add	r3, r2
 800425c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004260:	691b      	ldr	r3, [r3, #16]
 8004262:	693a      	ldr	r2, [r7, #16]
 8004264:	0151      	lsls	r1, r2, #5
 8004266:	697a      	ldr	r2, [r7, #20]
 8004268:	440a      	add	r2, r1
 800426a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800426e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004272:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004276:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	695a      	ldr	r2, [r3, #20]
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	689b      	ldr	r3, [r3, #8]
 8004280:	429a      	cmp	r2, r3
 8004282:	d903      	bls.n	800428c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	689a      	ldr	r2, [r3, #8]
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800428c:	693b      	ldr	r3, [r7, #16]
 800428e:	015a      	lsls	r2, r3, #5
 8004290:	697b      	ldr	r3, [r7, #20]
 8004292:	4413      	add	r3, r2
 8004294:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004298:	691b      	ldr	r3, [r3, #16]
 800429a:	693a      	ldr	r2, [r7, #16]
 800429c:	0151      	lsls	r1, r2, #5
 800429e:	697a      	ldr	r2, [r7, #20]
 80042a0:	440a      	add	r2, r1
 80042a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042a6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80042aa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	015a      	lsls	r2, r3, #5
 80042b0:	697b      	ldr	r3, [r7, #20]
 80042b2:	4413      	add	r3, r2
 80042b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042b8:	691a      	ldr	r2, [r3, #16]
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	695b      	ldr	r3, [r3, #20]
 80042be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042c2:	6939      	ldr	r1, [r7, #16]
 80042c4:	0148      	lsls	r0, r1, #5
 80042c6:	6979      	ldr	r1, [r7, #20]
 80042c8:	4401      	add	r1, r0
 80042ca:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80042ce:	4313      	orrs	r3, r2
 80042d0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80042d2:	79fb      	ldrb	r3, [r7, #7]
 80042d4:	2b01      	cmp	r3, #1
 80042d6:	d11e      	bne.n	8004316 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	691b      	ldr	r3, [r3, #16]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d009      	beq.n	80042f4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80042e0:	693b      	ldr	r3, [r7, #16]
 80042e2:	015a      	lsls	r2, r3, #5
 80042e4:	697b      	ldr	r3, [r7, #20]
 80042e6:	4413      	add	r3, r2
 80042e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042ec:	461a      	mov	r2, r3
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	691b      	ldr	r3, [r3, #16]
 80042f2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80042f4:	693b      	ldr	r3, [r7, #16]
 80042f6:	015a      	lsls	r2, r3, #5
 80042f8:	697b      	ldr	r3, [r7, #20]
 80042fa:	4413      	add	r3, r2
 80042fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	693a      	ldr	r2, [r7, #16]
 8004304:	0151      	lsls	r1, r2, #5
 8004306:	697a      	ldr	r2, [r7, #20]
 8004308:	440a      	add	r2, r1
 800430a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800430e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004312:	6013      	str	r3, [r2, #0]
 8004314:	e092      	b.n	800443c <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004316:	693b      	ldr	r3, [r7, #16]
 8004318:	015a      	lsls	r2, r3, #5
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	4413      	add	r3, r2
 800431e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	693a      	ldr	r2, [r7, #16]
 8004326:	0151      	lsls	r1, r2, #5
 8004328:	697a      	ldr	r2, [r7, #20]
 800432a:	440a      	add	r2, r1
 800432c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004330:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004334:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	695b      	ldr	r3, [r3, #20]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d07e      	beq.n	800443c <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800433e:	697b      	ldr	r3, [r7, #20]
 8004340:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004344:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	781b      	ldrb	r3, [r3, #0]
 800434a:	f003 030f 	and.w	r3, r3, #15
 800434e:	2101      	movs	r1, #1
 8004350:	fa01 f303 	lsl.w	r3, r1, r3
 8004354:	6979      	ldr	r1, [r7, #20]
 8004356:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800435a:	4313      	orrs	r3, r2
 800435c:	634b      	str	r3, [r1, #52]	; 0x34
 800435e:	e06d      	b.n	800443c <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	015a      	lsls	r2, r3, #5
 8004364:	697b      	ldr	r3, [r7, #20]
 8004366:	4413      	add	r3, r2
 8004368:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800436c:	691b      	ldr	r3, [r3, #16]
 800436e:	693a      	ldr	r2, [r7, #16]
 8004370:	0151      	lsls	r1, r2, #5
 8004372:	697a      	ldr	r2, [r7, #20]
 8004374:	440a      	add	r2, r1
 8004376:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800437a:	0cdb      	lsrs	r3, r3, #19
 800437c:	04db      	lsls	r3, r3, #19
 800437e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004380:	693b      	ldr	r3, [r7, #16]
 8004382:	015a      	lsls	r2, r3, #5
 8004384:	697b      	ldr	r3, [r7, #20]
 8004386:	4413      	add	r3, r2
 8004388:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800438c:	691b      	ldr	r3, [r3, #16]
 800438e:	693a      	ldr	r2, [r7, #16]
 8004390:	0151      	lsls	r1, r2, #5
 8004392:	697a      	ldr	r2, [r7, #20]
 8004394:	440a      	add	r2, r1
 8004396:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800439a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800439e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80043a2:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	695b      	ldr	r3, [r3, #20]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d003      	beq.n	80043b4 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	689a      	ldr	r2, [r3, #8]
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80043b4:	693b      	ldr	r3, [r7, #16]
 80043b6:	015a      	lsls	r2, r3, #5
 80043b8:	697b      	ldr	r3, [r7, #20]
 80043ba:	4413      	add	r3, r2
 80043bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043c0:	691b      	ldr	r3, [r3, #16]
 80043c2:	693a      	ldr	r2, [r7, #16]
 80043c4:	0151      	lsls	r1, r2, #5
 80043c6:	697a      	ldr	r2, [r7, #20]
 80043c8:	440a      	add	r2, r1
 80043ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80043ce:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80043d2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80043d4:	693b      	ldr	r3, [r7, #16]
 80043d6:	015a      	lsls	r2, r3, #5
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	4413      	add	r3, r2
 80043dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043e0:	691a      	ldr	r2, [r3, #16]
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	689b      	ldr	r3, [r3, #8]
 80043e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043ea:	6939      	ldr	r1, [r7, #16]
 80043ec:	0148      	lsls	r0, r1, #5
 80043ee:	6979      	ldr	r1, [r7, #20]
 80043f0:	4401      	add	r1, r0
 80043f2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80043f6:	4313      	orrs	r3, r2
 80043f8:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80043fa:	79fb      	ldrb	r3, [r7, #7]
 80043fc:	2b01      	cmp	r3, #1
 80043fe:	d10d      	bne.n	800441c <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	68db      	ldr	r3, [r3, #12]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d009      	beq.n	800441c <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	68d9      	ldr	r1, [r3, #12]
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	015a      	lsls	r2, r3, #5
 8004410:	697b      	ldr	r3, [r7, #20]
 8004412:	4413      	add	r3, r2
 8004414:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004418:	460a      	mov	r2, r1
 800441a:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800441c:	693b      	ldr	r3, [r7, #16]
 800441e:	015a      	lsls	r2, r3, #5
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	4413      	add	r3, r2
 8004424:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	693a      	ldr	r2, [r7, #16]
 800442c:	0151      	lsls	r1, r2, #5
 800442e:	697a      	ldr	r2, [r7, #20]
 8004430:	440a      	add	r2, r1
 8004432:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004436:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800443a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800443c:	2300      	movs	r3, #0
}
 800443e:	4618      	mov	r0, r3
 8004440:	371c      	adds	r7, #28
 8004442:	46bd      	mov	sp, r7
 8004444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004448:	4770      	bx	lr

0800444a <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800444a:	b480      	push	{r7}
 800444c:	b089      	sub	sp, #36	; 0x24
 800444e:	af00      	add	r7, sp, #0
 8004450:	60f8      	str	r0, [r7, #12]
 8004452:	60b9      	str	r1, [r7, #8]
 8004454:	4611      	mov	r1, r2
 8004456:	461a      	mov	r2, r3
 8004458:	460b      	mov	r3, r1
 800445a:	71fb      	strb	r3, [r7, #7]
 800445c:	4613      	mov	r3, r2
 800445e:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004468:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800446c:	2b00      	cmp	r3, #0
 800446e:	d123      	bne.n	80044b8 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004470:	88bb      	ldrh	r3, [r7, #4]
 8004472:	3303      	adds	r3, #3
 8004474:	089b      	lsrs	r3, r3, #2
 8004476:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004478:	2300      	movs	r3, #0
 800447a:	61bb      	str	r3, [r7, #24]
 800447c:	e018      	b.n	80044b0 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800447e:	79fb      	ldrb	r3, [r7, #7]
 8004480:	031a      	lsls	r2, r3, #12
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	4413      	add	r3, r2
 8004486:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800448a:	461a      	mov	r2, r3
 800448c:	69fb      	ldr	r3, [r7, #28]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004492:	69fb      	ldr	r3, [r7, #28]
 8004494:	3301      	adds	r3, #1
 8004496:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004498:	69fb      	ldr	r3, [r7, #28]
 800449a:	3301      	adds	r3, #1
 800449c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800449e:	69fb      	ldr	r3, [r7, #28]
 80044a0:	3301      	adds	r3, #1
 80044a2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80044a4:	69fb      	ldr	r3, [r7, #28]
 80044a6:	3301      	adds	r3, #1
 80044a8:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80044aa:	69bb      	ldr	r3, [r7, #24]
 80044ac:	3301      	adds	r3, #1
 80044ae:	61bb      	str	r3, [r7, #24]
 80044b0:	69ba      	ldr	r2, [r7, #24]
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	429a      	cmp	r2, r3
 80044b6:	d3e2      	bcc.n	800447e <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80044b8:	2300      	movs	r3, #0
}
 80044ba:	4618      	mov	r0, r3
 80044bc:	3724      	adds	r7, #36	; 0x24
 80044be:	46bd      	mov	sp, r7
 80044c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c4:	4770      	bx	lr

080044c6 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80044c6:	b480      	push	{r7}
 80044c8:	b08b      	sub	sp, #44	; 0x2c
 80044ca:	af00      	add	r7, sp, #0
 80044cc:	60f8      	str	r0, [r7, #12]
 80044ce:	60b9      	str	r1, [r7, #8]
 80044d0:	4613      	mov	r3, r2
 80044d2:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80044dc:	88fb      	ldrh	r3, [r7, #6]
 80044de:	089b      	lsrs	r3, r3, #2
 80044e0:	b29b      	uxth	r3, r3
 80044e2:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80044e4:	88fb      	ldrh	r3, [r7, #6]
 80044e6:	f003 0303 	and.w	r3, r3, #3
 80044ea:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80044ec:	2300      	movs	r3, #0
 80044ee:	623b      	str	r3, [r7, #32]
 80044f0:	e014      	b.n	800451c <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80044f2:	69bb      	ldr	r3, [r7, #24]
 80044f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044f8:	681a      	ldr	r2, [r3, #0]
 80044fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044fc:	601a      	str	r2, [r3, #0]
    pDest++;
 80044fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004500:	3301      	adds	r3, #1
 8004502:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004506:	3301      	adds	r3, #1
 8004508:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800450a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800450c:	3301      	adds	r3, #1
 800450e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004512:	3301      	adds	r3, #1
 8004514:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004516:	6a3b      	ldr	r3, [r7, #32]
 8004518:	3301      	adds	r3, #1
 800451a:	623b      	str	r3, [r7, #32]
 800451c:	6a3a      	ldr	r2, [r7, #32]
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	429a      	cmp	r2, r3
 8004522:	d3e6      	bcc.n	80044f2 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004524:	8bfb      	ldrh	r3, [r7, #30]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d01e      	beq.n	8004568 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800452a:	2300      	movs	r3, #0
 800452c:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800452e:	69bb      	ldr	r3, [r7, #24]
 8004530:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004534:	461a      	mov	r2, r3
 8004536:	f107 0310 	add.w	r3, r7, #16
 800453a:	6812      	ldr	r2, [r2, #0]
 800453c:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800453e:	693a      	ldr	r2, [r7, #16]
 8004540:	6a3b      	ldr	r3, [r7, #32]
 8004542:	b2db      	uxtb	r3, r3
 8004544:	00db      	lsls	r3, r3, #3
 8004546:	fa22 f303 	lsr.w	r3, r2, r3
 800454a:	b2da      	uxtb	r2, r3
 800454c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800454e:	701a      	strb	r2, [r3, #0]
      i++;
 8004550:	6a3b      	ldr	r3, [r7, #32]
 8004552:	3301      	adds	r3, #1
 8004554:	623b      	str	r3, [r7, #32]
      pDest++;
 8004556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004558:	3301      	adds	r3, #1
 800455a:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800455c:	8bfb      	ldrh	r3, [r7, #30]
 800455e:	3b01      	subs	r3, #1
 8004560:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004562:	8bfb      	ldrh	r3, [r7, #30]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d1ea      	bne.n	800453e <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800456a:	4618      	mov	r0, r3
 800456c:	372c      	adds	r7, #44	; 0x2c
 800456e:	46bd      	mov	sp, r7
 8004570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004574:	4770      	bx	lr

08004576 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004576:	b480      	push	{r7}
 8004578:	b085      	sub	sp, #20
 800457a:	af00      	add	r7, sp, #0
 800457c:	6078      	str	r0, [r7, #4]
 800457e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	781b      	ldrb	r3, [r3, #0]
 8004588:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	785b      	ldrb	r3, [r3, #1]
 800458e:	2b01      	cmp	r3, #1
 8004590:	d12c      	bne.n	80045ec <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004592:	68bb      	ldr	r3, [r7, #8]
 8004594:	015a      	lsls	r2, r3, #5
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	4413      	add	r3, r2
 800459a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	db12      	blt.n	80045ca <USB_EPSetStall+0x54>
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d00f      	beq.n	80045ca <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	015a      	lsls	r2, r3, #5
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	4413      	add	r3, r2
 80045b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	68ba      	ldr	r2, [r7, #8]
 80045ba:	0151      	lsls	r1, r2, #5
 80045bc:	68fa      	ldr	r2, [r7, #12]
 80045be:	440a      	add	r2, r1
 80045c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045c4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80045c8:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	015a      	lsls	r2, r3, #5
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	4413      	add	r3, r2
 80045d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	68ba      	ldr	r2, [r7, #8]
 80045da:	0151      	lsls	r1, r2, #5
 80045dc:	68fa      	ldr	r2, [r7, #12]
 80045de:	440a      	add	r2, r1
 80045e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045e4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80045e8:	6013      	str	r3, [r2, #0]
 80045ea:	e02b      	b.n	8004644 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	015a      	lsls	r2, r3, #5
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	4413      	add	r3, r2
 80045f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	db12      	blt.n	8004624 <USB_EPSetStall+0xae>
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d00f      	beq.n	8004624 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	015a      	lsls	r2, r3, #5
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	4413      	add	r3, r2
 800460c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	68ba      	ldr	r2, [r7, #8]
 8004614:	0151      	lsls	r1, r2, #5
 8004616:	68fa      	ldr	r2, [r7, #12]
 8004618:	440a      	add	r2, r1
 800461a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800461e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004622:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	015a      	lsls	r2, r3, #5
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	4413      	add	r3, r2
 800462c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	68ba      	ldr	r2, [r7, #8]
 8004634:	0151      	lsls	r1, r2, #5
 8004636:	68fa      	ldr	r2, [r7, #12]
 8004638:	440a      	add	r2, r1
 800463a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800463e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004642:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004644:	2300      	movs	r3, #0
}
 8004646:	4618      	mov	r0, r3
 8004648:	3714      	adds	r7, #20
 800464a:	46bd      	mov	sp, r7
 800464c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004650:	4770      	bx	lr

08004652 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004652:	b480      	push	{r7}
 8004654:	b085      	sub	sp, #20
 8004656:	af00      	add	r7, sp, #0
 8004658:	6078      	str	r0, [r7, #4]
 800465a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	781b      	ldrb	r3, [r3, #0]
 8004664:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	785b      	ldrb	r3, [r3, #1]
 800466a:	2b01      	cmp	r3, #1
 800466c:	d128      	bne.n	80046c0 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	015a      	lsls	r2, r3, #5
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	4413      	add	r3, r2
 8004676:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	68ba      	ldr	r2, [r7, #8]
 800467e:	0151      	lsls	r1, r2, #5
 8004680:	68fa      	ldr	r2, [r7, #12]
 8004682:	440a      	add	r2, r1
 8004684:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004688:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800468c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	78db      	ldrb	r3, [r3, #3]
 8004692:	2b03      	cmp	r3, #3
 8004694:	d003      	beq.n	800469e <USB_EPClearStall+0x4c>
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	78db      	ldrb	r3, [r3, #3]
 800469a:	2b02      	cmp	r3, #2
 800469c:	d138      	bne.n	8004710 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	015a      	lsls	r2, r3, #5
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	4413      	add	r3, r2
 80046a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	68ba      	ldr	r2, [r7, #8]
 80046ae:	0151      	lsls	r1, r2, #5
 80046b0:	68fa      	ldr	r2, [r7, #12]
 80046b2:	440a      	add	r2, r1
 80046b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046bc:	6013      	str	r3, [r2, #0]
 80046be:	e027      	b.n	8004710 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80046c0:	68bb      	ldr	r3, [r7, #8]
 80046c2:	015a      	lsls	r2, r3, #5
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	4413      	add	r3, r2
 80046c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	68ba      	ldr	r2, [r7, #8]
 80046d0:	0151      	lsls	r1, r2, #5
 80046d2:	68fa      	ldr	r2, [r7, #12]
 80046d4:	440a      	add	r2, r1
 80046d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80046da:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80046de:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	78db      	ldrb	r3, [r3, #3]
 80046e4:	2b03      	cmp	r3, #3
 80046e6:	d003      	beq.n	80046f0 <USB_EPClearStall+0x9e>
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	78db      	ldrb	r3, [r3, #3]
 80046ec:	2b02      	cmp	r3, #2
 80046ee:	d10f      	bne.n	8004710 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80046f0:	68bb      	ldr	r3, [r7, #8]
 80046f2:	015a      	lsls	r2, r3, #5
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	4413      	add	r3, r2
 80046f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	68ba      	ldr	r2, [r7, #8]
 8004700:	0151      	lsls	r1, r2, #5
 8004702:	68fa      	ldr	r2, [r7, #12]
 8004704:	440a      	add	r2, r1
 8004706:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800470a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800470e:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004710:	2300      	movs	r3, #0
}
 8004712:	4618      	mov	r0, r3
 8004714:	3714      	adds	r7, #20
 8004716:	46bd      	mov	sp, r7
 8004718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471c:	4770      	bx	lr

0800471e <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800471e:	b480      	push	{r7}
 8004720:	b085      	sub	sp, #20
 8004722:	af00      	add	r7, sp, #0
 8004724:	6078      	str	r0, [r7, #4]
 8004726:	460b      	mov	r3, r1
 8004728:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	68fa      	ldr	r2, [r7, #12]
 8004738:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800473c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004740:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004748:	681a      	ldr	r2, [r3, #0]
 800474a:	78fb      	ldrb	r3, [r7, #3]
 800474c:	011b      	lsls	r3, r3, #4
 800474e:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004752:	68f9      	ldr	r1, [r7, #12]
 8004754:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004758:	4313      	orrs	r3, r2
 800475a:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800475c:	2300      	movs	r3, #0
}
 800475e:	4618      	mov	r0, r3
 8004760:	3714      	adds	r7, #20
 8004762:	46bd      	mov	sp, r7
 8004764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004768:	4770      	bx	lr

0800476a <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800476a:	b480      	push	{r7}
 800476c:	b085      	sub	sp, #20
 800476e:	af00      	add	r7, sp, #0
 8004770:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	68fa      	ldr	r2, [r7, #12]
 8004780:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004784:	f023 0303 	bic.w	r3, r3, #3
 8004788:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	68fa      	ldr	r2, [r7, #12]
 8004794:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004798:	f023 0302 	bic.w	r3, r3, #2
 800479c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800479e:	2300      	movs	r3, #0
}
 80047a0:	4618      	mov	r0, r3
 80047a2:	3714      	adds	r7, #20
 80047a4:	46bd      	mov	sp, r7
 80047a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047aa:	4770      	bx	lr

080047ac <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b085      	sub	sp, #20
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	68fa      	ldr	r2, [r7, #12]
 80047c2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80047c6:	f023 0303 	bic.w	r3, r3, #3
 80047ca:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	68fa      	ldr	r2, [r7, #12]
 80047d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80047da:	f043 0302 	orr.w	r3, r3, #2
 80047de:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80047e0:	2300      	movs	r3, #0
}
 80047e2:	4618      	mov	r0, r3
 80047e4:	3714      	adds	r7, #20
 80047e6:	46bd      	mov	sp, r7
 80047e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ec:	4770      	bx	lr

080047ee <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80047ee:	b480      	push	{r7}
 80047f0:	b085      	sub	sp, #20
 80047f2:	af00      	add	r7, sp, #0
 80047f4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	695b      	ldr	r3, [r3, #20]
 80047fa:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	699b      	ldr	r3, [r3, #24]
 8004800:	68fa      	ldr	r2, [r7, #12]
 8004802:	4013      	ands	r3, r2
 8004804:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004806:	68fb      	ldr	r3, [r7, #12]
}
 8004808:	4618      	mov	r0, r3
 800480a:	3714      	adds	r7, #20
 800480c:	46bd      	mov	sp, r7
 800480e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004812:	4770      	bx	lr

08004814 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004814:	b480      	push	{r7}
 8004816:	b085      	sub	sp, #20
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004826:	699b      	ldr	r3, [r3, #24]
 8004828:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004830:	69db      	ldr	r3, [r3, #28]
 8004832:	68ba      	ldr	r2, [r7, #8]
 8004834:	4013      	ands	r3, r2
 8004836:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	0c1b      	lsrs	r3, r3, #16
}
 800483c:	4618      	mov	r0, r3
 800483e:	3714      	adds	r7, #20
 8004840:	46bd      	mov	sp, r7
 8004842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004846:	4770      	bx	lr

08004848 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004848:	b480      	push	{r7}
 800484a:	b085      	sub	sp, #20
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800485a:	699b      	ldr	r3, [r3, #24]
 800485c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004864:	69db      	ldr	r3, [r3, #28]
 8004866:	68ba      	ldr	r2, [r7, #8]
 8004868:	4013      	ands	r3, r2
 800486a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	b29b      	uxth	r3, r3
}
 8004870:	4618      	mov	r0, r3
 8004872:	3714      	adds	r7, #20
 8004874:	46bd      	mov	sp, r7
 8004876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487a:	4770      	bx	lr

0800487c <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800487c:	b480      	push	{r7}
 800487e:	b085      	sub	sp, #20
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
 8004884:	460b      	mov	r3, r1
 8004886:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800488c:	78fb      	ldrb	r3, [r7, #3]
 800488e:	015a      	lsls	r2, r3, #5
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	4413      	add	r3, r2
 8004894:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004898:	689b      	ldr	r3, [r3, #8]
 800489a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048a2:	695b      	ldr	r3, [r3, #20]
 80048a4:	68ba      	ldr	r2, [r7, #8]
 80048a6:	4013      	ands	r3, r2
 80048a8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80048aa:	68bb      	ldr	r3, [r7, #8]
}
 80048ac:	4618      	mov	r0, r3
 80048ae:	3714      	adds	r7, #20
 80048b0:	46bd      	mov	sp, r7
 80048b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b6:	4770      	bx	lr

080048b8 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80048b8:	b480      	push	{r7}
 80048ba:	b087      	sub	sp, #28
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
 80048c0:	460b      	mov	r3, r1
 80048c2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80048c8:	697b      	ldr	r3, [r7, #20]
 80048ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048ce:	691b      	ldr	r3, [r3, #16]
 80048d0:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80048d2:	697b      	ldr	r3, [r7, #20]
 80048d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048da:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80048dc:	78fb      	ldrb	r3, [r7, #3]
 80048de:	f003 030f 	and.w	r3, r3, #15
 80048e2:	68fa      	ldr	r2, [r7, #12]
 80048e4:	fa22 f303 	lsr.w	r3, r2, r3
 80048e8:	01db      	lsls	r3, r3, #7
 80048ea:	b2db      	uxtb	r3, r3
 80048ec:	693a      	ldr	r2, [r7, #16]
 80048ee:	4313      	orrs	r3, r2
 80048f0:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80048f2:	78fb      	ldrb	r3, [r7, #3]
 80048f4:	015a      	lsls	r2, r3, #5
 80048f6:	697b      	ldr	r3, [r7, #20]
 80048f8:	4413      	add	r3, r2
 80048fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048fe:	689b      	ldr	r3, [r3, #8]
 8004900:	693a      	ldr	r2, [r7, #16]
 8004902:	4013      	ands	r3, r2
 8004904:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004906:	68bb      	ldr	r3, [r7, #8]
}
 8004908:	4618      	mov	r0, r3
 800490a:	371c      	adds	r7, #28
 800490c:	46bd      	mov	sp, r7
 800490e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004912:	4770      	bx	lr

08004914 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004914:	b480      	push	{r7}
 8004916:	b083      	sub	sp, #12
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	695b      	ldr	r3, [r3, #20]
 8004920:	f003 0301 	and.w	r3, r3, #1
}
 8004924:	4618      	mov	r0, r3
 8004926:	370c      	adds	r7, #12
 8004928:	46bd      	mov	sp, r7
 800492a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492e:	4770      	bx	lr

08004930 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8004930:	b480      	push	{r7}
 8004932:	b085      	sub	sp, #20
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	68fa      	ldr	r2, [r7, #12]
 8004946:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800494a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800494e:	f023 0307 	bic.w	r3, r3, #7
 8004952:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	68fa      	ldr	r2, [r7, #12]
 800495e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004962:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004966:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004968:	2300      	movs	r3, #0
}
 800496a:	4618      	mov	r0, r3
 800496c:	3714      	adds	r7, #20
 800496e:	46bd      	mov	sp, r7
 8004970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004974:	4770      	bx	lr
	...

08004978 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8004978:	b480      	push	{r7}
 800497a:	b087      	sub	sp, #28
 800497c:	af00      	add	r7, sp, #0
 800497e:	60f8      	str	r0, [r7, #12]
 8004980:	460b      	mov	r3, r1
 8004982:	607a      	str	r2, [r7, #4]
 8004984:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	333c      	adds	r3, #60	; 0x3c
 800498e:	3304      	adds	r3, #4
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004994:	693b      	ldr	r3, [r7, #16]
 8004996:	4a26      	ldr	r2, [pc, #152]	; (8004a30 <USB_EP0_OutStart+0xb8>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d90a      	bls.n	80049b2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800499c:	697b      	ldr	r3, [r7, #20]
 800499e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80049a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80049ac:	d101      	bne.n	80049b2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80049ae:	2300      	movs	r3, #0
 80049b0:	e037      	b.n	8004a22 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049b8:	461a      	mov	r2, r3
 80049ba:	2300      	movs	r3, #0
 80049bc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049c4:	691b      	ldr	r3, [r3, #16]
 80049c6:	697a      	ldr	r2, [r7, #20]
 80049c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049cc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80049d0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80049d2:	697b      	ldr	r3, [r7, #20]
 80049d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049d8:	691b      	ldr	r3, [r3, #16]
 80049da:	697a      	ldr	r2, [r7, #20]
 80049dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049e0:	f043 0318 	orr.w	r3, r3, #24
 80049e4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049ec:	691b      	ldr	r3, [r3, #16]
 80049ee:	697a      	ldr	r2, [r7, #20]
 80049f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049f4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80049f8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80049fa:	7afb      	ldrb	r3, [r7, #11]
 80049fc:	2b01      	cmp	r3, #1
 80049fe:	d10f      	bne.n	8004a20 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004a00:	697b      	ldr	r3, [r7, #20]
 8004a02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a06:	461a      	mov	r2, r3
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004a0c:	697b      	ldr	r3, [r7, #20]
 8004a0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	697a      	ldr	r2, [r7, #20]
 8004a16:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a1a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8004a1e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004a20:	2300      	movs	r3, #0
}
 8004a22:	4618      	mov	r0, r3
 8004a24:	371c      	adds	r7, #28
 8004a26:	46bd      	mov	sp, r7
 8004a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2c:	4770      	bx	lr
 8004a2e:	bf00      	nop
 8004a30:	4f54300a 	.word	0x4f54300a

08004a34 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004a34:	b480      	push	{r7}
 8004a36:	b085      	sub	sp, #20
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	3301      	adds	r3, #1
 8004a44:	60fb      	str	r3, [r7, #12]
 8004a46:	4a13      	ldr	r2, [pc, #76]	; (8004a94 <USB_CoreReset+0x60>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d901      	bls.n	8004a50 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8004a4c:	2303      	movs	r3, #3
 8004a4e:	e01a      	b.n	8004a86 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	691b      	ldr	r3, [r3, #16]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	daf3      	bge.n	8004a40 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004a58:	2300      	movs	r3, #0
 8004a5a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	691b      	ldr	r3, [r3, #16]
 8004a60:	f043 0201 	orr.w	r2, r3, #1
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	3301      	adds	r3, #1
 8004a6c:	60fb      	str	r3, [r7, #12]
 8004a6e:	4a09      	ldr	r2, [pc, #36]	; (8004a94 <USB_CoreReset+0x60>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d901      	bls.n	8004a78 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8004a74:	2303      	movs	r3, #3
 8004a76:	e006      	b.n	8004a86 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	691b      	ldr	r3, [r3, #16]
 8004a7c:	f003 0301 	and.w	r3, r3, #1
 8004a80:	2b01      	cmp	r3, #1
 8004a82:	d0f1      	beq.n	8004a68 <USB_CoreReset+0x34>

  return HAL_OK;
 8004a84:	2300      	movs	r3, #0
}
 8004a86:	4618      	mov	r0, r3
 8004a88:	3714      	adds	r7, #20
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a90:	4770      	bx	lr
 8004a92:	bf00      	nop
 8004a94:	00030d40 	.word	0x00030d40

08004a98 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b084      	sub	sp, #16
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
 8004aa0:	460b      	mov	r3, r1
 8004aa2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004aa4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004aa8:	f002 f952 	bl	8006d50 <USBD_static_malloc>
 8004aac:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d105      	bne.n	8004ac0 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8004abc:	2302      	movs	r3, #2
 8004abe:	e066      	b.n	8004b8e <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	68fa      	ldr	r2, [r7, #12]
 8004ac4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	7c1b      	ldrb	r3, [r3, #16]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d119      	bne.n	8004b04 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004ad0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004ad4:	2202      	movs	r2, #2
 8004ad6:	2181      	movs	r1, #129	; 0x81
 8004ad8:	6878      	ldr	r0, [r7, #4]
 8004ada:	f002 f816 	bl	8006b0a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2201      	movs	r2, #1
 8004ae2:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004ae4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004ae8:	2202      	movs	r2, #2
 8004aea:	2101      	movs	r1, #1
 8004aec:	6878      	ldr	r0, [r7, #4]
 8004aee:	f002 f80c 	bl	8006b0a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2201      	movs	r2, #1
 8004af6:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2210      	movs	r2, #16
 8004afe:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8004b02:	e016      	b.n	8004b32 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004b04:	2340      	movs	r3, #64	; 0x40
 8004b06:	2202      	movs	r2, #2
 8004b08:	2181      	movs	r1, #129	; 0x81
 8004b0a:	6878      	ldr	r0, [r7, #4]
 8004b0c:	f001 fffd 	bl	8006b0a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2201      	movs	r2, #1
 8004b14:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004b16:	2340      	movs	r3, #64	; 0x40
 8004b18:	2202      	movs	r2, #2
 8004b1a:	2101      	movs	r1, #1
 8004b1c:	6878      	ldr	r0, [r7, #4]
 8004b1e:	f001 fff4 	bl	8006b0a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2201      	movs	r2, #1
 8004b26:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2210      	movs	r2, #16
 8004b2e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004b32:	2308      	movs	r3, #8
 8004b34:	2203      	movs	r2, #3
 8004b36:	2182      	movs	r1, #130	; 0x82
 8004b38:	6878      	ldr	r0, [r7, #4]
 8004b3a:	f001 ffe6 	bl	8006b0a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2201      	movs	r2, #1
 8004b42:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	2200      	movs	r2, #0
 8004b54:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	7c1b      	ldrb	r3, [r3, #16]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d109      	bne.n	8004b7c <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004b6e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004b72:	2101      	movs	r1, #1
 8004b74:	6878      	ldr	r0, [r7, #4]
 8004b76:	f002 f8b7 	bl	8006ce8 <USBD_LL_PrepareReceive>
 8004b7a:	e007      	b.n	8004b8c <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004b82:	2340      	movs	r3, #64	; 0x40
 8004b84:	2101      	movs	r1, #1
 8004b86:	6878      	ldr	r0, [r7, #4]
 8004b88:	f002 f8ae 	bl	8006ce8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8004b8c:	2300      	movs	r3, #0
}
 8004b8e:	4618      	mov	r0, r3
 8004b90:	3710      	adds	r7, #16
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bd80      	pop	{r7, pc}

08004b96 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004b96:	b580      	push	{r7, lr}
 8004b98:	b082      	sub	sp, #8
 8004b9a:	af00      	add	r7, sp, #0
 8004b9c:	6078      	str	r0, [r7, #4]
 8004b9e:	460b      	mov	r3, r1
 8004ba0:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8004ba2:	2181      	movs	r1, #129	; 0x81
 8004ba4:	6878      	ldr	r0, [r7, #4]
 8004ba6:	f001 ffd6 	bl	8006b56 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2200      	movs	r2, #0
 8004bae:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8004bb0:	2101      	movs	r1, #1
 8004bb2:	6878      	ldr	r0, [r7, #4]
 8004bb4:	f001 ffcf 	bl	8006b56 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2200      	movs	r2, #0
 8004bbc:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8004bc0:	2182      	movs	r1, #130	; 0x82
 8004bc2:	6878      	ldr	r0, [r7, #4]
 8004bc4:	f001 ffc7 	bl	8006b56 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2200      	movs	r2, #0
 8004bcc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d00e      	beq.n	8004c00 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	f002 f8ba 	bl	8006d6c <USBD_static_free>
    pdev->pClassData = NULL;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8004c00:	2300      	movs	r3, #0
}
 8004c02:	4618      	mov	r0, r3
 8004c04:	3708      	adds	r7, #8
 8004c06:	46bd      	mov	sp, r7
 8004c08:	bd80      	pop	{r7, pc}
	...

08004c0c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b086      	sub	sp, #24
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
 8004c14:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004c1c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8004c1e:	2300      	movs	r3, #0
 8004c20:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8004c22:	2300      	movs	r3, #0
 8004c24:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8004c26:	2300      	movs	r3, #0
 8004c28:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8004c2a:	693b      	ldr	r3, [r7, #16]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d101      	bne.n	8004c34 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8004c30:	2303      	movs	r3, #3
 8004c32:	e0af      	b.n	8004d94 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	781b      	ldrb	r3, [r3, #0]
 8004c38:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d03f      	beq.n	8004cc0 <USBD_CDC_Setup+0xb4>
 8004c40:	2b20      	cmp	r3, #32
 8004c42:	f040 809f 	bne.w	8004d84 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	88db      	ldrh	r3, [r3, #6]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d02e      	beq.n	8004cac <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	781b      	ldrb	r3, [r3, #0]
 8004c52:	b25b      	sxtb	r3, r3
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	da16      	bge.n	8004c86 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004c5e:	689b      	ldr	r3, [r3, #8]
 8004c60:	683a      	ldr	r2, [r7, #0]
 8004c62:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8004c64:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004c66:	683a      	ldr	r2, [r7, #0]
 8004c68:	88d2      	ldrh	r2, [r2, #6]
 8004c6a:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	88db      	ldrh	r3, [r3, #6]
 8004c70:	2b07      	cmp	r3, #7
 8004c72:	bf28      	it	cs
 8004c74:	2307      	movcs	r3, #7
 8004c76:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8004c78:	693b      	ldr	r3, [r7, #16]
 8004c7a:	89fa      	ldrh	r2, [r7, #14]
 8004c7c:	4619      	mov	r1, r3
 8004c7e:	6878      	ldr	r0, [r7, #4]
 8004c80:	f001 fb19 	bl	80062b6 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8004c84:	e085      	b.n	8004d92 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	785a      	ldrb	r2, [r3, #1]
 8004c8a:	693b      	ldr	r3, [r7, #16]
 8004c8c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	88db      	ldrh	r3, [r3, #6]
 8004c94:	b2da      	uxtb	r2, r3
 8004c96:	693b      	ldr	r3, [r7, #16]
 8004c98:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8004c9c:	6939      	ldr	r1, [r7, #16]
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	88db      	ldrh	r3, [r3, #6]
 8004ca2:	461a      	mov	r2, r3
 8004ca4:	6878      	ldr	r0, [r7, #4]
 8004ca6:	f001 fb32 	bl	800630e <USBD_CtlPrepareRx>
      break;
 8004caa:	e072      	b.n	8004d92 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004cb2:	689b      	ldr	r3, [r3, #8]
 8004cb4:	683a      	ldr	r2, [r7, #0]
 8004cb6:	7850      	ldrb	r0, [r2, #1]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	6839      	ldr	r1, [r7, #0]
 8004cbc:	4798      	blx	r3
      break;
 8004cbe:	e068      	b.n	8004d92 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	785b      	ldrb	r3, [r3, #1]
 8004cc4:	2b0b      	cmp	r3, #11
 8004cc6:	d852      	bhi.n	8004d6e <USBD_CDC_Setup+0x162>
 8004cc8:	a201      	add	r2, pc, #4	; (adr r2, 8004cd0 <USBD_CDC_Setup+0xc4>)
 8004cca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cce:	bf00      	nop
 8004cd0:	08004d01 	.word	0x08004d01
 8004cd4:	08004d7d 	.word	0x08004d7d
 8004cd8:	08004d6f 	.word	0x08004d6f
 8004cdc:	08004d6f 	.word	0x08004d6f
 8004ce0:	08004d6f 	.word	0x08004d6f
 8004ce4:	08004d6f 	.word	0x08004d6f
 8004ce8:	08004d6f 	.word	0x08004d6f
 8004cec:	08004d6f 	.word	0x08004d6f
 8004cf0:	08004d6f 	.word	0x08004d6f
 8004cf4:	08004d6f 	.word	0x08004d6f
 8004cf8:	08004d2b 	.word	0x08004d2b
 8004cfc:	08004d55 	.word	0x08004d55
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004d06:	b2db      	uxtb	r3, r3
 8004d08:	2b03      	cmp	r3, #3
 8004d0a:	d107      	bne.n	8004d1c <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8004d0c:	f107 030a 	add.w	r3, r7, #10
 8004d10:	2202      	movs	r2, #2
 8004d12:	4619      	mov	r1, r3
 8004d14:	6878      	ldr	r0, [r7, #4]
 8004d16:	f001 face 	bl	80062b6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004d1a:	e032      	b.n	8004d82 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8004d1c:	6839      	ldr	r1, [r7, #0]
 8004d1e:	6878      	ldr	r0, [r7, #4]
 8004d20:	f001 fa58 	bl	80061d4 <USBD_CtlError>
            ret = USBD_FAIL;
 8004d24:	2303      	movs	r3, #3
 8004d26:	75fb      	strb	r3, [r7, #23]
          break;
 8004d28:	e02b      	b.n	8004d82 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004d30:	b2db      	uxtb	r3, r3
 8004d32:	2b03      	cmp	r3, #3
 8004d34:	d107      	bne.n	8004d46 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8004d36:	f107 030d 	add.w	r3, r7, #13
 8004d3a:	2201      	movs	r2, #1
 8004d3c:	4619      	mov	r1, r3
 8004d3e:	6878      	ldr	r0, [r7, #4]
 8004d40:	f001 fab9 	bl	80062b6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004d44:	e01d      	b.n	8004d82 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8004d46:	6839      	ldr	r1, [r7, #0]
 8004d48:	6878      	ldr	r0, [r7, #4]
 8004d4a:	f001 fa43 	bl	80061d4 <USBD_CtlError>
            ret = USBD_FAIL;
 8004d4e:	2303      	movs	r3, #3
 8004d50:	75fb      	strb	r3, [r7, #23]
          break;
 8004d52:	e016      	b.n	8004d82 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004d5a:	b2db      	uxtb	r3, r3
 8004d5c:	2b03      	cmp	r3, #3
 8004d5e:	d00f      	beq.n	8004d80 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8004d60:	6839      	ldr	r1, [r7, #0]
 8004d62:	6878      	ldr	r0, [r7, #4]
 8004d64:	f001 fa36 	bl	80061d4 <USBD_CtlError>
            ret = USBD_FAIL;
 8004d68:	2303      	movs	r3, #3
 8004d6a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8004d6c:	e008      	b.n	8004d80 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8004d6e:	6839      	ldr	r1, [r7, #0]
 8004d70:	6878      	ldr	r0, [r7, #4]
 8004d72:	f001 fa2f 	bl	80061d4 <USBD_CtlError>
          ret = USBD_FAIL;
 8004d76:	2303      	movs	r3, #3
 8004d78:	75fb      	strb	r3, [r7, #23]
          break;
 8004d7a:	e002      	b.n	8004d82 <USBD_CDC_Setup+0x176>
          break;
 8004d7c:	bf00      	nop
 8004d7e:	e008      	b.n	8004d92 <USBD_CDC_Setup+0x186>
          break;
 8004d80:	bf00      	nop
      }
      break;
 8004d82:	e006      	b.n	8004d92 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8004d84:	6839      	ldr	r1, [r7, #0]
 8004d86:	6878      	ldr	r0, [r7, #4]
 8004d88:	f001 fa24 	bl	80061d4 <USBD_CtlError>
      ret = USBD_FAIL;
 8004d8c:	2303      	movs	r3, #3
 8004d8e:	75fb      	strb	r3, [r7, #23]
      break;
 8004d90:	bf00      	nop
  }

  return (uint8_t)ret;
 8004d92:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d94:	4618      	mov	r0, r3
 8004d96:	3718      	adds	r7, #24
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	bd80      	pop	{r7, pc}

08004d9c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b084      	sub	sp, #16
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
 8004da4:	460b      	mov	r3, r1
 8004da6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8004dae:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d101      	bne.n	8004dbe <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8004dba:	2303      	movs	r3, #3
 8004dbc:	e04f      	b.n	8004e5e <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004dc4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8004dc6:	78fa      	ldrb	r2, [r7, #3]
 8004dc8:	6879      	ldr	r1, [r7, #4]
 8004dca:	4613      	mov	r3, r2
 8004dcc:	009b      	lsls	r3, r3, #2
 8004dce:	4413      	add	r3, r2
 8004dd0:	009b      	lsls	r3, r3, #2
 8004dd2:	440b      	add	r3, r1
 8004dd4:	3318      	adds	r3, #24
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d029      	beq.n	8004e30 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8004ddc:	78fa      	ldrb	r2, [r7, #3]
 8004dde:	6879      	ldr	r1, [r7, #4]
 8004de0:	4613      	mov	r3, r2
 8004de2:	009b      	lsls	r3, r3, #2
 8004de4:	4413      	add	r3, r2
 8004de6:	009b      	lsls	r3, r3, #2
 8004de8:	440b      	add	r3, r1
 8004dea:	3318      	adds	r3, #24
 8004dec:	681a      	ldr	r2, [r3, #0]
 8004dee:	78f9      	ldrb	r1, [r7, #3]
 8004df0:	68f8      	ldr	r0, [r7, #12]
 8004df2:	460b      	mov	r3, r1
 8004df4:	00db      	lsls	r3, r3, #3
 8004df6:	1a5b      	subs	r3, r3, r1
 8004df8:	009b      	lsls	r3, r3, #2
 8004dfa:	4403      	add	r3, r0
 8004dfc:	3344      	adds	r3, #68	; 0x44
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	fbb2 f1f3 	udiv	r1, r2, r3
 8004e04:	fb03 f301 	mul.w	r3, r3, r1
 8004e08:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d110      	bne.n	8004e30 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8004e0e:	78fa      	ldrb	r2, [r7, #3]
 8004e10:	6879      	ldr	r1, [r7, #4]
 8004e12:	4613      	mov	r3, r2
 8004e14:	009b      	lsls	r3, r3, #2
 8004e16:	4413      	add	r3, r2
 8004e18:	009b      	lsls	r3, r3, #2
 8004e1a:	440b      	add	r3, r1
 8004e1c:	3318      	adds	r3, #24
 8004e1e:	2200      	movs	r2, #0
 8004e20:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8004e22:	78f9      	ldrb	r1, [r7, #3]
 8004e24:	2300      	movs	r3, #0
 8004e26:	2200      	movs	r2, #0
 8004e28:	6878      	ldr	r0, [r7, #4]
 8004e2a:	f001 ff3c 	bl	8006ca6 <USBD_LL_Transmit>
 8004e2e:	e015      	b.n	8004e5c <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8004e30:	68bb      	ldr	r3, [r7, #8]
 8004e32:	2200      	movs	r2, #0
 8004e34:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004e3e:	691b      	ldr	r3, [r3, #16]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d00b      	beq.n	8004e5c <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004e4a:	691b      	ldr	r3, [r3, #16]
 8004e4c:	68ba      	ldr	r2, [r7, #8]
 8004e4e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8004e52:	68ba      	ldr	r2, [r7, #8]
 8004e54:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8004e58:	78fa      	ldrb	r2, [r7, #3]
 8004e5a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8004e5c:	2300      	movs	r3, #0
}
 8004e5e:	4618      	mov	r0, r3
 8004e60:	3710      	adds	r7, #16
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bd80      	pop	{r7, pc}

08004e66 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004e66:	b580      	push	{r7, lr}
 8004e68:	b084      	sub	sp, #16
 8004e6a:	af00      	add	r7, sp, #0
 8004e6c:	6078      	str	r0, [r7, #4]
 8004e6e:	460b      	mov	r3, r1
 8004e70:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004e78:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d101      	bne.n	8004e88 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8004e84:	2303      	movs	r3, #3
 8004e86:	e015      	b.n	8004eb4 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8004e88:	78fb      	ldrb	r3, [r7, #3]
 8004e8a:	4619      	mov	r1, r3
 8004e8c:	6878      	ldr	r0, [r7, #4]
 8004e8e:	f001 ff4c 	bl	8006d2a <USBD_LL_GetRxDataSize>
 8004e92:	4602      	mov	r2, r0
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004ea0:	68db      	ldr	r3, [r3, #12]
 8004ea2:	68fa      	ldr	r2, [r7, #12]
 8004ea4:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8004ea8:	68fa      	ldr	r2, [r7, #12]
 8004eaa:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8004eae:	4611      	mov	r1, r2
 8004eb0:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8004eb2:	2300      	movs	r3, #0
}
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	3710      	adds	r7, #16
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	bd80      	pop	{r7, pc}

08004ebc <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b084      	sub	sp, #16
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004eca:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d101      	bne.n	8004ed6 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8004ed2:	2303      	movs	r3, #3
 8004ed4:	e01b      	b.n	8004f0e <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d015      	beq.n	8004f0c <USBD_CDC_EP0_RxReady+0x50>
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8004ee6:	2bff      	cmp	r3, #255	; 0xff
 8004ee8:	d010      	beq.n	8004f0c <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004ef0:	689b      	ldr	r3, [r3, #8]
 8004ef2:	68fa      	ldr	r2, [r7, #12]
 8004ef4:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8004ef8:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8004efa:	68fa      	ldr	r2, [r7, #12]
 8004efc:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8004f00:	b292      	uxth	r2, r2
 8004f02:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	22ff      	movs	r2, #255	; 0xff
 8004f08:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8004f0c:	2300      	movs	r3, #0
}
 8004f0e:	4618      	mov	r0, r3
 8004f10:	3710      	adds	r7, #16
 8004f12:	46bd      	mov	sp, r7
 8004f14:	bd80      	pop	{r7, pc}
	...

08004f18 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b083      	sub	sp, #12
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2243      	movs	r2, #67	; 0x43
 8004f24:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8004f26:	4b03      	ldr	r3, [pc, #12]	; (8004f34 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8004f28:	4618      	mov	r0, r3
 8004f2a:	370c      	adds	r7, #12
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f32:	4770      	bx	lr
 8004f34:	200000b0 	.word	0x200000b0

08004f38 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8004f38:	b480      	push	{r7}
 8004f3a:	b083      	sub	sp, #12
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2243      	movs	r2, #67	; 0x43
 8004f44:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8004f46:	4b03      	ldr	r3, [pc, #12]	; (8004f54 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8004f48:	4618      	mov	r0, r3
 8004f4a:	370c      	adds	r7, #12
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f52:	4770      	bx	lr
 8004f54:	2000006c 	.word	0x2000006c

08004f58 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b083      	sub	sp, #12
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2243      	movs	r2, #67	; 0x43
 8004f64:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8004f66:	4b03      	ldr	r3, [pc, #12]	; (8004f74 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8004f68:	4618      	mov	r0, r3
 8004f6a:	370c      	adds	r7, #12
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f72:	4770      	bx	lr
 8004f74:	200000f4 	.word	0x200000f4

08004f78 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8004f78:	b480      	push	{r7}
 8004f7a:	b083      	sub	sp, #12
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	220a      	movs	r2, #10
 8004f84:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8004f86:	4b03      	ldr	r3, [pc, #12]	; (8004f94 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8004f88:	4618      	mov	r0, r3
 8004f8a:	370c      	adds	r7, #12
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f92:	4770      	bx	lr
 8004f94:	20000028 	.word	0x20000028

08004f98 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8004f98:	b480      	push	{r7}
 8004f9a:	b083      	sub	sp, #12
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
 8004fa0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d101      	bne.n	8004fac <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8004fa8:	2303      	movs	r3, #3
 8004faa:	e004      	b.n	8004fb6 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	683a      	ldr	r2, [r7, #0]
 8004fb0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8004fb4:	2300      	movs	r3, #0
}
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	370c      	adds	r7, #12
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc0:	4770      	bx	lr

08004fc2 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8004fc2:	b480      	push	{r7}
 8004fc4:	b087      	sub	sp, #28
 8004fc6:	af00      	add	r7, sp, #0
 8004fc8:	60f8      	str	r0, [r7, #12]
 8004fca:	60b9      	str	r1, [r7, #8]
 8004fcc:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004fd4:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8004fd6:	697b      	ldr	r3, [r7, #20]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d101      	bne.n	8004fe0 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8004fdc:	2303      	movs	r3, #3
 8004fde:	e008      	b.n	8004ff2 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8004fe0:	697b      	ldr	r3, [r7, #20]
 8004fe2:	68ba      	ldr	r2, [r7, #8]
 8004fe4:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8004fe8:	697b      	ldr	r3, [r7, #20]
 8004fea:	687a      	ldr	r2, [r7, #4]
 8004fec:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8004ff0:	2300      	movs	r3, #0
}
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	371c      	adds	r7, #28
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffc:	4770      	bx	lr

08004ffe <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8004ffe:	b480      	push	{r7}
 8005000:	b085      	sub	sp, #20
 8005002:	af00      	add	r7, sp, #0
 8005004:	6078      	str	r0, [r7, #4]
 8005006:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800500e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d101      	bne.n	800501a <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8005016:	2303      	movs	r3, #3
 8005018:	e004      	b.n	8005024 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	683a      	ldr	r2, [r7, #0]
 800501e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8005022:	2300      	movs	r3, #0
}
 8005024:	4618      	mov	r0, r3
 8005026:	3714      	adds	r7, #20
 8005028:	46bd      	mov	sp, r7
 800502a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502e:	4770      	bx	lr

08005030 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b084      	sub	sp, #16
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800503e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8005040:	2301      	movs	r3, #1
 8005042:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800504a:	2b00      	cmp	r3, #0
 800504c:	d101      	bne.n	8005052 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800504e:	2303      	movs	r3, #3
 8005050:	e01a      	b.n	8005088 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8005052:	68bb      	ldr	r3, [r7, #8]
 8005054:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005058:	2b00      	cmp	r3, #0
 800505a:	d114      	bne.n	8005086 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800505c:	68bb      	ldr	r3, [r7, #8]
 800505e:	2201      	movs	r2, #1
 8005060:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8005064:	68bb      	ldr	r3, [r7, #8]
 8005066:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800506e:	68bb      	ldr	r3, [r7, #8]
 8005070:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8005074:	68bb      	ldr	r3, [r7, #8]
 8005076:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800507a:	2181      	movs	r1, #129	; 0x81
 800507c:	6878      	ldr	r0, [r7, #4]
 800507e:	f001 fe12 	bl	8006ca6 <USBD_LL_Transmit>

    ret = USBD_OK;
 8005082:	2300      	movs	r3, #0
 8005084:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8005086:	7bfb      	ldrb	r3, [r7, #15]
}
 8005088:	4618      	mov	r0, r3
 800508a:	3710      	adds	r7, #16
 800508c:	46bd      	mov	sp, r7
 800508e:	bd80      	pop	{r7, pc}

08005090 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b084      	sub	sp, #16
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800509e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d101      	bne.n	80050ae <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80050aa:	2303      	movs	r3, #3
 80050ac:	e016      	b.n	80050dc <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	7c1b      	ldrb	r3, [r3, #16]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d109      	bne.n	80050ca <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80050bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80050c0:	2101      	movs	r1, #1
 80050c2:	6878      	ldr	r0, [r7, #4]
 80050c4:	f001 fe10 	bl	8006ce8 <USBD_LL_PrepareReceive>
 80050c8:	e007      	b.n	80050da <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80050d0:	2340      	movs	r3, #64	; 0x40
 80050d2:	2101      	movs	r1, #1
 80050d4:	6878      	ldr	r0, [r7, #4]
 80050d6:	f001 fe07 	bl	8006ce8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80050da:	2300      	movs	r3, #0
}
 80050dc:	4618      	mov	r0, r3
 80050de:	3710      	adds	r7, #16
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bd80      	pop	{r7, pc}

080050e4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b086      	sub	sp, #24
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	60f8      	str	r0, [r7, #12]
 80050ec:	60b9      	str	r1, [r7, #8]
 80050ee:	4613      	mov	r3, r2
 80050f0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d101      	bne.n	80050fc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80050f8:	2303      	movs	r3, #3
 80050fa:	e01f      	b.n	800513c <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	2200      	movs	r2, #0
 8005100:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	2200      	movs	r2, #0
 8005108:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	2200      	movs	r2, #0
 8005110:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d003      	beq.n	8005122 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	68ba      	ldr	r2, [r7, #8]
 800511e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	2201      	movs	r2, #1
 8005126:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	79fa      	ldrb	r2, [r7, #7]
 800512e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005130:	68f8      	ldr	r0, [r7, #12]
 8005132:	f001 fc83 	bl	8006a3c <USBD_LL_Init>
 8005136:	4603      	mov	r3, r0
 8005138:	75fb      	strb	r3, [r7, #23]

  return ret;
 800513a:	7dfb      	ldrb	r3, [r7, #23]
}
 800513c:	4618      	mov	r0, r3
 800513e:	3718      	adds	r7, #24
 8005140:	46bd      	mov	sp, r7
 8005142:	bd80      	pop	{r7, pc}

08005144 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b084      	sub	sp, #16
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
 800514c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800514e:	2300      	movs	r3, #0
 8005150:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d101      	bne.n	800515c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8005158:	2303      	movs	r3, #3
 800515a:	e016      	b.n	800518a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	683a      	ldr	r2, [r7, #0]
 8005160:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800516a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800516c:	2b00      	cmp	r3, #0
 800516e:	d00b      	beq.n	8005188 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005178:	f107 020e 	add.w	r2, r7, #14
 800517c:	4610      	mov	r0, r2
 800517e:	4798      	blx	r3
 8005180:	4602      	mov	r2, r0
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8005188:	2300      	movs	r3, #0
}
 800518a:	4618      	mov	r0, r3
 800518c:	3710      	adds	r7, #16
 800518e:	46bd      	mov	sp, r7
 8005190:	bd80      	pop	{r7, pc}

08005192 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005192:	b580      	push	{r7, lr}
 8005194:	b082      	sub	sp, #8
 8005196:	af00      	add	r7, sp, #0
 8005198:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800519a:	6878      	ldr	r0, [r7, #4]
 800519c:	f001 fc9a 	bl	8006ad4 <USBD_LL_Start>
 80051a0:	4603      	mov	r3, r0
}
 80051a2:	4618      	mov	r0, r3
 80051a4:	3708      	adds	r7, #8
 80051a6:	46bd      	mov	sp, r7
 80051a8:	bd80      	pop	{r7, pc}

080051aa <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80051aa:	b480      	push	{r7}
 80051ac:	b083      	sub	sp, #12
 80051ae:	af00      	add	r7, sp, #0
 80051b0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80051b2:	2300      	movs	r3, #0
}
 80051b4:	4618      	mov	r0, r3
 80051b6:	370c      	adds	r7, #12
 80051b8:	46bd      	mov	sp, r7
 80051ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051be:	4770      	bx	lr

080051c0 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b084      	sub	sp, #16
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
 80051c8:	460b      	mov	r3, r1
 80051ca:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80051cc:	2303      	movs	r3, #3
 80051ce:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d009      	beq.n	80051ee <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	78fa      	ldrb	r2, [r7, #3]
 80051e4:	4611      	mov	r1, r2
 80051e6:	6878      	ldr	r0, [r7, #4]
 80051e8:	4798      	blx	r3
 80051ea:	4603      	mov	r3, r0
 80051ec:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80051ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80051f0:	4618      	mov	r0, r3
 80051f2:	3710      	adds	r7, #16
 80051f4:	46bd      	mov	sp, r7
 80051f6:	bd80      	pop	{r7, pc}

080051f8 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b082      	sub	sp, #8
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
 8005200:	460b      	mov	r3, r1
 8005202:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800520a:	2b00      	cmp	r3, #0
 800520c:	d007      	beq.n	800521e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	78fa      	ldrb	r2, [r7, #3]
 8005218:	4611      	mov	r1, r2
 800521a:	6878      	ldr	r0, [r7, #4]
 800521c:	4798      	blx	r3
  }

  return USBD_OK;
 800521e:	2300      	movs	r3, #0
}
 8005220:	4618      	mov	r0, r3
 8005222:	3708      	adds	r7, #8
 8005224:	46bd      	mov	sp, r7
 8005226:	bd80      	pop	{r7, pc}

08005228 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b084      	sub	sp, #16
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
 8005230:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005238:	6839      	ldr	r1, [r7, #0]
 800523a:	4618      	mov	r0, r3
 800523c:	f000 ff90 	bl	8006160 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2201      	movs	r2, #1
 8005244:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800524e:	461a      	mov	r2, r3
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800525c:	f003 031f 	and.w	r3, r3, #31
 8005260:	2b02      	cmp	r3, #2
 8005262:	d01a      	beq.n	800529a <USBD_LL_SetupStage+0x72>
 8005264:	2b02      	cmp	r3, #2
 8005266:	d822      	bhi.n	80052ae <USBD_LL_SetupStage+0x86>
 8005268:	2b00      	cmp	r3, #0
 800526a:	d002      	beq.n	8005272 <USBD_LL_SetupStage+0x4a>
 800526c:	2b01      	cmp	r3, #1
 800526e:	d00a      	beq.n	8005286 <USBD_LL_SetupStage+0x5e>
 8005270:	e01d      	b.n	80052ae <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005278:	4619      	mov	r1, r3
 800527a:	6878      	ldr	r0, [r7, #4]
 800527c:	f000 fa62 	bl	8005744 <USBD_StdDevReq>
 8005280:	4603      	mov	r3, r0
 8005282:	73fb      	strb	r3, [r7, #15]
      break;
 8005284:	e020      	b.n	80052c8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800528c:	4619      	mov	r1, r3
 800528e:	6878      	ldr	r0, [r7, #4]
 8005290:	f000 fac6 	bl	8005820 <USBD_StdItfReq>
 8005294:	4603      	mov	r3, r0
 8005296:	73fb      	strb	r3, [r7, #15]
      break;
 8005298:	e016      	b.n	80052c8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80052a0:	4619      	mov	r1, r3
 80052a2:	6878      	ldr	r0, [r7, #4]
 80052a4:	f000 fb05 	bl	80058b2 <USBD_StdEPReq>
 80052a8:	4603      	mov	r3, r0
 80052aa:	73fb      	strb	r3, [r7, #15]
      break;
 80052ac:	e00c      	b.n	80052c8 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80052b4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80052b8:	b2db      	uxtb	r3, r3
 80052ba:	4619      	mov	r1, r3
 80052bc:	6878      	ldr	r0, [r7, #4]
 80052be:	f001 fc69 	bl	8006b94 <USBD_LL_StallEP>
 80052c2:	4603      	mov	r3, r0
 80052c4:	73fb      	strb	r3, [r7, #15]
      break;
 80052c6:	bf00      	nop
  }

  return ret;
 80052c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80052ca:	4618      	mov	r0, r3
 80052cc:	3710      	adds	r7, #16
 80052ce:	46bd      	mov	sp, r7
 80052d0:	bd80      	pop	{r7, pc}

080052d2 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80052d2:	b580      	push	{r7, lr}
 80052d4:	b086      	sub	sp, #24
 80052d6:	af00      	add	r7, sp, #0
 80052d8:	60f8      	str	r0, [r7, #12]
 80052da:	460b      	mov	r3, r1
 80052dc:	607a      	str	r2, [r7, #4]
 80052de:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80052e0:	7afb      	ldrb	r3, [r7, #11]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d138      	bne.n	8005358 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80052ec:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80052f4:	2b03      	cmp	r3, #3
 80052f6:	d14a      	bne.n	800538e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80052f8:	693b      	ldr	r3, [r7, #16]
 80052fa:	689a      	ldr	r2, [r3, #8]
 80052fc:	693b      	ldr	r3, [r7, #16]
 80052fe:	68db      	ldr	r3, [r3, #12]
 8005300:	429a      	cmp	r2, r3
 8005302:	d913      	bls.n	800532c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005304:	693b      	ldr	r3, [r7, #16]
 8005306:	689a      	ldr	r2, [r3, #8]
 8005308:	693b      	ldr	r3, [r7, #16]
 800530a:	68db      	ldr	r3, [r3, #12]
 800530c:	1ad2      	subs	r2, r2, r3
 800530e:	693b      	ldr	r3, [r7, #16]
 8005310:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005312:	693b      	ldr	r3, [r7, #16]
 8005314:	68da      	ldr	r2, [r3, #12]
 8005316:	693b      	ldr	r3, [r7, #16]
 8005318:	689b      	ldr	r3, [r3, #8]
 800531a:	4293      	cmp	r3, r2
 800531c:	bf28      	it	cs
 800531e:	4613      	movcs	r3, r2
 8005320:	461a      	mov	r2, r3
 8005322:	6879      	ldr	r1, [r7, #4]
 8005324:	68f8      	ldr	r0, [r7, #12]
 8005326:	f001 f80f 	bl	8006348 <USBD_CtlContinueRx>
 800532a:	e030      	b.n	800538e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005332:	b2db      	uxtb	r3, r3
 8005334:	2b03      	cmp	r3, #3
 8005336:	d10b      	bne.n	8005350 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800533e:	691b      	ldr	r3, [r3, #16]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d005      	beq.n	8005350 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800534a:	691b      	ldr	r3, [r3, #16]
 800534c:	68f8      	ldr	r0, [r7, #12]
 800534e:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005350:	68f8      	ldr	r0, [r7, #12]
 8005352:	f001 f80a 	bl	800636a <USBD_CtlSendStatus>
 8005356:	e01a      	b.n	800538e <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800535e:	b2db      	uxtb	r3, r3
 8005360:	2b03      	cmp	r3, #3
 8005362:	d114      	bne.n	800538e <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800536a:	699b      	ldr	r3, [r3, #24]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d00e      	beq.n	800538e <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005376:	699b      	ldr	r3, [r3, #24]
 8005378:	7afa      	ldrb	r2, [r7, #11]
 800537a:	4611      	mov	r1, r2
 800537c:	68f8      	ldr	r0, [r7, #12]
 800537e:	4798      	blx	r3
 8005380:	4603      	mov	r3, r0
 8005382:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8005384:	7dfb      	ldrb	r3, [r7, #23]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d001      	beq.n	800538e <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800538a:	7dfb      	ldrb	r3, [r7, #23]
 800538c:	e000      	b.n	8005390 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800538e:	2300      	movs	r3, #0
}
 8005390:	4618      	mov	r0, r3
 8005392:	3718      	adds	r7, #24
 8005394:	46bd      	mov	sp, r7
 8005396:	bd80      	pop	{r7, pc}

08005398 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b086      	sub	sp, #24
 800539c:	af00      	add	r7, sp, #0
 800539e:	60f8      	str	r0, [r7, #12]
 80053a0:	460b      	mov	r3, r1
 80053a2:	607a      	str	r2, [r7, #4]
 80053a4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80053a6:	7afb      	ldrb	r3, [r7, #11]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d16b      	bne.n	8005484 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	3314      	adds	r3, #20
 80053b0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80053b8:	2b02      	cmp	r3, #2
 80053ba:	d156      	bne.n	800546a <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 80053bc:	693b      	ldr	r3, [r7, #16]
 80053be:	689a      	ldr	r2, [r3, #8]
 80053c0:	693b      	ldr	r3, [r7, #16]
 80053c2:	68db      	ldr	r3, [r3, #12]
 80053c4:	429a      	cmp	r2, r3
 80053c6:	d914      	bls.n	80053f2 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80053c8:	693b      	ldr	r3, [r7, #16]
 80053ca:	689a      	ldr	r2, [r3, #8]
 80053cc:	693b      	ldr	r3, [r7, #16]
 80053ce:	68db      	ldr	r3, [r3, #12]
 80053d0:	1ad2      	subs	r2, r2, r3
 80053d2:	693b      	ldr	r3, [r7, #16]
 80053d4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80053d6:	693b      	ldr	r3, [r7, #16]
 80053d8:	689b      	ldr	r3, [r3, #8]
 80053da:	461a      	mov	r2, r3
 80053dc:	6879      	ldr	r1, [r7, #4]
 80053de:	68f8      	ldr	r0, [r7, #12]
 80053e0:	f000 ff84 	bl	80062ec <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80053e4:	2300      	movs	r3, #0
 80053e6:	2200      	movs	r2, #0
 80053e8:	2100      	movs	r1, #0
 80053ea:	68f8      	ldr	r0, [r7, #12]
 80053ec:	f001 fc7c 	bl	8006ce8 <USBD_LL_PrepareReceive>
 80053f0:	e03b      	b.n	800546a <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80053f2:	693b      	ldr	r3, [r7, #16]
 80053f4:	68da      	ldr	r2, [r3, #12]
 80053f6:	693b      	ldr	r3, [r7, #16]
 80053f8:	689b      	ldr	r3, [r3, #8]
 80053fa:	429a      	cmp	r2, r3
 80053fc:	d11c      	bne.n	8005438 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80053fe:	693b      	ldr	r3, [r7, #16]
 8005400:	685a      	ldr	r2, [r3, #4]
 8005402:	693b      	ldr	r3, [r7, #16]
 8005404:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005406:	429a      	cmp	r2, r3
 8005408:	d316      	bcc.n	8005438 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800540a:	693b      	ldr	r3, [r7, #16]
 800540c:	685a      	ldr	r2, [r3, #4]
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005414:	429a      	cmp	r2, r3
 8005416:	d20f      	bcs.n	8005438 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005418:	2200      	movs	r2, #0
 800541a:	2100      	movs	r1, #0
 800541c:	68f8      	ldr	r0, [r7, #12]
 800541e:	f000 ff65 	bl	80062ec <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	2200      	movs	r2, #0
 8005426:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800542a:	2300      	movs	r3, #0
 800542c:	2200      	movs	r2, #0
 800542e:	2100      	movs	r1, #0
 8005430:	68f8      	ldr	r0, [r7, #12]
 8005432:	f001 fc59 	bl	8006ce8 <USBD_LL_PrepareReceive>
 8005436:	e018      	b.n	800546a <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800543e:	b2db      	uxtb	r3, r3
 8005440:	2b03      	cmp	r3, #3
 8005442:	d10b      	bne.n	800545c <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800544a:	68db      	ldr	r3, [r3, #12]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d005      	beq.n	800545c <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005456:	68db      	ldr	r3, [r3, #12]
 8005458:	68f8      	ldr	r0, [r7, #12]
 800545a:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800545c:	2180      	movs	r1, #128	; 0x80
 800545e:	68f8      	ldr	r0, [r7, #12]
 8005460:	f001 fb98 	bl	8006b94 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005464:	68f8      	ldr	r0, [r7, #12]
 8005466:	f000 ff93 	bl	8006390 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005470:	2b01      	cmp	r3, #1
 8005472:	d122      	bne.n	80054ba <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8005474:	68f8      	ldr	r0, [r7, #12]
 8005476:	f7ff fe98 	bl	80051aa <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	2200      	movs	r2, #0
 800547e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005482:	e01a      	b.n	80054ba <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800548a:	b2db      	uxtb	r3, r3
 800548c:	2b03      	cmp	r3, #3
 800548e:	d114      	bne.n	80054ba <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005496:	695b      	ldr	r3, [r3, #20]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d00e      	beq.n	80054ba <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80054a2:	695b      	ldr	r3, [r3, #20]
 80054a4:	7afa      	ldrb	r2, [r7, #11]
 80054a6:	4611      	mov	r1, r2
 80054a8:	68f8      	ldr	r0, [r7, #12]
 80054aa:	4798      	blx	r3
 80054ac:	4603      	mov	r3, r0
 80054ae:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80054b0:	7dfb      	ldrb	r3, [r7, #23]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d001      	beq.n	80054ba <USBD_LL_DataInStage+0x122>
        {
          return ret;
 80054b6:	7dfb      	ldrb	r3, [r7, #23]
 80054b8:	e000      	b.n	80054bc <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 80054ba:	2300      	movs	r3, #0
}
 80054bc:	4618      	mov	r0, r3
 80054be:	3718      	adds	r7, #24
 80054c0:	46bd      	mov	sp, r7
 80054c2:	bd80      	pop	{r7, pc}

080054c4 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b082      	sub	sp, #8
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2201      	movs	r2, #1
 80054d0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2200      	movs	r2, #0
 80054d8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2200      	movs	r2, #0
 80054e0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2200      	movs	r2, #0
 80054e6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d101      	bne.n	80054f8 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 80054f4:	2303      	movs	r3, #3
 80054f6:	e02f      	b.n	8005558 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d00f      	beq.n	8005522 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005508:	685b      	ldr	r3, [r3, #4]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d009      	beq.n	8005522 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005514:	685b      	ldr	r3, [r3, #4]
 8005516:	687a      	ldr	r2, [r7, #4]
 8005518:	6852      	ldr	r2, [r2, #4]
 800551a:	b2d2      	uxtb	r2, r2
 800551c:	4611      	mov	r1, r2
 800551e:	6878      	ldr	r0, [r7, #4]
 8005520:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005522:	2340      	movs	r3, #64	; 0x40
 8005524:	2200      	movs	r2, #0
 8005526:	2100      	movs	r1, #0
 8005528:	6878      	ldr	r0, [r7, #4]
 800552a:	f001 faee 	bl	8006b0a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2201      	movs	r2, #1
 8005532:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2240      	movs	r2, #64	; 0x40
 800553a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800553e:	2340      	movs	r3, #64	; 0x40
 8005540:	2200      	movs	r2, #0
 8005542:	2180      	movs	r1, #128	; 0x80
 8005544:	6878      	ldr	r0, [r7, #4]
 8005546:	f001 fae0 	bl	8006b0a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2201      	movs	r2, #1
 800554e:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2240      	movs	r2, #64	; 0x40
 8005554:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8005556:	2300      	movs	r3, #0
}
 8005558:	4618      	mov	r0, r3
 800555a:	3708      	adds	r7, #8
 800555c:	46bd      	mov	sp, r7
 800555e:	bd80      	pop	{r7, pc}

08005560 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005560:	b480      	push	{r7}
 8005562:	b083      	sub	sp, #12
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
 8005568:	460b      	mov	r3, r1
 800556a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	78fa      	ldrb	r2, [r7, #3]
 8005570:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005572:	2300      	movs	r3, #0
}
 8005574:	4618      	mov	r0, r3
 8005576:	370c      	adds	r7, #12
 8005578:	46bd      	mov	sp, r7
 800557a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557e:	4770      	bx	lr

08005580 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005580:	b480      	push	{r7}
 8005582:	b083      	sub	sp, #12
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800558e:	b2da      	uxtb	r2, r3
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2204      	movs	r2, #4
 800559a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800559e:	2300      	movs	r3, #0
}
 80055a0:	4618      	mov	r0, r3
 80055a2:	370c      	adds	r7, #12
 80055a4:	46bd      	mov	sp, r7
 80055a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055aa:	4770      	bx	lr

080055ac <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80055ac:	b480      	push	{r7}
 80055ae:	b083      	sub	sp, #12
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80055ba:	b2db      	uxtb	r3, r3
 80055bc:	2b04      	cmp	r3, #4
 80055be:	d106      	bne.n	80055ce <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80055c6:	b2da      	uxtb	r2, r3
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80055ce:	2300      	movs	r3, #0
}
 80055d0:	4618      	mov	r0, r3
 80055d2:	370c      	adds	r7, #12
 80055d4:	46bd      	mov	sp, r7
 80055d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055da:	4770      	bx	lr

080055dc <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b082      	sub	sp, #8
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d101      	bne.n	80055f2 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 80055ee:	2303      	movs	r3, #3
 80055f0:	e012      	b.n	8005618 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80055f8:	b2db      	uxtb	r3, r3
 80055fa:	2b03      	cmp	r3, #3
 80055fc:	d10b      	bne.n	8005616 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005604:	69db      	ldr	r3, [r3, #28]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d005      	beq.n	8005616 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005610:	69db      	ldr	r3, [r3, #28]
 8005612:	6878      	ldr	r0, [r7, #4]
 8005614:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005616:	2300      	movs	r3, #0
}
 8005618:	4618      	mov	r0, r3
 800561a:	3708      	adds	r7, #8
 800561c:	46bd      	mov	sp, r7
 800561e:	bd80      	pop	{r7, pc}

08005620 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b082      	sub	sp, #8
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
 8005628:	460b      	mov	r3, r1
 800562a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005632:	2b00      	cmp	r3, #0
 8005634:	d101      	bne.n	800563a <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8005636:	2303      	movs	r3, #3
 8005638:	e014      	b.n	8005664 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005640:	b2db      	uxtb	r3, r3
 8005642:	2b03      	cmp	r3, #3
 8005644:	d10d      	bne.n	8005662 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800564c:	6a1b      	ldr	r3, [r3, #32]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d007      	beq.n	8005662 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005658:	6a1b      	ldr	r3, [r3, #32]
 800565a:	78fa      	ldrb	r2, [r7, #3]
 800565c:	4611      	mov	r1, r2
 800565e:	6878      	ldr	r0, [r7, #4]
 8005660:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005662:	2300      	movs	r3, #0
}
 8005664:	4618      	mov	r0, r3
 8005666:	3708      	adds	r7, #8
 8005668:	46bd      	mov	sp, r7
 800566a:	bd80      	pop	{r7, pc}

0800566c <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b082      	sub	sp, #8
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
 8005674:	460b      	mov	r3, r1
 8005676:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800567e:	2b00      	cmp	r3, #0
 8005680:	d101      	bne.n	8005686 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8005682:	2303      	movs	r3, #3
 8005684:	e014      	b.n	80056b0 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800568c:	b2db      	uxtb	r3, r3
 800568e:	2b03      	cmp	r3, #3
 8005690:	d10d      	bne.n	80056ae <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800569a:	2b00      	cmp	r3, #0
 800569c:	d007      	beq.n	80056ae <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80056a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056a6:	78fa      	ldrb	r2, [r7, #3]
 80056a8:	4611      	mov	r1, r2
 80056aa:	6878      	ldr	r0, [r7, #4]
 80056ac:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80056ae:	2300      	movs	r3, #0
}
 80056b0:	4618      	mov	r0, r3
 80056b2:	3708      	adds	r7, #8
 80056b4:	46bd      	mov	sp, r7
 80056b6:	bd80      	pop	{r7, pc}

080056b8 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80056b8:	b480      	push	{r7}
 80056ba:	b083      	sub	sp, #12
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80056c0:	2300      	movs	r3, #0
}
 80056c2:	4618      	mov	r0, r3
 80056c4:	370c      	adds	r7, #12
 80056c6:	46bd      	mov	sp, r7
 80056c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056cc:	4770      	bx	lr

080056ce <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80056ce:	b580      	push	{r7, lr}
 80056d0:	b082      	sub	sp, #8
 80056d2:	af00      	add	r7, sp, #0
 80056d4:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2201      	movs	r2, #1
 80056da:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d009      	beq.n	80056fc <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80056ee:	685b      	ldr	r3, [r3, #4]
 80056f0:	687a      	ldr	r2, [r7, #4]
 80056f2:	6852      	ldr	r2, [r2, #4]
 80056f4:	b2d2      	uxtb	r2, r2
 80056f6:	4611      	mov	r1, r2
 80056f8:	6878      	ldr	r0, [r7, #4]
 80056fa:	4798      	blx	r3
  }

  return USBD_OK;
 80056fc:	2300      	movs	r3, #0
}
 80056fe:	4618      	mov	r0, r3
 8005700:	3708      	adds	r7, #8
 8005702:	46bd      	mov	sp, r7
 8005704:	bd80      	pop	{r7, pc}

08005706 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8005706:	b480      	push	{r7}
 8005708:	b087      	sub	sp, #28
 800570a:	af00      	add	r7, sp, #0
 800570c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8005712:	697b      	ldr	r3, [r7, #20]
 8005714:	781b      	ldrb	r3, [r3, #0]
 8005716:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8005718:	697b      	ldr	r3, [r7, #20]
 800571a:	3301      	adds	r3, #1
 800571c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800571e:	697b      	ldr	r3, [r7, #20]
 8005720:	781b      	ldrb	r3, [r3, #0]
 8005722:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005724:	8a3b      	ldrh	r3, [r7, #16]
 8005726:	021b      	lsls	r3, r3, #8
 8005728:	b21a      	sxth	r2, r3
 800572a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800572e:	4313      	orrs	r3, r2
 8005730:	b21b      	sxth	r3, r3
 8005732:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8005734:	89fb      	ldrh	r3, [r7, #14]
}
 8005736:	4618      	mov	r0, r3
 8005738:	371c      	adds	r7, #28
 800573a:	46bd      	mov	sp, r7
 800573c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005740:	4770      	bx	lr
	...

08005744 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b084      	sub	sp, #16
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
 800574c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800574e:	2300      	movs	r3, #0
 8005750:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	781b      	ldrb	r3, [r3, #0]
 8005756:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800575a:	2b40      	cmp	r3, #64	; 0x40
 800575c:	d005      	beq.n	800576a <USBD_StdDevReq+0x26>
 800575e:	2b40      	cmp	r3, #64	; 0x40
 8005760:	d853      	bhi.n	800580a <USBD_StdDevReq+0xc6>
 8005762:	2b00      	cmp	r3, #0
 8005764:	d00b      	beq.n	800577e <USBD_StdDevReq+0x3a>
 8005766:	2b20      	cmp	r3, #32
 8005768:	d14f      	bne.n	800580a <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005770:	689b      	ldr	r3, [r3, #8]
 8005772:	6839      	ldr	r1, [r7, #0]
 8005774:	6878      	ldr	r0, [r7, #4]
 8005776:	4798      	blx	r3
 8005778:	4603      	mov	r3, r0
 800577a:	73fb      	strb	r3, [r7, #15]
      break;
 800577c:	e04a      	b.n	8005814 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	785b      	ldrb	r3, [r3, #1]
 8005782:	2b09      	cmp	r3, #9
 8005784:	d83b      	bhi.n	80057fe <USBD_StdDevReq+0xba>
 8005786:	a201      	add	r2, pc, #4	; (adr r2, 800578c <USBD_StdDevReq+0x48>)
 8005788:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800578c:	080057e1 	.word	0x080057e1
 8005790:	080057f5 	.word	0x080057f5
 8005794:	080057ff 	.word	0x080057ff
 8005798:	080057eb 	.word	0x080057eb
 800579c:	080057ff 	.word	0x080057ff
 80057a0:	080057bf 	.word	0x080057bf
 80057a4:	080057b5 	.word	0x080057b5
 80057a8:	080057ff 	.word	0x080057ff
 80057ac:	080057d7 	.word	0x080057d7
 80057b0:	080057c9 	.word	0x080057c9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80057b4:	6839      	ldr	r1, [r7, #0]
 80057b6:	6878      	ldr	r0, [r7, #4]
 80057b8:	f000 f9de 	bl	8005b78 <USBD_GetDescriptor>
          break;
 80057bc:	e024      	b.n	8005808 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80057be:	6839      	ldr	r1, [r7, #0]
 80057c0:	6878      	ldr	r0, [r7, #4]
 80057c2:	f000 fb43 	bl	8005e4c <USBD_SetAddress>
          break;
 80057c6:	e01f      	b.n	8005808 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80057c8:	6839      	ldr	r1, [r7, #0]
 80057ca:	6878      	ldr	r0, [r7, #4]
 80057cc:	f000 fb82 	bl	8005ed4 <USBD_SetConfig>
 80057d0:	4603      	mov	r3, r0
 80057d2:	73fb      	strb	r3, [r7, #15]
          break;
 80057d4:	e018      	b.n	8005808 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80057d6:	6839      	ldr	r1, [r7, #0]
 80057d8:	6878      	ldr	r0, [r7, #4]
 80057da:	f000 fc21 	bl	8006020 <USBD_GetConfig>
          break;
 80057de:	e013      	b.n	8005808 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80057e0:	6839      	ldr	r1, [r7, #0]
 80057e2:	6878      	ldr	r0, [r7, #4]
 80057e4:	f000 fc52 	bl	800608c <USBD_GetStatus>
          break;
 80057e8:	e00e      	b.n	8005808 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80057ea:	6839      	ldr	r1, [r7, #0]
 80057ec:	6878      	ldr	r0, [r7, #4]
 80057ee:	f000 fc81 	bl	80060f4 <USBD_SetFeature>
          break;
 80057f2:	e009      	b.n	8005808 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80057f4:	6839      	ldr	r1, [r7, #0]
 80057f6:	6878      	ldr	r0, [r7, #4]
 80057f8:	f000 fc90 	bl	800611c <USBD_ClrFeature>
          break;
 80057fc:	e004      	b.n	8005808 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80057fe:	6839      	ldr	r1, [r7, #0]
 8005800:	6878      	ldr	r0, [r7, #4]
 8005802:	f000 fce7 	bl	80061d4 <USBD_CtlError>
          break;
 8005806:	bf00      	nop
      }
      break;
 8005808:	e004      	b.n	8005814 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800580a:	6839      	ldr	r1, [r7, #0]
 800580c:	6878      	ldr	r0, [r7, #4]
 800580e:	f000 fce1 	bl	80061d4 <USBD_CtlError>
      break;
 8005812:	bf00      	nop
  }

  return ret;
 8005814:	7bfb      	ldrb	r3, [r7, #15]
}
 8005816:	4618      	mov	r0, r3
 8005818:	3710      	adds	r7, #16
 800581a:	46bd      	mov	sp, r7
 800581c:	bd80      	pop	{r7, pc}
 800581e:	bf00      	nop

08005820 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b084      	sub	sp, #16
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
 8005828:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800582a:	2300      	movs	r3, #0
 800582c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	781b      	ldrb	r3, [r3, #0]
 8005832:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005836:	2b40      	cmp	r3, #64	; 0x40
 8005838:	d005      	beq.n	8005846 <USBD_StdItfReq+0x26>
 800583a:	2b40      	cmp	r3, #64	; 0x40
 800583c:	d82f      	bhi.n	800589e <USBD_StdItfReq+0x7e>
 800583e:	2b00      	cmp	r3, #0
 8005840:	d001      	beq.n	8005846 <USBD_StdItfReq+0x26>
 8005842:	2b20      	cmp	r3, #32
 8005844:	d12b      	bne.n	800589e <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800584c:	b2db      	uxtb	r3, r3
 800584e:	3b01      	subs	r3, #1
 8005850:	2b02      	cmp	r3, #2
 8005852:	d81d      	bhi.n	8005890 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	889b      	ldrh	r3, [r3, #4]
 8005858:	b2db      	uxtb	r3, r3
 800585a:	2b01      	cmp	r3, #1
 800585c:	d813      	bhi.n	8005886 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005864:	689b      	ldr	r3, [r3, #8]
 8005866:	6839      	ldr	r1, [r7, #0]
 8005868:	6878      	ldr	r0, [r7, #4]
 800586a:	4798      	blx	r3
 800586c:	4603      	mov	r3, r0
 800586e:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	88db      	ldrh	r3, [r3, #6]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d110      	bne.n	800589a <USBD_StdItfReq+0x7a>
 8005878:	7bfb      	ldrb	r3, [r7, #15]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d10d      	bne.n	800589a <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800587e:	6878      	ldr	r0, [r7, #4]
 8005880:	f000 fd73 	bl	800636a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005884:	e009      	b.n	800589a <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8005886:	6839      	ldr	r1, [r7, #0]
 8005888:	6878      	ldr	r0, [r7, #4]
 800588a:	f000 fca3 	bl	80061d4 <USBD_CtlError>
          break;
 800588e:	e004      	b.n	800589a <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8005890:	6839      	ldr	r1, [r7, #0]
 8005892:	6878      	ldr	r0, [r7, #4]
 8005894:	f000 fc9e 	bl	80061d4 <USBD_CtlError>
          break;
 8005898:	e000      	b.n	800589c <USBD_StdItfReq+0x7c>
          break;
 800589a:	bf00      	nop
      }
      break;
 800589c:	e004      	b.n	80058a8 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800589e:	6839      	ldr	r1, [r7, #0]
 80058a0:	6878      	ldr	r0, [r7, #4]
 80058a2:	f000 fc97 	bl	80061d4 <USBD_CtlError>
      break;
 80058a6:	bf00      	nop
  }

  return ret;
 80058a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80058aa:	4618      	mov	r0, r3
 80058ac:	3710      	adds	r7, #16
 80058ae:	46bd      	mov	sp, r7
 80058b0:	bd80      	pop	{r7, pc}

080058b2 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80058b2:	b580      	push	{r7, lr}
 80058b4:	b084      	sub	sp, #16
 80058b6:	af00      	add	r7, sp, #0
 80058b8:	6078      	str	r0, [r7, #4]
 80058ba:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80058bc:	2300      	movs	r3, #0
 80058be:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	889b      	ldrh	r3, [r3, #4]
 80058c4:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	781b      	ldrb	r3, [r3, #0]
 80058ca:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80058ce:	2b40      	cmp	r3, #64	; 0x40
 80058d0:	d007      	beq.n	80058e2 <USBD_StdEPReq+0x30>
 80058d2:	2b40      	cmp	r3, #64	; 0x40
 80058d4:	f200 8145 	bhi.w	8005b62 <USBD_StdEPReq+0x2b0>
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d00c      	beq.n	80058f6 <USBD_StdEPReq+0x44>
 80058dc:	2b20      	cmp	r3, #32
 80058de:	f040 8140 	bne.w	8005b62 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80058e8:	689b      	ldr	r3, [r3, #8]
 80058ea:	6839      	ldr	r1, [r7, #0]
 80058ec:	6878      	ldr	r0, [r7, #4]
 80058ee:	4798      	blx	r3
 80058f0:	4603      	mov	r3, r0
 80058f2:	73fb      	strb	r3, [r7, #15]
      break;
 80058f4:	e13a      	b.n	8005b6c <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	785b      	ldrb	r3, [r3, #1]
 80058fa:	2b03      	cmp	r3, #3
 80058fc:	d007      	beq.n	800590e <USBD_StdEPReq+0x5c>
 80058fe:	2b03      	cmp	r3, #3
 8005900:	f300 8129 	bgt.w	8005b56 <USBD_StdEPReq+0x2a4>
 8005904:	2b00      	cmp	r3, #0
 8005906:	d07f      	beq.n	8005a08 <USBD_StdEPReq+0x156>
 8005908:	2b01      	cmp	r3, #1
 800590a:	d03c      	beq.n	8005986 <USBD_StdEPReq+0xd4>
 800590c:	e123      	b.n	8005b56 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005914:	b2db      	uxtb	r3, r3
 8005916:	2b02      	cmp	r3, #2
 8005918:	d002      	beq.n	8005920 <USBD_StdEPReq+0x6e>
 800591a:	2b03      	cmp	r3, #3
 800591c:	d016      	beq.n	800594c <USBD_StdEPReq+0x9a>
 800591e:	e02c      	b.n	800597a <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005920:	7bbb      	ldrb	r3, [r7, #14]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d00d      	beq.n	8005942 <USBD_StdEPReq+0x90>
 8005926:	7bbb      	ldrb	r3, [r7, #14]
 8005928:	2b80      	cmp	r3, #128	; 0x80
 800592a:	d00a      	beq.n	8005942 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800592c:	7bbb      	ldrb	r3, [r7, #14]
 800592e:	4619      	mov	r1, r3
 8005930:	6878      	ldr	r0, [r7, #4]
 8005932:	f001 f92f 	bl	8006b94 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005936:	2180      	movs	r1, #128	; 0x80
 8005938:	6878      	ldr	r0, [r7, #4]
 800593a:	f001 f92b 	bl	8006b94 <USBD_LL_StallEP>
 800593e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005940:	e020      	b.n	8005984 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8005942:	6839      	ldr	r1, [r7, #0]
 8005944:	6878      	ldr	r0, [r7, #4]
 8005946:	f000 fc45 	bl	80061d4 <USBD_CtlError>
              break;
 800594a:	e01b      	b.n	8005984 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	885b      	ldrh	r3, [r3, #2]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d10e      	bne.n	8005972 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005954:	7bbb      	ldrb	r3, [r7, #14]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d00b      	beq.n	8005972 <USBD_StdEPReq+0xc0>
 800595a:	7bbb      	ldrb	r3, [r7, #14]
 800595c:	2b80      	cmp	r3, #128	; 0x80
 800595e:	d008      	beq.n	8005972 <USBD_StdEPReq+0xc0>
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	88db      	ldrh	r3, [r3, #6]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d104      	bne.n	8005972 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8005968:	7bbb      	ldrb	r3, [r7, #14]
 800596a:	4619      	mov	r1, r3
 800596c:	6878      	ldr	r0, [r7, #4]
 800596e:	f001 f911 	bl	8006b94 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8005972:	6878      	ldr	r0, [r7, #4]
 8005974:	f000 fcf9 	bl	800636a <USBD_CtlSendStatus>

              break;
 8005978:	e004      	b.n	8005984 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800597a:	6839      	ldr	r1, [r7, #0]
 800597c:	6878      	ldr	r0, [r7, #4]
 800597e:	f000 fc29 	bl	80061d4 <USBD_CtlError>
              break;
 8005982:	bf00      	nop
          }
          break;
 8005984:	e0ec      	b.n	8005b60 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800598c:	b2db      	uxtb	r3, r3
 800598e:	2b02      	cmp	r3, #2
 8005990:	d002      	beq.n	8005998 <USBD_StdEPReq+0xe6>
 8005992:	2b03      	cmp	r3, #3
 8005994:	d016      	beq.n	80059c4 <USBD_StdEPReq+0x112>
 8005996:	e030      	b.n	80059fa <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005998:	7bbb      	ldrb	r3, [r7, #14]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d00d      	beq.n	80059ba <USBD_StdEPReq+0x108>
 800599e:	7bbb      	ldrb	r3, [r7, #14]
 80059a0:	2b80      	cmp	r3, #128	; 0x80
 80059a2:	d00a      	beq.n	80059ba <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80059a4:	7bbb      	ldrb	r3, [r7, #14]
 80059a6:	4619      	mov	r1, r3
 80059a8:	6878      	ldr	r0, [r7, #4]
 80059aa:	f001 f8f3 	bl	8006b94 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80059ae:	2180      	movs	r1, #128	; 0x80
 80059b0:	6878      	ldr	r0, [r7, #4]
 80059b2:	f001 f8ef 	bl	8006b94 <USBD_LL_StallEP>
 80059b6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80059b8:	e025      	b.n	8005a06 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 80059ba:	6839      	ldr	r1, [r7, #0]
 80059bc:	6878      	ldr	r0, [r7, #4]
 80059be:	f000 fc09 	bl	80061d4 <USBD_CtlError>
              break;
 80059c2:	e020      	b.n	8005a06 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	885b      	ldrh	r3, [r3, #2]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d11b      	bne.n	8005a04 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80059cc:	7bbb      	ldrb	r3, [r7, #14]
 80059ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d004      	beq.n	80059e0 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80059d6:	7bbb      	ldrb	r3, [r7, #14]
 80059d8:	4619      	mov	r1, r3
 80059da:	6878      	ldr	r0, [r7, #4]
 80059dc:	f001 f8f9 	bl	8006bd2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80059e0:	6878      	ldr	r0, [r7, #4]
 80059e2:	f000 fcc2 	bl	800636a <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80059ec:	689b      	ldr	r3, [r3, #8]
 80059ee:	6839      	ldr	r1, [r7, #0]
 80059f0:	6878      	ldr	r0, [r7, #4]
 80059f2:	4798      	blx	r3
 80059f4:	4603      	mov	r3, r0
 80059f6:	73fb      	strb	r3, [r7, #15]
              }
              break;
 80059f8:	e004      	b.n	8005a04 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 80059fa:	6839      	ldr	r1, [r7, #0]
 80059fc:	6878      	ldr	r0, [r7, #4]
 80059fe:	f000 fbe9 	bl	80061d4 <USBD_CtlError>
              break;
 8005a02:	e000      	b.n	8005a06 <USBD_StdEPReq+0x154>
              break;
 8005a04:	bf00      	nop
          }
          break;
 8005a06:	e0ab      	b.n	8005b60 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a0e:	b2db      	uxtb	r3, r3
 8005a10:	2b02      	cmp	r3, #2
 8005a12:	d002      	beq.n	8005a1a <USBD_StdEPReq+0x168>
 8005a14:	2b03      	cmp	r3, #3
 8005a16:	d032      	beq.n	8005a7e <USBD_StdEPReq+0x1cc>
 8005a18:	e097      	b.n	8005b4a <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005a1a:	7bbb      	ldrb	r3, [r7, #14]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d007      	beq.n	8005a30 <USBD_StdEPReq+0x17e>
 8005a20:	7bbb      	ldrb	r3, [r7, #14]
 8005a22:	2b80      	cmp	r3, #128	; 0x80
 8005a24:	d004      	beq.n	8005a30 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8005a26:	6839      	ldr	r1, [r7, #0]
 8005a28:	6878      	ldr	r0, [r7, #4]
 8005a2a:	f000 fbd3 	bl	80061d4 <USBD_CtlError>
                break;
 8005a2e:	e091      	b.n	8005b54 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005a30:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	da0b      	bge.n	8005a50 <USBD_StdEPReq+0x19e>
 8005a38:	7bbb      	ldrb	r3, [r7, #14]
 8005a3a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005a3e:	4613      	mov	r3, r2
 8005a40:	009b      	lsls	r3, r3, #2
 8005a42:	4413      	add	r3, r2
 8005a44:	009b      	lsls	r3, r3, #2
 8005a46:	3310      	adds	r3, #16
 8005a48:	687a      	ldr	r2, [r7, #4]
 8005a4a:	4413      	add	r3, r2
 8005a4c:	3304      	adds	r3, #4
 8005a4e:	e00b      	b.n	8005a68 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005a50:	7bbb      	ldrb	r3, [r7, #14]
 8005a52:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005a56:	4613      	mov	r3, r2
 8005a58:	009b      	lsls	r3, r3, #2
 8005a5a:	4413      	add	r3, r2
 8005a5c:	009b      	lsls	r3, r3, #2
 8005a5e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005a62:	687a      	ldr	r2, [r7, #4]
 8005a64:	4413      	add	r3, r2
 8005a66:	3304      	adds	r3, #4
 8005a68:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	2202      	movs	r2, #2
 8005a74:	4619      	mov	r1, r3
 8005a76:	6878      	ldr	r0, [r7, #4]
 8005a78:	f000 fc1d 	bl	80062b6 <USBD_CtlSendData>
              break;
 8005a7c:	e06a      	b.n	8005b54 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8005a7e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	da11      	bge.n	8005aaa <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005a86:	7bbb      	ldrb	r3, [r7, #14]
 8005a88:	f003 020f 	and.w	r2, r3, #15
 8005a8c:	6879      	ldr	r1, [r7, #4]
 8005a8e:	4613      	mov	r3, r2
 8005a90:	009b      	lsls	r3, r3, #2
 8005a92:	4413      	add	r3, r2
 8005a94:	009b      	lsls	r3, r3, #2
 8005a96:	440b      	add	r3, r1
 8005a98:	3324      	adds	r3, #36	; 0x24
 8005a9a:	881b      	ldrh	r3, [r3, #0]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d117      	bne.n	8005ad0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8005aa0:	6839      	ldr	r1, [r7, #0]
 8005aa2:	6878      	ldr	r0, [r7, #4]
 8005aa4:	f000 fb96 	bl	80061d4 <USBD_CtlError>
                  break;
 8005aa8:	e054      	b.n	8005b54 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005aaa:	7bbb      	ldrb	r3, [r7, #14]
 8005aac:	f003 020f 	and.w	r2, r3, #15
 8005ab0:	6879      	ldr	r1, [r7, #4]
 8005ab2:	4613      	mov	r3, r2
 8005ab4:	009b      	lsls	r3, r3, #2
 8005ab6:	4413      	add	r3, r2
 8005ab8:	009b      	lsls	r3, r3, #2
 8005aba:	440b      	add	r3, r1
 8005abc:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005ac0:	881b      	ldrh	r3, [r3, #0]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d104      	bne.n	8005ad0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8005ac6:	6839      	ldr	r1, [r7, #0]
 8005ac8:	6878      	ldr	r0, [r7, #4]
 8005aca:	f000 fb83 	bl	80061d4 <USBD_CtlError>
                  break;
 8005ace:	e041      	b.n	8005b54 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005ad0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	da0b      	bge.n	8005af0 <USBD_StdEPReq+0x23e>
 8005ad8:	7bbb      	ldrb	r3, [r7, #14]
 8005ada:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005ade:	4613      	mov	r3, r2
 8005ae0:	009b      	lsls	r3, r3, #2
 8005ae2:	4413      	add	r3, r2
 8005ae4:	009b      	lsls	r3, r3, #2
 8005ae6:	3310      	adds	r3, #16
 8005ae8:	687a      	ldr	r2, [r7, #4]
 8005aea:	4413      	add	r3, r2
 8005aec:	3304      	adds	r3, #4
 8005aee:	e00b      	b.n	8005b08 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005af0:	7bbb      	ldrb	r3, [r7, #14]
 8005af2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005af6:	4613      	mov	r3, r2
 8005af8:	009b      	lsls	r3, r3, #2
 8005afa:	4413      	add	r3, r2
 8005afc:	009b      	lsls	r3, r3, #2
 8005afe:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005b02:	687a      	ldr	r2, [r7, #4]
 8005b04:	4413      	add	r3, r2
 8005b06:	3304      	adds	r3, #4
 8005b08:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005b0a:	7bbb      	ldrb	r3, [r7, #14]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d002      	beq.n	8005b16 <USBD_StdEPReq+0x264>
 8005b10:	7bbb      	ldrb	r3, [r7, #14]
 8005b12:	2b80      	cmp	r3, #128	; 0x80
 8005b14:	d103      	bne.n	8005b1e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8005b16:	68bb      	ldr	r3, [r7, #8]
 8005b18:	2200      	movs	r2, #0
 8005b1a:	601a      	str	r2, [r3, #0]
 8005b1c:	e00e      	b.n	8005b3c <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8005b1e:	7bbb      	ldrb	r3, [r7, #14]
 8005b20:	4619      	mov	r1, r3
 8005b22:	6878      	ldr	r0, [r7, #4]
 8005b24:	f001 f874 	bl	8006c10 <USBD_LL_IsStallEP>
 8005b28:	4603      	mov	r3, r0
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d003      	beq.n	8005b36 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8005b2e:	68bb      	ldr	r3, [r7, #8]
 8005b30:	2201      	movs	r2, #1
 8005b32:	601a      	str	r2, [r3, #0]
 8005b34:	e002      	b.n	8005b3c <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8005b36:	68bb      	ldr	r3, [r7, #8]
 8005b38:	2200      	movs	r2, #0
 8005b3a:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	2202      	movs	r2, #2
 8005b40:	4619      	mov	r1, r3
 8005b42:	6878      	ldr	r0, [r7, #4]
 8005b44:	f000 fbb7 	bl	80062b6 <USBD_CtlSendData>
              break;
 8005b48:	e004      	b.n	8005b54 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8005b4a:	6839      	ldr	r1, [r7, #0]
 8005b4c:	6878      	ldr	r0, [r7, #4]
 8005b4e:	f000 fb41 	bl	80061d4 <USBD_CtlError>
              break;
 8005b52:	bf00      	nop
          }
          break;
 8005b54:	e004      	b.n	8005b60 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8005b56:	6839      	ldr	r1, [r7, #0]
 8005b58:	6878      	ldr	r0, [r7, #4]
 8005b5a:	f000 fb3b 	bl	80061d4 <USBD_CtlError>
          break;
 8005b5e:	bf00      	nop
      }
      break;
 8005b60:	e004      	b.n	8005b6c <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8005b62:	6839      	ldr	r1, [r7, #0]
 8005b64:	6878      	ldr	r0, [r7, #4]
 8005b66:	f000 fb35 	bl	80061d4 <USBD_CtlError>
      break;
 8005b6a:	bf00      	nop
  }

  return ret;
 8005b6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b6e:	4618      	mov	r0, r3
 8005b70:	3710      	adds	r7, #16
 8005b72:	46bd      	mov	sp, r7
 8005b74:	bd80      	pop	{r7, pc}
	...

08005b78 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b084      	sub	sp, #16
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
 8005b80:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005b82:	2300      	movs	r3, #0
 8005b84:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8005b86:	2300      	movs	r3, #0
 8005b88:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	885b      	ldrh	r3, [r3, #2]
 8005b92:	0a1b      	lsrs	r3, r3, #8
 8005b94:	b29b      	uxth	r3, r3
 8005b96:	3b01      	subs	r3, #1
 8005b98:	2b06      	cmp	r3, #6
 8005b9a:	f200 8128 	bhi.w	8005dee <USBD_GetDescriptor+0x276>
 8005b9e:	a201      	add	r2, pc, #4	; (adr r2, 8005ba4 <USBD_GetDescriptor+0x2c>)
 8005ba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ba4:	08005bc1 	.word	0x08005bc1
 8005ba8:	08005bd9 	.word	0x08005bd9
 8005bac:	08005c19 	.word	0x08005c19
 8005bb0:	08005def 	.word	0x08005def
 8005bb4:	08005def 	.word	0x08005def
 8005bb8:	08005d8f 	.word	0x08005d8f
 8005bbc:	08005dbb 	.word	0x08005dbb
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	687a      	ldr	r2, [r7, #4]
 8005bca:	7c12      	ldrb	r2, [r2, #16]
 8005bcc:	f107 0108 	add.w	r1, r7, #8
 8005bd0:	4610      	mov	r0, r2
 8005bd2:	4798      	blx	r3
 8005bd4:	60f8      	str	r0, [r7, #12]
      break;
 8005bd6:	e112      	b.n	8005dfe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	7c1b      	ldrb	r3, [r3, #16]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d10d      	bne.n	8005bfc <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005be6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005be8:	f107 0208 	add.w	r2, r7, #8
 8005bec:	4610      	mov	r0, r2
 8005bee:	4798      	blx	r3
 8005bf0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	3301      	adds	r3, #1
 8005bf6:	2202      	movs	r2, #2
 8005bf8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8005bfa:	e100      	b.n	8005dfe <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c04:	f107 0208 	add.w	r2, r7, #8
 8005c08:	4610      	mov	r0, r2
 8005c0a:	4798      	blx	r3
 8005c0c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	3301      	adds	r3, #1
 8005c12:	2202      	movs	r2, #2
 8005c14:	701a      	strb	r2, [r3, #0]
      break;
 8005c16:	e0f2      	b.n	8005dfe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	885b      	ldrh	r3, [r3, #2]
 8005c1c:	b2db      	uxtb	r3, r3
 8005c1e:	2b05      	cmp	r3, #5
 8005c20:	f200 80ac 	bhi.w	8005d7c <USBD_GetDescriptor+0x204>
 8005c24:	a201      	add	r2, pc, #4	; (adr r2, 8005c2c <USBD_GetDescriptor+0xb4>)
 8005c26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c2a:	bf00      	nop
 8005c2c:	08005c45 	.word	0x08005c45
 8005c30:	08005c79 	.word	0x08005c79
 8005c34:	08005cad 	.word	0x08005cad
 8005c38:	08005ce1 	.word	0x08005ce1
 8005c3c:	08005d15 	.word	0x08005d15
 8005c40:	08005d49 	.word	0x08005d49
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c4a:	685b      	ldr	r3, [r3, #4]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d00b      	beq.n	8005c68 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c56:	685b      	ldr	r3, [r3, #4]
 8005c58:	687a      	ldr	r2, [r7, #4]
 8005c5a:	7c12      	ldrb	r2, [r2, #16]
 8005c5c:	f107 0108 	add.w	r1, r7, #8
 8005c60:	4610      	mov	r0, r2
 8005c62:	4798      	blx	r3
 8005c64:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005c66:	e091      	b.n	8005d8c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005c68:	6839      	ldr	r1, [r7, #0]
 8005c6a:	6878      	ldr	r0, [r7, #4]
 8005c6c:	f000 fab2 	bl	80061d4 <USBD_CtlError>
            err++;
 8005c70:	7afb      	ldrb	r3, [r7, #11]
 8005c72:	3301      	adds	r3, #1
 8005c74:	72fb      	strb	r3, [r7, #11]
          break;
 8005c76:	e089      	b.n	8005d8c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c7e:	689b      	ldr	r3, [r3, #8]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d00b      	beq.n	8005c9c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c8a:	689b      	ldr	r3, [r3, #8]
 8005c8c:	687a      	ldr	r2, [r7, #4]
 8005c8e:	7c12      	ldrb	r2, [r2, #16]
 8005c90:	f107 0108 	add.w	r1, r7, #8
 8005c94:	4610      	mov	r0, r2
 8005c96:	4798      	blx	r3
 8005c98:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005c9a:	e077      	b.n	8005d8c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005c9c:	6839      	ldr	r1, [r7, #0]
 8005c9e:	6878      	ldr	r0, [r7, #4]
 8005ca0:	f000 fa98 	bl	80061d4 <USBD_CtlError>
            err++;
 8005ca4:	7afb      	ldrb	r3, [r7, #11]
 8005ca6:	3301      	adds	r3, #1
 8005ca8:	72fb      	strb	r3, [r7, #11]
          break;
 8005caa:	e06f      	b.n	8005d8c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005cb2:	68db      	ldr	r3, [r3, #12]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d00b      	beq.n	8005cd0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005cbe:	68db      	ldr	r3, [r3, #12]
 8005cc0:	687a      	ldr	r2, [r7, #4]
 8005cc2:	7c12      	ldrb	r2, [r2, #16]
 8005cc4:	f107 0108 	add.w	r1, r7, #8
 8005cc8:	4610      	mov	r0, r2
 8005cca:	4798      	blx	r3
 8005ccc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005cce:	e05d      	b.n	8005d8c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005cd0:	6839      	ldr	r1, [r7, #0]
 8005cd2:	6878      	ldr	r0, [r7, #4]
 8005cd4:	f000 fa7e 	bl	80061d4 <USBD_CtlError>
            err++;
 8005cd8:	7afb      	ldrb	r3, [r7, #11]
 8005cda:	3301      	adds	r3, #1
 8005cdc:	72fb      	strb	r3, [r7, #11]
          break;
 8005cde:	e055      	b.n	8005d8c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005ce6:	691b      	ldr	r3, [r3, #16]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d00b      	beq.n	8005d04 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005cf2:	691b      	ldr	r3, [r3, #16]
 8005cf4:	687a      	ldr	r2, [r7, #4]
 8005cf6:	7c12      	ldrb	r2, [r2, #16]
 8005cf8:	f107 0108 	add.w	r1, r7, #8
 8005cfc:	4610      	mov	r0, r2
 8005cfe:	4798      	blx	r3
 8005d00:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005d02:	e043      	b.n	8005d8c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005d04:	6839      	ldr	r1, [r7, #0]
 8005d06:	6878      	ldr	r0, [r7, #4]
 8005d08:	f000 fa64 	bl	80061d4 <USBD_CtlError>
            err++;
 8005d0c:	7afb      	ldrb	r3, [r7, #11]
 8005d0e:	3301      	adds	r3, #1
 8005d10:	72fb      	strb	r3, [r7, #11]
          break;
 8005d12:	e03b      	b.n	8005d8c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d1a:	695b      	ldr	r3, [r3, #20]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d00b      	beq.n	8005d38 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d26:	695b      	ldr	r3, [r3, #20]
 8005d28:	687a      	ldr	r2, [r7, #4]
 8005d2a:	7c12      	ldrb	r2, [r2, #16]
 8005d2c:	f107 0108 	add.w	r1, r7, #8
 8005d30:	4610      	mov	r0, r2
 8005d32:	4798      	blx	r3
 8005d34:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005d36:	e029      	b.n	8005d8c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005d38:	6839      	ldr	r1, [r7, #0]
 8005d3a:	6878      	ldr	r0, [r7, #4]
 8005d3c:	f000 fa4a 	bl	80061d4 <USBD_CtlError>
            err++;
 8005d40:	7afb      	ldrb	r3, [r7, #11]
 8005d42:	3301      	adds	r3, #1
 8005d44:	72fb      	strb	r3, [r7, #11]
          break;
 8005d46:	e021      	b.n	8005d8c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d4e:	699b      	ldr	r3, [r3, #24]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d00b      	beq.n	8005d6c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d5a:	699b      	ldr	r3, [r3, #24]
 8005d5c:	687a      	ldr	r2, [r7, #4]
 8005d5e:	7c12      	ldrb	r2, [r2, #16]
 8005d60:	f107 0108 	add.w	r1, r7, #8
 8005d64:	4610      	mov	r0, r2
 8005d66:	4798      	blx	r3
 8005d68:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005d6a:	e00f      	b.n	8005d8c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005d6c:	6839      	ldr	r1, [r7, #0]
 8005d6e:	6878      	ldr	r0, [r7, #4]
 8005d70:	f000 fa30 	bl	80061d4 <USBD_CtlError>
            err++;
 8005d74:	7afb      	ldrb	r3, [r7, #11]
 8005d76:	3301      	adds	r3, #1
 8005d78:	72fb      	strb	r3, [r7, #11]
          break;
 8005d7a:	e007      	b.n	8005d8c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8005d7c:	6839      	ldr	r1, [r7, #0]
 8005d7e:	6878      	ldr	r0, [r7, #4]
 8005d80:	f000 fa28 	bl	80061d4 <USBD_CtlError>
          err++;
 8005d84:	7afb      	ldrb	r3, [r7, #11]
 8005d86:	3301      	adds	r3, #1
 8005d88:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8005d8a:	bf00      	nop
      }
      break;
 8005d8c:	e037      	b.n	8005dfe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	7c1b      	ldrb	r3, [r3, #16]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d109      	bne.n	8005daa <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d9e:	f107 0208 	add.w	r2, r7, #8
 8005da2:	4610      	mov	r0, r2
 8005da4:	4798      	blx	r3
 8005da6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005da8:	e029      	b.n	8005dfe <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005daa:	6839      	ldr	r1, [r7, #0]
 8005dac:	6878      	ldr	r0, [r7, #4]
 8005dae:	f000 fa11 	bl	80061d4 <USBD_CtlError>
        err++;
 8005db2:	7afb      	ldrb	r3, [r7, #11]
 8005db4:	3301      	adds	r3, #1
 8005db6:	72fb      	strb	r3, [r7, #11]
      break;
 8005db8:	e021      	b.n	8005dfe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	7c1b      	ldrb	r3, [r3, #16]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d10d      	bne.n	8005dde <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dca:	f107 0208 	add.w	r2, r7, #8
 8005dce:	4610      	mov	r0, r2
 8005dd0:	4798      	blx	r3
 8005dd2:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	3301      	adds	r3, #1
 8005dd8:	2207      	movs	r2, #7
 8005dda:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005ddc:	e00f      	b.n	8005dfe <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005dde:	6839      	ldr	r1, [r7, #0]
 8005de0:	6878      	ldr	r0, [r7, #4]
 8005de2:	f000 f9f7 	bl	80061d4 <USBD_CtlError>
        err++;
 8005de6:	7afb      	ldrb	r3, [r7, #11]
 8005de8:	3301      	adds	r3, #1
 8005dea:	72fb      	strb	r3, [r7, #11]
      break;
 8005dec:	e007      	b.n	8005dfe <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8005dee:	6839      	ldr	r1, [r7, #0]
 8005df0:	6878      	ldr	r0, [r7, #4]
 8005df2:	f000 f9ef 	bl	80061d4 <USBD_CtlError>
      err++;
 8005df6:	7afb      	ldrb	r3, [r7, #11]
 8005df8:	3301      	adds	r3, #1
 8005dfa:	72fb      	strb	r3, [r7, #11]
      break;
 8005dfc:	bf00      	nop
  }

  if (err != 0U)
 8005dfe:	7afb      	ldrb	r3, [r7, #11]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d11e      	bne.n	8005e42 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	88db      	ldrh	r3, [r3, #6]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d016      	beq.n	8005e3a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8005e0c:	893b      	ldrh	r3, [r7, #8]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d00e      	beq.n	8005e30 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	88da      	ldrh	r2, [r3, #6]
 8005e16:	893b      	ldrh	r3, [r7, #8]
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	bf28      	it	cs
 8005e1c:	4613      	movcs	r3, r2
 8005e1e:	b29b      	uxth	r3, r3
 8005e20:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005e22:	893b      	ldrh	r3, [r7, #8]
 8005e24:	461a      	mov	r2, r3
 8005e26:	68f9      	ldr	r1, [r7, #12]
 8005e28:	6878      	ldr	r0, [r7, #4]
 8005e2a:	f000 fa44 	bl	80062b6 <USBD_CtlSendData>
 8005e2e:	e009      	b.n	8005e44 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8005e30:	6839      	ldr	r1, [r7, #0]
 8005e32:	6878      	ldr	r0, [r7, #4]
 8005e34:	f000 f9ce 	bl	80061d4 <USBD_CtlError>
 8005e38:	e004      	b.n	8005e44 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8005e3a:	6878      	ldr	r0, [r7, #4]
 8005e3c:	f000 fa95 	bl	800636a <USBD_CtlSendStatus>
 8005e40:	e000      	b.n	8005e44 <USBD_GetDescriptor+0x2cc>
    return;
 8005e42:	bf00      	nop
  }
}
 8005e44:	3710      	adds	r7, #16
 8005e46:	46bd      	mov	sp, r7
 8005e48:	bd80      	pop	{r7, pc}
 8005e4a:	bf00      	nop

08005e4c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b084      	sub	sp, #16
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
 8005e54:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	889b      	ldrh	r3, [r3, #4]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d131      	bne.n	8005ec2 <USBD_SetAddress+0x76>
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	88db      	ldrh	r3, [r3, #6]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d12d      	bne.n	8005ec2 <USBD_SetAddress+0x76>
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	885b      	ldrh	r3, [r3, #2]
 8005e6a:	2b7f      	cmp	r3, #127	; 0x7f
 8005e6c:	d829      	bhi.n	8005ec2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	885b      	ldrh	r3, [r3, #2]
 8005e72:	b2db      	uxtb	r3, r3
 8005e74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e78:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e80:	b2db      	uxtb	r3, r3
 8005e82:	2b03      	cmp	r3, #3
 8005e84:	d104      	bne.n	8005e90 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8005e86:	6839      	ldr	r1, [r7, #0]
 8005e88:	6878      	ldr	r0, [r7, #4]
 8005e8a:	f000 f9a3 	bl	80061d4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e8e:	e01d      	b.n	8005ecc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	7bfa      	ldrb	r2, [r7, #15]
 8005e94:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005e98:	7bfb      	ldrb	r3, [r7, #15]
 8005e9a:	4619      	mov	r1, r3
 8005e9c:	6878      	ldr	r0, [r7, #4]
 8005e9e:	f000 fee3 	bl	8006c68 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8005ea2:	6878      	ldr	r0, [r7, #4]
 8005ea4:	f000 fa61 	bl	800636a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8005ea8:	7bfb      	ldrb	r3, [r7, #15]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d004      	beq.n	8005eb8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	2202      	movs	r2, #2
 8005eb2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005eb6:	e009      	b.n	8005ecc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2201      	movs	r2, #1
 8005ebc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ec0:	e004      	b.n	8005ecc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8005ec2:	6839      	ldr	r1, [r7, #0]
 8005ec4:	6878      	ldr	r0, [r7, #4]
 8005ec6:	f000 f985 	bl	80061d4 <USBD_CtlError>
  }
}
 8005eca:	bf00      	nop
 8005ecc:	bf00      	nop
 8005ece:	3710      	adds	r7, #16
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	bd80      	pop	{r7, pc}

08005ed4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b084      	sub	sp, #16
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
 8005edc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005ede:	2300      	movs	r3, #0
 8005ee0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	885b      	ldrh	r3, [r3, #2]
 8005ee6:	b2da      	uxtb	r2, r3
 8005ee8:	4b4c      	ldr	r3, [pc, #304]	; (800601c <USBD_SetConfig+0x148>)
 8005eea:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005eec:	4b4b      	ldr	r3, [pc, #300]	; (800601c <USBD_SetConfig+0x148>)
 8005eee:	781b      	ldrb	r3, [r3, #0]
 8005ef0:	2b01      	cmp	r3, #1
 8005ef2:	d905      	bls.n	8005f00 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8005ef4:	6839      	ldr	r1, [r7, #0]
 8005ef6:	6878      	ldr	r0, [r7, #4]
 8005ef8:	f000 f96c 	bl	80061d4 <USBD_CtlError>
    return USBD_FAIL;
 8005efc:	2303      	movs	r3, #3
 8005efe:	e088      	b.n	8006012 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f06:	b2db      	uxtb	r3, r3
 8005f08:	2b02      	cmp	r3, #2
 8005f0a:	d002      	beq.n	8005f12 <USBD_SetConfig+0x3e>
 8005f0c:	2b03      	cmp	r3, #3
 8005f0e:	d025      	beq.n	8005f5c <USBD_SetConfig+0x88>
 8005f10:	e071      	b.n	8005ff6 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8005f12:	4b42      	ldr	r3, [pc, #264]	; (800601c <USBD_SetConfig+0x148>)
 8005f14:	781b      	ldrb	r3, [r3, #0]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d01c      	beq.n	8005f54 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8005f1a:	4b40      	ldr	r3, [pc, #256]	; (800601c <USBD_SetConfig+0x148>)
 8005f1c:	781b      	ldrb	r3, [r3, #0]
 8005f1e:	461a      	mov	r2, r3
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8005f24:	4b3d      	ldr	r3, [pc, #244]	; (800601c <USBD_SetConfig+0x148>)
 8005f26:	781b      	ldrb	r3, [r3, #0]
 8005f28:	4619      	mov	r1, r3
 8005f2a:	6878      	ldr	r0, [r7, #4]
 8005f2c:	f7ff f948 	bl	80051c0 <USBD_SetClassConfig>
 8005f30:	4603      	mov	r3, r0
 8005f32:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8005f34:	7bfb      	ldrb	r3, [r7, #15]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d004      	beq.n	8005f44 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8005f3a:	6839      	ldr	r1, [r7, #0]
 8005f3c:	6878      	ldr	r0, [r7, #4]
 8005f3e:	f000 f949 	bl	80061d4 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8005f42:	e065      	b.n	8006010 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8005f44:	6878      	ldr	r0, [r7, #4]
 8005f46:	f000 fa10 	bl	800636a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2203      	movs	r2, #3
 8005f4e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8005f52:	e05d      	b.n	8006010 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8005f54:	6878      	ldr	r0, [r7, #4]
 8005f56:	f000 fa08 	bl	800636a <USBD_CtlSendStatus>
      break;
 8005f5a:	e059      	b.n	8006010 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8005f5c:	4b2f      	ldr	r3, [pc, #188]	; (800601c <USBD_SetConfig+0x148>)
 8005f5e:	781b      	ldrb	r3, [r3, #0]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d112      	bne.n	8005f8a <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2202      	movs	r2, #2
 8005f68:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8005f6c:	4b2b      	ldr	r3, [pc, #172]	; (800601c <USBD_SetConfig+0x148>)
 8005f6e:	781b      	ldrb	r3, [r3, #0]
 8005f70:	461a      	mov	r2, r3
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005f76:	4b29      	ldr	r3, [pc, #164]	; (800601c <USBD_SetConfig+0x148>)
 8005f78:	781b      	ldrb	r3, [r3, #0]
 8005f7a:	4619      	mov	r1, r3
 8005f7c:	6878      	ldr	r0, [r7, #4]
 8005f7e:	f7ff f93b 	bl	80051f8 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8005f82:	6878      	ldr	r0, [r7, #4]
 8005f84:	f000 f9f1 	bl	800636a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8005f88:	e042      	b.n	8006010 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8005f8a:	4b24      	ldr	r3, [pc, #144]	; (800601c <USBD_SetConfig+0x148>)
 8005f8c:	781b      	ldrb	r3, [r3, #0]
 8005f8e:	461a      	mov	r2, r3
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	685b      	ldr	r3, [r3, #4]
 8005f94:	429a      	cmp	r2, r3
 8005f96:	d02a      	beq.n	8005fee <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	685b      	ldr	r3, [r3, #4]
 8005f9c:	b2db      	uxtb	r3, r3
 8005f9e:	4619      	mov	r1, r3
 8005fa0:	6878      	ldr	r0, [r7, #4]
 8005fa2:	f7ff f929 	bl	80051f8 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8005fa6:	4b1d      	ldr	r3, [pc, #116]	; (800601c <USBD_SetConfig+0x148>)
 8005fa8:	781b      	ldrb	r3, [r3, #0]
 8005faa:	461a      	mov	r2, r3
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8005fb0:	4b1a      	ldr	r3, [pc, #104]	; (800601c <USBD_SetConfig+0x148>)
 8005fb2:	781b      	ldrb	r3, [r3, #0]
 8005fb4:	4619      	mov	r1, r3
 8005fb6:	6878      	ldr	r0, [r7, #4]
 8005fb8:	f7ff f902 	bl	80051c0 <USBD_SetClassConfig>
 8005fbc:	4603      	mov	r3, r0
 8005fbe:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8005fc0:	7bfb      	ldrb	r3, [r7, #15]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d00f      	beq.n	8005fe6 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8005fc6:	6839      	ldr	r1, [r7, #0]
 8005fc8:	6878      	ldr	r0, [r7, #4]
 8005fca:	f000 f903 	bl	80061d4 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	685b      	ldr	r3, [r3, #4]
 8005fd2:	b2db      	uxtb	r3, r3
 8005fd4:	4619      	mov	r1, r3
 8005fd6:	6878      	ldr	r0, [r7, #4]
 8005fd8:	f7ff f90e 	bl	80051f8 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2202      	movs	r2, #2
 8005fe0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8005fe4:	e014      	b.n	8006010 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8005fe6:	6878      	ldr	r0, [r7, #4]
 8005fe8:	f000 f9bf 	bl	800636a <USBD_CtlSendStatus>
      break;
 8005fec:	e010      	b.n	8006010 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8005fee:	6878      	ldr	r0, [r7, #4]
 8005ff0:	f000 f9bb 	bl	800636a <USBD_CtlSendStatus>
      break;
 8005ff4:	e00c      	b.n	8006010 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8005ff6:	6839      	ldr	r1, [r7, #0]
 8005ff8:	6878      	ldr	r0, [r7, #4]
 8005ffa:	f000 f8eb 	bl	80061d4 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005ffe:	4b07      	ldr	r3, [pc, #28]	; (800601c <USBD_SetConfig+0x148>)
 8006000:	781b      	ldrb	r3, [r3, #0]
 8006002:	4619      	mov	r1, r3
 8006004:	6878      	ldr	r0, [r7, #4]
 8006006:	f7ff f8f7 	bl	80051f8 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800600a:	2303      	movs	r3, #3
 800600c:	73fb      	strb	r3, [r7, #15]
      break;
 800600e:	bf00      	nop
  }

  return ret;
 8006010:	7bfb      	ldrb	r3, [r7, #15]
}
 8006012:	4618      	mov	r0, r3
 8006014:	3710      	adds	r7, #16
 8006016:	46bd      	mov	sp, r7
 8006018:	bd80      	pop	{r7, pc}
 800601a:	bf00      	nop
 800601c:	200001bc 	.word	0x200001bc

08006020 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b082      	sub	sp, #8
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
 8006028:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	88db      	ldrh	r3, [r3, #6]
 800602e:	2b01      	cmp	r3, #1
 8006030:	d004      	beq.n	800603c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006032:	6839      	ldr	r1, [r7, #0]
 8006034:	6878      	ldr	r0, [r7, #4]
 8006036:	f000 f8cd 	bl	80061d4 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800603a:	e023      	b.n	8006084 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006042:	b2db      	uxtb	r3, r3
 8006044:	2b02      	cmp	r3, #2
 8006046:	dc02      	bgt.n	800604e <USBD_GetConfig+0x2e>
 8006048:	2b00      	cmp	r3, #0
 800604a:	dc03      	bgt.n	8006054 <USBD_GetConfig+0x34>
 800604c:	e015      	b.n	800607a <USBD_GetConfig+0x5a>
 800604e:	2b03      	cmp	r3, #3
 8006050:	d00b      	beq.n	800606a <USBD_GetConfig+0x4a>
 8006052:	e012      	b.n	800607a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2200      	movs	r2, #0
 8006058:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	3308      	adds	r3, #8
 800605e:	2201      	movs	r2, #1
 8006060:	4619      	mov	r1, r3
 8006062:	6878      	ldr	r0, [r7, #4]
 8006064:	f000 f927 	bl	80062b6 <USBD_CtlSendData>
        break;
 8006068:	e00c      	b.n	8006084 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	3304      	adds	r3, #4
 800606e:	2201      	movs	r2, #1
 8006070:	4619      	mov	r1, r3
 8006072:	6878      	ldr	r0, [r7, #4]
 8006074:	f000 f91f 	bl	80062b6 <USBD_CtlSendData>
        break;
 8006078:	e004      	b.n	8006084 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800607a:	6839      	ldr	r1, [r7, #0]
 800607c:	6878      	ldr	r0, [r7, #4]
 800607e:	f000 f8a9 	bl	80061d4 <USBD_CtlError>
        break;
 8006082:	bf00      	nop
}
 8006084:	bf00      	nop
 8006086:	3708      	adds	r7, #8
 8006088:	46bd      	mov	sp, r7
 800608a:	bd80      	pop	{r7, pc}

0800608c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b082      	sub	sp, #8
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
 8006094:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800609c:	b2db      	uxtb	r3, r3
 800609e:	3b01      	subs	r3, #1
 80060a0:	2b02      	cmp	r3, #2
 80060a2:	d81e      	bhi.n	80060e2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	88db      	ldrh	r3, [r3, #6]
 80060a8:	2b02      	cmp	r3, #2
 80060aa:	d004      	beq.n	80060b6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80060ac:	6839      	ldr	r1, [r7, #0]
 80060ae:	6878      	ldr	r0, [r7, #4]
 80060b0:	f000 f890 	bl	80061d4 <USBD_CtlError>
        break;
 80060b4:	e01a      	b.n	80060ec <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2201      	movs	r2, #1
 80060ba:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d005      	beq.n	80060d2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	68db      	ldr	r3, [r3, #12]
 80060ca:	f043 0202 	orr.w	r2, r3, #2
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	330c      	adds	r3, #12
 80060d6:	2202      	movs	r2, #2
 80060d8:	4619      	mov	r1, r3
 80060da:	6878      	ldr	r0, [r7, #4]
 80060dc:	f000 f8eb 	bl	80062b6 <USBD_CtlSendData>
      break;
 80060e0:	e004      	b.n	80060ec <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80060e2:	6839      	ldr	r1, [r7, #0]
 80060e4:	6878      	ldr	r0, [r7, #4]
 80060e6:	f000 f875 	bl	80061d4 <USBD_CtlError>
      break;
 80060ea:	bf00      	nop
  }
}
 80060ec:	bf00      	nop
 80060ee:	3708      	adds	r7, #8
 80060f0:	46bd      	mov	sp, r7
 80060f2:	bd80      	pop	{r7, pc}

080060f4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b082      	sub	sp, #8
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
 80060fc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	885b      	ldrh	r3, [r3, #2]
 8006102:	2b01      	cmp	r3, #1
 8006104:	d106      	bne.n	8006114 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2201      	movs	r2, #1
 800610a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800610e:	6878      	ldr	r0, [r7, #4]
 8006110:	f000 f92b 	bl	800636a <USBD_CtlSendStatus>
  }
}
 8006114:	bf00      	nop
 8006116:	3708      	adds	r7, #8
 8006118:	46bd      	mov	sp, r7
 800611a:	bd80      	pop	{r7, pc}

0800611c <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b082      	sub	sp, #8
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
 8006124:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800612c:	b2db      	uxtb	r3, r3
 800612e:	3b01      	subs	r3, #1
 8006130:	2b02      	cmp	r3, #2
 8006132:	d80b      	bhi.n	800614c <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	885b      	ldrh	r3, [r3, #2]
 8006138:	2b01      	cmp	r3, #1
 800613a:	d10c      	bne.n	8006156 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2200      	movs	r2, #0
 8006140:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006144:	6878      	ldr	r0, [r7, #4]
 8006146:	f000 f910 	bl	800636a <USBD_CtlSendStatus>
      }
      break;
 800614a:	e004      	b.n	8006156 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800614c:	6839      	ldr	r1, [r7, #0]
 800614e:	6878      	ldr	r0, [r7, #4]
 8006150:	f000 f840 	bl	80061d4 <USBD_CtlError>
      break;
 8006154:	e000      	b.n	8006158 <USBD_ClrFeature+0x3c>
      break;
 8006156:	bf00      	nop
  }
}
 8006158:	bf00      	nop
 800615a:	3708      	adds	r7, #8
 800615c:	46bd      	mov	sp, r7
 800615e:	bd80      	pop	{r7, pc}

08006160 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b084      	sub	sp, #16
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
 8006168:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	781a      	ldrb	r2, [r3, #0]
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	3301      	adds	r3, #1
 800617a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	781a      	ldrb	r2, [r3, #0]
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	3301      	adds	r3, #1
 8006188:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800618a:	68f8      	ldr	r0, [r7, #12]
 800618c:	f7ff fabb 	bl	8005706 <SWAPBYTE>
 8006190:	4603      	mov	r3, r0
 8006192:	461a      	mov	r2, r3
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	3301      	adds	r3, #1
 800619c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	3301      	adds	r3, #1
 80061a2:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80061a4:	68f8      	ldr	r0, [r7, #12]
 80061a6:	f7ff faae 	bl	8005706 <SWAPBYTE>
 80061aa:	4603      	mov	r3, r0
 80061ac:	461a      	mov	r2, r3
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	3301      	adds	r3, #1
 80061b6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	3301      	adds	r3, #1
 80061bc:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80061be:	68f8      	ldr	r0, [r7, #12]
 80061c0:	f7ff faa1 	bl	8005706 <SWAPBYTE>
 80061c4:	4603      	mov	r3, r0
 80061c6:	461a      	mov	r2, r3
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	80da      	strh	r2, [r3, #6]
}
 80061cc:	bf00      	nop
 80061ce:	3710      	adds	r7, #16
 80061d0:	46bd      	mov	sp, r7
 80061d2:	bd80      	pop	{r7, pc}

080061d4 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b082      	sub	sp, #8
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
 80061dc:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80061de:	2180      	movs	r1, #128	; 0x80
 80061e0:	6878      	ldr	r0, [r7, #4]
 80061e2:	f000 fcd7 	bl	8006b94 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80061e6:	2100      	movs	r1, #0
 80061e8:	6878      	ldr	r0, [r7, #4]
 80061ea:	f000 fcd3 	bl	8006b94 <USBD_LL_StallEP>
}
 80061ee:	bf00      	nop
 80061f0:	3708      	adds	r7, #8
 80061f2:	46bd      	mov	sp, r7
 80061f4:	bd80      	pop	{r7, pc}

080061f6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80061f6:	b580      	push	{r7, lr}
 80061f8:	b086      	sub	sp, #24
 80061fa:	af00      	add	r7, sp, #0
 80061fc:	60f8      	str	r0, [r7, #12]
 80061fe:	60b9      	str	r1, [r7, #8]
 8006200:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006202:	2300      	movs	r3, #0
 8006204:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d036      	beq.n	800627a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006210:	6938      	ldr	r0, [r7, #16]
 8006212:	f000 f836 	bl	8006282 <USBD_GetLen>
 8006216:	4603      	mov	r3, r0
 8006218:	3301      	adds	r3, #1
 800621a:	b29b      	uxth	r3, r3
 800621c:	005b      	lsls	r3, r3, #1
 800621e:	b29a      	uxth	r2, r3
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006224:	7dfb      	ldrb	r3, [r7, #23]
 8006226:	68ba      	ldr	r2, [r7, #8]
 8006228:	4413      	add	r3, r2
 800622a:	687a      	ldr	r2, [r7, #4]
 800622c:	7812      	ldrb	r2, [r2, #0]
 800622e:	701a      	strb	r2, [r3, #0]
  idx++;
 8006230:	7dfb      	ldrb	r3, [r7, #23]
 8006232:	3301      	adds	r3, #1
 8006234:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006236:	7dfb      	ldrb	r3, [r7, #23]
 8006238:	68ba      	ldr	r2, [r7, #8]
 800623a:	4413      	add	r3, r2
 800623c:	2203      	movs	r2, #3
 800623e:	701a      	strb	r2, [r3, #0]
  idx++;
 8006240:	7dfb      	ldrb	r3, [r7, #23]
 8006242:	3301      	adds	r3, #1
 8006244:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006246:	e013      	b.n	8006270 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006248:	7dfb      	ldrb	r3, [r7, #23]
 800624a:	68ba      	ldr	r2, [r7, #8]
 800624c:	4413      	add	r3, r2
 800624e:	693a      	ldr	r2, [r7, #16]
 8006250:	7812      	ldrb	r2, [r2, #0]
 8006252:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006254:	693b      	ldr	r3, [r7, #16]
 8006256:	3301      	adds	r3, #1
 8006258:	613b      	str	r3, [r7, #16]
    idx++;
 800625a:	7dfb      	ldrb	r3, [r7, #23]
 800625c:	3301      	adds	r3, #1
 800625e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006260:	7dfb      	ldrb	r3, [r7, #23]
 8006262:	68ba      	ldr	r2, [r7, #8]
 8006264:	4413      	add	r3, r2
 8006266:	2200      	movs	r2, #0
 8006268:	701a      	strb	r2, [r3, #0]
    idx++;
 800626a:	7dfb      	ldrb	r3, [r7, #23]
 800626c:	3301      	adds	r3, #1
 800626e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006270:	693b      	ldr	r3, [r7, #16]
 8006272:	781b      	ldrb	r3, [r3, #0]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d1e7      	bne.n	8006248 <USBD_GetString+0x52>
 8006278:	e000      	b.n	800627c <USBD_GetString+0x86>
    return;
 800627a:	bf00      	nop
  }
}
 800627c:	3718      	adds	r7, #24
 800627e:	46bd      	mov	sp, r7
 8006280:	bd80      	pop	{r7, pc}

08006282 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006282:	b480      	push	{r7}
 8006284:	b085      	sub	sp, #20
 8006286:	af00      	add	r7, sp, #0
 8006288:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800628a:	2300      	movs	r3, #0
 800628c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006292:	e005      	b.n	80062a0 <USBD_GetLen+0x1e>
  {
    len++;
 8006294:	7bfb      	ldrb	r3, [r7, #15]
 8006296:	3301      	adds	r3, #1
 8006298:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800629a:	68bb      	ldr	r3, [r7, #8]
 800629c:	3301      	adds	r3, #1
 800629e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80062a0:	68bb      	ldr	r3, [r7, #8]
 80062a2:	781b      	ldrb	r3, [r3, #0]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d1f5      	bne.n	8006294 <USBD_GetLen+0x12>
  }

  return len;
 80062a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80062aa:	4618      	mov	r0, r3
 80062ac:	3714      	adds	r7, #20
 80062ae:	46bd      	mov	sp, r7
 80062b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b4:	4770      	bx	lr

080062b6 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80062b6:	b580      	push	{r7, lr}
 80062b8:	b084      	sub	sp, #16
 80062ba:	af00      	add	r7, sp, #0
 80062bc:	60f8      	str	r0, [r7, #12]
 80062be:	60b9      	str	r1, [r7, #8]
 80062c0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	2202      	movs	r2, #2
 80062c6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	687a      	ldr	r2, [r7, #4]
 80062ce:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	687a      	ldr	r2, [r7, #4]
 80062d4:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	68ba      	ldr	r2, [r7, #8]
 80062da:	2100      	movs	r1, #0
 80062dc:	68f8      	ldr	r0, [r7, #12]
 80062de:	f000 fce2 	bl	8006ca6 <USBD_LL_Transmit>

  return USBD_OK;
 80062e2:	2300      	movs	r3, #0
}
 80062e4:	4618      	mov	r0, r3
 80062e6:	3710      	adds	r7, #16
 80062e8:	46bd      	mov	sp, r7
 80062ea:	bd80      	pop	{r7, pc}

080062ec <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b084      	sub	sp, #16
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	60f8      	str	r0, [r7, #12]
 80062f4:	60b9      	str	r1, [r7, #8]
 80062f6:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	68ba      	ldr	r2, [r7, #8]
 80062fc:	2100      	movs	r1, #0
 80062fe:	68f8      	ldr	r0, [r7, #12]
 8006300:	f000 fcd1 	bl	8006ca6 <USBD_LL_Transmit>

  return USBD_OK;
 8006304:	2300      	movs	r3, #0
}
 8006306:	4618      	mov	r0, r3
 8006308:	3710      	adds	r7, #16
 800630a:	46bd      	mov	sp, r7
 800630c:	bd80      	pop	{r7, pc}

0800630e <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800630e:	b580      	push	{r7, lr}
 8006310:	b084      	sub	sp, #16
 8006312:	af00      	add	r7, sp, #0
 8006314:	60f8      	str	r0, [r7, #12]
 8006316:	60b9      	str	r1, [r7, #8]
 8006318:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	2203      	movs	r2, #3
 800631e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	687a      	ldr	r2, [r7, #4]
 8006326:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	687a      	ldr	r2, [r7, #4]
 800632e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	68ba      	ldr	r2, [r7, #8]
 8006336:	2100      	movs	r1, #0
 8006338:	68f8      	ldr	r0, [r7, #12]
 800633a:	f000 fcd5 	bl	8006ce8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800633e:	2300      	movs	r3, #0
}
 8006340:	4618      	mov	r0, r3
 8006342:	3710      	adds	r7, #16
 8006344:	46bd      	mov	sp, r7
 8006346:	bd80      	pop	{r7, pc}

08006348 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b084      	sub	sp, #16
 800634c:	af00      	add	r7, sp, #0
 800634e:	60f8      	str	r0, [r7, #12]
 8006350:	60b9      	str	r1, [r7, #8]
 8006352:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	68ba      	ldr	r2, [r7, #8]
 8006358:	2100      	movs	r1, #0
 800635a:	68f8      	ldr	r0, [r7, #12]
 800635c:	f000 fcc4 	bl	8006ce8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006360:	2300      	movs	r3, #0
}
 8006362:	4618      	mov	r0, r3
 8006364:	3710      	adds	r7, #16
 8006366:	46bd      	mov	sp, r7
 8006368:	bd80      	pop	{r7, pc}

0800636a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800636a:	b580      	push	{r7, lr}
 800636c:	b082      	sub	sp, #8
 800636e:	af00      	add	r7, sp, #0
 8006370:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2204      	movs	r2, #4
 8006376:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800637a:	2300      	movs	r3, #0
 800637c:	2200      	movs	r2, #0
 800637e:	2100      	movs	r1, #0
 8006380:	6878      	ldr	r0, [r7, #4]
 8006382:	f000 fc90 	bl	8006ca6 <USBD_LL_Transmit>

  return USBD_OK;
 8006386:	2300      	movs	r3, #0
}
 8006388:	4618      	mov	r0, r3
 800638a:	3708      	adds	r7, #8
 800638c:	46bd      	mov	sp, r7
 800638e:	bd80      	pop	{r7, pc}

08006390 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006390:	b580      	push	{r7, lr}
 8006392:	b082      	sub	sp, #8
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2205      	movs	r2, #5
 800639c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80063a0:	2300      	movs	r3, #0
 80063a2:	2200      	movs	r2, #0
 80063a4:	2100      	movs	r1, #0
 80063a6:	6878      	ldr	r0, [r7, #4]
 80063a8:	f000 fc9e 	bl	8006ce8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80063ac:	2300      	movs	r3, #0
}
 80063ae:	4618      	mov	r0, r3
 80063b0:	3708      	adds	r7, #8
 80063b2:	46bd      	mov	sp, r7
 80063b4:	bd80      	pop	{r7, pc}
	...

080063b8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80063bc:	2200      	movs	r2, #0
 80063be:	4912      	ldr	r1, [pc, #72]	; (8006408 <MX_USB_DEVICE_Init+0x50>)
 80063c0:	4812      	ldr	r0, [pc, #72]	; (800640c <MX_USB_DEVICE_Init+0x54>)
 80063c2:	f7fe fe8f 	bl	80050e4 <USBD_Init>
 80063c6:	4603      	mov	r3, r0
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d001      	beq.n	80063d0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80063cc:	f7fa f9d2 	bl	8000774 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80063d0:	490f      	ldr	r1, [pc, #60]	; (8006410 <MX_USB_DEVICE_Init+0x58>)
 80063d2:	480e      	ldr	r0, [pc, #56]	; (800640c <MX_USB_DEVICE_Init+0x54>)
 80063d4:	f7fe feb6 	bl	8005144 <USBD_RegisterClass>
 80063d8:	4603      	mov	r3, r0
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d001      	beq.n	80063e2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80063de:	f7fa f9c9 	bl	8000774 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80063e2:	490c      	ldr	r1, [pc, #48]	; (8006414 <MX_USB_DEVICE_Init+0x5c>)
 80063e4:	4809      	ldr	r0, [pc, #36]	; (800640c <MX_USB_DEVICE_Init+0x54>)
 80063e6:	f7fe fdd7 	bl	8004f98 <USBD_CDC_RegisterInterface>
 80063ea:	4603      	mov	r3, r0
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d001      	beq.n	80063f4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80063f0:	f7fa f9c0 	bl	8000774 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80063f4:	4805      	ldr	r0, [pc, #20]	; (800640c <MX_USB_DEVICE_Init+0x54>)
 80063f6:	f7fe fecc 	bl	8005192 <USBD_Start>
 80063fa:	4603      	mov	r3, r0
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d001      	beq.n	8006404 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006400:	f7fa f9b8 	bl	8000774 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006404:	bf00      	nop
 8006406:	bd80      	pop	{r7, pc}
 8006408:	2000014c 	.word	0x2000014c
 800640c:	2000042c 	.word	0x2000042c
 8006410:	20000034 	.word	0x20000034
 8006414:	20000138 	.word	0x20000138

08006418 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8006418:	b580      	push	{r7, lr}
 800641a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800641c:	2200      	movs	r2, #0
 800641e:	4905      	ldr	r1, [pc, #20]	; (8006434 <CDC_Init_FS+0x1c>)
 8006420:	4805      	ldr	r0, [pc, #20]	; (8006438 <CDC_Init_FS+0x20>)
 8006422:	f7fe fdce 	bl	8004fc2 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006426:	4905      	ldr	r1, [pc, #20]	; (800643c <CDC_Init_FS+0x24>)
 8006428:	4803      	ldr	r0, [pc, #12]	; (8006438 <CDC_Init_FS+0x20>)
 800642a:	f7fe fde8 	bl	8004ffe <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800642e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006430:	4618      	mov	r0, r3
 8006432:	bd80      	pop	{r7, pc}
 8006434:	20000ae4 	.word	0x20000ae4
 8006438:	2000042c 	.word	0x2000042c
 800643c:	200006fc 	.word	0x200006fc

08006440 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006440:	b480      	push	{r7}
 8006442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006444:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8006446:	4618      	mov	r0, r3
 8006448:	46bd      	mov	sp, r7
 800644a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644e:	4770      	bx	lr

08006450 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006450:	b480      	push	{r7}
 8006452:	b083      	sub	sp, #12
 8006454:	af00      	add	r7, sp, #0
 8006456:	4603      	mov	r3, r0
 8006458:	6039      	str	r1, [r7, #0]
 800645a:	71fb      	strb	r3, [r7, #7]
 800645c:	4613      	mov	r3, r2
 800645e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006460:	79fb      	ldrb	r3, [r7, #7]
 8006462:	2b23      	cmp	r3, #35	; 0x23
 8006464:	d84a      	bhi.n	80064fc <CDC_Control_FS+0xac>
 8006466:	a201      	add	r2, pc, #4	; (adr r2, 800646c <CDC_Control_FS+0x1c>)
 8006468:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800646c:	080064fd 	.word	0x080064fd
 8006470:	080064fd 	.word	0x080064fd
 8006474:	080064fd 	.word	0x080064fd
 8006478:	080064fd 	.word	0x080064fd
 800647c:	080064fd 	.word	0x080064fd
 8006480:	080064fd 	.word	0x080064fd
 8006484:	080064fd 	.word	0x080064fd
 8006488:	080064fd 	.word	0x080064fd
 800648c:	080064fd 	.word	0x080064fd
 8006490:	080064fd 	.word	0x080064fd
 8006494:	080064fd 	.word	0x080064fd
 8006498:	080064fd 	.word	0x080064fd
 800649c:	080064fd 	.word	0x080064fd
 80064a0:	080064fd 	.word	0x080064fd
 80064a4:	080064fd 	.word	0x080064fd
 80064a8:	080064fd 	.word	0x080064fd
 80064ac:	080064fd 	.word	0x080064fd
 80064b0:	080064fd 	.word	0x080064fd
 80064b4:	080064fd 	.word	0x080064fd
 80064b8:	080064fd 	.word	0x080064fd
 80064bc:	080064fd 	.word	0x080064fd
 80064c0:	080064fd 	.word	0x080064fd
 80064c4:	080064fd 	.word	0x080064fd
 80064c8:	080064fd 	.word	0x080064fd
 80064cc:	080064fd 	.word	0x080064fd
 80064d0:	080064fd 	.word	0x080064fd
 80064d4:	080064fd 	.word	0x080064fd
 80064d8:	080064fd 	.word	0x080064fd
 80064dc:	080064fd 	.word	0x080064fd
 80064e0:	080064fd 	.word	0x080064fd
 80064e4:	080064fd 	.word	0x080064fd
 80064e8:	080064fd 	.word	0x080064fd
 80064ec:	080064fd 	.word	0x080064fd
 80064f0:	080064fd 	.word	0x080064fd
 80064f4:	080064fd 	.word	0x080064fd
 80064f8:	080064fd 	.word	0x080064fd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80064fc:	bf00      	nop
  }

  return (USBD_OK);
 80064fe:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006500:	4618      	mov	r0, r3
 8006502:	370c      	adds	r7, #12
 8006504:	46bd      	mov	sp, r7
 8006506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650a:	4770      	bx	lr

0800650c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800650c:	b580      	push	{r7, lr}
 800650e:	b082      	sub	sp, #8
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
 8006514:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8006516:	6879      	ldr	r1, [r7, #4]
 8006518:	4805      	ldr	r0, [pc, #20]	; (8006530 <CDC_Receive_FS+0x24>)
 800651a:	f7fe fd70 	bl	8004ffe <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800651e:	4804      	ldr	r0, [pc, #16]	; (8006530 <CDC_Receive_FS+0x24>)
 8006520:	f7fe fdb6 	bl	8005090 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8006524:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8006526:	4618      	mov	r0, r3
 8006528:	3708      	adds	r7, #8
 800652a:	46bd      	mov	sp, r7
 800652c:	bd80      	pop	{r7, pc}
 800652e:	bf00      	nop
 8006530:	2000042c 	.word	0x2000042c

08006534 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8006534:	b580      	push	{r7, lr}
 8006536:	b084      	sub	sp, #16
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
 800653c:	460b      	mov	r3, r1
 800653e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8006540:	2300      	movs	r3, #0
 8006542:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8006544:	4b0d      	ldr	r3, [pc, #52]	; (800657c <CDC_Transmit_FS+0x48>)
 8006546:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800654a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800654c:	68bb      	ldr	r3, [r7, #8]
 800654e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006552:	2b00      	cmp	r3, #0
 8006554:	d001      	beq.n	800655a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8006556:	2301      	movs	r3, #1
 8006558:	e00b      	b.n	8006572 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800655a:	887b      	ldrh	r3, [r7, #2]
 800655c:	461a      	mov	r2, r3
 800655e:	6879      	ldr	r1, [r7, #4]
 8006560:	4806      	ldr	r0, [pc, #24]	; (800657c <CDC_Transmit_FS+0x48>)
 8006562:	f7fe fd2e 	bl	8004fc2 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8006566:	4805      	ldr	r0, [pc, #20]	; (800657c <CDC_Transmit_FS+0x48>)
 8006568:	f7fe fd62 	bl	8005030 <USBD_CDC_TransmitPacket>
 800656c:	4603      	mov	r3, r0
 800656e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8006570:	7bfb      	ldrb	r3, [r7, #15]
}
 8006572:	4618      	mov	r0, r3
 8006574:	3710      	adds	r7, #16
 8006576:	46bd      	mov	sp, r7
 8006578:	bd80      	pop	{r7, pc}
 800657a:	bf00      	nop
 800657c:	2000042c 	.word	0x2000042c

08006580 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8006580:	b480      	push	{r7}
 8006582:	b087      	sub	sp, #28
 8006584:	af00      	add	r7, sp, #0
 8006586:	60f8      	str	r0, [r7, #12]
 8006588:	60b9      	str	r1, [r7, #8]
 800658a:	4613      	mov	r3, r2
 800658c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800658e:	2300      	movs	r3, #0
 8006590:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8006592:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006596:	4618      	mov	r0, r3
 8006598:	371c      	adds	r7, #28
 800659a:	46bd      	mov	sp, r7
 800659c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a0:	4770      	bx	lr
	...

080065a4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80065a4:	b480      	push	{r7}
 80065a6:	b083      	sub	sp, #12
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	4603      	mov	r3, r0
 80065ac:	6039      	str	r1, [r7, #0]
 80065ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	2212      	movs	r2, #18
 80065b4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80065b6:	4b03      	ldr	r3, [pc, #12]	; (80065c4 <USBD_FS_DeviceDescriptor+0x20>)
}
 80065b8:	4618      	mov	r0, r3
 80065ba:	370c      	adds	r7, #12
 80065bc:	46bd      	mov	sp, r7
 80065be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c2:	4770      	bx	lr
 80065c4:	20000168 	.word	0x20000168

080065c8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80065c8:	b480      	push	{r7}
 80065ca:	b083      	sub	sp, #12
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	4603      	mov	r3, r0
 80065d0:	6039      	str	r1, [r7, #0]
 80065d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	2204      	movs	r2, #4
 80065d8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80065da:	4b03      	ldr	r3, [pc, #12]	; (80065e8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80065dc:	4618      	mov	r0, r3
 80065de:	370c      	adds	r7, #12
 80065e0:	46bd      	mov	sp, r7
 80065e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e6:	4770      	bx	lr
 80065e8:	2000017c 	.word	0x2000017c

080065ec <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b082      	sub	sp, #8
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	4603      	mov	r3, r0
 80065f4:	6039      	str	r1, [r7, #0]
 80065f6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80065f8:	79fb      	ldrb	r3, [r7, #7]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d105      	bne.n	800660a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80065fe:	683a      	ldr	r2, [r7, #0]
 8006600:	4907      	ldr	r1, [pc, #28]	; (8006620 <USBD_FS_ProductStrDescriptor+0x34>)
 8006602:	4808      	ldr	r0, [pc, #32]	; (8006624 <USBD_FS_ProductStrDescriptor+0x38>)
 8006604:	f7ff fdf7 	bl	80061f6 <USBD_GetString>
 8006608:	e004      	b.n	8006614 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800660a:	683a      	ldr	r2, [r7, #0]
 800660c:	4904      	ldr	r1, [pc, #16]	; (8006620 <USBD_FS_ProductStrDescriptor+0x34>)
 800660e:	4805      	ldr	r0, [pc, #20]	; (8006624 <USBD_FS_ProductStrDescriptor+0x38>)
 8006610:	f7ff fdf1 	bl	80061f6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006614:	4b02      	ldr	r3, [pc, #8]	; (8006620 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006616:	4618      	mov	r0, r3
 8006618:	3708      	adds	r7, #8
 800661a:	46bd      	mov	sp, r7
 800661c:	bd80      	pop	{r7, pc}
 800661e:	bf00      	nop
 8006620:	20000ecc 	.word	0x20000ecc
 8006624:	08006e48 	.word	0x08006e48

08006628 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b082      	sub	sp, #8
 800662c:	af00      	add	r7, sp, #0
 800662e:	4603      	mov	r3, r0
 8006630:	6039      	str	r1, [r7, #0]
 8006632:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006634:	683a      	ldr	r2, [r7, #0]
 8006636:	4904      	ldr	r1, [pc, #16]	; (8006648 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006638:	4804      	ldr	r0, [pc, #16]	; (800664c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800663a:	f7ff fddc 	bl	80061f6 <USBD_GetString>
  return USBD_StrDesc;
 800663e:	4b02      	ldr	r3, [pc, #8]	; (8006648 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006640:	4618      	mov	r0, r3
 8006642:	3708      	adds	r7, #8
 8006644:	46bd      	mov	sp, r7
 8006646:	bd80      	pop	{r7, pc}
 8006648:	20000ecc 	.word	0x20000ecc
 800664c:	08006e60 	.word	0x08006e60

08006650 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006650:	b580      	push	{r7, lr}
 8006652:	b082      	sub	sp, #8
 8006654:	af00      	add	r7, sp, #0
 8006656:	4603      	mov	r3, r0
 8006658:	6039      	str	r1, [r7, #0]
 800665a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	221a      	movs	r2, #26
 8006660:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006662:	f000 f843 	bl	80066ec <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006666:	4b02      	ldr	r3, [pc, #8]	; (8006670 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006668:	4618      	mov	r0, r3
 800666a:	3708      	adds	r7, #8
 800666c:	46bd      	mov	sp, r7
 800666e:	bd80      	pop	{r7, pc}
 8006670:	20000180 	.word	0x20000180

08006674 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006674:	b580      	push	{r7, lr}
 8006676:	b082      	sub	sp, #8
 8006678:	af00      	add	r7, sp, #0
 800667a:	4603      	mov	r3, r0
 800667c:	6039      	str	r1, [r7, #0]
 800667e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006680:	79fb      	ldrb	r3, [r7, #7]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d105      	bne.n	8006692 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006686:	683a      	ldr	r2, [r7, #0]
 8006688:	4907      	ldr	r1, [pc, #28]	; (80066a8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800668a:	4808      	ldr	r0, [pc, #32]	; (80066ac <USBD_FS_ConfigStrDescriptor+0x38>)
 800668c:	f7ff fdb3 	bl	80061f6 <USBD_GetString>
 8006690:	e004      	b.n	800669c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006692:	683a      	ldr	r2, [r7, #0]
 8006694:	4904      	ldr	r1, [pc, #16]	; (80066a8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006696:	4805      	ldr	r0, [pc, #20]	; (80066ac <USBD_FS_ConfigStrDescriptor+0x38>)
 8006698:	f7ff fdad 	bl	80061f6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800669c:	4b02      	ldr	r3, [pc, #8]	; (80066a8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800669e:	4618      	mov	r0, r3
 80066a0:	3708      	adds	r7, #8
 80066a2:	46bd      	mov	sp, r7
 80066a4:	bd80      	pop	{r7, pc}
 80066a6:	bf00      	nop
 80066a8:	20000ecc 	.word	0x20000ecc
 80066ac:	08006e74 	.word	0x08006e74

080066b0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b082      	sub	sp, #8
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	4603      	mov	r3, r0
 80066b8:	6039      	str	r1, [r7, #0]
 80066ba:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80066bc:	79fb      	ldrb	r3, [r7, #7]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d105      	bne.n	80066ce <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80066c2:	683a      	ldr	r2, [r7, #0]
 80066c4:	4907      	ldr	r1, [pc, #28]	; (80066e4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80066c6:	4808      	ldr	r0, [pc, #32]	; (80066e8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80066c8:	f7ff fd95 	bl	80061f6 <USBD_GetString>
 80066cc:	e004      	b.n	80066d8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80066ce:	683a      	ldr	r2, [r7, #0]
 80066d0:	4904      	ldr	r1, [pc, #16]	; (80066e4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80066d2:	4805      	ldr	r0, [pc, #20]	; (80066e8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80066d4:	f7ff fd8f 	bl	80061f6 <USBD_GetString>
  }
  return USBD_StrDesc;
 80066d8:	4b02      	ldr	r3, [pc, #8]	; (80066e4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80066da:	4618      	mov	r0, r3
 80066dc:	3708      	adds	r7, #8
 80066de:	46bd      	mov	sp, r7
 80066e0:	bd80      	pop	{r7, pc}
 80066e2:	bf00      	nop
 80066e4:	20000ecc 	.word	0x20000ecc
 80066e8:	08006e80 	.word	0x08006e80

080066ec <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b084      	sub	sp, #16
 80066f0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80066f2:	4b0f      	ldr	r3, [pc, #60]	; (8006730 <Get_SerialNum+0x44>)
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80066f8:	4b0e      	ldr	r3, [pc, #56]	; (8006734 <Get_SerialNum+0x48>)
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80066fe:	4b0e      	ldr	r3, [pc, #56]	; (8006738 <Get_SerialNum+0x4c>)
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006704:	68fa      	ldr	r2, [r7, #12]
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	4413      	add	r3, r2
 800670a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d009      	beq.n	8006726 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006712:	2208      	movs	r2, #8
 8006714:	4909      	ldr	r1, [pc, #36]	; (800673c <Get_SerialNum+0x50>)
 8006716:	68f8      	ldr	r0, [r7, #12]
 8006718:	f000 f814 	bl	8006744 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800671c:	2204      	movs	r2, #4
 800671e:	4908      	ldr	r1, [pc, #32]	; (8006740 <Get_SerialNum+0x54>)
 8006720:	68b8      	ldr	r0, [r7, #8]
 8006722:	f000 f80f 	bl	8006744 <IntToUnicode>
  }
}
 8006726:	bf00      	nop
 8006728:	3710      	adds	r7, #16
 800672a:	46bd      	mov	sp, r7
 800672c:	bd80      	pop	{r7, pc}
 800672e:	bf00      	nop
 8006730:	1fff7a10 	.word	0x1fff7a10
 8006734:	1fff7a14 	.word	0x1fff7a14
 8006738:	1fff7a18 	.word	0x1fff7a18
 800673c:	20000182 	.word	0x20000182
 8006740:	20000192 	.word	0x20000192

08006744 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006744:	b480      	push	{r7}
 8006746:	b087      	sub	sp, #28
 8006748:	af00      	add	r7, sp, #0
 800674a:	60f8      	str	r0, [r7, #12]
 800674c:	60b9      	str	r1, [r7, #8]
 800674e:	4613      	mov	r3, r2
 8006750:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006752:	2300      	movs	r3, #0
 8006754:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006756:	2300      	movs	r3, #0
 8006758:	75fb      	strb	r3, [r7, #23]
 800675a:	e027      	b.n	80067ac <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	0f1b      	lsrs	r3, r3, #28
 8006760:	2b09      	cmp	r3, #9
 8006762:	d80b      	bhi.n	800677c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	0f1b      	lsrs	r3, r3, #28
 8006768:	b2da      	uxtb	r2, r3
 800676a:	7dfb      	ldrb	r3, [r7, #23]
 800676c:	005b      	lsls	r3, r3, #1
 800676e:	4619      	mov	r1, r3
 8006770:	68bb      	ldr	r3, [r7, #8]
 8006772:	440b      	add	r3, r1
 8006774:	3230      	adds	r2, #48	; 0x30
 8006776:	b2d2      	uxtb	r2, r2
 8006778:	701a      	strb	r2, [r3, #0]
 800677a:	e00a      	b.n	8006792 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	0f1b      	lsrs	r3, r3, #28
 8006780:	b2da      	uxtb	r2, r3
 8006782:	7dfb      	ldrb	r3, [r7, #23]
 8006784:	005b      	lsls	r3, r3, #1
 8006786:	4619      	mov	r1, r3
 8006788:	68bb      	ldr	r3, [r7, #8]
 800678a:	440b      	add	r3, r1
 800678c:	3237      	adds	r2, #55	; 0x37
 800678e:	b2d2      	uxtb	r2, r2
 8006790:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	011b      	lsls	r3, r3, #4
 8006796:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006798:	7dfb      	ldrb	r3, [r7, #23]
 800679a:	005b      	lsls	r3, r3, #1
 800679c:	3301      	adds	r3, #1
 800679e:	68ba      	ldr	r2, [r7, #8]
 80067a0:	4413      	add	r3, r2
 80067a2:	2200      	movs	r2, #0
 80067a4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80067a6:	7dfb      	ldrb	r3, [r7, #23]
 80067a8:	3301      	adds	r3, #1
 80067aa:	75fb      	strb	r3, [r7, #23]
 80067ac:	7dfa      	ldrb	r2, [r7, #23]
 80067ae:	79fb      	ldrb	r3, [r7, #7]
 80067b0:	429a      	cmp	r2, r3
 80067b2:	d3d3      	bcc.n	800675c <IntToUnicode+0x18>
  }
}
 80067b4:	bf00      	nop
 80067b6:	bf00      	nop
 80067b8:	371c      	adds	r7, #28
 80067ba:	46bd      	mov	sp, r7
 80067bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c0:	4770      	bx	lr
	...

080067c4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b08a      	sub	sp, #40	; 0x28
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80067cc:	f107 0314 	add.w	r3, r7, #20
 80067d0:	2200      	movs	r2, #0
 80067d2:	601a      	str	r2, [r3, #0]
 80067d4:	605a      	str	r2, [r3, #4]
 80067d6:	609a      	str	r2, [r3, #8]
 80067d8:	60da      	str	r2, [r3, #12]
 80067da:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80067e4:	d13a      	bne.n	800685c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80067e6:	2300      	movs	r3, #0
 80067e8:	613b      	str	r3, [r7, #16]
 80067ea:	4b1e      	ldr	r3, [pc, #120]	; (8006864 <HAL_PCD_MspInit+0xa0>)
 80067ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067ee:	4a1d      	ldr	r2, [pc, #116]	; (8006864 <HAL_PCD_MspInit+0xa0>)
 80067f0:	f043 0301 	orr.w	r3, r3, #1
 80067f4:	6313      	str	r3, [r2, #48]	; 0x30
 80067f6:	4b1b      	ldr	r3, [pc, #108]	; (8006864 <HAL_PCD_MspInit+0xa0>)
 80067f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067fa:	f003 0301 	and.w	r3, r3, #1
 80067fe:	613b      	str	r3, [r7, #16]
 8006800:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8006802:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8006806:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006808:	2302      	movs	r3, #2
 800680a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800680c:	2300      	movs	r3, #0
 800680e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006810:	2303      	movs	r3, #3
 8006812:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006814:	230a      	movs	r3, #10
 8006816:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006818:	f107 0314 	add.w	r3, r7, #20
 800681c:	4619      	mov	r1, r3
 800681e:	4812      	ldr	r0, [pc, #72]	; (8006868 <HAL_PCD_MspInit+0xa4>)
 8006820:	f7fa fa20 	bl	8000c64 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006824:	4b0f      	ldr	r3, [pc, #60]	; (8006864 <HAL_PCD_MspInit+0xa0>)
 8006826:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006828:	4a0e      	ldr	r2, [pc, #56]	; (8006864 <HAL_PCD_MspInit+0xa0>)
 800682a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800682e:	6353      	str	r3, [r2, #52]	; 0x34
 8006830:	2300      	movs	r3, #0
 8006832:	60fb      	str	r3, [r7, #12]
 8006834:	4b0b      	ldr	r3, [pc, #44]	; (8006864 <HAL_PCD_MspInit+0xa0>)
 8006836:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006838:	4a0a      	ldr	r2, [pc, #40]	; (8006864 <HAL_PCD_MspInit+0xa0>)
 800683a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800683e:	6453      	str	r3, [r2, #68]	; 0x44
 8006840:	4b08      	ldr	r3, [pc, #32]	; (8006864 <HAL_PCD_MspInit+0xa0>)
 8006842:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006844:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006848:	60fb      	str	r3, [r7, #12]
 800684a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800684c:	2200      	movs	r2, #0
 800684e:	2100      	movs	r1, #0
 8006850:	2043      	movs	r0, #67	; 0x43
 8006852:	f7fa f9d0 	bl	8000bf6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8006856:	2043      	movs	r0, #67	; 0x43
 8006858:	f7fa f9e9 	bl	8000c2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800685c:	bf00      	nop
 800685e:	3728      	adds	r7, #40	; 0x28
 8006860:	46bd      	mov	sp, r7
 8006862:	bd80      	pop	{r7, pc}
 8006864:	40023800 	.word	0x40023800
 8006868:	40020000 	.word	0x40020000

0800686c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800686c:	b580      	push	{r7, lr}
 800686e:	b082      	sub	sp, #8
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006880:	4619      	mov	r1, r3
 8006882:	4610      	mov	r0, r2
 8006884:	f7fe fcd0 	bl	8005228 <USBD_LL_SetupStage>
}
 8006888:	bf00      	nop
 800688a:	3708      	adds	r7, #8
 800688c:	46bd      	mov	sp, r7
 800688e:	bd80      	pop	{r7, pc}

08006890 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b082      	sub	sp, #8
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
 8006898:	460b      	mov	r3, r1
 800689a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80068a2:	78fa      	ldrb	r2, [r7, #3]
 80068a4:	6879      	ldr	r1, [r7, #4]
 80068a6:	4613      	mov	r3, r2
 80068a8:	00db      	lsls	r3, r3, #3
 80068aa:	1a9b      	subs	r3, r3, r2
 80068ac:	009b      	lsls	r3, r3, #2
 80068ae:	440b      	add	r3, r1
 80068b0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80068b4:	681a      	ldr	r2, [r3, #0]
 80068b6:	78fb      	ldrb	r3, [r7, #3]
 80068b8:	4619      	mov	r1, r3
 80068ba:	f7fe fd0a 	bl	80052d2 <USBD_LL_DataOutStage>
}
 80068be:	bf00      	nop
 80068c0:	3708      	adds	r7, #8
 80068c2:	46bd      	mov	sp, r7
 80068c4:	bd80      	pop	{r7, pc}

080068c6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80068c6:	b580      	push	{r7, lr}
 80068c8:	b082      	sub	sp, #8
 80068ca:	af00      	add	r7, sp, #0
 80068cc:	6078      	str	r0, [r7, #4]
 80068ce:	460b      	mov	r3, r1
 80068d0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80068d8:	78fa      	ldrb	r2, [r7, #3]
 80068da:	6879      	ldr	r1, [r7, #4]
 80068dc:	4613      	mov	r3, r2
 80068de:	00db      	lsls	r3, r3, #3
 80068e0:	1a9b      	subs	r3, r3, r2
 80068e2:	009b      	lsls	r3, r3, #2
 80068e4:	440b      	add	r3, r1
 80068e6:	3348      	adds	r3, #72	; 0x48
 80068e8:	681a      	ldr	r2, [r3, #0]
 80068ea:	78fb      	ldrb	r3, [r7, #3]
 80068ec:	4619      	mov	r1, r3
 80068ee:	f7fe fd53 	bl	8005398 <USBD_LL_DataInStage>
}
 80068f2:	bf00      	nop
 80068f4:	3708      	adds	r7, #8
 80068f6:	46bd      	mov	sp, r7
 80068f8:	bd80      	pop	{r7, pc}

080068fa <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80068fa:	b580      	push	{r7, lr}
 80068fc:	b082      	sub	sp, #8
 80068fe:	af00      	add	r7, sp, #0
 8006900:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006908:	4618      	mov	r0, r3
 800690a:	f7fe fe67 	bl	80055dc <USBD_LL_SOF>
}
 800690e:	bf00      	nop
 8006910:	3708      	adds	r7, #8
 8006912:	46bd      	mov	sp, r7
 8006914:	bd80      	pop	{r7, pc}

08006916 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006916:	b580      	push	{r7, lr}
 8006918:	b084      	sub	sp, #16
 800691a:	af00      	add	r7, sp, #0
 800691c:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800691e:	2301      	movs	r3, #1
 8006920:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	68db      	ldr	r3, [r3, #12]
 8006926:	2b02      	cmp	r3, #2
 8006928:	d001      	beq.n	800692e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800692a:	f7f9 ff23 	bl	8000774 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006934:	7bfa      	ldrb	r2, [r7, #15]
 8006936:	4611      	mov	r1, r2
 8006938:	4618      	mov	r0, r3
 800693a:	f7fe fe11 	bl	8005560 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006944:	4618      	mov	r0, r3
 8006946:	f7fe fdbd 	bl	80054c4 <USBD_LL_Reset>
}
 800694a:	bf00      	nop
 800694c:	3710      	adds	r7, #16
 800694e:	46bd      	mov	sp, r7
 8006950:	bd80      	pop	{r7, pc}
	...

08006954 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b082      	sub	sp, #8
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006962:	4618      	mov	r0, r3
 8006964:	f7fe fe0c 	bl	8005580 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	687a      	ldr	r2, [r7, #4]
 8006974:	6812      	ldr	r2, [r2, #0]
 8006976:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800697a:	f043 0301 	orr.w	r3, r3, #1
 800697e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	6a1b      	ldr	r3, [r3, #32]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d005      	beq.n	8006994 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006988:	4b04      	ldr	r3, [pc, #16]	; (800699c <HAL_PCD_SuspendCallback+0x48>)
 800698a:	691b      	ldr	r3, [r3, #16]
 800698c:	4a03      	ldr	r2, [pc, #12]	; (800699c <HAL_PCD_SuspendCallback+0x48>)
 800698e:	f043 0306 	orr.w	r3, r3, #6
 8006992:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006994:	bf00      	nop
 8006996:	3708      	adds	r7, #8
 8006998:	46bd      	mov	sp, r7
 800699a:	bd80      	pop	{r7, pc}
 800699c:	e000ed00 	.word	0xe000ed00

080069a0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b082      	sub	sp, #8
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80069ae:	4618      	mov	r0, r3
 80069b0:	f7fe fdfc 	bl	80055ac <USBD_LL_Resume>
}
 80069b4:	bf00      	nop
 80069b6:	3708      	adds	r7, #8
 80069b8:	46bd      	mov	sp, r7
 80069ba:	bd80      	pop	{r7, pc}

080069bc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b082      	sub	sp, #8
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
 80069c4:	460b      	mov	r3, r1
 80069c6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80069ce:	78fa      	ldrb	r2, [r7, #3]
 80069d0:	4611      	mov	r1, r2
 80069d2:	4618      	mov	r0, r3
 80069d4:	f7fe fe4a 	bl	800566c <USBD_LL_IsoOUTIncomplete>
}
 80069d8:	bf00      	nop
 80069da:	3708      	adds	r7, #8
 80069dc:	46bd      	mov	sp, r7
 80069de:	bd80      	pop	{r7, pc}

080069e0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b082      	sub	sp, #8
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
 80069e8:	460b      	mov	r3, r1
 80069ea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80069f2:	78fa      	ldrb	r2, [r7, #3]
 80069f4:	4611      	mov	r1, r2
 80069f6:	4618      	mov	r0, r3
 80069f8:	f7fe fe12 	bl	8005620 <USBD_LL_IsoINIncomplete>
}
 80069fc:	bf00      	nop
 80069fe:	3708      	adds	r7, #8
 8006a00:	46bd      	mov	sp, r7
 8006a02:	bd80      	pop	{r7, pc}

08006a04 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b082      	sub	sp, #8
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006a12:	4618      	mov	r0, r3
 8006a14:	f7fe fe50 	bl	80056b8 <USBD_LL_DevConnected>
}
 8006a18:	bf00      	nop
 8006a1a:	3708      	adds	r7, #8
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	bd80      	pop	{r7, pc}

08006a20 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b082      	sub	sp, #8
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006a2e:	4618      	mov	r0, r3
 8006a30:	f7fe fe4d 	bl	80056ce <USBD_LL_DevDisconnected>
}
 8006a34:	bf00      	nop
 8006a36:	3708      	adds	r7, #8
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	bd80      	pop	{r7, pc}

08006a3c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b082      	sub	sp, #8
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	781b      	ldrb	r3, [r3, #0]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d13c      	bne.n	8006ac6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8006a4c:	4a20      	ldr	r2, [pc, #128]	; (8006ad0 <USBD_LL_Init+0x94>)
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	4a1e      	ldr	r2, [pc, #120]	; (8006ad0 <USBD_LL_Init+0x94>)
 8006a58:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8006a5c:	4b1c      	ldr	r3, [pc, #112]	; (8006ad0 <USBD_LL_Init+0x94>)
 8006a5e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8006a62:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8006a64:	4b1a      	ldr	r3, [pc, #104]	; (8006ad0 <USBD_LL_Init+0x94>)
 8006a66:	2204      	movs	r2, #4
 8006a68:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8006a6a:	4b19      	ldr	r3, [pc, #100]	; (8006ad0 <USBD_LL_Init+0x94>)
 8006a6c:	2202      	movs	r2, #2
 8006a6e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8006a70:	4b17      	ldr	r3, [pc, #92]	; (8006ad0 <USBD_LL_Init+0x94>)
 8006a72:	2200      	movs	r2, #0
 8006a74:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8006a76:	4b16      	ldr	r3, [pc, #88]	; (8006ad0 <USBD_LL_Init+0x94>)
 8006a78:	2202      	movs	r2, #2
 8006a7a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8006a7c:	4b14      	ldr	r3, [pc, #80]	; (8006ad0 <USBD_LL_Init+0x94>)
 8006a7e:	2200      	movs	r2, #0
 8006a80:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8006a82:	4b13      	ldr	r3, [pc, #76]	; (8006ad0 <USBD_LL_Init+0x94>)
 8006a84:	2200      	movs	r2, #0
 8006a86:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8006a88:	4b11      	ldr	r3, [pc, #68]	; (8006ad0 <USBD_LL_Init+0x94>)
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8006a8e:	4b10      	ldr	r3, [pc, #64]	; (8006ad0 <USBD_LL_Init+0x94>)
 8006a90:	2200      	movs	r2, #0
 8006a92:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8006a94:	4b0e      	ldr	r3, [pc, #56]	; (8006ad0 <USBD_LL_Init+0x94>)
 8006a96:	2200      	movs	r2, #0
 8006a98:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8006a9a:	480d      	ldr	r0, [pc, #52]	; (8006ad0 <USBD_LL_Init+0x94>)
 8006a9c:	f7fa fa99 	bl	8000fd2 <HAL_PCD_Init>
 8006aa0:	4603      	mov	r3, r0
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d001      	beq.n	8006aaa <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8006aa6:	f7f9 fe65 	bl	8000774 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8006aaa:	2180      	movs	r1, #128	; 0x80
 8006aac:	4808      	ldr	r0, [pc, #32]	; (8006ad0 <USBD_LL_Init+0x94>)
 8006aae:	f7fb fbf6 	bl	800229e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8006ab2:	2240      	movs	r2, #64	; 0x40
 8006ab4:	2100      	movs	r1, #0
 8006ab6:	4806      	ldr	r0, [pc, #24]	; (8006ad0 <USBD_LL_Init+0x94>)
 8006ab8:	f7fb fbaa 	bl	8002210 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8006abc:	2280      	movs	r2, #128	; 0x80
 8006abe:	2101      	movs	r1, #1
 8006ac0:	4803      	ldr	r0, [pc, #12]	; (8006ad0 <USBD_LL_Init+0x94>)
 8006ac2:	f7fb fba5 	bl	8002210 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8006ac6:	2300      	movs	r3, #0
}
 8006ac8:	4618      	mov	r0, r3
 8006aca:	3708      	adds	r7, #8
 8006acc:	46bd      	mov	sp, r7
 8006ace:	bd80      	pop	{r7, pc}
 8006ad0:	200010cc 	.word	0x200010cc

08006ad4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b084      	sub	sp, #16
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006adc:	2300      	movs	r3, #0
 8006ade:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006aea:	4618      	mov	r0, r3
 8006aec:	f7fa fb8e 	bl	800120c <HAL_PCD_Start>
 8006af0:	4603      	mov	r3, r0
 8006af2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006af4:	7bfb      	ldrb	r3, [r7, #15]
 8006af6:	4618      	mov	r0, r3
 8006af8:	f000 f942 	bl	8006d80 <USBD_Get_USB_Status>
 8006afc:	4603      	mov	r3, r0
 8006afe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006b00:	7bbb      	ldrb	r3, [r7, #14]
}
 8006b02:	4618      	mov	r0, r3
 8006b04:	3710      	adds	r7, #16
 8006b06:	46bd      	mov	sp, r7
 8006b08:	bd80      	pop	{r7, pc}

08006b0a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8006b0a:	b580      	push	{r7, lr}
 8006b0c:	b084      	sub	sp, #16
 8006b0e:	af00      	add	r7, sp, #0
 8006b10:	6078      	str	r0, [r7, #4]
 8006b12:	4608      	mov	r0, r1
 8006b14:	4611      	mov	r1, r2
 8006b16:	461a      	mov	r2, r3
 8006b18:	4603      	mov	r3, r0
 8006b1a:	70fb      	strb	r3, [r7, #3]
 8006b1c:	460b      	mov	r3, r1
 8006b1e:	70bb      	strb	r3, [r7, #2]
 8006b20:	4613      	mov	r3, r2
 8006b22:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006b24:	2300      	movs	r3, #0
 8006b26:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006b28:	2300      	movs	r3, #0
 8006b2a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8006b32:	78bb      	ldrb	r3, [r7, #2]
 8006b34:	883a      	ldrh	r2, [r7, #0]
 8006b36:	78f9      	ldrb	r1, [r7, #3]
 8006b38:	f7fa ff72 	bl	8001a20 <HAL_PCD_EP_Open>
 8006b3c:	4603      	mov	r3, r0
 8006b3e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006b40:	7bfb      	ldrb	r3, [r7, #15]
 8006b42:	4618      	mov	r0, r3
 8006b44:	f000 f91c 	bl	8006d80 <USBD_Get_USB_Status>
 8006b48:	4603      	mov	r3, r0
 8006b4a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006b4c:	7bbb      	ldrb	r3, [r7, #14]
}
 8006b4e:	4618      	mov	r0, r3
 8006b50:	3710      	adds	r7, #16
 8006b52:	46bd      	mov	sp, r7
 8006b54:	bd80      	pop	{r7, pc}

08006b56 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006b56:	b580      	push	{r7, lr}
 8006b58:	b084      	sub	sp, #16
 8006b5a:	af00      	add	r7, sp, #0
 8006b5c:	6078      	str	r0, [r7, #4]
 8006b5e:	460b      	mov	r3, r1
 8006b60:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006b62:	2300      	movs	r3, #0
 8006b64:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006b66:	2300      	movs	r3, #0
 8006b68:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006b70:	78fa      	ldrb	r2, [r7, #3]
 8006b72:	4611      	mov	r1, r2
 8006b74:	4618      	mov	r0, r3
 8006b76:	f7fa ffbb 	bl	8001af0 <HAL_PCD_EP_Close>
 8006b7a:	4603      	mov	r3, r0
 8006b7c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006b7e:	7bfb      	ldrb	r3, [r7, #15]
 8006b80:	4618      	mov	r0, r3
 8006b82:	f000 f8fd 	bl	8006d80 <USBD_Get_USB_Status>
 8006b86:	4603      	mov	r3, r0
 8006b88:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006b8a:	7bbb      	ldrb	r3, [r7, #14]
}
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	3710      	adds	r7, #16
 8006b90:	46bd      	mov	sp, r7
 8006b92:	bd80      	pop	{r7, pc}

08006b94 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b084      	sub	sp, #16
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
 8006b9c:	460b      	mov	r3, r1
 8006b9e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006bae:	78fa      	ldrb	r2, [r7, #3]
 8006bb0:	4611      	mov	r1, r2
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	f7fb f893 	bl	8001cde <HAL_PCD_EP_SetStall>
 8006bb8:	4603      	mov	r3, r0
 8006bba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006bbc:	7bfb      	ldrb	r3, [r7, #15]
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	f000 f8de 	bl	8006d80 <USBD_Get_USB_Status>
 8006bc4:	4603      	mov	r3, r0
 8006bc6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006bc8:	7bbb      	ldrb	r3, [r7, #14]
}
 8006bca:	4618      	mov	r0, r3
 8006bcc:	3710      	adds	r7, #16
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	bd80      	pop	{r7, pc}

08006bd2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006bd2:	b580      	push	{r7, lr}
 8006bd4:	b084      	sub	sp, #16
 8006bd6:	af00      	add	r7, sp, #0
 8006bd8:	6078      	str	r0, [r7, #4]
 8006bda:	460b      	mov	r3, r1
 8006bdc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006bde:	2300      	movs	r3, #0
 8006be0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006be2:	2300      	movs	r3, #0
 8006be4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006bec:	78fa      	ldrb	r2, [r7, #3]
 8006bee:	4611      	mov	r1, r2
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	f7fb f8d8 	bl	8001da6 <HAL_PCD_EP_ClrStall>
 8006bf6:	4603      	mov	r3, r0
 8006bf8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006bfa:	7bfb      	ldrb	r3, [r7, #15]
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	f000 f8bf 	bl	8006d80 <USBD_Get_USB_Status>
 8006c02:	4603      	mov	r3, r0
 8006c04:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006c06:	7bbb      	ldrb	r3, [r7, #14]
}
 8006c08:	4618      	mov	r0, r3
 8006c0a:	3710      	adds	r7, #16
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	bd80      	pop	{r7, pc}

08006c10 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006c10:	b480      	push	{r7}
 8006c12:	b085      	sub	sp, #20
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
 8006c18:	460b      	mov	r3, r1
 8006c1a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006c22:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8006c24:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	da0b      	bge.n	8006c44 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8006c2c:	78fb      	ldrb	r3, [r7, #3]
 8006c2e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006c32:	68f9      	ldr	r1, [r7, #12]
 8006c34:	4613      	mov	r3, r2
 8006c36:	00db      	lsls	r3, r3, #3
 8006c38:	1a9b      	subs	r3, r3, r2
 8006c3a:	009b      	lsls	r3, r3, #2
 8006c3c:	440b      	add	r3, r1
 8006c3e:	333e      	adds	r3, #62	; 0x3e
 8006c40:	781b      	ldrb	r3, [r3, #0]
 8006c42:	e00b      	b.n	8006c5c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8006c44:	78fb      	ldrb	r3, [r7, #3]
 8006c46:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006c4a:	68f9      	ldr	r1, [r7, #12]
 8006c4c:	4613      	mov	r3, r2
 8006c4e:	00db      	lsls	r3, r3, #3
 8006c50:	1a9b      	subs	r3, r3, r2
 8006c52:	009b      	lsls	r3, r3, #2
 8006c54:	440b      	add	r3, r1
 8006c56:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006c5a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	3714      	adds	r7, #20
 8006c60:	46bd      	mov	sp, r7
 8006c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c66:	4770      	bx	lr

08006c68 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b084      	sub	sp, #16
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
 8006c70:	460b      	mov	r3, r1
 8006c72:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006c74:	2300      	movs	r3, #0
 8006c76:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006c78:	2300      	movs	r3, #0
 8006c7a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006c82:	78fa      	ldrb	r2, [r7, #3]
 8006c84:	4611      	mov	r1, r2
 8006c86:	4618      	mov	r0, r3
 8006c88:	f7fa fea5 	bl	80019d6 <HAL_PCD_SetAddress>
 8006c8c:	4603      	mov	r3, r0
 8006c8e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006c90:	7bfb      	ldrb	r3, [r7, #15]
 8006c92:	4618      	mov	r0, r3
 8006c94:	f000 f874 	bl	8006d80 <USBD_Get_USB_Status>
 8006c98:	4603      	mov	r3, r0
 8006c9a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006c9c:	7bbb      	ldrb	r3, [r7, #14]
}
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	3710      	adds	r7, #16
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	bd80      	pop	{r7, pc}

08006ca6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006ca6:	b580      	push	{r7, lr}
 8006ca8:	b086      	sub	sp, #24
 8006caa:	af00      	add	r7, sp, #0
 8006cac:	60f8      	str	r0, [r7, #12]
 8006cae:	607a      	str	r2, [r7, #4]
 8006cb0:	603b      	str	r3, [r7, #0]
 8006cb2:	460b      	mov	r3, r1
 8006cb4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006cba:	2300      	movs	r3, #0
 8006cbc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8006cc4:	7af9      	ldrb	r1, [r7, #11]
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	687a      	ldr	r2, [r7, #4]
 8006cca:	f7fa ffbe 	bl	8001c4a <HAL_PCD_EP_Transmit>
 8006cce:	4603      	mov	r3, r0
 8006cd0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006cd2:	7dfb      	ldrb	r3, [r7, #23]
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	f000 f853 	bl	8006d80 <USBD_Get_USB_Status>
 8006cda:	4603      	mov	r3, r0
 8006cdc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006cde:	7dbb      	ldrb	r3, [r7, #22]
}
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	3718      	adds	r7, #24
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	bd80      	pop	{r7, pc}

08006ce8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b086      	sub	sp, #24
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	60f8      	str	r0, [r7, #12]
 8006cf0:	607a      	str	r2, [r7, #4]
 8006cf2:	603b      	str	r3, [r7, #0]
 8006cf4:	460b      	mov	r3, r1
 8006cf6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8006d06:	7af9      	ldrb	r1, [r7, #11]
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	687a      	ldr	r2, [r7, #4]
 8006d0c:	f7fa ff3a 	bl	8001b84 <HAL_PCD_EP_Receive>
 8006d10:	4603      	mov	r3, r0
 8006d12:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006d14:	7dfb      	ldrb	r3, [r7, #23]
 8006d16:	4618      	mov	r0, r3
 8006d18:	f000 f832 	bl	8006d80 <USBD_Get_USB_Status>
 8006d1c:	4603      	mov	r3, r0
 8006d1e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006d20:	7dbb      	ldrb	r3, [r7, #22]
}
 8006d22:	4618      	mov	r0, r3
 8006d24:	3718      	adds	r7, #24
 8006d26:	46bd      	mov	sp, r7
 8006d28:	bd80      	pop	{r7, pc}

08006d2a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006d2a:	b580      	push	{r7, lr}
 8006d2c:	b082      	sub	sp, #8
 8006d2e:	af00      	add	r7, sp, #0
 8006d30:	6078      	str	r0, [r7, #4]
 8006d32:	460b      	mov	r3, r1
 8006d34:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006d3c:	78fa      	ldrb	r2, [r7, #3]
 8006d3e:	4611      	mov	r1, r2
 8006d40:	4618      	mov	r0, r3
 8006d42:	f7fa ff6a 	bl	8001c1a <HAL_PCD_EP_GetRxCount>
 8006d46:	4603      	mov	r3, r0
}
 8006d48:	4618      	mov	r0, r3
 8006d4a:	3708      	adds	r7, #8
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	bd80      	pop	{r7, pc}

08006d50 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8006d50:	b480      	push	{r7}
 8006d52:	b083      	sub	sp, #12
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8006d58:	4b03      	ldr	r3, [pc, #12]	; (8006d68 <USBD_static_malloc+0x18>)
}
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	370c      	adds	r7, #12
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d64:	4770      	bx	lr
 8006d66:	bf00      	nop
 8006d68:	200001c0 	.word	0x200001c0

08006d6c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8006d6c:	b480      	push	{r7}
 8006d6e:	b083      	sub	sp, #12
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]

}
 8006d74:	bf00      	nop
 8006d76:	370c      	adds	r7, #12
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7e:	4770      	bx	lr

08006d80 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8006d80:	b480      	push	{r7}
 8006d82:	b085      	sub	sp, #20
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	4603      	mov	r3, r0
 8006d88:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8006d8e:	79fb      	ldrb	r3, [r7, #7]
 8006d90:	2b03      	cmp	r3, #3
 8006d92:	d817      	bhi.n	8006dc4 <USBD_Get_USB_Status+0x44>
 8006d94:	a201      	add	r2, pc, #4	; (adr r2, 8006d9c <USBD_Get_USB_Status+0x1c>)
 8006d96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d9a:	bf00      	nop
 8006d9c:	08006dad 	.word	0x08006dad
 8006da0:	08006db3 	.word	0x08006db3
 8006da4:	08006db9 	.word	0x08006db9
 8006da8:	08006dbf 	.word	0x08006dbf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8006dac:	2300      	movs	r3, #0
 8006dae:	73fb      	strb	r3, [r7, #15]
    break;
 8006db0:	e00b      	b.n	8006dca <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006db2:	2303      	movs	r3, #3
 8006db4:	73fb      	strb	r3, [r7, #15]
    break;
 8006db6:	e008      	b.n	8006dca <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006db8:	2301      	movs	r3, #1
 8006dba:	73fb      	strb	r3, [r7, #15]
    break;
 8006dbc:	e005      	b.n	8006dca <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006dbe:	2303      	movs	r3, #3
 8006dc0:	73fb      	strb	r3, [r7, #15]
    break;
 8006dc2:	e002      	b.n	8006dca <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8006dc4:	2303      	movs	r3, #3
 8006dc6:	73fb      	strb	r3, [r7, #15]
    break;
 8006dc8:	bf00      	nop
  }
  return usb_status;
 8006dca:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dcc:	4618      	mov	r0, r3
 8006dce:	3714      	adds	r7, #20
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd6:	4770      	bx	lr

08006dd8 <__libc_init_array>:
 8006dd8:	b570      	push	{r4, r5, r6, lr}
 8006dda:	4d0d      	ldr	r5, [pc, #52]	; (8006e10 <__libc_init_array+0x38>)
 8006ddc:	4c0d      	ldr	r4, [pc, #52]	; (8006e14 <__libc_init_array+0x3c>)
 8006dde:	1b64      	subs	r4, r4, r5
 8006de0:	10a4      	asrs	r4, r4, #2
 8006de2:	2600      	movs	r6, #0
 8006de4:	42a6      	cmp	r6, r4
 8006de6:	d109      	bne.n	8006dfc <__libc_init_array+0x24>
 8006de8:	4d0b      	ldr	r5, [pc, #44]	; (8006e18 <__libc_init_array+0x40>)
 8006dea:	4c0c      	ldr	r4, [pc, #48]	; (8006e1c <__libc_init_array+0x44>)
 8006dec:	f000 f820 	bl	8006e30 <_init>
 8006df0:	1b64      	subs	r4, r4, r5
 8006df2:	10a4      	asrs	r4, r4, #2
 8006df4:	2600      	movs	r6, #0
 8006df6:	42a6      	cmp	r6, r4
 8006df8:	d105      	bne.n	8006e06 <__libc_init_array+0x2e>
 8006dfa:	bd70      	pop	{r4, r5, r6, pc}
 8006dfc:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e00:	4798      	blx	r3
 8006e02:	3601      	adds	r6, #1
 8006e04:	e7ee      	b.n	8006de4 <__libc_init_array+0xc>
 8006e06:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e0a:	4798      	blx	r3
 8006e0c:	3601      	adds	r6, #1
 8006e0e:	e7f2      	b.n	8006df6 <__libc_init_array+0x1e>
 8006e10:	08006ea8 	.word	0x08006ea8
 8006e14:	08006ea8 	.word	0x08006ea8
 8006e18:	08006ea8 	.word	0x08006ea8
 8006e1c:	08006eac 	.word	0x08006eac

08006e20 <memset>:
 8006e20:	4402      	add	r2, r0
 8006e22:	4603      	mov	r3, r0
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d100      	bne.n	8006e2a <memset+0xa>
 8006e28:	4770      	bx	lr
 8006e2a:	f803 1b01 	strb.w	r1, [r3], #1
 8006e2e:	e7f9      	b.n	8006e24 <memset+0x4>

08006e30 <_init>:
 8006e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e32:	bf00      	nop
 8006e34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e36:	bc08      	pop	{r3}
 8006e38:	469e      	mov	lr, r3
 8006e3a:	4770      	bx	lr

08006e3c <_fini>:
 8006e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e3e:	bf00      	nop
 8006e40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e42:	bc08      	pop	{r3}
 8006e44:	469e      	mov	lr, r3
 8006e46:	4770      	bx	lr
