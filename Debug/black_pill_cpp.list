
black_pill_cpp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006e40  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08006fd4  08006fd4  00016fd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007044  08007044  00020180  2**0
                  CONTENTS
  4 .ARM          00000008  08007044  08007044  00017044  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800704c  0800704c  00020180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800704c  0800704c  0001704c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007050  08007050  00017050  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000180  20000000  08007054  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001338  20000180  080071d4  00020180  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200014b8  080071d4  000214b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 12 .comment      00000033  00000000  00000000  000201b0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014c5f  00000000  00000000  000201e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003383  00000000  00000000  00034e42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001108  00000000  00000000  000381c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000ff8  00000000  00000000  000392d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b98b  00000000  00000000  0003a2c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010841  00000000  00000000  00055c53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000959ac  00000000  00000000  00066494  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004440  00000000  00000000  000fbe40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    000012f5  00000000  00000000  00100280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <deregister_tm_clones>:
 8000194:	4803      	ldr	r0, [pc, #12]	; (80001a4 <deregister_tm_clones+0x10>)
 8000196:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <deregister_tm_clones+0x14>)
 8000198:	4283      	cmp	r3, r0
 800019a:	d002      	beq.n	80001a2 <deregister_tm_clones+0xe>
 800019c:	4b03      	ldr	r3, [pc, #12]	; (80001ac <deregister_tm_clones+0x18>)
 800019e:	b103      	cbz	r3, 80001a2 <deregister_tm_clones+0xe>
 80001a0:	4718      	bx	r3
 80001a2:	4770      	bx	lr
 80001a4:	20000180 	.word	0x20000180
 80001a8:	20000180 	.word	0x20000180
 80001ac:	00000000 	.word	0x00000000

080001b0 <register_tm_clones>:
 80001b0:	4805      	ldr	r0, [pc, #20]	; (80001c8 <register_tm_clones+0x18>)
 80001b2:	4906      	ldr	r1, [pc, #24]	; (80001cc <register_tm_clones+0x1c>)
 80001b4:	1a0b      	subs	r3, r1, r0
 80001b6:	0fd9      	lsrs	r1, r3, #31
 80001b8:	eb01 01a3 	add.w	r1, r1, r3, asr #2
 80001bc:	1049      	asrs	r1, r1, #1
 80001be:	d002      	beq.n	80001c6 <register_tm_clones+0x16>
 80001c0:	4b03      	ldr	r3, [pc, #12]	; (80001d0 <register_tm_clones+0x20>)
 80001c2:	b103      	cbz	r3, 80001c6 <register_tm_clones+0x16>
 80001c4:	4718      	bx	r3
 80001c6:	4770      	bx	lr
 80001c8:	20000180 	.word	0x20000180
 80001cc:	20000180 	.word	0x20000180
 80001d0:	00000000 	.word	0x00000000

080001d4 <__do_global_dtors_aux>:
 80001d4:	b510      	push	{r4, lr}
 80001d6:	4c06      	ldr	r4, [pc, #24]	; (80001f0 <__do_global_dtors_aux+0x1c>)
 80001d8:	7823      	ldrb	r3, [r4, #0]
 80001da:	b943      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x1a>
 80001dc:	f7ff ffda 	bl	8000194 <deregister_tm_clones>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x20>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x16>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x24>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000180 	.word	0x20000180
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08006fbc 	.word	0x08006fbc

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b04      	ldr	r3, [pc, #16]	; (8000210 <frame_dummy+0x14>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4904      	ldr	r1, [pc, #16]	; (8000214 <frame_dummy+0x18>)
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <frame_dummy+0x1c>)
 8000206:	f3af 8000 	nop.w
 800020a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800020e:	e7cf      	b.n	80001b0 <register_tm_clones>
 8000210:	00000000 	.word	0x00000000
 8000214:	20000184 	.word	0x20000184
 8000218:	08006fbc 	.word	0x08006fbc

0800021c <__libc_init_array>:
 800021c:	b570      	push	{r4, r5, r6, lr}
 800021e:	4e0d      	ldr	r6, [pc, #52]	; (8000254 <__libc_init_array+0x38>)
 8000220:	4d0d      	ldr	r5, [pc, #52]	; (8000258 <__libc_init_array+0x3c>)
 8000222:	1b76      	subs	r6, r6, r5
 8000224:	10b6      	asrs	r6, r6, #2
 8000226:	d006      	beq.n	8000236 <__libc_init_array+0x1a>
 8000228:	2400      	movs	r4, #0
 800022a:	f855 3b04 	ldr.w	r3, [r5], #4
 800022e:	3401      	adds	r4, #1
 8000230:	4798      	blx	r3
 8000232:	42a6      	cmp	r6, r4
 8000234:	d1f9      	bne.n	800022a <__libc_init_array+0xe>
 8000236:	4e09      	ldr	r6, [pc, #36]	; (800025c <__libc_init_array+0x40>)
 8000238:	4d09      	ldr	r5, [pc, #36]	; (8000260 <__libc_init_array+0x44>)
 800023a:	1b76      	subs	r6, r6, r5
 800023c:	f006 febe 	bl	8006fbc <_init>
 8000240:	10b6      	asrs	r6, r6, #2
 8000242:	d006      	beq.n	8000252 <__libc_init_array+0x36>
 8000244:	2400      	movs	r4, #0
 8000246:	f855 3b04 	ldr.w	r3, [r5], #4
 800024a:	3401      	adds	r4, #1
 800024c:	4798      	blx	r3
 800024e:	42a6      	cmp	r6, r4
 8000250:	d1f9      	bne.n	8000246 <__libc_init_array+0x2a>
 8000252:	bd70      	pop	{r4, r5, r6, pc}
 8000254:	0800704c 	.word	0x0800704c
 8000258:	0800704c 	.word	0x0800704c
 800025c:	08007050 	.word	0x08007050
 8000260:	0800704c 	.word	0x0800704c

08000264 <memset>:
 8000264:	0783      	lsls	r3, r0, #30
 8000266:	b530      	push	{r4, r5, lr}
 8000268:	d048      	beq.n	80002fc <memset+0x98>
 800026a:	1e54      	subs	r4, r2, #1
 800026c:	2a00      	cmp	r2, #0
 800026e:	d03f      	beq.n	80002f0 <memset+0x8c>
 8000270:	b2ca      	uxtb	r2, r1
 8000272:	4603      	mov	r3, r0
 8000274:	e001      	b.n	800027a <memset+0x16>
 8000276:	3c01      	subs	r4, #1
 8000278:	d33a      	bcc.n	80002f0 <memset+0x8c>
 800027a:	f803 2b01 	strb.w	r2, [r3], #1
 800027e:	079d      	lsls	r5, r3, #30
 8000280:	d1f9      	bne.n	8000276 <memset+0x12>
 8000282:	2c03      	cmp	r4, #3
 8000284:	d92d      	bls.n	80002e2 <memset+0x7e>
 8000286:	b2cd      	uxtb	r5, r1
 8000288:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 800028c:	2c0f      	cmp	r4, #15
 800028e:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8000292:	d936      	bls.n	8000302 <memset+0x9e>
 8000294:	f1a4 0210 	sub.w	r2, r4, #16
 8000298:	f022 0c0f 	bic.w	ip, r2, #15
 800029c:	f103 0e20 	add.w	lr, r3, #32
 80002a0:	44e6      	add	lr, ip
 80002a2:	ea4f 1c12 	mov.w	ip, r2, lsr #4
 80002a6:	f103 0210 	add.w	r2, r3, #16
 80002aa:	e942 5504 	strd	r5, r5, [r2, #-16]
 80002ae:	e942 5502 	strd	r5, r5, [r2, #-8]
 80002b2:	3210      	adds	r2, #16
 80002b4:	4572      	cmp	r2, lr
 80002b6:	d1f8      	bne.n	80002aa <memset+0x46>
 80002b8:	f10c 0201 	add.w	r2, ip, #1
 80002bc:	f014 0f0c 	tst.w	r4, #12
 80002c0:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 80002c4:	f004 0c0f 	and.w	ip, r4, #15
 80002c8:	d013      	beq.n	80002f2 <memset+0x8e>
 80002ca:	f1ac 0304 	sub.w	r3, ip, #4
 80002ce:	f023 0303 	bic.w	r3, r3, #3
 80002d2:	3304      	adds	r3, #4
 80002d4:	4413      	add	r3, r2
 80002d6:	f842 5b04 	str.w	r5, [r2], #4
 80002da:	4293      	cmp	r3, r2
 80002dc:	d1fb      	bne.n	80002d6 <memset+0x72>
 80002de:	f00c 0403 	and.w	r4, ip, #3
 80002e2:	b12c      	cbz	r4, 80002f0 <memset+0x8c>
 80002e4:	b2ca      	uxtb	r2, r1
 80002e6:	441c      	add	r4, r3
 80002e8:	f803 2b01 	strb.w	r2, [r3], #1
 80002ec:	429c      	cmp	r4, r3
 80002ee:	d1fb      	bne.n	80002e8 <memset+0x84>
 80002f0:	bd30      	pop	{r4, r5, pc}
 80002f2:	4664      	mov	r4, ip
 80002f4:	4613      	mov	r3, r2
 80002f6:	2c00      	cmp	r4, #0
 80002f8:	d1f4      	bne.n	80002e4 <memset+0x80>
 80002fa:	e7f9      	b.n	80002f0 <memset+0x8c>
 80002fc:	4603      	mov	r3, r0
 80002fe:	4614      	mov	r4, r2
 8000300:	e7bf      	b.n	8000282 <memset+0x1e>
 8000302:	461a      	mov	r2, r3
 8000304:	46a4      	mov	ip, r4
 8000306:	e7e0      	b.n	80002ca <memset+0x66>

08000308 <__aeabi_uldivmod>:
 8000308:	b953      	cbnz	r3, 8000320 <__aeabi_uldivmod+0x18>
 800030a:	b94a      	cbnz	r2, 8000320 <__aeabi_uldivmod+0x18>
 800030c:	2900      	cmp	r1, #0
 800030e:	bf08      	it	eq
 8000310:	2800      	cmpeq	r0, #0
 8000312:	bf1c      	itt	ne
 8000314:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000318:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800031c:	f000 b974 	b.w	8000608 <__aeabi_idiv0>
 8000320:	f1ad 0c08 	sub.w	ip, sp, #8
 8000324:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000328:	f000 f806 	bl	8000338 <__udivmoddi4>
 800032c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000330:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000334:	b004      	add	sp, #16
 8000336:	4770      	bx	lr

08000338 <__udivmoddi4>:
 8000338:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800033c:	9d08      	ldr	r5, [sp, #32]
 800033e:	4604      	mov	r4, r0
 8000340:	468e      	mov	lr, r1
 8000342:	2b00      	cmp	r3, #0
 8000344:	d14d      	bne.n	80003e2 <__udivmoddi4+0xaa>
 8000346:	428a      	cmp	r2, r1
 8000348:	4694      	mov	ip, r2
 800034a:	d969      	bls.n	8000420 <__udivmoddi4+0xe8>
 800034c:	fab2 f282 	clz	r2, r2
 8000350:	b152      	cbz	r2, 8000368 <__udivmoddi4+0x30>
 8000352:	fa01 f302 	lsl.w	r3, r1, r2
 8000356:	f1c2 0120 	rsb	r1, r2, #32
 800035a:	fa20 f101 	lsr.w	r1, r0, r1
 800035e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000362:	ea41 0e03 	orr.w	lr, r1, r3
 8000366:	4094      	lsls	r4, r2
 8000368:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800036c:	0c21      	lsrs	r1, r4, #16
 800036e:	fbbe f6f8 	udiv	r6, lr, r8
 8000372:	fa1f f78c 	uxth.w	r7, ip
 8000376:	fb08 e316 	mls	r3, r8, r6, lr
 800037a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800037e:	fb06 f107 	mul.w	r1, r6, r7
 8000382:	4299      	cmp	r1, r3
 8000384:	d90a      	bls.n	800039c <__udivmoddi4+0x64>
 8000386:	eb1c 0303 	adds.w	r3, ip, r3
 800038a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800038e:	f080 811f 	bcs.w	80005d0 <__udivmoddi4+0x298>
 8000392:	4299      	cmp	r1, r3
 8000394:	f240 811c 	bls.w	80005d0 <__udivmoddi4+0x298>
 8000398:	3e02      	subs	r6, #2
 800039a:	4463      	add	r3, ip
 800039c:	1a5b      	subs	r3, r3, r1
 800039e:	b2a4      	uxth	r4, r4
 80003a0:	fbb3 f0f8 	udiv	r0, r3, r8
 80003a4:	fb08 3310 	mls	r3, r8, r0, r3
 80003a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003ac:	fb00 f707 	mul.w	r7, r0, r7
 80003b0:	42a7      	cmp	r7, r4
 80003b2:	d90a      	bls.n	80003ca <__udivmoddi4+0x92>
 80003b4:	eb1c 0404 	adds.w	r4, ip, r4
 80003b8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003bc:	f080 810a 	bcs.w	80005d4 <__udivmoddi4+0x29c>
 80003c0:	42a7      	cmp	r7, r4
 80003c2:	f240 8107 	bls.w	80005d4 <__udivmoddi4+0x29c>
 80003c6:	4464      	add	r4, ip
 80003c8:	3802      	subs	r0, #2
 80003ca:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ce:	1be4      	subs	r4, r4, r7
 80003d0:	2600      	movs	r6, #0
 80003d2:	b11d      	cbz	r5, 80003dc <__udivmoddi4+0xa4>
 80003d4:	40d4      	lsrs	r4, r2
 80003d6:	2300      	movs	r3, #0
 80003d8:	e9c5 4300 	strd	r4, r3, [r5]
 80003dc:	4631      	mov	r1, r6
 80003de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e2:	428b      	cmp	r3, r1
 80003e4:	d909      	bls.n	80003fa <__udivmoddi4+0xc2>
 80003e6:	2d00      	cmp	r5, #0
 80003e8:	f000 80ef 	beq.w	80005ca <__udivmoddi4+0x292>
 80003ec:	2600      	movs	r6, #0
 80003ee:	e9c5 0100 	strd	r0, r1, [r5]
 80003f2:	4630      	mov	r0, r6
 80003f4:	4631      	mov	r1, r6
 80003f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fa:	fab3 f683 	clz	r6, r3
 80003fe:	2e00      	cmp	r6, #0
 8000400:	d14a      	bne.n	8000498 <__udivmoddi4+0x160>
 8000402:	428b      	cmp	r3, r1
 8000404:	d302      	bcc.n	800040c <__udivmoddi4+0xd4>
 8000406:	4282      	cmp	r2, r0
 8000408:	f200 80f9 	bhi.w	80005fe <__udivmoddi4+0x2c6>
 800040c:	1a84      	subs	r4, r0, r2
 800040e:	eb61 0303 	sbc.w	r3, r1, r3
 8000412:	2001      	movs	r0, #1
 8000414:	469e      	mov	lr, r3
 8000416:	2d00      	cmp	r5, #0
 8000418:	d0e0      	beq.n	80003dc <__udivmoddi4+0xa4>
 800041a:	e9c5 4e00 	strd	r4, lr, [r5]
 800041e:	e7dd      	b.n	80003dc <__udivmoddi4+0xa4>
 8000420:	b902      	cbnz	r2, 8000424 <__udivmoddi4+0xec>
 8000422:	deff      	udf	#255	; 0xff
 8000424:	fab2 f282 	clz	r2, r2
 8000428:	2a00      	cmp	r2, #0
 800042a:	f040 8092 	bne.w	8000552 <__udivmoddi4+0x21a>
 800042e:	eba1 010c 	sub.w	r1, r1, ip
 8000432:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000436:	fa1f fe8c 	uxth.w	lr, ip
 800043a:	2601      	movs	r6, #1
 800043c:	0c20      	lsrs	r0, r4, #16
 800043e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000442:	fb07 1113 	mls	r1, r7, r3, r1
 8000446:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800044a:	fb0e f003 	mul.w	r0, lr, r3
 800044e:	4288      	cmp	r0, r1
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x12c>
 8000452:	eb1c 0101 	adds.w	r1, ip, r1
 8000456:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800045a:	d202      	bcs.n	8000462 <__udivmoddi4+0x12a>
 800045c:	4288      	cmp	r0, r1
 800045e:	f200 80cb 	bhi.w	80005f8 <__udivmoddi4+0x2c0>
 8000462:	4643      	mov	r3, r8
 8000464:	1a09      	subs	r1, r1, r0
 8000466:	b2a4      	uxth	r4, r4
 8000468:	fbb1 f0f7 	udiv	r0, r1, r7
 800046c:	fb07 1110 	mls	r1, r7, r0, r1
 8000470:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000474:	fb0e fe00 	mul.w	lr, lr, r0
 8000478:	45a6      	cmp	lr, r4
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x156>
 800047c:	eb1c 0404 	adds.w	r4, ip, r4
 8000480:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000484:	d202      	bcs.n	800048c <__udivmoddi4+0x154>
 8000486:	45a6      	cmp	lr, r4
 8000488:	f200 80bb 	bhi.w	8000602 <__udivmoddi4+0x2ca>
 800048c:	4608      	mov	r0, r1
 800048e:	eba4 040e 	sub.w	r4, r4, lr
 8000492:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000496:	e79c      	b.n	80003d2 <__udivmoddi4+0x9a>
 8000498:	f1c6 0720 	rsb	r7, r6, #32
 800049c:	40b3      	lsls	r3, r6
 800049e:	fa22 fc07 	lsr.w	ip, r2, r7
 80004a2:	ea4c 0c03 	orr.w	ip, ip, r3
 80004a6:	fa20 f407 	lsr.w	r4, r0, r7
 80004aa:	fa01 f306 	lsl.w	r3, r1, r6
 80004ae:	431c      	orrs	r4, r3
 80004b0:	40f9      	lsrs	r1, r7
 80004b2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004b6:	fa00 f306 	lsl.w	r3, r0, r6
 80004ba:	fbb1 f8f9 	udiv	r8, r1, r9
 80004be:	0c20      	lsrs	r0, r4, #16
 80004c0:	fa1f fe8c 	uxth.w	lr, ip
 80004c4:	fb09 1118 	mls	r1, r9, r8, r1
 80004c8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004cc:	fb08 f00e 	mul.w	r0, r8, lr
 80004d0:	4288      	cmp	r0, r1
 80004d2:	fa02 f206 	lsl.w	r2, r2, r6
 80004d6:	d90b      	bls.n	80004f0 <__udivmoddi4+0x1b8>
 80004d8:	eb1c 0101 	adds.w	r1, ip, r1
 80004dc:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004e0:	f080 8088 	bcs.w	80005f4 <__udivmoddi4+0x2bc>
 80004e4:	4288      	cmp	r0, r1
 80004e6:	f240 8085 	bls.w	80005f4 <__udivmoddi4+0x2bc>
 80004ea:	f1a8 0802 	sub.w	r8, r8, #2
 80004ee:	4461      	add	r1, ip
 80004f0:	1a09      	subs	r1, r1, r0
 80004f2:	b2a4      	uxth	r4, r4
 80004f4:	fbb1 f0f9 	udiv	r0, r1, r9
 80004f8:	fb09 1110 	mls	r1, r9, r0, r1
 80004fc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000500:	fb00 fe0e 	mul.w	lr, r0, lr
 8000504:	458e      	cmp	lr, r1
 8000506:	d908      	bls.n	800051a <__udivmoddi4+0x1e2>
 8000508:	eb1c 0101 	adds.w	r1, ip, r1
 800050c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000510:	d26c      	bcs.n	80005ec <__udivmoddi4+0x2b4>
 8000512:	458e      	cmp	lr, r1
 8000514:	d96a      	bls.n	80005ec <__udivmoddi4+0x2b4>
 8000516:	3802      	subs	r0, #2
 8000518:	4461      	add	r1, ip
 800051a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800051e:	fba0 9402 	umull	r9, r4, r0, r2
 8000522:	eba1 010e 	sub.w	r1, r1, lr
 8000526:	42a1      	cmp	r1, r4
 8000528:	46c8      	mov	r8, r9
 800052a:	46a6      	mov	lr, r4
 800052c:	d356      	bcc.n	80005dc <__udivmoddi4+0x2a4>
 800052e:	d053      	beq.n	80005d8 <__udivmoddi4+0x2a0>
 8000530:	b15d      	cbz	r5, 800054a <__udivmoddi4+0x212>
 8000532:	ebb3 0208 	subs.w	r2, r3, r8
 8000536:	eb61 010e 	sbc.w	r1, r1, lr
 800053a:	fa01 f707 	lsl.w	r7, r1, r7
 800053e:	fa22 f306 	lsr.w	r3, r2, r6
 8000542:	40f1      	lsrs	r1, r6
 8000544:	431f      	orrs	r7, r3
 8000546:	e9c5 7100 	strd	r7, r1, [r5]
 800054a:	2600      	movs	r6, #0
 800054c:	4631      	mov	r1, r6
 800054e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000552:	f1c2 0320 	rsb	r3, r2, #32
 8000556:	40d8      	lsrs	r0, r3
 8000558:	fa0c fc02 	lsl.w	ip, ip, r2
 800055c:	fa21 f303 	lsr.w	r3, r1, r3
 8000560:	4091      	lsls	r1, r2
 8000562:	4301      	orrs	r1, r0
 8000564:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000568:	fa1f fe8c 	uxth.w	lr, ip
 800056c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000570:	fb07 3610 	mls	r6, r7, r0, r3
 8000574:	0c0b      	lsrs	r3, r1, #16
 8000576:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800057a:	fb00 f60e 	mul.w	r6, r0, lr
 800057e:	429e      	cmp	r6, r3
 8000580:	fa04 f402 	lsl.w	r4, r4, r2
 8000584:	d908      	bls.n	8000598 <__udivmoddi4+0x260>
 8000586:	eb1c 0303 	adds.w	r3, ip, r3
 800058a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800058e:	d22f      	bcs.n	80005f0 <__udivmoddi4+0x2b8>
 8000590:	429e      	cmp	r6, r3
 8000592:	d92d      	bls.n	80005f0 <__udivmoddi4+0x2b8>
 8000594:	3802      	subs	r0, #2
 8000596:	4463      	add	r3, ip
 8000598:	1b9b      	subs	r3, r3, r6
 800059a:	b289      	uxth	r1, r1
 800059c:	fbb3 f6f7 	udiv	r6, r3, r7
 80005a0:	fb07 3316 	mls	r3, r7, r6, r3
 80005a4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005a8:	fb06 f30e 	mul.w	r3, r6, lr
 80005ac:	428b      	cmp	r3, r1
 80005ae:	d908      	bls.n	80005c2 <__udivmoddi4+0x28a>
 80005b0:	eb1c 0101 	adds.w	r1, ip, r1
 80005b4:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80005b8:	d216      	bcs.n	80005e8 <__udivmoddi4+0x2b0>
 80005ba:	428b      	cmp	r3, r1
 80005bc:	d914      	bls.n	80005e8 <__udivmoddi4+0x2b0>
 80005be:	3e02      	subs	r6, #2
 80005c0:	4461      	add	r1, ip
 80005c2:	1ac9      	subs	r1, r1, r3
 80005c4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005c8:	e738      	b.n	800043c <__udivmoddi4+0x104>
 80005ca:	462e      	mov	r6, r5
 80005cc:	4628      	mov	r0, r5
 80005ce:	e705      	b.n	80003dc <__udivmoddi4+0xa4>
 80005d0:	4606      	mov	r6, r0
 80005d2:	e6e3      	b.n	800039c <__udivmoddi4+0x64>
 80005d4:	4618      	mov	r0, r3
 80005d6:	e6f8      	b.n	80003ca <__udivmoddi4+0x92>
 80005d8:	454b      	cmp	r3, r9
 80005da:	d2a9      	bcs.n	8000530 <__udivmoddi4+0x1f8>
 80005dc:	ebb9 0802 	subs.w	r8, r9, r2
 80005e0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005e4:	3801      	subs	r0, #1
 80005e6:	e7a3      	b.n	8000530 <__udivmoddi4+0x1f8>
 80005e8:	4646      	mov	r6, r8
 80005ea:	e7ea      	b.n	80005c2 <__udivmoddi4+0x28a>
 80005ec:	4620      	mov	r0, r4
 80005ee:	e794      	b.n	800051a <__udivmoddi4+0x1e2>
 80005f0:	4640      	mov	r0, r8
 80005f2:	e7d1      	b.n	8000598 <__udivmoddi4+0x260>
 80005f4:	46d0      	mov	r8, sl
 80005f6:	e77b      	b.n	80004f0 <__udivmoddi4+0x1b8>
 80005f8:	3b02      	subs	r3, #2
 80005fa:	4461      	add	r1, ip
 80005fc:	e732      	b.n	8000464 <__udivmoddi4+0x12c>
 80005fe:	4630      	mov	r0, r6
 8000600:	e709      	b.n	8000416 <__udivmoddi4+0xde>
 8000602:	4464      	add	r4, ip
 8000604:	3802      	subs	r0, #2
 8000606:	e742      	b.n	800048e <__udivmoddi4+0x156>

08000608 <__aeabi_idiv0>:
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop

0800060c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800060c:	b5b0      	push	{r4, r5, r7, lr}
 800060e:	b08a      	sub	sp, #40	; 0x28
 8000610:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000612:	f000 fa61 	bl	8000ad8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000616:	f000 f841 	bl	800069c <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800061a:	f000 f913 	bl	8000844 <_ZL12MX_GPIO_Initv>
  MX_TIM4_Init();
 800061e:	f000 f8b1 	bl	8000784 <_ZL12MX_TIM4_Initv>
  MX_USB_DEVICE_Init();
 8000622:	f005 ffbb 	bl	800659c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  uint8_t nbyte = 0;
 8000626:	2300      	movs	r3, #0
 8000628:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  while (1)
  {
    /* USER CODE END WHILE */
    /* USER CODE BEGIN 3 */
   uint8_t receive_status;
   uint32_t l = 1;
 800062c:	2301      	movs	r3, #1
 800062e:	623b      	str	r3, [r7, #32]
   receive_status = USBD_Interface_fops_FS.Receive(&nbyte, &l);
 8000630:	4b17      	ldr	r3, [pc, #92]	; (8000690 <main+0x84>)
 8000632:	68db      	ldr	r3, [r3, #12]
 8000634:	f107 0120 	add.w	r1, r7, #32
 8000638:	f107 0226 	add.w	r2, r7, #38	; 0x26
 800063c:	4610      	mov	r0, r2
 800063e:	4798      	blx	r3
 8000640:	4603      	mov	r3, r0
 8000642:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
   if(receive_status == USBD_OK){
 8000646:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800064a:	2b00      	cmp	r3, #0
 800064c:	d118      	bne.n	8000680 <main+0x74>
    uint8_t string_buffer[] = "I recieved X in string\r";
 800064e:	4b11      	ldr	r3, [pc, #68]	; (8000694 <main+0x88>)
 8000650:	f107 0408 	add.w	r4, r7, #8
 8000654:	461d      	mov	r5, r3
 8000656:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000658:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800065a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800065e:	e884 0003 	stmia.w	r4, {r0, r1}
    string_buffer[11] = nbyte;
 8000662:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000666:	74fb      	strb	r3, [r7, #19]
    CDC_Transmit_FS(string_buffer,sizeof(string_buffer));
 8000668:	f107 0308 	add.w	r3, r7, #8
 800066c:	2118      	movs	r1, #24
 800066e:	4618      	mov	r0, r3
 8000670:	f006 f852 	bl	8006718 <CDC_Transmit_FS>
	  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000674:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000678:	4807      	ldr	r0, [pc, #28]	; (8000698 <main+0x8c>)
 800067a:	f000 fd72 	bl	8001162 <HAL_GPIO_TogglePin>
 800067e:	e7d5      	b.n	800062c <main+0x20>
   }
   else{
    uint8_t buf = 0x30;
 8000680:	2330      	movs	r3, #48	; 0x30
 8000682:	71fb      	strb	r3, [r7, #7]
   	CDC_Transmit_FS(&buf, 1);
 8000684:	1dfb      	adds	r3, r7, #7
 8000686:	2101      	movs	r1, #1
 8000688:	4618      	mov	r0, r3
 800068a:	f006 f845 	bl	8006718 <CDC_Transmit_FS>
   }
  /* USER CODE END 3 */
  }
 800068e:	e7cd      	b.n	800062c <main+0x20>
 8000690:	2000011c 	.word	0x2000011c
 8000694:	08006fd4 	.word	0x08006fd4
 8000698:	40020800 	.word	0x40020800

0800069c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b094      	sub	sp, #80	; 0x50
 80006a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006a2:	f107 0320 	add.w	r3, r7, #32
 80006a6:	2230      	movs	r2, #48	; 0x30
 80006a8:	2100      	movs	r1, #0
 80006aa:	4618      	mov	r0, r3
 80006ac:	f7ff fdda 	bl	8000264 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006b0:	f107 030c 	add.w	r3, r7, #12
 80006b4:	2200      	movs	r2, #0
 80006b6:	601a      	str	r2, [r3, #0]
 80006b8:	605a      	str	r2, [r3, #4]
 80006ba:	609a      	str	r2, [r3, #8]
 80006bc:	60da      	str	r2, [r3, #12]
 80006be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006c0:	2300      	movs	r3, #0
 80006c2:	60bb      	str	r3, [r7, #8]
 80006c4:	4b2d      	ldr	r3, [pc, #180]	; (800077c <_Z18SystemClock_Configv+0xe0>)
 80006c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c8:	4a2c      	ldr	r2, [pc, #176]	; (800077c <_Z18SystemClock_Configv+0xe0>)
 80006ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006ce:	6413      	str	r3, [r2, #64]	; 0x40
 80006d0:	4b2a      	ldr	r3, [pc, #168]	; (800077c <_Z18SystemClock_Configv+0xe0>)
 80006d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006d8:	60bb      	str	r3, [r7, #8]
 80006da:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80006dc:	2300      	movs	r3, #0
 80006de:	607b      	str	r3, [r7, #4]
 80006e0:	4b27      	ldr	r3, [pc, #156]	; (8000780 <_Z18SystemClock_Configv+0xe4>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006e8:	4a25      	ldr	r2, [pc, #148]	; (8000780 <_Z18SystemClock_Configv+0xe4>)
 80006ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80006ee:	6013      	str	r3, [r2, #0]
 80006f0:	4b23      	ldr	r3, [pc, #140]	; (8000780 <_Z18SystemClock_Configv+0xe4>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006f8:	607b      	str	r3, [r7, #4]
 80006fa:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006fc:	2301      	movs	r3, #1
 80006fe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000700:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000704:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000706:	2302      	movs	r3, #2
 8000708:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800070a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800070e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 8000710:	230f      	movs	r3, #15
 8000712:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8000714:	2390      	movs	r3, #144	; 0x90
 8000716:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000718:	2304      	movs	r3, #4
 800071a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 800071c:	2305      	movs	r3, #5
 800071e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000720:	f107 0320 	add.w	r3, r7, #32
 8000724:	4618      	mov	r0, r3
 8000726:	f001 feb9 	bl	800249c <HAL_RCC_OscConfig>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	bf14      	ite	ne
 8000730:	2301      	movne	r3, #1
 8000732:	2300      	moveq	r3, #0
 8000734:	b2db      	uxtb	r3, r3
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <_Z18SystemClock_Configv+0xa2>
  {
    Error_Handler();
 800073a:	f000 f8fd 	bl	8000938 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800073e:	230f      	movs	r3, #15
 8000740:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000742:	2302      	movs	r3, #2
 8000744:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000746:	2300      	movs	r3, #0
 8000748:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800074a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800074e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000750:	2300      	movs	r3, #0
 8000752:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000754:	f107 030c 	add.w	r3, r7, #12
 8000758:	2101      	movs	r1, #1
 800075a:	4618      	mov	r0, r3
 800075c:	f002 f916 	bl	800298c <HAL_RCC_ClockConfig>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	bf14      	ite	ne
 8000766:	2301      	movne	r3, #1
 8000768:	2300      	moveq	r3, #0
 800076a:	b2db      	uxtb	r3, r3
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <_Z18SystemClock_Configv+0xd8>
  {
    Error_Handler();
 8000770:	f000 f8e2 	bl	8000938 <Error_Handler>
  }
}
 8000774:	bf00      	nop
 8000776:	3750      	adds	r7, #80	; 0x50
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	40023800 	.word	0x40023800
 8000780:	40007000 	.word	0x40007000

08000784 <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b086      	sub	sp, #24
 8000788:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800078a:	f107 0308 	add.w	r3, r7, #8
 800078e:	2200      	movs	r2, #0
 8000790:	601a      	str	r2, [r3, #0]
 8000792:	605a      	str	r2, [r3, #4]
 8000794:	609a      	str	r2, [r3, #8]
 8000796:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000798:	463b      	mov	r3, r7
 800079a:	2200      	movs	r2, #0
 800079c:	601a      	str	r2, [r3, #0]
 800079e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80007a0:	4b26      	ldr	r3, [pc, #152]	; (800083c <_ZL12MX_TIM4_Initv+0xb8>)
 80007a2:	4a27      	ldr	r2, [pc, #156]	; (8000840 <_ZL12MX_TIM4_Initv+0xbc>)
 80007a4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 60;
 80007a6:	4b25      	ldr	r3, [pc, #148]	; (800083c <_ZL12MX_TIM4_Initv+0xb8>)
 80007a8:	223c      	movs	r2, #60	; 0x3c
 80007aa:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007ac:	4b23      	ldr	r3, [pc, #140]	; (800083c <_ZL12MX_TIM4_Initv+0xb8>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000;
 80007b2:	4b22      	ldr	r3, [pc, #136]	; (800083c <_ZL12MX_TIM4_Initv+0xb8>)
 80007b4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80007b8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007ba:	4b20      	ldr	r3, [pc, #128]	; (800083c <_ZL12MX_TIM4_Initv+0xb8>)
 80007bc:	2200      	movs	r2, #0
 80007be:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80007c0:	4b1e      	ldr	r3, [pc, #120]	; (800083c <_ZL12MX_TIM4_Initv+0xb8>)
 80007c2:	2280      	movs	r2, #128	; 0x80
 80007c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80007c6:	481d      	ldr	r0, [pc, #116]	; (800083c <_ZL12MX_TIM4_Initv+0xb8>)
 80007c8:	f002 fa98 	bl	8002cfc <HAL_TIM_Base_Init>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	bf14      	ite	ne
 80007d2:	2301      	movne	r3, #1
 80007d4:	2300      	moveq	r3, #0
 80007d6:	b2db      	uxtb	r3, r3
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <_ZL12MX_TIM4_Initv+0x5c>
  {
    Error_Handler();
 80007dc:	f000 f8ac 	bl	8000938 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007e4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80007e6:	f107 0308 	add.w	r3, r7, #8
 80007ea:	4619      	mov	r1, r3
 80007ec:	4813      	ldr	r0, [pc, #76]	; (800083c <_ZL12MX_TIM4_Initv+0xb8>)
 80007ee:	f002 fc3f 	bl	8003070 <HAL_TIM_ConfigClockSource>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	bf14      	ite	ne
 80007f8:	2301      	movne	r3, #1
 80007fa:	2300      	moveq	r3, #0
 80007fc:	b2db      	uxtb	r3, r3
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <_ZL12MX_TIM4_Initv+0x82>
  {
    Error_Handler();
 8000802:	f000 f899 	bl	8000938 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000806:	2300      	movs	r3, #0
 8000808:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800080a:	2300      	movs	r3, #0
 800080c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800080e:	463b      	mov	r3, r7
 8000810:	4619      	mov	r1, r3
 8000812:	480a      	ldr	r0, [pc, #40]	; (800083c <_ZL12MX_TIM4_Initv+0xb8>)
 8000814:	f002 fe36 	bl	8003484 <HAL_TIMEx_MasterConfigSynchronization>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	bf14      	ite	ne
 800081e:	2301      	movne	r3, #1
 8000820:	2300      	moveq	r3, #0
 8000822:	b2db      	uxtb	r3, r3
 8000824:	2b00      	cmp	r3, #0
 8000826:	d001      	beq.n	800082c <_ZL12MX_TIM4_Initv+0xa8>
  {
    Error_Handler();
 8000828:	f000 f886 	bl	8000938 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */
  HAL_TIM_Base_Start_IT(&htim4);
 800082c:	4803      	ldr	r0, [pc, #12]	; (800083c <_ZL12MX_TIM4_Initv+0xb8>)
 800082e:	f002 fab5 	bl	8002d9c <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM4_Init 2 */

}
 8000832:	bf00      	nop
 8000834:	3718      	adds	r7, #24
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	2000019c 	.word	0x2000019c
 8000840:	40000800 	.word	0x40000800

08000844 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b088      	sub	sp, #32
 8000848:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800084a:	f107 030c 	add.w	r3, r7, #12
 800084e:	2200      	movs	r2, #0
 8000850:	601a      	str	r2, [r3, #0]
 8000852:	605a      	str	r2, [r3, #4]
 8000854:	609a      	str	r2, [r3, #8]
 8000856:	60da      	str	r2, [r3, #12]
 8000858:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800085a:	2300      	movs	r3, #0
 800085c:	60bb      	str	r3, [r7, #8]
 800085e:	4b26      	ldr	r3, [pc, #152]	; (80008f8 <_ZL12MX_GPIO_Initv+0xb4>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000862:	4a25      	ldr	r2, [pc, #148]	; (80008f8 <_ZL12MX_GPIO_Initv+0xb4>)
 8000864:	f043 0304 	orr.w	r3, r3, #4
 8000868:	6313      	str	r3, [r2, #48]	; 0x30
 800086a:	4b23      	ldr	r3, [pc, #140]	; (80008f8 <_ZL12MX_GPIO_Initv+0xb4>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086e:	f003 0304 	and.w	r3, r3, #4
 8000872:	60bb      	str	r3, [r7, #8]
 8000874:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000876:	2300      	movs	r3, #0
 8000878:	607b      	str	r3, [r7, #4]
 800087a:	4b1f      	ldr	r3, [pc, #124]	; (80008f8 <_ZL12MX_GPIO_Initv+0xb4>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	4a1e      	ldr	r2, [pc, #120]	; (80008f8 <_ZL12MX_GPIO_Initv+0xb4>)
 8000880:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000884:	6313      	str	r3, [r2, #48]	; 0x30
 8000886:	4b1c      	ldr	r3, [pc, #112]	; (80008f8 <_ZL12MX_GPIO_Initv+0xb4>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800088e:	607b      	str	r3, [r7, #4]
 8000890:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000892:	2300      	movs	r3, #0
 8000894:	603b      	str	r3, [r7, #0]
 8000896:	4b18      	ldr	r3, [pc, #96]	; (80008f8 <_ZL12MX_GPIO_Initv+0xb4>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	4a17      	ldr	r2, [pc, #92]	; (80008f8 <_ZL12MX_GPIO_Initv+0xb4>)
 800089c:	f043 0301 	orr.w	r3, r3, #1
 80008a0:	6313      	str	r3, [r2, #48]	; 0x30
 80008a2:	4b15      	ldr	r3, [pc, #84]	; (80008f8 <_ZL12MX_GPIO_Initv+0xb4>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a6:	f003 0301 	and.w	r3, r3, #1
 80008aa:	603b      	str	r3, [r7, #0]
 80008ac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80008ae:	2201      	movs	r2, #1
 80008b0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008b4:	4811      	ldr	r0, [pc, #68]	; (80008fc <_ZL12MX_GPIO_Initv+0xb8>)
 80008b6:	f000 fc3b 	bl	8001130 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80008ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008be:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c0:	2301      	movs	r3, #1
 80008c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c4:	2300      	movs	r3, #0
 80008c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c8:	2300      	movs	r3, #0
 80008ca:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80008cc:	f107 030c 	add.w	r3, r7, #12
 80008d0:	4619      	mov	r1, r3
 80008d2:	480a      	ldr	r0, [pc, #40]	; (80008fc <_ZL12MX_GPIO_Initv+0xb8>)
 80008d4:	f000 faa8 	bl	8000e28 <HAL_GPIO_Init>

  /*Configure GPIO pin : KEY_Pin */
  GPIO_InitStruct.Pin = KEY_Pin;
 80008d8:	2301      	movs	r3, #1
 80008da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008dc:	2300      	movs	r3, #0
 80008de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008e0:	2301      	movs	r3, #1
 80008e2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(KEY_GPIO_Port, &GPIO_InitStruct);
 80008e4:	f107 030c 	add.w	r3, r7, #12
 80008e8:	4619      	mov	r1, r3
 80008ea:	4805      	ldr	r0, [pc, #20]	; (8000900 <_ZL12MX_GPIO_Initv+0xbc>)
 80008ec:	f000 fa9c 	bl	8000e28 <HAL_GPIO_Init>

}
 80008f0:	bf00      	nop
 80008f2:	3720      	adds	r7, #32
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	40023800 	.word	0x40023800
 80008fc:	40020800 	.word	0x40020800
 8000900:	40020000 	.word	0x40020000

08000904 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim){
 8000904:	b480      	push	{r7}
 8000906:	b083      	sub	sp, #12
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
	if(mscount == 500){
 800090c:	4b09      	ldr	r3, [pc, #36]	; (8000934 <HAL_TIM_PeriodElapsedCallback+0x30>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000914:	d102      	bne.n	800091c <HAL_TIM_PeriodElapsedCallback+0x18>
		mscount = 0;
 8000916:	4b07      	ldr	r3, [pc, #28]	; (8000934 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000918:	2200      	movs	r2, #0
 800091a:	601a      	str	r2, [r3, #0]
		//HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
	}
	mscount += 1;
 800091c:	4b05      	ldr	r3, [pc, #20]	; (8000934 <HAL_TIM_PeriodElapsedCallback+0x30>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	3301      	adds	r3, #1
 8000922:	4a04      	ldr	r2, [pc, #16]	; (8000934 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000924:	6013      	str	r3, [r2, #0]
}
 8000926:	bf00      	nop
 8000928:	370c      	adds	r7, #12
 800092a:	46bd      	mov	sp, r7
 800092c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000930:	4770      	bx	lr
 8000932:	bf00      	nop
 8000934:	200001e4 	.word	0x200001e4

08000938 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800093c:	b672      	cpsid	i
}
 800093e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000940:	e7fe      	b.n	8000940 <Error_Handler+0x8>
	...

08000944 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000944:	b480      	push	{r7}
 8000946:	b083      	sub	sp, #12
 8000948:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800094a:	2300      	movs	r3, #0
 800094c:	607b      	str	r3, [r7, #4]
 800094e:	4b10      	ldr	r3, [pc, #64]	; (8000990 <HAL_MspInit+0x4c>)
 8000950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000952:	4a0f      	ldr	r2, [pc, #60]	; (8000990 <HAL_MspInit+0x4c>)
 8000954:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000958:	6453      	str	r3, [r2, #68]	; 0x44
 800095a:	4b0d      	ldr	r3, [pc, #52]	; (8000990 <HAL_MspInit+0x4c>)
 800095c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800095e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000962:	607b      	str	r3, [r7, #4]
 8000964:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000966:	2300      	movs	r3, #0
 8000968:	603b      	str	r3, [r7, #0]
 800096a:	4b09      	ldr	r3, [pc, #36]	; (8000990 <HAL_MspInit+0x4c>)
 800096c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800096e:	4a08      	ldr	r2, [pc, #32]	; (8000990 <HAL_MspInit+0x4c>)
 8000970:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000974:	6413      	str	r3, [r2, #64]	; 0x40
 8000976:	4b06      	ldr	r3, [pc, #24]	; (8000990 <HAL_MspInit+0x4c>)
 8000978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800097a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800097e:	603b      	str	r3, [r7, #0]
 8000980:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000982:	bf00      	nop
 8000984:	370c      	adds	r7, #12
 8000986:	46bd      	mov	sp, r7
 8000988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098c:	4770      	bx	lr
 800098e:	bf00      	nop
 8000990:	40023800 	.word	0x40023800

08000994 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b084      	sub	sp, #16
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4a0e      	ldr	r2, [pc, #56]	; (80009dc <HAL_TIM_Base_MspInit+0x48>)
 80009a2:	4293      	cmp	r3, r2
 80009a4:	d115      	bne.n	80009d2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80009a6:	2300      	movs	r3, #0
 80009a8:	60fb      	str	r3, [r7, #12]
 80009aa:	4b0d      	ldr	r3, [pc, #52]	; (80009e0 <HAL_TIM_Base_MspInit+0x4c>)
 80009ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ae:	4a0c      	ldr	r2, [pc, #48]	; (80009e0 <HAL_TIM_Base_MspInit+0x4c>)
 80009b0:	f043 0304 	orr.w	r3, r3, #4
 80009b4:	6413      	str	r3, [r2, #64]	; 0x40
 80009b6:	4b0a      	ldr	r3, [pc, #40]	; (80009e0 <HAL_TIM_Base_MspInit+0x4c>)
 80009b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ba:	f003 0304 	and.w	r3, r3, #4
 80009be:	60fb      	str	r3, [r7, #12]
 80009c0:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80009c2:	2200      	movs	r2, #0
 80009c4:	2100      	movs	r1, #0
 80009c6:	201e      	movs	r0, #30
 80009c8:	f000 f9f7 	bl	8000dba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80009cc:	201e      	movs	r0, #30
 80009ce:	f000 fa10 	bl	8000df2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80009d2:	bf00      	nop
 80009d4:	3710      	adds	r7, #16
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	40000800 	.word	0x40000800
 80009e0:	40023800 	.word	0x40023800

080009e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009e8:	e7fe      	b.n	80009e8 <NMI_Handler+0x4>

080009ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009ea:	b480      	push	{r7}
 80009ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009ee:	e7fe      	b.n	80009ee <HardFault_Handler+0x4>

080009f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009f4:	e7fe      	b.n	80009f4 <MemManage_Handler+0x4>

080009f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009f6:	b480      	push	{r7}
 80009f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009fa:	e7fe      	b.n	80009fa <BusFault_Handler+0x4>

080009fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a00:	e7fe      	b.n	8000a00 <UsageFault_Handler+0x4>

08000a02 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a02:	b480      	push	{r7}
 8000a04:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a06:	bf00      	nop
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0e:	4770      	bx	lr

08000a10 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a14:	bf00      	nop
 8000a16:	46bd      	mov	sp, r7
 8000a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1c:	4770      	bx	lr

08000a1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a1e:	b480      	push	{r7}
 8000a20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a22:	bf00      	nop
 8000a24:	46bd      	mov	sp, r7
 8000a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2a:	4770      	bx	lr

08000a2c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a30:	f000 f8a4 	bl	8000b7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a34:	bf00      	nop
 8000a36:	bd80      	pop	{r7, pc}

08000a38 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000a3c:	4802      	ldr	r0, [pc, #8]	; (8000a48 <TIM4_IRQHandler+0x10>)
 8000a3e:	f002 fa0f 	bl	8002e60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000a42:	bf00      	nop
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	2000019c 	.word	0x2000019c

08000a4c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000a50:	4802      	ldr	r0, [pc, #8]	; (8000a5c <OTG_FS_IRQHandler+0x10>)
 8000a52:	f000 fcf0 	bl	8001436 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000a56:	bf00      	nop
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	20000e90 	.word	0x20000e90

08000a60 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a64:	4b06      	ldr	r3, [pc, #24]	; (8000a80 <SystemInit+0x20>)
 8000a66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a6a:	4a05      	ldr	r2, [pc, #20]	; (8000a80 <SystemInit+0x20>)
 8000a6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a70:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a74:	bf00      	nop
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop
 8000a80:	e000ed00 	.word	0xe000ed00

08000a84 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000a84:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000abc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a88:	480d      	ldr	r0, [pc, #52]	; (8000ac0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a8a:	490e      	ldr	r1, [pc, #56]	; (8000ac4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a8c:	4a0e      	ldr	r2, [pc, #56]	; (8000ac8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a90:	e002      	b.n	8000a98 <LoopCopyDataInit>

08000a92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a96:	3304      	adds	r3, #4

08000a98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a9c:	d3f9      	bcc.n	8000a92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a9e:	4a0b      	ldr	r2, [pc, #44]	; (8000acc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000aa0:	4c0b      	ldr	r4, [pc, #44]	; (8000ad0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000aa2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000aa4:	e001      	b.n	8000aaa <LoopFillZerobss>

08000aa6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aa6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000aa8:	3204      	adds	r2, #4

08000aaa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aaa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000aac:	d3fb      	bcc.n	8000aa6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000aae:	f7ff ffd7 	bl	8000a60 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ab2:	f7ff fbb3 	bl	800021c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ab6:	f7ff fda9 	bl	800060c <main>
  bx  lr    
 8000aba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000abc:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000ac0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ac4:	20000180 	.word	0x20000180
  ldr r2, =_sidata
 8000ac8:	08007054 	.word	0x08007054
  ldr r2, =_sbss
 8000acc:	20000180 	.word	0x20000180
  ldr r4, =_ebss
 8000ad0:	200014b8 	.word	0x200014b8

08000ad4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ad4:	e7fe      	b.n	8000ad4 <ADC_IRQHandler>
	...

08000ad8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000adc:	4b0e      	ldr	r3, [pc, #56]	; (8000b18 <HAL_Init+0x40>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	4a0d      	ldr	r2, [pc, #52]	; (8000b18 <HAL_Init+0x40>)
 8000ae2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ae6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ae8:	4b0b      	ldr	r3, [pc, #44]	; (8000b18 <HAL_Init+0x40>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	4a0a      	ldr	r2, [pc, #40]	; (8000b18 <HAL_Init+0x40>)
 8000aee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000af2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000af4:	4b08      	ldr	r3, [pc, #32]	; (8000b18 <HAL_Init+0x40>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4a07      	ldr	r2, [pc, #28]	; (8000b18 <HAL_Init+0x40>)
 8000afa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000afe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b00:	2003      	movs	r0, #3
 8000b02:	f000 f94f 	bl	8000da4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b06:	200f      	movs	r0, #15
 8000b08:	f000 f808 	bl	8000b1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b0c:	f7ff ff1a 	bl	8000944 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b10:	2300      	movs	r3, #0
}
 8000b12:	4618      	mov	r0, r3
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	40023c00 	.word	0x40023c00

08000b1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b24:	4b12      	ldr	r3, [pc, #72]	; (8000b70 <HAL_InitTick+0x54>)
 8000b26:	681a      	ldr	r2, [r3, #0]
 8000b28:	4b12      	ldr	r3, [pc, #72]	; (8000b74 <HAL_InitTick+0x58>)
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b32:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b36:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f000 f967 	bl	8000e0e <HAL_SYSTICK_Config>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b46:	2301      	movs	r3, #1
 8000b48:	e00e      	b.n	8000b68 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	2b0f      	cmp	r3, #15
 8000b4e:	d80a      	bhi.n	8000b66 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b50:	2200      	movs	r2, #0
 8000b52:	6879      	ldr	r1, [r7, #4]
 8000b54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b58:	f000 f92f 	bl	8000dba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b5c:	4a06      	ldr	r2, [pc, #24]	; (8000b78 <HAL_InitTick+0x5c>)
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b62:	2300      	movs	r3, #0
 8000b64:	e000      	b.n	8000b68 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b66:	2301      	movs	r3, #1
}
 8000b68:	4618      	mov	r0, r3
 8000b6a:	3708      	adds	r7, #8
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	20000000 	.word	0x20000000
 8000b74:	20000008 	.word	0x20000008
 8000b78:	20000004 	.word	0x20000004

08000b7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b80:	4b06      	ldr	r3, [pc, #24]	; (8000b9c <HAL_IncTick+0x20>)
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	461a      	mov	r2, r3
 8000b86:	4b06      	ldr	r3, [pc, #24]	; (8000ba0 <HAL_IncTick+0x24>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	4413      	add	r3, r2
 8000b8c:	4a04      	ldr	r2, [pc, #16]	; (8000ba0 <HAL_IncTick+0x24>)
 8000b8e:	6013      	str	r3, [r2, #0]
}
 8000b90:	bf00      	nop
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop
 8000b9c:	20000008 	.word	0x20000008
 8000ba0:	200001e8 	.word	0x200001e8

08000ba4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ba8:	4b03      	ldr	r3, [pc, #12]	; (8000bb8 <HAL_GetTick+0x14>)
 8000baa:	681b      	ldr	r3, [r3, #0]
}
 8000bac:	4618      	mov	r0, r3
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop
 8000bb8:	200001e8 	.word	0x200001e8

08000bbc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b084      	sub	sp, #16
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bc4:	f7ff ffee 	bl	8000ba4 <HAL_GetTick>
 8000bc8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000bd4:	d005      	beq.n	8000be2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bd6:	4b0a      	ldr	r3, [pc, #40]	; (8000c00 <HAL_Delay+0x44>)
 8000bd8:	781b      	ldrb	r3, [r3, #0]
 8000bda:	461a      	mov	r2, r3
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	4413      	add	r3, r2
 8000be0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000be2:	bf00      	nop
 8000be4:	f7ff ffde 	bl	8000ba4 <HAL_GetTick>
 8000be8:	4602      	mov	r2, r0
 8000bea:	68bb      	ldr	r3, [r7, #8]
 8000bec:	1ad3      	subs	r3, r2, r3
 8000bee:	68fa      	ldr	r2, [r7, #12]
 8000bf0:	429a      	cmp	r2, r3
 8000bf2:	d8f7      	bhi.n	8000be4 <HAL_Delay+0x28>
  {
  }
}
 8000bf4:	bf00      	nop
 8000bf6:	bf00      	nop
 8000bf8:	3710      	adds	r7, #16
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	20000008 	.word	0x20000008

08000c04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c04:	b480      	push	{r7}
 8000c06:	b085      	sub	sp, #20
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	f003 0307 	and.w	r3, r3, #7
 8000c12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c14:	4b0c      	ldr	r3, [pc, #48]	; (8000c48 <__NVIC_SetPriorityGrouping+0x44>)
 8000c16:	68db      	ldr	r3, [r3, #12]
 8000c18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c1a:	68ba      	ldr	r2, [r7, #8]
 8000c1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c20:	4013      	ands	r3, r2
 8000c22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c28:	68bb      	ldr	r3, [r7, #8]
 8000c2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c36:	4a04      	ldr	r2, [pc, #16]	; (8000c48 <__NVIC_SetPriorityGrouping+0x44>)
 8000c38:	68bb      	ldr	r3, [r7, #8]
 8000c3a:	60d3      	str	r3, [r2, #12]
}
 8000c3c:	bf00      	nop
 8000c3e:	3714      	adds	r7, #20
 8000c40:	46bd      	mov	sp, r7
 8000c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c46:	4770      	bx	lr
 8000c48:	e000ed00 	.word	0xe000ed00

08000c4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c50:	4b04      	ldr	r3, [pc, #16]	; (8000c64 <__NVIC_GetPriorityGrouping+0x18>)
 8000c52:	68db      	ldr	r3, [r3, #12]
 8000c54:	0a1b      	lsrs	r3, r3, #8
 8000c56:	f003 0307 	and.w	r3, r3, #7
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c62:	4770      	bx	lr
 8000c64:	e000ed00 	.word	0xe000ed00

08000c68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b083      	sub	sp, #12
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	4603      	mov	r3, r0
 8000c70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	db0b      	blt.n	8000c92 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c7a:	79fb      	ldrb	r3, [r7, #7]
 8000c7c:	f003 021f 	and.w	r2, r3, #31
 8000c80:	4907      	ldr	r1, [pc, #28]	; (8000ca0 <__NVIC_EnableIRQ+0x38>)
 8000c82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c86:	095b      	lsrs	r3, r3, #5
 8000c88:	2001      	movs	r0, #1
 8000c8a:	fa00 f202 	lsl.w	r2, r0, r2
 8000c8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c92:	bf00      	nop
 8000c94:	370c      	adds	r7, #12
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop
 8000ca0:	e000e100 	.word	0xe000e100

08000ca4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b083      	sub	sp, #12
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	4603      	mov	r3, r0
 8000cac:	6039      	str	r1, [r7, #0]
 8000cae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	db0a      	blt.n	8000cce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	b2da      	uxtb	r2, r3
 8000cbc:	490c      	ldr	r1, [pc, #48]	; (8000cf0 <__NVIC_SetPriority+0x4c>)
 8000cbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc2:	0112      	lsls	r2, r2, #4
 8000cc4:	b2d2      	uxtb	r2, r2
 8000cc6:	440b      	add	r3, r1
 8000cc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ccc:	e00a      	b.n	8000ce4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	b2da      	uxtb	r2, r3
 8000cd2:	4908      	ldr	r1, [pc, #32]	; (8000cf4 <__NVIC_SetPriority+0x50>)
 8000cd4:	79fb      	ldrb	r3, [r7, #7]
 8000cd6:	f003 030f 	and.w	r3, r3, #15
 8000cda:	3b04      	subs	r3, #4
 8000cdc:	0112      	lsls	r2, r2, #4
 8000cde:	b2d2      	uxtb	r2, r2
 8000ce0:	440b      	add	r3, r1
 8000ce2:	761a      	strb	r2, [r3, #24]
}
 8000ce4:	bf00      	nop
 8000ce6:	370c      	adds	r7, #12
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cee:	4770      	bx	lr
 8000cf0:	e000e100 	.word	0xe000e100
 8000cf4:	e000ed00 	.word	0xe000ed00

08000cf8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	b089      	sub	sp, #36	; 0x24
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	60f8      	str	r0, [r7, #12]
 8000d00:	60b9      	str	r1, [r7, #8]
 8000d02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	f003 0307 	and.w	r3, r3, #7
 8000d0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d0c:	69fb      	ldr	r3, [r7, #28]
 8000d0e:	f1c3 0307 	rsb	r3, r3, #7
 8000d12:	2b04      	cmp	r3, #4
 8000d14:	bf28      	it	cs
 8000d16:	2304      	movcs	r3, #4
 8000d18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d1a:	69fb      	ldr	r3, [r7, #28]
 8000d1c:	3304      	adds	r3, #4
 8000d1e:	2b06      	cmp	r3, #6
 8000d20:	d902      	bls.n	8000d28 <NVIC_EncodePriority+0x30>
 8000d22:	69fb      	ldr	r3, [r7, #28]
 8000d24:	3b03      	subs	r3, #3
 8000d26:	e000      	b.n	8000d2a <NVIC_EncodePriority+0x32>
 8000d28:	2300      	movs	r3, #0
 8000d2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d2c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d30:	69bb      	ldr	r3, [r7, #24]
 8000d32:	fa02 f303 	lsl.w	r3, r2, r3
 8000d36:	43da      	mvns	r2, r3
 8000d38:	68bb      	ldr	r3, [r7, #8]
 8000d3a:	401a      	ands	r2, r3
 8000d3c:	697b      	ldr	r3, [r7, #20]
 8000d3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d40:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d44:	697b      	ldr	r3, [r7, #20]
 8000d46:	fa01 f303 	lsl.w	r3, r1, r3
 8000d4a:	43d9      	mvns	r1, r3
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d50:	4313      	orrs	r3, r2
         );
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	3724      	adds	r7, #36	; 0x24
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr
	...

08000d60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b082      	sub	sp, #8
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	3b01      	subs	r3, #1
 8000d6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d70:	d301      	bcc.n	8000d76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d72:	2301      	movs	r3, #1
 8000d74:	e00f      	b.n	8000d96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d76:	4a0a      	ldr	r2, [pc, #40]	; (8000da0 <SysTick_Config+0x40>)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	3b01      	subs	r3, #1
 8000d7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d7e:	210f      	movs	r1, #15
 8000d80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d84:	f7ff ff8e 	bl	8000ca4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d88:	4b05      	ldr	r3, [pc, #20]	; (8000da0 <SysTick_Config+0x40>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d8e:	4b04      	ldr	r3, [pc, #16]	; (8000da0 <SysTick_Config+0x40>)
 8000d90:	2207      	movs	r2, #7
 8000d92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d94:	2300      	movs	r3, #0
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	3708      	adds	r7, #8
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	e000e010 	.word	0xe000e010

08000da4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b082      	sub	sp, #8
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dac:	6878      	ldr	r0, [r7, #4]
 8000dae:	f7ff ff29 	bl	8000c04 <__NVIC_SetPriorityGrouping>
}
 8000db2:	bf00      	nop
 8000db4:	3708      	adds	r7, #8
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}

08000dba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dba:	b580      	push	{r7, lr}
 8000dbc:	b086      	sub	sp, #24
 8000dbe:	af00      	add	r7, sp, #0
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	60b9      	str	r1, [r7, #8]
 8000dc4:	607a      	str	r2, [r7, #4]
 8000dc6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000dcc:	f7ff ff3e 	bl	8000c4c <__NVIC_GetPriorityGrouping>
 8000dd0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dd2:	687a      	ldr	r2, [r7, #4]
 8000dd4:	68b9      	ldr	r1, [r7, #8]
 8000dd6:	6978      	ldr	r0, [r7, #20]
 8000dd8:	f7ff ff8e 	bl	8000cf8 <NVIC_EncodePriority>
 8000ddc:	4602      	mov	r2, r0
 8000dde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000de2:	4611      	mov	r1, r2
 8000de4:	4618      	mov	r0, r3
 8000de6:	f7ff ff5d 	bl	8000ca4 <__NVIC_SetPriority>
}
 8000dea:	bf00      	nop
 8000dec:	3718      	adds	r7, #24
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}

08000df2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000df2:	b580      	push	{r7, lr}
 8000df4:	b082      	sub	sp, #8
 8000df6:	af00      	add	r7, sp, #0
 8000df8:	4603      	mov	r3, r0
 8000dfa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e00:	4618      	mov	r0, r3
 8000e02:	f7ff ff31 	bl	8000c68 <__NVIC_EnableIRQ>
}
 8000e06:	bf00      	nop
 8000e08:	3708      	adds	r7, #8
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}

08000e0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e0e:	b580      	push	{r7, lr}
 8000e10:	b082      	sub	sp, #8
 8000e12:	af00      	add	r7, sp, #0
 8000e14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e16:	6878      	ldr	r0, [r7, #4]
 8000e18:	f7ff ffa2 	bl	8000d60 <SysTick_Config>
 8000e1c:	4603      	mov	r3, r0
}
 8000e1e:	4618      	mov	r0, r3
 8000e20:	3708      	adds	r7, #8
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
	...

08000e28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b089      	sub	sp, #36	; 0x24
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
 8000e30:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e32:	2300      	movs	r3, #0
 8000e34:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e36:	2300      	movs	r3, #0
 8000e38:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e3e:	2300      	movs	r3, #0
 8000e40:	61fb      	str	r3, [r7, #28]
 8000e42:	e159      	b.n	80010f8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e44:	2201      	movs	r2, #1
 8000e46:	69fb      	ldr	r3, [r7, #28]
 8000e48:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	697a      	ldr	r2, [r7, #20]
 8000e54:	4013      	ands	r3, r2
 8000e56:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e58:	693a      	ldr	r2, [r7, #16]
 8000e5a:	697b      	ldr	r3, [r7, #20]
 8000e5c:	429a      	cmp	r2, r3
 8000e5e:	f040 8148 	bne.w	80010f2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	685b      	ldr	r3, [r3, #4]
 8000e66:	f003 0303 	and.w	r3, r3, #3
 8000e6a:	2b01      	cmp	r3, #1
 8000e6c:	d005      	beq.n	8000e7a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	685b      	ldr	r3, [r3, #4]
 8000e72:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e76:	2b02      	cmp	r3, #2
 8000e78:	d130      	bne.n	8000edc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	689b      	ldr	r3, [r3, #8]
 8000e7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e80:	69fb      	ldr	r3, [r7, #28]
 8000e82:	005b      	lsls	r3, r3, #1
 8000e84:	2203      	movs	r2, #3
 8000e86:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8a:	43db      	mvns	r3, r3
 8000e8c:	69ba      	ldr	r2, [r7, #24]
 8000e8e:	4013      	ands	r3, r2
 8000e90:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	68da      	ldr	r2, [r3, #12]
 8000e96:	69fb      	ldr	r3, [r7, #28]
 8000e98:	005b      	lsls	r3, r3, #1
 8000e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9e:	69ba      	ldr	r2, [r7, #24]
 8000ea0:	4313      	orrs	r3, r2
 8000ea2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	69ba      	ldr	r2, [r7, #24]
 8000ea8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	69fb      	ldr	r3, [r7, #28]
 8000eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb8:	43db      	mvns	r3, r3
 8000eba:	69ba      	ldr	r2, [r7, #24]
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	685b      	ldr	r3, [r3, #4]
 8000ec4:	091b      	lsrs	r3, r3, #4
 8000ec6:	f003 0201 	and.w	r2, r3, #1
 8000eca:	69fb      	ldr	r3, [r7, #28]
 8000ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed0:	69ba      	ldr	r2, [r7, #24]
 8000ed2:	4313      	orrs	r3, r2
 8000ed4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	69ba      	ldr	r2, [r7, #24]
 8000eda:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	685b      	ldr	r3, [r3, #4]
 8000ee0:	f003 0303 	and.w	r3, r3, #3
 8000ee4:	2b03      	cmp	r3, #3
 8000ee6:	d017      	beq.n	8000f18 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	68db      	ldr	r3, [r3, #12]
 8000eec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000eee:	69fb      	ldr	r3, [r7, #28]
 8000ef0:	005b      	lsls	r3, r3, #1
 8000ef2:	2203      	movs	r2, #3
 8000ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef8:	43db      	mvns	r3, r3
 8000efa:	69ba      	ldr	r2, [r7, #24]
 8000efc:	4013      	ands	r3, r2
 8000efe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	689a      	ldr	r2, [r3, #8]
 8000f04:	69fb      	ldr	r3, [r7, #28]
 8000f06:	005b      	lsls	r3, r3, #1
 8000f08:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0c:	69ba      	ldr	r2, [r7, #24]
 8000f0e:	4313      	orrs	r3, r2
 8000f10:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	69ba      	ldr	r2, [r7, #24]
 8000f16:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	f003 0303 	and.w	r3, r3, #3
 8000f20:	2b02      	cmp	r3, #2
 8000f22:	d123      	bne.n	8000f6c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f24:	69fb      	ldr	r3, [r7, #28]
 8000f26:	08da      	lsrs	r2, r3, #3
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	3208      	adds	r2, #8
 8000f2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f30:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f32:	69fb      	ldr	r3, [r7, #28]
 8000f34:	f003 0307 	and.w	r3, r3, #7
 8000f38:	009b      	lsls	r3, r3, #2
 8000f3a:	220f      	movs	r2, #15
 8000f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f40:	43db      	mvns	r3, r3
 8000f42:	69ba      	ldr	r2, [r7, #24]
 8000f44:	4013      	ands	r3, r2
 8000f46:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	691a      	ldr	r2, [r3, #16]
 8000f4c:	69fb      	ldr	r3, [r7, #28]
 8000f4e:	f003 0307 	and.w	r3, r3, #7
 8000f52:	009b      	lsls	r3, r3, #2
 8000f54:	fa02 f303 	lsl.w	r3, r2, r3
 8000f58:	69ba      	ldr	r2, [r7, #24]
 8000f5a:	4313      	orrs	r3, r2
 8000f5c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f5e:	69fb      	ldr	r3, [r7, #28]
 8000f60:	08da      	lsrs	r2, r3, #3
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	3208      	adds	r2, #8
 8000f66:	69b9      	ldr	r1, [r7, #24]
 8000f68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f72:	69fb      	ldr	r3, [r7, #28]
 8000f74:	005b      	lsls	r3, r3, #1
 8000f76:	2203      	movs	r2, #3
 8000f78:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7c:	43db      	mvns	r3, r3
 8000f7e:	69ba      	ldr	r2, [r7, #24]
 8000f80:	4013      	ands	r3, r2
 8000f82:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	f003 0203 	and.w	r2, r3, #3
 8000f8c:	69fb      	ldr	r3, [r7, #28]
 8000f8e:	005b      	lsls	r3, r3, #1
 8000f90:	fa02 f303 	lsl.w	r3, r2, r3
 8000f94:	69ba      	ldr	r2, [r7, #24]
 8000f96:	4313      	orrs	r3, r2
 8000f98:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	69ba      	ldr	r2, [r7, #24]
 8000f9e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	f000 80a2 	beq.w	80010f2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fae:	2300      	movs	r3, #0
 8000fb0:	60fb      	str	r3, [r7, #12]
 8000fb2:	4b57      	ldr	r3, [pc, #348]	; (8001110 <HAL_GPIO_Init+0x2e8>)
 8000fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fb6:	4a56      	ldr	r2, [pc, #344]	; (8001110 <HAL_GPIO_Init+0x2e8>)
 8000fb8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fbc:	6453      	str	r3, [r2, #68]	; 0x44
 8000fbe:	4b54      	ldr	r3, [pc, #336]	; (8001110 <HAL_GPIO_Init+0x2e8>)
 8000fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fc6:	60fb      	str	r3, [r7, #12]
 8000fc8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000fca:	4a52      	ldr	r2, [pc, #328]	; (8001114 <HAL_GPIO_Init+0x2ec>)
 8000fcc:	69fb      	ldr	r3, [r7, #28]
 8000fce:	089b      	lsrs	r3, r3, #2
 8000fd0:	3302      	adds	r3, #2
 8000fd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000fd8:	69fb      	ldr	r3, [r7, #28]
 8000fda:	f003 0303 	and.w	r3, r3, #3
 8000fde:	009b      	lsls	r3, r3, #2
 8000fe0:	220f      	movs	r2, #15
 8000fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe6:	43db      	mvns	r3, r3
 8000fe8:	69ba      	ldr	r2, [r7, #24]
 8000fea:	4013      	ands	r3, r2
 8000fec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	4a49      	ldr	r2, [pc, #292]	; (8001118 <HAL_GPIO_Init+0x2f0>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d019      	beq.n	800102a <HAL_GPIO_Init+0x202>
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	4a48      	ldr	r2, [pc, #288]	; (800111c <HAL_GPIO_Init+0x2f4>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d013      	beq.n	8001026 <HAL_GPIO_Init+0x1fe>
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	4a47      	ldr	r2, [pc, #284]	; (8001120 <HAL_GPIO_Init+0x2f8>)
 8001002:	4293      	cmp	r3, r2
 8001004:	d00d      	beq.n	8001022 <HAL_GPIO_Init+0x1fa>
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	4a46      	ldr	r2, [pc, #280]	; (8001124 <HAL_GPIO_Init+0x2fc>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d007      	beq.n	800101e <HAL_GPIO_Init+0x1f6>
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	4a45      	ldr	r2, [pc, #276]	; (8001128 <HAL_GPIO_Init+0x300>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d101      	bne.n	800101a <HAL_GPIO_Init+0x1f2>
 8001016:	2304      	movs	r3, #4
 8001018:	e008      	b.n	800102c <HAL_GPIO_Init+0x204>
 800101a:	2307      	movs	r3, #7
 800101c:	e006      	b.n	800102c <HAL_GPIO_Init+0x204>
 800101e:	2303      	movs	r3, #3
 8001020:	e004      	b.n	800102c <HAL_GPIO_Init+0x204>
 8001022:	2302      	movs	r3, #2
 8001024:	e002      	b.n	800102c <HAL_GPIO_Init+0x204>
 8001026:	2301      	movs	r3, #1
 8001028:	e000      	b.n	800102c <HAL_GPIO_Init+0x204>
 800102a:	2300      	movs	r3, #0
 800102c:	69fa      	ldr	r2, [r7, #28]
 800102e:	f002 0203 	and.w	r2, r2, #3
 8001032:	0092      	lsls	r2, r2, #2
 8001034:	4093      	lsls	r3, r2
 8001036:	69ba      	ldr	r2, [r7, #24]
 8001038:	4313      	orrs	r3, r2
 800103a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800103c:	4935      	ldr	r1, [pc, #212]	; (8001114 <HAL_GPIO_Init+0x2ec>)
 800103e:	69fb      	ldr	r3, [r7, #28]
 8001040:	089b      	lsrs	r3, r3, #2
 8001042:	3302      	adds	r3, #2
 8001044:	69ba      	ldr	r2, [r7, #24]
 8001046:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800104a:	4b38      	ldr	r3, [pc, #224]	; (800112c <HAL_GPIO_Init+0x304>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001050:	693b      	ldr	r3, [r7, #16]
 8001052:	43db      	mvns	r3, r3
 8001054:	69ba      	ldr	r2, [r7, #24]
 8001056:	4013      	ands	r3, r2
 8001058:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001062:	2b00      	cmp	r3, #0
 8001064:	d003      	beq.n	800106e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001066:	69ba      	ldr	r2, [r7, #24]
 8001068:	693b      	ldr	r3, [r7, #16]
 800106a:	4313      	orrs	r3, r2
 800106c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800106e:	4a2f      	ldr	r2, [pc, #188]	; (800112c <HAL_GPIO_Init+0x304>)
 8001070:	69bb      	ldr	r3, [r7, #24]
 8001072:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001074:	4b2d      	ldr	r3, [pc, #180]	; (800112c <HAL_GPIO_Init+0x304>)
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800107a:	693b      	ldr	r3, [r7, #16]
 800107c:	43db      	mvns	r3, r3
 800107e:	69ba      	ldr	r2, [r7, #24]
 8001080:	4013      	ands	r3, r2
 8001082:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800108c:	2b00      	cmp	r3, #0
 800108e:	d003      	beq.n	8001098 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001090:	69ba      	ldr	r2, [r7, #24]
 8001092:	693b      	ldr	r3, [r7, #16]
 8001094:	4313      	orrs	r3, r2
 8001096:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001098:	4a24      	ldr	r2, [pc, #144]	; (800112c <HAL_GPIO_Init+0x304>)
 800109a:	69bb      	ldr	r3, [r7, #24]
 800109c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800109e:	4b23      	ldr	r3, [pc, #140]	; (800112c <HAL_GPIO_Init+0x304>)
 80010a0:	689b      	ldr	r3, [r3, #8]
 80010a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010a4:	693b      	ldr	r3, [r7, #16]
 80010a6:	43db      	mvns	r3, r3
 80010a8:	69ba      	ldr	r2, [r7, #24]
 80010aa:	4013      	ands	r3, r2
 80010ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d003      	beq.n	80010c2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80010ba:	69ba      	ldr	r2, [r7, #24]
 80010bc:	693b      	ldr	r3, [r7, #16]
 80010be:	4313      	orrs	r3, r2
 80010c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010c2:	4a1a      	ldr	r2, [pc, #104]	; (800112c <HAL_GPIO_Init+0x304>)
 80010c4:	69bb      	ldr	r3, [r7, #24]
 80010c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010c8:	4b18      	ldr	r3, [pc, #96]	; (800112c <HAL_GPIO_Init+0x304>)
 80010ca:	68db      	ldr	r3, [r3, #12]
 80010cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010ce:	693b      	ldr	r3, [r7, #16]
 80010d0:	43db      	mvns	r3, r3
 80010d2:	69ba      	ldr	r2, [r7, #24]
 80010d4:	4013      	ands	r3, r2
 80010d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d003      	beq.n	80010ec <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80010e4:	69ba      	ldr	r2, [r7, #24]
 80010e6:	693b      	ldr	r3, [r7, #16]
 80010e8:	4313      	orrs	r3, r2
 80010ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80010ec:	4a0f      	ldr	r2, [pc, #60]	; (800112c <HAL_GPIO_Init+0x304>)
 80010ee:	69bb      	ldr	r3, [r7, #24]
 80010f0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010f2:	69fb      	ldr	r3, [r7, #28]
 80010f4:	3301      	adds	r3, #1
 80010f6:	61fb      	str	r3, [r7, #28]
 80010f8:	69fb      	ldr	r3, [r7, #28]
 80010fa:	2b0f      	cmp	r3, #15
 80010fc:	f67f aea2 	bls.w	8000e44 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001100:	bf00      	nop
 8001102:	bf00      	nop
 8001104:	3724      	adds	r7, #36	; 0x24
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop
 8001110:	40023800 	.word	0x40023800
 8001114:	40013800 	.word	0x40013800
 8001118:	40020000 	.word	0x40020000
 800111c:	40020400 	.word	0x40020400
 8001120:	40020800 	.word	0x40020800
 8001124:	40020c00 	.word	0x40020c00
 8001128:	40021000 	.word	0x40021000
 800112c:	40013c00 	.word	0x40013c00

08001130 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001130:	b480      	push	{r7}
 8001132:	b083      	sub	sp, #12
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
 8001138:	460b      	mov	r3, r1
 800113a:	807b      	strh	r3, [r7, #2]
 800113c:	4613      	mov	r3, r2
 800113e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001140:	787b      	ldrb	r3, [r7, #1]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d003      	beq.n	800114e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001146:	887a      	ldrh	r2, [r7, #2]
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800114c:	e003      	b.n	8001156 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800114e:	887b      	ldrh	r3, [r7, #2]
 8001150:	041a      	lsls	r2, r3, #16
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	619a      	str	r2, [r3, #24]
}
 8001156:	bf00      	nop
 8001158:	370c      	adds	r7, #12
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr

08001162 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001162:	b480      	push	{r7}
 8001164:	b085      	sub	sp, #20
 8001166:	af00      	add	r7, sp, #0
 8001168:	6078      	str	r0, [r7, #4]
 800116a:	460b      	mov	r3, r1
 800116c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	695b      	ldr	r3, [r3, #20]
 8001172:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001174:	887a      	ldrh	r2, [r7, #2]
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	4013      	ands	r3, r2
 800117a:	041a      	lsls	r2, r3, #16
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	43d9      	mvns	r1, r3
 8001180:	887b      	ldrh	r3, [r7, #2]
 8001182:	400b      	ands	r3, r1
 8001184:	431a      	orrs	r2, r3
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	619a      	str	r2, [r3, #24]
}
 800118a:	bf00      	nop
 800118c:	3714      	adds	r7, #20
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr

08001196 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001196:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001198:	b08f      	sub	sp, #60	; 0x3c
 800119a:	af0a      	add	r7, sp, #40	; 0x28
 800119c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d101      	bne.n	80011a8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80011a4:	2301      	movs	r3, #1
 80011a6:	e10f      	b.n	80013c8 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80011b4:	b2db      	uxtb	r3, r3
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d106      	bne.n	80011c8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	2200      	movs	r2, #0
 80011be:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80011c2:	6878      	ldr	r0, [r7, #4]
 80011c4:	f005 fbf0 	bl	80069a8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	2203      	movs	r2, #3
 80011cc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80011d0:	68bb      	ldr	r3, [r7, #8]
 80011d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d102      	bne.n	80011e2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	2200      	movs	r2, #0
 80011e0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4618      	mov	r0, r3
 80011e8:	f002 fae3 	bl	80037b2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	603b      	str	r3, [r7, #0]
 80011f2:	687e      	ldr	r6, [r7, #4]
 80011f4:	466d      	mov	r5, sp
 80011f6:	f106 0410 	add.w	r4, r6, #16
 80011fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001200:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001202:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001206:	e885 0003 	stmia.w	r5, {r0, r1}
 800120a:	1d33      	adds	r3, r6, #4
 800120c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800120e:	6838      	ldr	r0, [r7, #0]
 8001210:	f002 f9ba 	bl	8003588 <USB_CoreInit>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d005      	beq.n	8001226 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	2202      	movs	r2, #2
 800121e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001222:	2301      	movs	r3, #1
 8001224:	e0d0      	b.n	80013c8 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	2100      	movs	r1, #0
 800122c:	4618      	mov	r0, r3
 800122e:	f002 fad1 	bl	80037d4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001232:	2300      	movs	r3, #0
 8001234:	73fb      	strb	r3, [r7, #15]
 8001236:	e04a      	b.n	80012ce <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001238:	7bfa      	ldrb	r2, [r7, #15]
 800123a:	6879      	ldr	r1, [r7, #4]
 800123c:	4613      	mov	r3, r2
 800123e:	00db      	lsls	r3, r3, #3
 8001240:	1a9b      	subs	r3, r3, r2
 8001242:	009b      	lsls	r3, r3, #2
 8001244:	440b      	add	r3, r1
 8001246:	333d      	adds	r3, #61	; 0x3d
 8001248:	2201      	movs	r2, #1
 800124a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800124c:	7bfa      	ldrb	r2, [r7, #15]
 800124e:	6879      	ldr	r1, [r7, #4]
 8001250:	4613      	mov	r3, r2
 8001252:	00db      	lsls	r3, r3, #3
 8001254:	1a9b      	subs	r3, r3, r2
 8001256:	009b      	lsls	r3, r3, #2
 8001258:	440b      	add	r3, r1
 800125a:	333c      	adds	r3, #60	; 0x3c
 800125c:	7bfa      	ldrb	r2, [r7, #15]
 800125e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001260:	7bfa      	ldrb	r2, [r7, #15]
 8001262:	7bfb      	ldrb	r3, [r7, #15]
 8001264:	b298      	uxth	r0, r3
 8001266:	6879      	ldr	r1, [r7, #4]
 8001268:	4613      	mov	r3, r2
 800126a:	00db      	lsls	r3, r3, #3
 800126c:	1a9b      	subs	r3, r3, r2
 800126e:	009b      	lsls	r3, r3, #2
 8001270:	440b      	add	r3, r1
 8001272:	3342      	adds	r3, #66	; 0x42
 8001274:	4602      	mov	r2, r0
 8001276:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001278:	7bfa      	ldrb	r2, [r7, #15]
 800127a:	6879      	ldr	r1, [r7, #4]
 800127c:	4613      	mov	r3, r2
 800127e:	00db      	lsls	r3, r3, #3
 8001280:	1a9b      	subs	r3, r3, r2
 8001282:	009b      	lsls	r3, r3, #2
 8001284:	440b      	add	r3, r1
 8001286:	333f      	adds	r3, #63	; 0x3f
 8001288:	2200      	movs	r2, #0
 800128a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800128c:	7bfa      	ldrb	r2, [r7, #15]
 800128e:	6879      	ldr	r1, [r7, #4]
 8001290:	4613      	mov	r3, r2
 8001292:	00db      	lsls	r3, r3, #3
 8001294:	1a9b      	subs	r3, r3, r2
 8001296:	009b      	lsls	r3, r3, #2
 8001298:	440b      	add	r3, r1
 800129a:	3344      	adds	r3, #68	; 0x44
 800129c:	2200      	movs	r2, #0
 800129e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80012a0:	7bfa      	ldrb	r2, [r7, #15]
 80012a2:	6879      	ldr	r1, [r7, #4]
 80012a4:	4613      	mov	r3, r2
 80012a6:	00db      	lsls	r3, r3, #3
 80012a8:	1a9b      	subs	r3, r3, r2
 80012aa:	009b      	lsls	r3, r3, #2
 80012ac:	440b      	add	r3, r1
 80012ae:	3348      	adds	r3, #72	; 0x48
 80012b0:	2200      	movs	r2, #0
 80012b2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80012b4:	7bfa      	ldrb	r2, [r7, #15]
 80012b6:	6879      	ldr	r1, [r7, #4]
 80012b8:	4613      	mov	r3, r2
 80012ba:	00db      	lsls	r3, r3, #3
 80012bc:	1a9b      	subs	r3, r3, r2
 80012be:	009b      	lsls	r3, r3, #2
 80012c0:	440b      	add	r3, r1
 80012c2:	3350      	adds	r3, #80	; 0x50
 80012c4:	2200      	movs	r2, #0
 80012c6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012c8:	7bfb      	ldrb	r3, [r7, #15]
 80012ca:	3301      	adds	r3, #1
 80012cc:	73fb      	strb	r3, [r7, #15]
 80012ce:	7bfa      	ldrb	r2, [r7, #15]
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	429a      	cmp	r2, r3
 80012d6:	d3af      	bcc.n	8001238 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012d8:	2300      	movs	r3, #0
 80012da:	73fb      	strb	r3, [r7, #15]
 80012dc:	e044      	b.n	8001368 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80012de:	7bfa      	ldrb	r2, [r7, #15]
 80012e0:	6879      	ldr	r1, [r7, #4]
 80012e2:	4613      	mov	r3, r2
 80012e4:	00db      	lsls	r3, r3, #3
 80012e6:	1a9b      	subs	r3, r3, r2
 80012e8:	009b      	lsls	r3, r3, #2
 80012ea:	440b      	add	r3, r1
 80012ec:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80012f0:	2200      	movs	r2, #0
 80012f2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80012f4:	7bfa      	ldrb	r2, [r7, #15]
 80012f6:	6879      	ldr	r1, [r7, #4]
 80012f8:	4613      	mov	r3, r2
 80012fa:	00db      	lsls	r3, r3, #3
 80012fc:	1a9b      	subs	r3, r3, r2
 80012fe:	009b      	lsls	r3, r3, #2
 8001300:	440b      	add	r3, r1
 8001302:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001306:	7bfa      	ldrb	r2, [r7, #15]
 8001308:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800130a:	7bfa      	ldrb	r2, [r7, #15]
 800130c:	6879      	ldr	r1, [r7, #4]
 800130e:	4613      	mov	r3, r2
 8001310:	00db      	lsls	r3, r3, #3
 8001312:	1a9b      	subs	r3, r3, r2
 8001314:	009b      	lsls	r3, r3, #2
 8001316:	440b      	add	r3, r1
 8001318:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800131c:	2200      	movs	r2, #0
 800131e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001320:	7bfa      	ldrb	r2, [r7, #15]
 8001322:	6879      	ldr	r1, [r7, #4]
 8001324:	4613      	mov	r3, r2
 8001326:	00db      	lsls	r3, r3, #3
 8001328:	1a9b      	subs	r3, r3, r2
 800132a:	009b      	lsls	r3, r3, #2
 800132c:	440b      	add	r3, r1
 800132e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001332:	2200      	movs	r2, #0
 8001334:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001336:	7bfa      	ldrb	r2, [r7, #15]
 8001338:	6879      	ldr	r1, [r7, #4]
 800133a:	4613      	mov	r3, r2
 800133c:	00db      	lsls	r3, r3, #3
 800133e:	1a9b      	subs	r3, r3, r2
 8001340:	009b      	lsls	r3, r3, #2
 8001342:	440b      	add	r3, r1
 8001344:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001348:	2200      	movs	r2, #0
 800134a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800134c:	7bfa      	ldrb	r2, [r7, #15]
 800134e:	6879      	ldr	r1, [r7, #4]
 8001350:	4613      	mov	r3, r2
 8001352:	00db      	lsls	r3, r3, #3
 8001354:	1a9b      	subs	r3, r3, r2
 8001356:	009b      	lsls	r3, r3, #2
 8001358:	440b      	add	r3, r1
 800135a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800135e:	2200      	movs	r2, #0
 8001360:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001362:	7bfb      	ldrb	r3, [r7, #15]
 8001364:	3301      	adds	r3, #1
 8001366:	73fb      	strb	r3, [r7, #15]
 8001368:	7bfa      	ldrb	r2, [r7, #15]
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	429a      	cmp	r2, r3
 8001370:	d3b5      	bcc.n	80012de <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	603b      	str	r3, [r7, #0]
 8001378:	687e      	ldr	r6, [r7, #4]
 800137a:	466d      	mov	r5, sp
 800137c:	f106 0410 	add.w	r4, r6, #16
 8001380:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001382:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001384:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001386:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001388:	e894 0003 	ldmia.w	r4, {r0, r1}
 800138c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001390:	1d33      	adds	r3, r6, #4
 8001392:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001394:	6838      	ldr	r0, [r7, #0]
 8001396:	f002 fa69 	bl	800386c <USB_DevInit>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d005      	beq.n	80013ac <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2202      	movs	r2, #2
 80013a4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80013a8:	2301      	movs	r3, #1
 80013aa:	e00d      	b.n	80013c8 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2200      	movs	r2, #0
 80013b0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2201      	movs	r2, #1
 80013b8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4618      	mov	r0, r3
 80013c2:	f003 fae5 	bl	8004990 <USB_DevDisconnect>

  return HAL_OK;
 80013c6:	2300      	movs	r3, #0
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	3714      	adds	r7, #20
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bdf0      	pop	{r4, r5, r6, r7, pc}

080013d0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b084      	sub	sp, #16
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80013e4:	2b01      	cmp	r3, #1
 80013e6:	d101      	bne.n	80013ec <HAL_PCD_Start+0x1c>
 80013e8:	2302      	movs	r3, #2
 80013ea:	e020      	b.n	800142e <HAL_PCD_Start+0x5e>
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2201      	movs	r2, #1
 80013f0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013f8:	2b01      	cmp	r3, #1
 80013fa:	d109      	bne.n	8001410 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001400:	2b01      	cmp	r3, #1
 8001402:	d005      	beq.n	8001410 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001408:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4618      	mov	r0, r3
 8001416:	f002 f9bb 	bl	8003790 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4618      	mov	r0, r3
 8001420:	f003 fa95 	bl	800494e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2200      	movs	r2, #0
 8001428:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800142c:	2300      	movs	r3, #0
}
 800142e:	4618      	mov	r0, r3
 8001430:	3710      	adds	r7, #16
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}

08001436 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001436:	b590      	push	{r4, r7, lr}
 8001438:	b08d      	sub	sp, #52	; 0x34
 800143a:	af00      	add	r7, sp, #0
 800143c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001444:	6a3b      	ldr	r3, [r7, #32]
 8001446:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4618      	mov	r0, r3
 800144e:	f003 fb53 	bl	8004af8 <USB_GetMode>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	f040 839d 	bne.w	8001b94 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4618      	mov	r0, r3
 8001460:	f003 fab7 	bl	80049d2 <USB_ReadInterrupts>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	f000 8393 	beq.w	8001b92 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4618      	mov	r0, r3
 8001472:	f003 faae 	bl	80049d2 <USB_ReadInterrupts>
 8001476:	4603      	mov	r3, r0
 8001478:	f003 0302 	and.w	r3, r3, #2
 800147c:	2b02      	cmp	r3, #2
 800147e:	d107      	bne.n	8001490 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	695a      	ldr	r2, [r3, #20]
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f002 0202 	and.w	r2, r2, #2
 800148e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4618      	mov	r0, r3
 8001496:	f003 fa9c 	bl	80049d2 <USB_ReadInterrupts>
 800149a:	4603      	mov	r3, r0
 800149c:	f003 0310 	and.w	r3, r3, #16
 80014a0:	2b10      	cmp	r3, #16
 80014a2:	d161      	bne.n	8001568 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	699a      	ldr	r2, [r3, #24]
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f022 0210 	bic.w	r2, r2, #16
 80014b2:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80014b4:	6a3b      	ldr	r3, [r7, #32]
 80014b6:	6a1b      	ldr	r3, [r3, #32]
 80014b8:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80014ba:	69bb      	ldr	r3, [r7, #24]
 80014bc:	f003 020f 	and.w	r2, r3, #15
 80014c0:	4613      	mov	r3, r2
 80014c2:	00db      	lsls	r3, r3, #3
 80014c4:	1a9b      	subs	r3, r3, r2
 80014c6:	009b      	lsls	r3, r3, #2
 80014c8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80014cc:	687a      	ldr	r2, [r7, #4]
 80014ce:	4413      	add	r3, r2
 80014d0:	3304      	adds	r3, #4
 80014d2:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80014d4:	69bb      	ldr	r3, [r7, #24]
 80014d6:	0c5b      	lsrs	r3, r3, #17
 80014d8:	f003 030f 	and.w	r3, r3, #15
 80014dc:	2b02      	cmp	r3, #2
 80014de:	d124      	bne.n	800152a <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80014e0:	69ba      	ldr	r2, [r7, #24]
 80014e2:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80014e6:	4013      	ands	r3, r2
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d035      	beq.n	8001558 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80014f0:	69bb      	ldr	r3, [r7, #24]
 80014f2:	091b      	lsrs	r3, r3, #4
 80014f4:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80014f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80014fa:	b29b      	uxth	r3, r3
 80014fc:	461a      	mov	r2, r3
 80014fe:	6a38      	ldr	r0, [r7, #32]
 8001500:	f003 f8d3 	bl	80046aa <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	68da      	ldr	r2, [r3, #12]
 8001508:	69bb      	ldr	r3, [r7, #24]
 800150a:	091b      	lsrs	r3, r3, #4
 800150c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001510:	441a      	add	r2, r3
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001516:	697b      	ldr	r3, [r7, #20]
 8001518:	699a      	ldr	r2, [r3, #24]
 800151a:	69bb      	ldr	r3, [r7, #24]
 800151c:	091b      	lsrs	r3, r3, #4
 800151e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001522:	441a      	add	r2, r3
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	619a      	str	r2, [r3, #24]
 8001528:	e016      	b.n	8001558 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800152a:	69bb      	ldr	r3, [r7, #24]
 800152c:	0c5b      	lsrs	r3, r3, #17
 800152e:	f003 030f 	and.w	r3, r3, #15
 8001532:	2b06      	cmp	r3, #6
 8001534:	d110      	bne.n	8001558 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800153c:	2208      	movs	r2, #8
 800153e:	4619      	mov	r1, r3
 8001540:	6a38      	ldr	r0, [r7, #32]
 8001542:	f003 f8b2 	bl	80046aa <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	699a      	ldr	r2, [r3, #24]
 800154a:	69bb      	ldr	r3, [r7, #24]
 800154c:	091b      	lsrs	r3, r3, #4
 800154e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001552:	441a      	add	r2, r3
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	699a      	ldr	r2, [r3, #24]
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f042 0210 	orr.w	r2, r2, #16
 8001566:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4618      	mov	r0, r3
 800156e:	f003 fa30 	bl	80049d2 <USB_ReadInterrupts>
 8001572:	4603      	mov	r3, r0
 8001574:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001578:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800157c:	d16e      	bne.n	800165c <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800157e:	2300      	movs	r3, #0
 8001580:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4618      	mov	r0, r3
 8001588:	f003 fa36 	bl	80049f8 <USB_ReadDevAllOutEpInterrupt>
 800158c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800158e:	e062      	b.n	8001656 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001592:	f003 0301 	and.w	r3, r3, #1
 8001596:	2b00      	cmp	r3, #0
 8001598:	d057      	beq.n	800164a <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015a0:	b2d2      	uxtb	r2, r2
 80015a2:	4611      	mov	r1, r2
 80015a4:	4618      	mov	r0, r3
 80015a6:	f003 fa5b 	bl	8004a60 <USB_ReadDevOutEPInterrupt>
 80015aa:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80015ac:	693b      	ldr	r3, [r7, #16]
 80015ae:	f003 0301 	and.w	r3, r3, #1
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d00c      	beq.n	80015d0 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80015b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b8:	015a      	lsls	r2, r3, #5
 80015ba:	69fb      	ldr	r3, [r7, #28]
 80015bc:	4413      	add	r3, r2
 80015be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80015c2:	461a      	mov	r2, r3
 80015c4:	2301      	movs	r3, #1
 80015c6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80015c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80015ca:	6878      	ldr	r0, [r7, #4]
 80015cc:	f000 fdb0 	bl	8002130 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	f003 0308 	and.w	r3, r3, #8
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d00c      	beq.n	80015f4 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80015da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015dc:	015a      	lsls	r2, r3, #5
 80015de:	69fb      	ldr	r3, [r7, #28]
 80015e0:	4413      	add	r3, r2
 80015e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80015e6:	461a      	mov	r2, r3
 80015e8:	2308      	movs	r3, #8
 80015ea:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80015ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80015ee:	6878      	ldr	r0, [r7, #4]
 80015f0:	f000 feaa 	bl	8002348 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80015f4:	693b      	ldr	r3, [r7, #16]
 80015f6:	f003 0310 	and.w	r3, r3, #16
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d008      	beq.n	8001610 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80015fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001600:	015a      	lsls	r2, r3, #5
 8001602:	69fb      	ldr	r3, [r7, #28]
 8001604:	4413      	add	r3, r2
 8001606:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800160a:	461a      	mov	r2, r3
 800160c:	2310      	movs	r3, #16
 800160e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001610:	693b      	ldr	r3, [r7, #16]
 8001612:	f003 0320 	and.w	r3, r3, #32
 8001616:	2b00      	cmp	r3, #0
 8001618:	d008      	beq.n	800162c <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800161a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800161c:	015a      	lsls	r2, r3, #5
 800161e:	69fb      	ldr	r3, [r7, #28]
 8001620:	4413      	add	r3, r2
 8001622:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001626:	461a      	mov	r2, r3
 8001628:	2320      	movs	r3, #32
 800162a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800162c:	693b      	ldr	r3, [r7, #16]
 800162e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001632:	2b00      	cmp	r3, #0
 8001634:	d009      	beq.n	800164a <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001638:	015a      	lsls	r2, r3, #5
 800163a:	69fb      	ldr	r3, [r7, #28]
 800163c:	4413      	add	r3, r2
 800163e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001642:	461a      	mov	r2, r3
 8001644:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001648:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800164a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800164c:	3301      	adds	r3, #1
 800164e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001652:	085b      	lsrs	r3, r3, #1
 8001654:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001658:	2b00      	cmp	r3, #0
 800165a:	d199      	bne.n	8001590 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4618      	mov	r0, r3
 8001662:	f003 f9b6 	bl	80049d2 <USB_ReadInterrupts>
 8001666:	4603      	mov	r3, r0
 8001668:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800166c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001670:	f040 80c0 	bne.w	80017f4 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4618      	mov	r0, r3
 800167a:	f003 f9d7 	bl	8004a2c <USB_ReadDevAllInEpInterrupt>
 800167e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001680:	2300      	movs	r3, #0
 8001682:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001684:	e0b2      	b.n	80017ec <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001688:	f003 0301 	and.w	r3, r3, #1
 800168c:	2b00      	cmp	r3, #0
 800168e:	f000 80a7 	beq.w	80017e0 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001698:	b2d2      	uxtb	r2, r2
 800169a:	4611      	mov	r1, r2
 800169c:	4618      	mov	r0, r3
 800169e:	f003 f9fd 	bl	8004a9c <USB_ReadDevInEPInterrupt>
 80016a2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80016a4:	693b      	ldr	r3, [r7, #16]
 80016a6:	f003 0301 	and.w	r3, r3, #1
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d057      	beq.n	800175e <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80016ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016b0:	f003 030f 	and.w	r3, r3, #15
 80016b4:	2201      	movs	r2, #1
 80016b6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ba:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80016bc:	69fb      	ldr	r3, [r7, #28]
 80016be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	43db      	mvns	r3, r3
 80016c8:	69f9      	ldr	r1, [r7, #28]
 80016ca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80016ce:	4013      	ands	r3, r2
 80016d0:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80016d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d4:	015a      	lsls	r2, r3, #5
 80016d6:	69fb      	ldr	r3, [r7, #28]
 80016d8:	4413      	add	r3, r2
 80016da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80016de:	461a      	mov	r2, r3
 80016e0:	2301      	movs	r3, #1
 80016e2:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	691b      	ldr	r3, [r3, #16]
 80016e8:	2b01      	cmp	r3, #1
 80016ea:	d132      	bne.n	8001752 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80016ec:	6879      	ldr	r1, [r7, #4]
 80016ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016f0:	4613      	mov	r3, r2
 80016f2:	00db      	lsls	r3, r3, #3
 80016f4:	1a9b      	subs	r3, r3, r2
 80016f6:	009b      	lsls	r3, r3, #2
 80016f8:	440b      	add	r3, r1
 80016fa:	3348      	adds	r3, #72	; 0x48
 80016fc:	6819      	ldr	r1, [r3, #0]
 80016fe:	6878      	ldr	r0, [r7, #4]
 8001700:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001702:	4613      	mov	r3, r2
 8001704:	00db      	lsls	r3, r3, #3
 8001706:	1a9b      	subs	r3, r3, r2
 8001708:	009b      	lsls	r3, r3, #2
 800170a:	4403      	add	r3, r0
 800170c:	3344      	adds	r3, #68	; 0x44
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4419      	add	r1, r3
 8001712:	6878      	ldr	r0, [r7, #4]
 8001714:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001716:	4613      	mov	r3, r2
 8001718:	00db      	lsls	r3, r3, #3
 800171a:	1a9b      	subs	r3, r3, r2
 800171c:	009b      	lsls	r3, r3, #2
 800171e:	4403      	add	r3, r0
 8001720:	3348      	adds	r3, #72	; 0x48
 8001722:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001726:	2b00      	cmp	r3, #0
 8001728:	d113      	bne.n	8001752 <HAL_PCD_IRQHandler+0x31c>
 800172a:	6879      	ldr	r1, [r7, #4]
 800172c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800172e:	4613      	mov	r3, r2
 8001730:	00db      	lsls	r3, r3, #3
 8001732:	1a9b      	subs	r3, r3, r2
 8001734:	009b      	lsls	r3, r3, #2
 8001736:	440b      	add	r3, r1
 8001738:	3350      	adds	r3, #80	; 0x50
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d108      	bne.n	8001752 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6818      	ldr	r0, [r3, #0]
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800174a:	461a      	mov	r2, r3
 800174c:	2101      	movs	r1, #1
 800174e:	f003 fa05 	bl	8004b5c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001754:	b2db      	uxtb	r3, r3
 8001756:	4619      	mov	r1, r3
 8001758:	6878      	ldr	r0, [r7, #4]
 800175a:	f005 f9a6 	bl	8006aaa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	f003 0308 	and.w	r3, r3, #8
 8001764:	2b00      	cmp	r3, #0
 8001766:	d008      	beq.n	800177a <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800176a:	015a      	lsls	r2, r3, #5
 800176c:	69fb      	ldr	r3, [r7, #28]
 800176e:	4413      	add	r3, r2
 8001770:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001774:	461a      	mov	r2, r3
 8001776:	2308      	movs	r3, #8
 8001778:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	f003 0310 	and.w	r3, r3, #16
 8001780:	2b00      	cmp	r3, #0
 8001782:	d008      	beq.n	8001796 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001786:	015a      	lsls	r2, r3, #5
 8001788:	69fb      	ldr	r3, [r7, #28]
 800178a:	4413      	add	r3, r2
 800178c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001790:	461a      	mov	r2, r3
 8001792:	2310      	movs	r3, #16
 8001794:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800179c:	2b00      	cmp	r3, #0
 800179e:	d008      	beq.n	80017b2 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80017a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a2:	015a      	lsls	r2, r3, #5
 80017a4:	69fb      	ldr	r3, [r7, #28]
 80017a6:	4413      	add	r3, r2
 80017a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80017ac:	461a      	mov	r2, r3
 80017ae:	2340      	movs	r3, #64	; 0x40
 80017b0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80017b2:	693b      	ldr	r3, [r7, #16]
 80017b4:	f003 0302 	and.w	r3, r3, #2
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d008      	beq.n	80017ce <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80017bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017be:	015a      	lsls	r2, r3, #5
 80017c0:	69fb      	ldr	r3, [r7, #28]
 80017c2:	4413      	add	r3, r2
 80017c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80017c8:	461a      	mov	r2, r3
 80017ca:	2302      	movs	r3, #2
 80017cc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80017ce:	693b      	ldr	r3, [r7, #16]
 80017d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d003      	beq.n	80017e0 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80017d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80017da:	6878      	ldr	r0, [r7, #4]
 80017dc:	f000 fc1b 	bl	8002016 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80017e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e2:	3301      	adds	r3, #1
 80017e4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80017e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017e8:	085b      	lsrs	r3, r3, #1
 80017ea:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80017ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	f47f af49 	bne.w	8001686 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4618      	mov	r0, r3
 80017fa:	f003 f8ea 	bl	80049d2 <USB_ReadInterrupts>
 80017fe:	4603      	mov	r3, r0
 8001800:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001804:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001808:	d122      	bne.n	8001850 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800180a:	69fb      	ldr	r3, [r7, #28]
 800180c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	69fa      	ldr	r2, [r7, #28]
 8001814:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001818:	f023 0301 	bic.w	r3, r3, #1
 800181c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8001824:	2b01      	cmp	r3, #1
 8001826:	d108      	bne.n	800183a <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2200      	movs	r2, #0
 800182c:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001830:	2100      	movs	r1, #0
 8001832:	6878      	ldr	r0, [r7, #4]
 8001834:	f000 fe26 	bl	8002484 <HAL_PCDEx_LPM_Callback>
 8001838:	e002      	b.n	8001840 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800183a:	6878      	ldr	r0, [r7, #4]
 800183c:	f005 f9a2 	bl	8006b84 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	695a      	ldr	r2, [r3, #20]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800184e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4618      	mov	r0, r3
 8001856:	f003 f8bc 	bl	80049d2 <USB_ReadInterrupts>
 800185a:	4603      	mov	r3, r0
 800185c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001860:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001864:	d112      	bne.n	800188c <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001866:	69fb      	ldr	r3, [r7, #28]
 8001868:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800186c:	689b      	ldr	r3, [r3, #8]
 800186e:	f003 0301 	and.w	r3, r3, #1
 8001872:	2b01      	cmp	r3, #1
 8001874:	d102      	bne.n	800187c <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001876:	6878      	ldr	r0, [r7, #4]
 8001878:	f005 f95e 	bl	8006b38 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	695a      	ldr	r2, [r3, #20]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800188a:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4618      	mov	r0, r3
 8001892:	f003 f89e 	bl	80049d2 <USB_ReadInterrupts>
 8001896:	4603      	mov	r3, r0
 8001898:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800189c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80018a0:	f040 80c7 	bne.w	8001a32 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80018a4:	69fb      	ldr	r3, [r7, #28]
 80018a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	69fa      	ldr	r2, [r7, #28]
 80018ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80018b2:	f023 0301 	bic.w	r3, r3, #1
 80018b6:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	2110      	movs	r1, #16
 80018be:	4618      	mov	r0, r3
 80018c0:	f002 f938 	bl	8003b34 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018c4:	2300      	movs	r3, #0
 80018c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018c8:	e056      	b.n	8001978 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80018ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018cc:	015a      	lsls	r2, r3, #5
 80018ce:	69fb      	ldr	r3, [r7, #28]
 80018d0:	4413      	add	r3, r2
 80018d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80018d6:	461a      	mov	r2, r3
 80018d8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80018dc:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80018de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018e0:	015a      	lsls	r2, r3, #5
 80018e2:	69fb      	ldr	r3, [r7, #28]
 80018e4:	4413      	add	r3, r2
 80018e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80018ee:	0151      	lsls	r1, r2, #5
 80018f0:	69fa      	ldr	r2, [r7, #28]
 80018f2:	440a      	add	r2, r1
 80018f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80018f8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80018fc:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80018fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001900:	015a      	lsls	r2, r3, #5
 8001902:	69fb      	ldr	r3, [r7, #28]
 8001904:	4413      	add	r3, r2
 8001906:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800190e:	0151      	lsls	r1, r2, #5
 8001910:	69fa      	ldr	r2, [r7, #28]
 8001912:	440a      	add	r2, r1
 8001914:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001918:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800191c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800191e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001920:	015a      	lsls	r2, r3, #5
 8001922:	69fb      	ldr	r3, [r7, #28]
 8001924:	4413      	add	r3, r2
 8001926:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800192a:	461a      	mov	r2, r3
 800192c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001930:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001934:	015a      	lsls	r2, r3, #5
 8001936:	69fb      	ldr	r3, [r7, #28]
 8001938:	4413      	add	r3, r2
 800193a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001942:	0151      	lsls	r1, r2, #5
 8001944:	69fa      	ldr	r2, [r7, #28]
 8001946:	440a      	add	r2, r1
 8001948:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800194c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001950:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001954:	015a      	lsls	r2, r3, #5
 8001956:	69fb      	ldr	r3, [r7, #28]
 8001958:	4413      	add	r3, r2
 800195a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001962:	0151      	lsls	r1, r2, #5
 8001964:	69fa      	ldr	r2, [r7, #28]
 8001966:	440a      	add	r2, r1
 8001968:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800196c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001970:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001974:	3301      	adds	r3, #1
 8001976:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800197e:	429a      	cmp	r2, r3
 8001980:	d3a3      	bcc.n	80018ca <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001982:	69fb      	ldr	r3, [r7, #28]
 8001984:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001988:	69db      	ldr	r3, [r3, #28]
 800198a:	69fa      	ldr	r2, [r7, #28]
 800198c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001990:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001994:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199a:	2b00      	cmp	r3, #0
 800199c:	d016      	beq.n	80019cc <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800199e:	69fb      	ldr	r3, [r7, #28]
 80019a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80019a8:	69fa      	ldr	r2, [r7, #28]
 80019aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80019ae:	f043 030b 	orr.w	r3, r3, #11
 80019b2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80019b6:	69fb      	ldr	r3, [r7, #28]
 80019b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019be:	69fa      	ldr	r2, [r7, #28]
 80019c0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80019c4:	f043 030b 	orr.w	r3, r3, #11
 80019c8:	6453      	str	r3, [r2, #68]	; 0x44
 80019ca:	e015      	b.n	80019f8 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80019cc:	69fb      	ldr	r3, [r7, #28]
 80019ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019d2:	695b      	ldr	r3, [r3, #20]
 80019d4:	69fa      	ldr	r2, [r7, #28]
 80019d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80019da:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80019de:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80019e2:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80019e4:	69fb      	ldr	r3, [r7, #28]
 80019e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019ea:	691b      	ldr	r3, [r3, #16]
 80019ec:	69fa      	ldr	r2, [r7, #28]
 80019ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80019f2:	f043 030b 	orr.w	r3, r3, #11
 80019f6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80019f8:	69fb      	ldr	r3, [r7, #28]
 80019fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	69fa      	ldr	r2, [r7, #28]
 8001a02:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a06:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001a0a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6818      	ldr	r0, [r3, #0]
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	691b      	ldr	r3, [r3, #16]
 8001a14:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001a1c:	461a      	mov	r2, r3
 8001a1e:	f003 f89d 	bl	8004b5c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	695a      	ldr	r2, [r3, #20]
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001a30:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4618      	mov	r0, r3
 8001a38:	f002 ffcb 	bl	80049d2 <USB_ReadInterrupts>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a46:	d124      	bne.n	8001a92 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f003 f861 	bl	8004b14 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4618      	mov	r0, r3
 8001a58:	f002 f8c9 	bl	8003bee <USB_GetDevSpeed>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	461a      	mov	r2, r3
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681c      	ldr	r4, [r3, #0]
 8001a68:	f001 f93c 	bl	8002ce4 <HAL_RCC_GetHCLKFreq>
 8001a6c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001a72:	b2db      	uxtb	r3, r3
 8001a74:	461a      	mov	r2, r3
 8001a76:	4620      	mov	r0, r4
 8001a78:	f001 fde8 	bl	800364c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001a7c:	6878      	ldr	r0, [r7, #4]
 8001a7e:	f005 f83c 	bl	8006afa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	695a      	ldr	r2, [r3, #20]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001a90:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4618      	mov	r0, r3
 8001a98:	f002 ff9b 	bl	80049d2 <USB_ReadInterrupts>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	f003 0308 	and.w	r3, r3, #8
 8001aa2:	2b08      	cmp	r3, #8
 8001aa4:	d10a      	bne.n	8001abc <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001aa6:	6878      	ldr	r0, [r7, #4]
 8001aa8:	f005 f819 	bl	8006ade <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	695a      	ldr	r2, [r3, #20]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f002 0208 	and.w	r2, r2, #8
 8001aba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f002 ff86 	bl	80049d2 <USB_ReadInterrupts>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001acc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001ad0:	d10f      	bne.n	8001af2 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad8:	b2db      	uxtb	r3, r3
 8001ada:	4619      	mov	r1, r3
 8001adc:	6878      	ldr	r0, [r7, #4]
 8001ade:	f005 f871 	bl	8006bc4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	695a      	ldr	r2, [r3, #20]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001af0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4618      	mov	r0, r3
 8001af8:	f002 ff6b 	bl	80049d2 <USB_ReadInterrupts>
 8001afc:	4603      	mov	r3, r0
 8001afe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b02:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001b06:	d10f      	bne.n	8001b28 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b0e:	b2db      	uxtb	r3, r3
 8001b10:	4619      	mov	r1, r3
 8001b12:	6878      	ldr	r0, [r7, #4]
 8001b14:	f005 f844 	bl	8006ba0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	695a      	ldr	r2, [r3, #20]
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001b26:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f002 ff50 	bl	80049d2 <USB_ReadInterrupts>
 8001b32:	4603      	mov	r3, r0
 8001b34:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001b38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b3c:	d10a      	bne.n	8001b54 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001b3e:	6878      	ldr	r0, [r7, #4]
 8001b40:	f005 f852 	bl	8006be8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	695a      	ldr	r2, [r3, #20]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001b52:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f002 ff3a 	bl	80049d2 <USB_ReadInterrupts>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	f003 0304 	and.w	r3, r3, #4
 8001b64:	2b04      	cmp	r3, #4
 8001b66:	d115      	bne.n	8001b94 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001b70:	69bb      	ldr	r3, [r7, #24]
 8001b72:	f003 0304 	and.w	r3, r3, #4
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d002      	beq.n	8001b80 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001b7a:	6878      	ldr	r0, [r7, #4]
 8001b7c:	f005 f842 	bl	8006c04 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	6859      	ldr	r1, [r3, #4]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	69ba      	ldr	r2, [r7, #24]
 8001b8c:	430a      	orrs	r2, r1
 8001b8e:	605a      	str	r2, [r3, #4]
 8001b90:	e000      	b.n	8001b94 <HAL_PCD_IRQHandler+0x75e>
      return;
 8001b92:	bf00      	nop
    }
  }
}
 8001b94:	3734      	adds	r7, #52	; 0x34
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd90      	pop	{r4, r7, pc}

08001b9a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001b9a:	b580      	push	{r7, lr}
 8001b9c:	b082      	sub	sp, #8
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	6078      	str	r0, [r7, #4]
 8001ba2:	460b      	mov	r3, r1
 8001ba4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001bac:	2b01      	cmp	r3, #1
 8001bae:	d101      	bne.n	8001bb4 <HAL_PCD_SetAddress+0x1a>
 8001bb0:	2302      	movs	r3, #2
 8001bb2:	e013      	b.n	8001bdc <HAL_PCD_SetAddress+0x42>
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	78fa      	ldrb	r2, [r7, #3]
 8001bc0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	78fa      	ldrb	r2, [r7, #3]
 8001bca:	4611      	mov	r1, r2
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f002 fe98 	bl	8004902 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001bda:	2300      	movs	r3, #0
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	3708      	adds	r7, #8
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}

08001be4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b084      	sub	sp, #16
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
 8001bec:	4608      	mov	r0, r1
 8001bee:	4611      	mov	r1, r2
 8001bf0:	461a      	mov	r2, r3
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	70fb      	strb	r3, [r7, #3]
 8001bf6:	460b      	mov	r3, r1
 8001bf8:	803b      	strh	r3, [r7, #0]
 8001bfa:	4613      	mov	r3, r2
 8001bfc:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001c02:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	da0f      	bge.n	8001c2a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c0a:	78fb      	ldrb	r3, [r7, #3]
 8001c0c:	f003 020f 	and.w	r2, r3, #15
 8001c10:	4613      	mov	r3, r2
 8001c12:	00db      	lsls	r3, r3, #3
 8001c14:	1a9b      	subs	r3, r3, r2
 8001c16:	009b      	lsls	r3, r3, #2
 8001c18:	3338      	adds	r3, #56	; 0x38
 8001c1a:	687a      	ldr	r2, [r7, #4]
 8001c1c:	4413      	add	r3, r2
 8001c1e:	3304      	adds	r3, #4
 8001c20:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	2201      	movs	r2, #1
 8001c26:	705a      	strb	r2, [r3, #1]
 8001c28:	e00f      	b.n	8001c4a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c2a:	78fb      	ldrb	r3, [r7, #3]
 8001c2c:	f003 020f 	and.w	r2, r3, #15
 8001c30:	4613      	mov	r3, r2
 8001c32:	00db      	lsls	r3, r3, #3
 8001c34:	1a9b      	subs	r3, r3, r2
 8001c36:	009b      	lsls	r3, r3, #2
 8001c38:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001c3c:	687a      	ldr	r2, [r7, #4]
 8001c3e:	4413      	add	r3, r2
 8001c40:	3304      	adds	r3, #4
 8001c42:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	2200      	movs	r2, #0
 8001c48:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001c4a:	78fb      	ldrb	r3, [r7, #3]
 8001c4c:	f003 030f 	and.w	r3, r3, #15
 8001c50:	b2da      	uxtb	r2, r3
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001c56:	883a      	ldrh	r2, [r7, #0]
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	78ba      	ldrb	r2, [r7, #2]
 8001c60:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	785b      	ldrb	r3, [r3, #1]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d004      	beq.n	8001c74 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	781b      	ldrb	r3, [r3, #0]
 8001c6e:	b29a      	uxth	r2, r3
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001c74:	78bb      	ldrb	r3, [r7, #2]
 8001c76:	2b02      	cmp	r3, #2
 8001c78:	d102      	bne.n	8001c80 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001c86:	2b01      	cmp	r3, #1
 8001c88:	d101      	bne.n	8001c8e <HAL_PCD_EP_Open+0xaa>
 8001c8a:	2302      	movs	r3, #2
 8001c8c:	e00e      	b.n	8001cac <HAL_PCD_EP_Open+0xc8>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2201      	movs	r2, #1
 8001c92:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	68f9      	ldr	r1, [r7, #12]
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f001 ffcb 	bl	8003c38 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8001caa:	7afb      	ldrb	r3, [r7, #11]
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	3710      	adds	r7, #16
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}

08001cb4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b084      	sub	sp, #16
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
 8001cbc:	460b      	mov	r3, r1
 8001cbe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001cc0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	da0f      	bge.n	8001ce8 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001cc8:	78fb      	ldrb	r3, [r7, #3]
 8001cca:	f003 020f 	and.w	r2, r3, #15
 8001cce:	4613      	mov	r3, r2
 8001cd0:	00db      	lsls	r3, r3, #3
 8001cd2:	1a9b      	subs	r3, r3, r2
 8001cd4:	009b      	lsls	r3, r3, #2
 8001cd6:	3338      	adds	r3, #56	; 0x38
 8001cd8:	687a      	ldr	r2, [r7, #4]
 8001cda:	4413      	add	r3, r2
 8001cdc:	3304      	adds	r3, #4
 8001cde:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	705a      	strb	r2, [r3, #1]
 8001ce6:	e00f      	b.n	8001d08 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ce8:	78fb      	ldrb	r3, [r7, #3]
 8001cea:	f003 020f 	and.w	r2, r3, #15
 8001cee:	4613      	mov	r3, r2
 8001cf0:	00db      	lsls	r3, r3, #3
 8001cf2:	1a9b      	subs	r3, r3, r2
 8001cf4:	009b      	lsls	r3, r3, #2
 8001cf6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001cfa:	687a      	ldr	r2, [r7, #4]
 8001cfc:	4413      	add	r3, r2
 8001cfe:	3304      	adds	r3, #4
 8001d00:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	2200      	movs	r2, #0
 8001d06:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001d08:	78fb      	ldrb	r3, [r7, #3]
 8001d0a:	f003 030f 	and.w	r3, r3, #15
 8001d0e:	b2da      	uxtb	r2, r3
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001d1a:	2b01      	cmp	r3, #1
 8001d1c:	d101      	bne.n	8001d22 <HAL_PCD_EP_Close+0x6e>
 8001d1e:	2302      	movs	r3, #2
 8001d20:	e00e      	b.n	8001d40 <HAL_PCD_EP_Close+0x8c>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2201      	movs	r2, #1
 8001d26:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	68f9      	ldr	r1, [r7, #12]
 8001d30:	4618      	mov	r0, r3
 8001d32:	f002 f809 	bl	8003d48 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001d3e:	2300      	movs	r3, #0
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	3710      	adds	r7, #16
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}

08001d48 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b086      	sub	sp, #24
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	60f8      	str	r0, [r7, #12]
 8001d50:	607a      	str	r2, [r7, #4]
 8001d52:	603b      	str	r3, [r7, #0]
 8001d54:	460b      	mov	r3, r1
 8001d56:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d58:	7afb      	ldrb	r3, [r7, #11]
 8001d5a:	f003 020f 	and.w	r2, r3, #15
 8001d5e:	4613      	mov	r3, r2
 8001d60:	00db      	lsls	r3, r3, #3
 8001d62:	1a9b      	subs	r3, r3, r2
 8001d64:	009b      	lsls	r3, r3, #2
 8001d66:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001d6a:	68fa      	ldr	r2, [r7, #12]
 8001d6c:	4413      	add	r3, r2
 8001d6e:	3304      	adds	r3, #4
 8001d70:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001d72:	697b      	ldr	r3, [r7, #20]
 8001d74:	687a      	ldr	r2, [r7, #4]
 8001d76:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	683a      	ldr	r2, [r7, #0]
 8001d7c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	2200      	movs	r2, #0
 8001d82:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	2200      	movs	r2, #0
 8001d88:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d8a:	7afb      	ldrb	r3, [r7, #11]
 8001d8c:	f003 030f 	and.w	r3, r3, #15
 8001d90:	b2da      	uxtb	r2, r3
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	691b      	ldr	r3, [r3, #16]
 8001d9a:	2b01      	cmp	r3, #1
 8001d9c:	d102      	bne.n	8001da4 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001d9e:	687a      	ldr	r2, [r7, #4]
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001da4:	7afb      	ldrb	r3, [r7, #11]
 8001da6:	f003 030f 	and.w	r3, r3, #15
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d109      	bne.n	8001dc2 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	6818      	ldr	r0, [r3, #0]
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	691b      	ldr	r3, [r3, #16]
 8001db6:	b2db      	uxtb	r3, r3
 8001db8:	461a      	mov	r2, r3
 8001dba:	6979      	ldr	r1, [r7, #20]
 8001dbc:	f002 fae4 	bl	8004388 <USB_EP0StartXfer>
 8001dc0:	e008      	b.n	8001dd4 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	6818      	ldr	r0, [r3, #0]
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	691b      	ldr	r3, [r3, #16]
 8001dca:	b2db      	uxtb	r3, r3
 8001dcc:	461a      	mov	r2, r3
 8001dce:	6979      	ldr	r1, [r7, #20]
 8001dd0:	f002 f896 	bl	8003f00 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001dd4:	2300      	movs	r3, #0
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	3718      	adds	r7, #24
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}

08001dde <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001dde:	b480      	push	{r7}
 8001de0:	b083      	sub	sp, #12
 8001de2:	af00      	add	r7, sp, #0
 8001de4:	6078      	str	r0, [r7, #4]
 8001de6:	460b      	mov	r3, r1
 8001de8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001dea:	78fb      	ldrb	r3, [r7, #3]
 8001dec:	f003 020f 	and.w	r2, r3, #15
 8001df0:	6879      	ldr	r1, [r7, #4]
 8001df2:	4613      	mov	r3, r2
 8001df4:	00db      	lsls	r3, r3, #3
 8001df6:	1a9b      	subs	r3, r3, r2
 8001df8:	009b      	lsls	r3, r3, #2
 8001dfa:	440b      	add	r3, r1
 8001dfc:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001e00:	681b      	ldr	r3, [r3, #0]
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	370c      	adds	r7, #12
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr

08001e0e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001e0e:	b580      	push	{r7, lr}
 8001e10:	b086      	sub	sp, #24
 8001e12:	af00      	add	r7, sp, #0
 8001e14:	60f8      	str	r0, [r7, #12]
 8001e16:	607a      	str	r2, [r7, #4]
 8001e18:	603b      	str	r3, [r7, #0]
 8001e1a:	460b      	mov	r3, r1
 8001e1c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e1e:	7afb      	ldrb	r3, [r7, #11]
 8001e20:	f003 020f 	and.w	r2, r3, #15
 8001e24:	4613      	mov	r3, r2
 8001e26:	00db      	lsls	r3, r3, #3
 8001e28:	1a9b      	subs	r3, r3, r2
 8001e2a:	009b      	lsls	r3, r3, #2
 8001e2c:	3338      	adds	r3, #56	; 0x38
 8001e2e:	68fa      	ldr	r2, [r7, #12]
 8001e30:	4413      	add	r3, r2
 8001e32:	3304      	adds	r3, #4
 8001e34:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	687a      	ldr	r2, [r7, #4]
 8001e3a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	683a      	ldr	r2, [r7, #0]
 8001e40:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	2200      	movs	r2, #0
 8001e46:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e4e:	7afb      	ldrb	r3, [r7, #11]
 8001e50:	f003 030f 	and.w	r3, r3, #15
 8001e54:	b2da      	uxtb	r2, r3
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	691b      	ldr	r3, [r3, #16]
 8001e5e:	2b01      	cmp	r3, #1
 8001e60:	d102      	bne.n	8001e68 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001e62:	687a      	ldr	r2, [r7, #4]
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001e68:	7afb      	ldrb	r3, [r7, #11]
 8001e6a:	f003 030f 	and.w	r3, r3, #15
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d109      	bne.n	8001e86 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	6818      	ldr	r0, [r3, #0]
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	691b      	ldr	r3, [r3, #16]
 8001e7a:	b2db      	uxtb	r3, r3
 8001e7c:	461a      	mov	r2, r3
 8001e7e:	6979      	ldr	r1, [r7, #20]
 8001e80:	f002 fa82 	bl	8004388 <USB_EP0StartXfer>
 8001e84:	e008      	b.n	8001e98 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	6818      	ldr	r0, [r3, #0]
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	691b      	ldr	r3, [r3, #16]
 8001e8e:	b2db      	uxtb	r3, r3
 8001e90:	461a      	mov	r2, r3
 8001e92:	6979      	ldr	r1, [r7, #20]
 8001e94:	f002 f834 	bl	8003f00 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001e98:	2300      	movs	r3, #0
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	3718      	adds	r7, #24
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}

08001ea2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ea2:	b580      	push	{r7, lr}
 8001ea4:	b084      	sub	sp, #16
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	6078      	str	r0, [r7, #4]
 8001eaa:	460b      	mov	r3, r1
 8001eac:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001eae:	78fb      	ldrb	r3, [r7, #3]
 8001eb0:	f003 020f 	and.w	r2, r3, #15
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	d901      	bls.n	8001ec0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	e050      	b.n	8001f62 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001ec0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	da0f      	bge.n	8001ee8 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ec8:	78fb      	ldrb	r3, [r7, #3]
 8001eca:	f003 020f 	and.w	r2, r3, #15
 8001ece:	4613      	mov	r3, r2
 8001ed0:	00db      	lsls	r3, r3, #3
 8001ed2:	1a9b      	subs	r3, r3, r2
 8001ed4:	009b      	lsls	r3, r3, #2
 8001ed6:	3338      	adds	r3, #56	; 0x38
 8001ed8:	687a      	ldr	r2, [r7, #4]
 8001eda:	4413      	add	r3, r2
 8001edc:	3304      	adds	r3, #4
 8001ede:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	705a      	strb	r2, [r3, #1]
 8001ee6:	e00d      	b.n	8001f04 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001ee8:	78fa      	ldrb	r2, [r7, #3]
 8001eea:	4613      	mov	r3, r2
 8001eec:	00db      	lsls	r3, r3, #3
 8001eee:	1a9b      	subs	r3, r3, r2
 8001ef0:	009b      	lsls	r3, r3, #2
 8001ef2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001ef6:	687a      	ldr	r2, [r7, #4]
 8001ef8:	4413      	add	r3, r2
 8001efa:	3304      	adds	r3, #4
 8001efc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	2200      	movs	r2, #0
 8001f02:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	2201      	movs	r2, #1
 8001f08:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f0a:	78fb      	ldrb	r3, [r7, #3]
 8001f0c:	f003 030f 	and.w	r3, r3, #15
 8001f10:	b2da      	uxtb	r2, r3
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001f1c:	2b01      	cmp	r3, #1
 8001f1e:	d101      	bne.n	8001f24 <HAL_PCD_EP_SetStall+0x82>
 8001f20:	2302      	movs	r3, #2
 8001f22:	e01e      	b.n	8001f62 <HAL_PCD_EP_SetStall+0xc0>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2201      	movs	r2, #1
 8001f28:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	68f9      	ldr	r1, [r7, #12]
 8001f32:	4618      	mov	r0, r3
 8001f34:	f002 fc11 	bl	800475a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001f38:	78fb      	ldrb	r3, [r7, #3]
 8001f3a:	f003 030f 	and.w	r3, r3, #15
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d10a      	bne.n	8001f58 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6818      	ldr	r0, [r3, #0]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	691b      	ldr	r3, [r3, #16]
 8001f4a:	b2d9      	uxtb	r1, r3
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001f52:	461a      	mov	r2, r3
 8001f54:	f002 fe02 	bl	8004b5c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001f60:	2300      	movs	r3, #0
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	3710      	adds	r7, #16
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}

08001f6a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f6a:	b580      	push	{r7, lr}
 8001f6c:	b084      	sub	sp, #16
 8001f6e:	af00      	add	r7, sp, #0
 8001f70:	6078      	str	r0, [r7, #4]
 8001f72:	460b      	mov	r3, r1
 8001f74:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001f76:	78fb      	ldrb	r3, [r7, #3]
 8001f78:	f003 020f 	and.w	r2, r3, #15
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	429a      	cmp	r2, r3
 8001f82:	d901      	bls.n	8001f88 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001f84:	2301      	movs	r3, #1
 8001f86:	e042      	b.n	800200e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001f88:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	da0f      	bge.n	8001fb0 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f90:	78fb      	ldrb	r3, [r7, #3]
 8001f92:	f003 020f 	and.w	r2, r3, #15
 8001f96:	4613      	mov	r3, r2
 8001f98:	00db      	lsls	r3, r3, #3
 8001f9a:	1a9b      	subs	r3, r3, r2
 8001f9c:	009b      	lsls	r3, r3, #2
 8001f9e:	3338      	adds	r3, #56	; 0x38
 8001fa0:	687a      	ldr	r2, [r7, #4]
 8001fa2:	4413      	add	r3, r2
 8001fa4:	3304      	adds	r3, #4
 8001fa6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	2201      	movs	r2, #1
 8001fac:	705a      	strb	r2, [r3, #1]
 8001fae:	e00f      	b.n	8001fd0 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001fb0:	78fb      	ldrb	r3, [r7, #3]
 8001fb2:	f003 020f 	and.w	r2, r3, #15
 8001fb6:	4613      	mov	r3, r2
 8001fb8:	00db      	lsls	r3, r3, #3
 8001fba:	1a9b      	subs	r3, r3, r2
 8001fbc:	009b      	lsls	r3, r3, #2
 8001fbe:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001fc2:	687a      	ldr	r2, [r7, #4]
 8001fc4:	4413      	add	r3, r2
 8001fc6:	3304      	adds	r3, #4
 8001fc8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	2200      	movs	r2, #0
 8001fce:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001fd6:	78fb      	ldrb	r3, [r7, #3]
 8001fd8:	f003 030f 	and.w	r3, r3, #15
 8001fdc:	b2da      	uxtb	r2, r3
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001fe8:	2b01      	cmp	r3, #1
 8001fea:	d101      	bne.n	8001ff0 <HAL_PCD_EP_ClrStall+0x86>
 8001fec:	2302      	movs	r3, #2
 8001fee:	e00e      	b.n	800200e <HAL_PCD_EP_ClrStall+0xa4>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	68f9      	ldr	r1, [r7, #12]
 8001ffe:	4618      	mov	r0, r3
 8002000:	f002 fc19 	bl	8004836 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2200      	movs	r2, #0
 8002008:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800200c:	2300      	movs	r3, #0
}
 800200e:	4618      	mov	r0, r3
 8002010:	3710      	adds	r7, #16
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}

08002016 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002016:	b580      	push	{r7, lr}
 8002018:	b08a      	sub	sp, #40	; 0x28
 800201a:	af02      	add	r7, sp, #8
 800201c:	6078      	str	r0, [r7, #4]
 800201e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800202a:	683a      	ldr	r2, [r7, #0]
 800202c:	4613      	mov	r3, r2
 800202e:	00db      	lsls	r3, r3, #3
 8002030:	1a9b      	subs	r3, r3, r2
 8002032:	009b      	lsls	r3, r3, #2
 8002034:	3338      	adds	r3, #56	; 0x38
 8002036:	687a      	ldr	r2, [r7, #4]
 8002038:	4413      	add	r3, r2
 800203a:	3304      	adds	r3, #4
 800203c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	699a      	ldr	r2, [r3, #24]
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	695b      	ldr	r3, [r3, #20]
 8002046:	429a      	cmp	r2, r3
 8002048:	d901      	bls.n	800204e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	e06c      	b.n	8002128 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	695a      	ldr	r2, [r3, #20]
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	699b      	ldr	r3, [r3, #24]
 8002056:	1ad3      	subs	r3, r2, r3
 8002058:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	689b      	ldr	r3, [r3, #8]
 800205e:	69fa      	ldr	r2, [r7, #28]
 8002060:	429a      	cmp	r2, r3
 8002062:	d902      	bls.n	800206a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	689b      	ldr	r3, [r3, #8]
 8002068:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800206a:	69fb      	ldr	r3, [r7, #28]
 800206c:	3303      	adds	r3, #3
 800206e:	089b      	lsrs	r3, r3, #2
 8002070:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002072:	e02b      	b.n	80020cc <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	695a      	ldr	r2, [r3, #20]
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	699b      	ldr	r3, [r3, #24]
 800207c:	1ad3      	subs	r3, r2, r3
 800207e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	689b      	ldr	r3, [r3, #8]
 8002084:	69fa      	ldr	r2, [r7, #28]
 8002086:	429a      	cmp	r2, r3
 8002088:	d902      	bls.n	8002090 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002090:	69fb      	ldr	r3, [r7, #28]
 8002092:	3303      	adds	r3, #3
 8002094:	089b      	lsrs	r3, r3, #2
 8002096:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	68d9      	ldr	r1, [r3, #12]
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	b2da      	uxtb	r2, r3
 80020a0:	69fb      	ldr	r3, [r7, #28]
 80020a2:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80020a8:	b2db      	uxtb	r3, r3
 80020aa:	9300      	str	r3, [sp, #0]
 80020ac:	4603      	mov	r3, r0
 80020ae:	6978      	ldr	r0, [r7, #20]
 80020b0:	f002 fabd 	bl	800462e <USB_WritePacket>

    ep->xfer_buff  += len;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	68da      	ldr	r2, [r3, #12]
 80020b8:	69fb      	ldr	r3, [r7, #28]
 80020ba:	441a      	add	r2, r3
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	699a      	ldr	r2, [r3, #24]
 80020c4:	69fb      	ldr	r3, [r7, #28]
 80020c6:	441a      	add	r2, r3
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	015a      	lsls	r2, r3, #5
 80020d0:	693b      	ldr	r3, [r7, #16]
 80020d2:	4413      	add	r3, r2
 80020d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80020d8:	699b      	ldr	r3, [r3, #24]
 80020da:	b29b      	uxth	r3, r3
 80020dc:	69ba      	ldr	r2, [r7, #24]
 80020de:	429a      	cmp	r2, r3
 80020e0:	d809      	bhi.n	80020f6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	699a      	ldr	r2, [r3, #24]
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80020ea:	429a      	cmp	r2, r3
 80020ec:	d203      	bcs.n	80020f6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	695b      	ldr	r3, [r3, #20]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d1be      	bne.n	8002074 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	695a      	ldr	r2, [r3, #20]
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	699b      	ldr	r3, [r3, #24]
 80020fe:	429a      	cmp	r2, r3
 8002100:	d811      	bhi.n	8002126 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	f003 030f 	and.w	r3, r3, #15
 8002108:	2201      	movs	r2, #1
 800210a:	fa02 f303 	lsl.w	r3, r2, r3
 800210e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002116:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	43db      	mvns	r3, r3
 800211c:	6939      	ldr	r1, [r7, #16]
 800211e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002122:	4013      	ands	r3, r2
 8002124:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002126:	2300      	movs	r3, #0
}
 8002128:	4618      	mov	r0, r3
 800212a:	3720      	adds	r7, #32
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}

08002130 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b086      	sub	sp, #24
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
 8002138:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	333c      	adds	r3, #60	; 0x3c
 8002148:	3304      	adds	r3, #4
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	015a      	lsls	r2, r3, #5
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	4413      	add	r3, r2
 8002156:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	691b      	ldr	r3, [r3, #16]
 8002162:	2b01      	cmp	r3, #1
 8002164:	f040 80a0 	bne.w	80022a8 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	f003 0308 	and.w	r3, r3, #8
 800216e:	2b00      	cmp	r3, #0
 8002170:	d015      	beq.n	800219e <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	4a72      	ldr	r2, [pc, #456]	; (8002340 <PCD_EP_OutXfrComplete_int+0x210>)
 8002176:	4293      	cmp	r3, r2
 8002178:	f240 80dd 	bls.w	8002336 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002182:	2b00      	cmp	r3, #0
 8002184:	f000 80d7 	beq.w	8002336 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	015a      	lsls	r2, r3, #5
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	4413      	add	r3, r2
 8002190:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002194:	461a      	mov	r2, r3
 8002196:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800219a:	6093      	str	r3, [r2, #8]
 800219c:	e0cb      	b.n	8002336 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800219e:	68bb      	ldr	r3, [r7, #8]
 80021a0:	f003 0320 	and.w	r3, r3, #32
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d009      	beq.n	80021bc <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	015a      	lsls	r2, r3, #5
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	4413      	add	r3, r2
 80021b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021b4:	461a      	mov	r2, r3
 80021b6:	2320      	movs	r3, #32
 80021b8:	6093      	str	r3, [r2, #8]
 80021ba:	e0bc      	b.n	8002336 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	f040 80b7 	bne.w	8002336 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	4a5d      	ldr	r2, [pc, #372]	; (8002340 <PCD_EP_OutXfrComplete_int+0x210>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d90f      	bls.n	80021f0 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d00a      	beq.n	80021f0 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	015a      	lsls	r2, r3, #5
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	4413      	add	r3, r2
 80021e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021e6:	461a      	mov	r2, r3
 80021e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80021ec:	6093      	str	r3, [r2, #8]
 80021ee:	e0a2      	b.n	8002336 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80021f0:	6879      	ldr	r1, [r7, #4]
 80021f2:	683a      	ldr	r2, [r7, #0]
 80021f4:	4613      	mov	r3, r2
 80021f6:	00db      	lsls	r3, r3, #3
 80021f8:	1a9b      	subs	r3, r3, r2
 80021fa:	009b      	lsls	r3, r3, #2
 80021fc:	440b      	add	r3, r1
 80021fe:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002202:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	0159      	lsls	r1, r3, #5
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	440b      	add	r3, r1
 800220c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002210:	691b      	ldr	r3, [r3, #16]
 8002212:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8002216:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8002218:	6878      	ldr	r0, [r7, #4]
 800221a:	683a      	ldr	r2, [r7, #0]
 800221c:	4613      	mov	r3, r2
 800221e:	00db      	lsls	r3, r3, #3
 8002220:	1a9b      	subs	r3, r3, r2
 8002222:	009b      	lsls	r3, r3, #2
 8002224:	4403      	add	r3, r0
 8002226:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800222a:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800222c:	6879      	ldr	r1, [r7, #4]
 800222e:	683a      	ldr	r2, [r7, #0]
 8002230:	4613      	mov	r3, r2
 8002232:	00db      	lsls	r3, r3, #3
 8002234:	1a9b      	subs	r3, r3, r2
 8002236:	009b      	lsls	r3, r3, #2
 8002238:	440b      	add	r3, r1
 800223a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800223e:	6819      	ldr	r1, [r3, #0]
 8002240:	6878      	ldr	r0, [r7, #4]
 8002242:	683a      	ldr	r2, [r7, #0]
 8002244:	4613      	mov	r3, r2
 8002246:	00db      	lsls	r3, r3, #3
 8002248:	1a9b      	subs	r3, r3, r2
 800224a:	009b      	lsls	r3, r3, #2
 800224c:	4403      	add	r3, r0
 800224e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4419      	add	r1, r3
 8002256:	6878      	ldr	r0, [r7, #4]
 8002258:	683a      	ldr	r2, [r7, #0]
 800225a:	4613      	mov	r3, r2
 800225c:	00db      	lsls	r3, r3, #3
 800225e:	1a9b      	subs	r3, r3, r2
 8002260:	009b      	lsls	r3, r3, #2
 8002262:	4403      	add	r3, r0
 8002264:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002268:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d114      	bne.n	800229a <PCD_EP_OutXfrComplete_int+0x16a>
 8002270:	6879      	ldr	r1, [r7, #4]
 8002272:	683a      	ldr	r2, [r7, #0]
 8002274:	4613      	mov	r3, r2
 8002276:	00db      	lsls	r3, r3, #3
 8002278:	1a9b      	subs	r3, r3, r2
 800227a:	009b      	lsls	r3, r3, #2
 800227c:	440b      	add	r3, r1
 800227e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d108      	bne.n	800229a <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6818      	ldr	r0, [r3, #0]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002292:	461a      	mov	r2, r3
 8002294:	2101      	movs	r1, #1
 8002296:	f002 fc61 	bl	8004b5c <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	b2db      	uxtb	r3, r3
 800229e:	4619      	mov	r1, r3
 80022a0:	6878      	ldr	r0, [r7, #4]
 80022a2:	f004 fbe7 	bl	8006a74 <HAL_PCD_DataOutStageCallback>
 80022a6:	e046      	b.n	8002336 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	4a26      	ldr	r2, [pc, #152]	; (8002344 <PCD_EP_OutXfrComplete_int+0x214>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d124      	bne.n	80022fa <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d00a      	beq.n	80022d0 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	015a      	lsls	r2, r3, #5
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	4413      	add	r3, r2
 80022c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022c6:	461a      	mov	r2, r3
 80022c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80022cc:	6093      	str	r3, [r2, #8]
 80022ce:	e032      	b.n	8002336 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	f003 0320 	and.w	r3, r3, #32
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d008      	beq.n	80022ec <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	015a      	lsls	r2, r3, #5
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	4413      	add	r3, r2
 80022e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022e6:	461a      	mov	r2, r3
 80022e8:	2320      	movs	r3, #32
 80022ea:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	b2db      	uxtb	r3, r3
 80022f0:	4619      	mov	r1, r3
 80022f2:	6878      	ldr	r0, [r7, #4]
 80022f4:	f004 fbbe 	bl	8006a74 <HAL_PCD_DataOutStageCallback>
 80022f8:	e01d      	b.n	8002336 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d114      	bne.n	800232a <PCD_EP_OutXfrComplete_int+0x1fa>
 8002300:	6879      	ldr	r1, [r7, #4]
 8002302:	683a      	ldr	r2, [r7, #0]
 8002304:	4613      	mov	r3, r2
 8002306:	00db      	lsls	r3, r3, #3
 8002308:	1a9b      	subs	r3, r3, r2
 800230a:	009b      	lsls	r3, r3, #2
 800230c:	440b      	add	r3, r1
 800230e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d108      	bne.n	800232a <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6818      	ldr	r0, [r3, #0]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002322:	461a      	mov	r2, r3
 8002324:	2100      	movs	r1, #0
 8002326:	f002 fc19 	bl	8004b5c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	b2db      	uxtb	r3, r3
 800232e:	4619      	mov	r1, r3
 8002330:	6878      	ldr	r0, [r7, #4]
 8002332:	f004 fb9f 	bl	8006a74 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002336:	2300      	movs	r3, #0
}
 8002338:	4618      	mov	r0, r3
 800233a:	3718      	adds	r7, #24
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}
 8002340:	4f54300a 	.word	0x4f54300a
 8002344:	4f54310a 	.word	0x4f54310a

08002348 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b086      	sub	sp, #24
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
 8002350:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	333c      	adds	r3, #60	; 0x3c
 8002360:	3304      	adds	r3, #4
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	015a      	lsls	r2, r3, #5
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	4413      	add	r3, r2
 800236e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	4a15      	ldr	r2, [pc, #84]	; (80023d0 <PCD_EP_OutSetupPacket_int+0x88>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d90e      	bls.n	800239c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002384:	2b00      	cmp	r3, #0
 8002386:	d009      	beq.n	800239c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	015a      	lsls	r2, r3, #5
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	4413      	add	r3, r2
 8002390:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002394:	461a      	mov	r2, r3
 8002396:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800239a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800239c:	6878      	ldr	r0, [r7, #4]
 800239e:	f004 fb57 	bl	8006a50 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	4a0a      	ldr	r2, [pc, #40]	; (80023d0 <PCD_EP_OutSetupPacket_int+0x88>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d90c      	bls.n	80023c4 <PCD_EP_OutSetupPacket_int+0x7c>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	691b      	ldr	r3, [r3, #16]
 80023ae:	2b01      	cmp	r3, #1
 80023b0:	d108      	bne.n	80023c4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6818      	ldr	r0, [r3, #0]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80023bc:	461a      	mov	r2, r3
 80023be:	2101      	movs	r1, #1
 80023c0:	f002 fbcc 	bl	8004b5c <USB_EP0_OutStart>
  }

  return HAL_OK;
 80023c4:	2300      	movs	r3, #0
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	3718      	adds	r7, #24
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	4f54300a 	.word	0x4f54300a

080023d4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b085      	sub	sp, #20
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
 80023dc:	460b      	mov	r3, r1
 80023de:	70fb      	strb	r3, [r7, #3]
 80023e0:	4613      	mov	r3, r2
 80023e2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ea:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80023ec:	78fb      	ldrb	r3, [r7, #3]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d107      	bne.n	8002402 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80023f2:	883b      	ldrh	r3, [r7, #0]
 80023f4:	0419      	lsls	r1, r3, #16
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	68ba      	ldr	r2, [r7, #8]
 80023fc:	430a      	orrs	r2, r1
 80023fe:	629a      	str	r2, [r3, #40]	; 0x28
 8002400:	e028      	b.n	8002454 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002408:	0c1b      	lsrs	r3, r3, #16
 800240a:	68ba      	ldr	r2, [r7, #8]
 800240c:	4413      	add	r3, r2
 800240e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002410:	2300      	movs	r3, #0
 8002412:	73fb      	strb	r3, [r7, #15]
 8002414:	e00d      	b.n	8002432 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681a      	ldr	r2, [r3, #0]
 800241a:	7bfb      	ldrb	r3, [r7, #15]
 800241c:	3340      	adds	r3, #64	; 0x40
 800241e:	009b      	lsls	r3, r3, #2
 8002420:	4413      	add	r3, r2
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	0c1b      	lsrs	r3, r3, #16
 8002426:	68ba      	ldr	r2, [r7, #8]
 8002428:	4413      	add	r3, r2
 800242a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800242c:	7bfb      	ldrb	r3, [r7, #15]
 800242e:	3301      	adds	r3, #1
 8002430:	73fb      	strb	r3, [r7, #15]
 8002432:	7bfa      	ldrb	r2, [r7, #15]
 8002434:	78fb      	ldrb	r3, [r7, #3]
 8002436:	3b01      	subs	r3, #1
 8002438:	429a      	cmp	r2, r3
 800243a:	d3ec      	bcc.n	8002416 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800243c:	883b      	ldrh	r3, [r7, #0]
 800243e:	0418      	lsls	r0, r3, #16
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6819      	ldr	r1, [r3, #0]
 8002444:	78fb      	ldrb	r3, [r7, #3]
 8002446:	3b01      	subs	r3, #1
 8002448:	68ba      	ldr	r2, [r7, #8]
 800244a:	4302      	orrs	r2, r0
 800244c:	3340      	adds	r3, #64	; 0x40
 800244e:	009b      	lsls	r3, r3, #2
 8002450:	440b      	add	r3, r1
 8002452:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002454:	2300      	movs	r3, #0
}
 8002456:	4618      	mov	r0, r3
 8002458:	3714      	adds	r7, #20
 800245a:	46bd      	mov	sp, r7
 800245c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002460:	4770      	bx	lr

08002462 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002462:	b480      	push	{r7}
 8002464:	b083      	sub	sp, #12
 8002466:	af00      	add	r7, sp, #0
 8002468:	6078      	str	r0, [r7, #4]
 800246a:	460b      	mov	r3, r1
 800246c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	887a      	ldrh	r2, [r7, #2]
 8002474:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002476:	2300      	movs	r3, #0
}
 8002478:	4618      	mov	r0, r3
 800247a:	370c      	adds	r7, #12
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr

08002484 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002484:	b480      	push	{r7}
 8002486:	b083      	sub	sp, #12
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
 800248c:	460b      	mov	r3, r1
 800248e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002490:	bf00      	nop
 8002492:	370c      	adds	r7, #12
 8002494:	46bd      	mov	sp, r7
 8002496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249a:	4770      	bx	lr

0800249c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b086      	sub	sp, #24
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d101      	bne.n	80024ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	e267      	b.n	800297e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f003 0301 	and.w	r3, r3, #1
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d075      	beq.n	80025a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80024ba:	4b88      	ldr	r3, [pc, #544]	; (80026dc <HAL_RCC_OscConfig+0x240>)
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	f003 030c 	and.w	r3, r3, #12
 80024c2:	2b04      	cmp	r3, #4
 80024c4:	d00c      	beq.n	80024e0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024c6:	4b85      	ldr	r3, [pc, #532]	; (80026dc <HAL_RCC_OscConfig+0x240>)
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80024ce:	2b08      	cmp	r3, #8
 80024d0:	d112      	bne.n	80024f8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024d2:	4b82      	ldr	r3, [pc, #520]	; (80026dc <HAL_RCC_OscConfig+0x240>)
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024de:	d10b      	bne.n	80024f8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024e0:	4b7e      	ldr	r3, [pc, #504]	; (80026dc <HAL_RCC_OscConfig+0x240>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d05b      	beq.n	80025a4 <HAL_RCC_OscConfig+0x108>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d157      	bne.n	80025a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80024f4:	2301      	movs	r3, #1
 80024f6:	e242      	b.n	800297e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002500:	d106      	bne.n	8002510 <HAL_RCC_OscConfig+0x74>
 8002502:	4b76      	ldr	r3, [pc, #472]	; (80026dc <HAL_RCC_OscConfig+0x240>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a75      	ldr	r2, [pc, #468]	; (80026dc <HAL_RCC_OscConfig+0x240>)
 8002508:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800250c:	6013      	str	r3, [r2, #0]
 800250e:	e01d      	b.n	800254c <HAL_RCC_OscConfig+0xb0>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002518:	d10c      	bne.n	8002534 <HAL_RCC_OscConfig+0x98>
 800251a:	4b70      	ldr	r3, [pc, #448]	; (80026dc <HAL_RCC_OscConfig+0x240>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a6f      	ldr	r2, [pc, #444]	; (80026dc <HAL_RCC_OscConfig+0x240>)
 8002520:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002524:	6013      	str	r3, [r2, #0]
 8002526:	4b6d      	ldr	r3, [pc, #436]	; (80026dc <HAL_RCC_OscConfig+0x240>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a6c      	ldr	r2, [pc, #432]	; (80026dc <HAL_RCC_OscConfig+0x240>)
 800252c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002530:	6013      	str	r3, [r2, #0]
 8002532:	e00b      	b.n	800254c <HAL_RCC_OscConfig+0xb0>
 8002534:	4b69      	ldr	r3, [pc, #420]	; (80026dc <HAL_RCC_OscConfig+0x240>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a68      	ldr	r2, [pc, #416]	; (80026dc <HAL_RCC_OscConfig+0x240>)
 800253a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800253e:	6013      	str	r3, [r2, #0]
 8002540:	4b66      	ldr	r3, [pc, #408]	; (80026dc <HAL_RCC_OscConfig+0x240>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a65      	ldr	r2, [pc, #404]	; (80026dc <HAL_RCC_OscConfig+0x240>)
 8002546:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800254a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d013      	beq.n	800257c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002554:	f7fe fb26 	bl	8000ba4 <HAL_GetTick>
 8002558:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800255a:	e008      	b.n	800256e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800255c:	f7fe fb22 	bl	8000ba4 <HAL_GetTick>
 8002560:	4602      	mov	r2, r0
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	1ad3      	subs	r3, r2, r3
 8002566:	2b64      	cmp	r3, #100	; 0x64
 8002568:	d901      	bls.n	800256e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800256a:	2303      	movs	r3, #3
 800256c:	e207      	b.n	800297e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800256e:	4b5b      	ldr	r3, [pc, #364]	; (80026dc <HAL_RCC_OscConfig+0x240>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002576:	2b00      	cmp	r3, #0
 8002578:	d0f0      	beq.n	800255c <HAL_RCC_OscConfig+0xc0>
 800257a:	e014      	b.n	80025a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800257c:	f7fe fb12 	bl	8000ba4 <HAL_GetTick>
 8002580:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002582:	e008      	b.n	8002596 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002584:	f7fe fb0e 	bl	8000ba4 <HAL_GetTick>
 8002588:	4602      	mov	r2, r0
 800258a:	693b      	ldr	r3, [r7, #16]
 800258c:	1ad3      	subs	r3, r2, r3
 800258e:	2b64      	cmp	r3, #100	; 0x64
 8002590:	d901      	bls.n	8002596 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002592:	2303      	movs	r3, #3
 8002594:	e1f3      	b.n	800297e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002596:	4b51      	ldr	r3, [pc, #324]	; (80026dc <HAL_RCC_OscConfig+0x240>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d1f0      	bne.n	8002584 <HAL_RCC_OscConfig+0xe8>
 80025a2:	e000      	b.n	80025a6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 0302 	and.w	r3, r3, #2
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d063      	beq.n	800267a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80025b2:	4b4a      	ldr	r3, [pc, #296]	; (80026dc <HAL_RCC_OscConfig+0x240>)
 80025b4:	689b      	ldr	r3, [r3, #8]
 80025b6:	f003 030c 	and.w	r3, r3, #12
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d00b      	beq.n	80025d6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025be:	4b47      	ldr	r3, [pc, #284]	; (80026dc <HAL_RCC_OscConfig+0x240>)
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80025c6:	2b08      	cmp	r3, #8
 80025c8:	d11c      	bne.n	8002604 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025ca:	4b44      	ldr	r3, [pc, #272]	; (80026dc <HAL_RCC_OscConfig+0x240>)
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d116      	bne.n	8002604 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025d6:	4b41      	ldr	r3, [pc, #260]	; (80026dc <HAL_RCC_OscConfig+0x240>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 0302 	and.w	r3, r3, #2
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d005      	beq.n	80025ee <HAL_RCC_OscConfig+0x152>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	68db      	ldr	r3, [r3, #12]
 80025e6:	2b01      	cmp	r3, #1
 80025e8:	d001      	beq.n	80025ee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	e1c7      	b.n	800297e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025ee:	4b3b      	ldr	r3, [pc, #236]	; (80026dc <HAL_RCC_OscConfig+0x240>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	691b      	ldr	r3, [r3, #16]
 80025fa:	00db      	lsls	r3, r3, #3
 80025fc:	4937      	ldr	r1, [pc, #220]	; (80026dc <HAL_RCC_OscConfig+0x240>)
 80025fe:	4313      	orrs	r3, r2
 8002600:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002602:	e03a      	b.n	800267a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	68db      	ldr	r3, [r3, #12]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d020      	beq.n	800264e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800260c:	4b34      	ldr	r3, [pc, #208]	; (80026e0 <HAL_RCC_OscConfig+0x244>)
 800260e:	2201      	movs	r2, #1
 8002610:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002612:	f7fe fac7 	bl	8000ba4 <HAL_GetTick>
 8002616:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002618:	e008      	b.n	800262c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800261a:	f7fe fac3 	bl	8000ba4 <HAL_GetTick>
 800261e:	4602      	mov	r2, r0
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	1ad3      	subs	r3, r2, r3
 8002624:	2b02      	cmp	r3, #2
 8002626:	d901      	bls.n	800262c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002628:	2303      	movs	r3, #3
 800262a:	e1a8      	b.n	800297e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800262c:	4b2b      	ldr	r3, [pc, #172]	; (80026dc <HAL_RCC_OscConfig+0x240>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 0302 	and.w	r3, r3, #2
 8002634:	2b00      	cmp	r3, #0
 8002636:	d0f0      	beq.n	800261a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002638:	4b28      	ldr	r3, [pc, #160]	; (80026dc <HAL_RCC_OscConfig+0x240>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	691b      	ldr	r3, [r3, #16]
 8002644:	00db      	lsls	r3, r3, #3
 8002646:	4925      	ldr	r1, [pc, #148]	; (80026dc <HAL_RCC_OscConfig+0x240>)
 8002648:	4313      	orrs	r3, r2
 800264a:	600b      	str	r3, [r1, #0]
 800264c:	e015      	b.n	800267a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800264e:	4b24      	ldr	r3, [pc, #144]	; (80026e0 <HAL_RCC_OscConfig+0x244>)
 8002650:	2200      	movs	r2, #0
 8002652:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002654:	f7fe faa6 	bl	8000ba4 <HAL_GetTick>
 8002658:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800265a:	e008      	b.n	800266e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800265c:	f7fe faa2 	bl	8000ba4 <HAL_GetTick>
 8002660:	4602      	mov	r2, r0
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	1ad3      	subs	r3, r2, r3
 8002666:	2b02      	cmp	r3, #2
 8002668:	d901      	bls.n	800266e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800266a:	2303      	movs	r3, #3
 800266c:	e187      	b.n	800297e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800266e:	4b1b      	ldr	r3, [pc, #108]	; (80026dc <HAL_RCC_OscConfig+0x240>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 0302 	and.w	r3, r3, #2
 8002676:	2b00      	cmp	r3, #0
 8002678:	d1f0      	bne.n	800265c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 0308 	and.w	r3, r3, #8
 8002682:	2b00      	cmp	r3, #0
 8002684:	d036      	beq.n	80026f4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	695b      	ldr	r3, [r3, #20]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d016      	beq.n	80026bc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800268e:	4b15      	ldr	r3, [pc, #84]	; (80026e4 <HAL_RCC_OscConfig+0x248>)
 8002690:	2201      	movs	r2, #1
 8002692:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002694:	f7fe fa86 	bl	8000ba4 <HAL_GetTick>
 8002698:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800269a:	e008      	b.n	80026ae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800269c:	f7fe fa82 	bl	8000ba4 <HAL_GetTick>
 80026a0:	4602      	mov	r2, r0
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	1ad3      	subs	r3, r2, r3
 80026a6:	2b02      	cmp	r3, #2
 80026a8:	d901      	bls.n	80026ae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80026aa:	2303      	movs	r3, #3
 80026ac:	e167      	b.n	800297e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026ae:	4b0b      	ldr	r3, [pc, #44]	; (80026dc <HAL_RCC_OscConfig+0x240>)
 80026b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026b2:	f003 0302 	and.w	r3, r3, #2
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d0f0      	beq.n	800269c <HAL_RCC_OscConfig+0x200>
 80026ba:	e01b      	b.n	80026f4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026bc:	4b09      	ldr	r3, [pc, #36]	; (80026e4 <HAL_RCC_OscConfig+0x248>)
 80026be:	2200      	movs	r2, #0
 80026c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026c2:	f7fe fa6f 	bl	8000ba4 <HAL_GetTick>
 80026c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026c8:	e00e      	b.n	80026e8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026ca:	f7fe fa6b 	bl	8000ba4 <HAL_GetTick>
 80026ce:	4602      	mov	r2, r0
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	1ad3      	subs	r3, r2, r3
 80026d4:	2b02      	cmp	r3, #2
 80026d6:	d907      	bls.n	80026e8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80026d8:	2303      	movs	r3, #3
 80026da:	e150      	b.n	800297e <HAL_RCC_OscConfig+0x4e2>
 80026dc:	40023800 	.word	0x40023800
 80026e0:	42470000 	.word	0x42470000
 80026e4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026e8:	4b88      	ldr	r3, [pc, #544]	; (800290c <HAL_RCC_OscConfig+0x470>)
 80026ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026ec:	f003 0302 	and.w	r3, r3, #2
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d1ea      	bne.n	80026ca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f003 0304 	and.w	r3, r3, #4
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	f000 8097 	beq.w	8002830 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002702:	2300      	movs	r3, #0
 8002704:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002706:	4b81      	ldr	r3, [pc, #516]	; (800290c <HAL_RCC_OscConfig+0x470>)
 8002708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800270e:	2b00      	cmp	r3, #0
 8002710:	d10f      	bne.n	8002732 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002712:	2300      	movs	r3, #0
 8002714:	60bb      	str	r3, [r7, #8]
 8002716:	4b7d      	ldr	r3, [pc, #500]	; (800290c <HAL_RCC_OscConfig+0x470>)
 8002718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271a:	4a7c      	ldr	r2, [pc, #496]	; (800290c <HAL_RCC_OscConfig+0x470>)
 800271c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002720:	6413      	str	r3, [r2, #64]	; 0x40
 8002722:	4b7a      	ldr	r3, [pc, #488]	; (800290c <HAL_RCC_OscConfig+0x470>)
 8002724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002726:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800272a:	60bb      	str	r3, [r7, #8]
 800272c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800272e:	2301      	movs	r3, #1
 8002730:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002732:	4b77      	ldr	r3, [pc, #476]	; (8002910 <HAL_RCC_OscConfig+0x474>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800273a:	2b00      	cmp	r3, #0
 800273c:	d118      	bne.n	8002770 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800273e:	4b74      	ldr	r3, [pc, #464]	; (8002910 <HAL_RCC_OscConfig+0x474>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a73      	ldr	r2, [pc, #460]	; (8002910 <HAL_RCC_OscConfig+0x474>)
 8002744:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002748:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800274a:	f7fe fa2b 	bl	8000ba4 <HAL_GetTick>
 800274e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002750:	e008      	b.n	8002764 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002752:	f7fe fa27 	bl	8000ba4 <HAL_GetTick>
 8002756:	4602      	mov	r2, r0
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	1ad3      	subs	r3, r2, r3
 800275c:	2b02      	cmp	r3, #2
 800275e:	d901      	bls.n	8002764 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002760:	2303      	movs	r3, #3
 8002762:	e10c      	b.n	800297e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002764:	4b6a      	ldr	r3, [pc, #424]	; (8002910 <HAL_RCC_OscConfig+0x474>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800276c:	2b00      	cmp	r3, #0
 800276e:	d0f0      	beq.n	8002752 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	2b01      	cmp	r3, #1
 8002776:	d106      	bne.n	8002786 <HAL_RCC_OscConfig+0x2ea>
 8002778:	4b64      	ldr	r3, [pc, #400]	; (800290c <HAL_RCC_OscConfig+0x470>)
 800277a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800277c:	4a63      	ldr	r2, [pc, #396]	; (800290c <HAL_RCC_OscConfig+0x470>)
 800277e:	f043 0301 	orr.w	r3, r3, #1
 8002782:	6713      	str	r3, [r2, #112]	; 0x70
 8002784:	e01c      	b.n	80027c0 <HAL_RCC_OscConfig+0x324>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	2b05      	cmp	r3, #5
 800278c:	d10c      	bne.n	80027a8 <HAL_RCC_OscConfig+0x30c>
 800278e:	4b5f      	ldr	r3, [pc, #380]	; (800290c <HAL_RCC_OscConfig+0x470>)
 8002790:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002792:	4a5e      	ldr	r2, [pc, #376]	; (800290c <HAL_RCC_OscConfig+0x470>)
 8002794:	f043 0304 	orr.w	r3, r3, #4
 8002798:	6713      	str	r3, [r2, #112]	; 0x70
 800279a:	4b5c      	ldr	r3, [pc, #368]	; (800290c <HAL_RCC_OscConfig+0x470>)
 800279c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800279e:	4a5b      	ldr	r2, [pc, #364]	; (800290c <HAL_RCC_OscConfig+0x470>)
 80027a0:	f043 0301 	orr.w	r3, r3, #1
 80027a4:	6713      	str	r3, [r2, #112]	; 0x70
 80027a6:	e00b      	b.n	80027c0 <HAL_RCC_OscConfig+0x324>
 80027a8:	4b58      	ldr	r3, [pc, #352]	; (800290c <HAL_RCC_OscConfig+0x470>)
 80027aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ac:	4a57      	ldr	r2, [pc, #348]	; (800290c <HAL_RCC_OscConfig+0x470>)
 80027ae:	f023 0301 	bic.w	r3, r3, #1
 80027b2:	6713      	str	r3, [r2, #112]	; 0x70
 80027b4:	4b55      	ldr	r3, [pc, #340]	; (800290c <HAL_RCC_OscConfig+0x470>)
 80027b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027b8:	4a54      	ldr	r2, [pc, #336]	; (800290c <HAL_RCC_OscConfig+0x470>)
 80027ba:	f023 0304 	bic.w	r3, r3, #4
 80027be:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d015      	beq.n	80027f4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027c8:	f7fe f9ec 	bl	8000ba4 <HAL_GetTick>
 80027cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027ce:	e00a      	b.n	80027e6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027d0:	f7fe f9e8 	bl	8000ba4 <HAL_GetTick>
 80027d4:	4602      	mov	r2, r0
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	1ad3      	subs	r3, r2, r3
 80027da:	f241 3288 	movw	r2, #5000	; 0x1388
 80027de:	4293      	cmp	r3, r2
 80027e0:	d901      	bls.n	80027e6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80027e2:	2303      	movs	r3, #3
 80027e4:	e0cb      	b.n	800297e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027e6:	4b49      	ldr	r3, [pc, #292]	; (800290c <HAL_RCC_OscConfig+0x470>)
 80027e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ea:	f003 0302 	and.w	r3, r3, #2
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d0ee      	beq.n	80027d0 <HAL_RCC_OscConfig+0x334>
 80027f2:	e014      	b.n	800281e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027f4:	f7fe f9d6 	bl	8000ba4 <HAL_GetTick>
 80027f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027fa:	e00a      	b.n	8002812 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027fc:	f7fe f9d2 	bl	8000ba4 <HAL_GetTick>
 8002800:	4602      	mov	r2, r0
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	1ad3      	subs	r3, r2, r3
 8002806:	f241 3288 	movw	r2, #5000	; 0x1388
 800280a:	4293      	cmp	r3, r2
 800280c:	d901      	bls.n	8002812 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800280e:	2303      	movs	r3, #3
 8002810:	e0b5      	b.n	800297e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002812:	4b3e      	ldr	r3, [pc, #248]	; (800290c <HAL_RCC_OscConfig+0x470>)
 8002814:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002816:	f003 0302 	and.w	r3, r3, #2
 800281a:	2b00      	cmp	r3, #0
 800281c:	d1ee      	bne.n	80027fc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800281e:	7dfb      	ldrb	r3, [r7, #23]
 8002820:	2b01      	cmp	r3, #1
 8002822:	d105      	bne.n	8002830 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002824:	4b39      	ldr	r3, [pc, #228]	; (800290c <HAL_RCC_OscConfig+0x470>)
 8002826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002828:	4a38      	ldr	r2, [pc, #224]	; (800290c <HAL_RCC_OscConfig+0x470>)
 800282a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800282e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	699b      	ldr	r3, [r3, #24]
 8002834:	2b00      	cmp	r3, #0
 8002836:	f000 80a1 	beq.w	800297c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800283a:	4b34      	ldr	r3, [pc, #208]	; (800290c <HAL_RCC_OscConfig+0x470>)
 800283c:	689b      	ldr	r3, [r3, #8]
 800283e:	f003 030c 	and.w	r3, r3, #12
 8002842:	2b08      	cmp	r3, #8
 8002844:	d05c      	beq.n	8002900 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	699b      	ldr	r3, [r3, #24]
 800284a:	2b02      	cmp	r3, #2
 800284c:	d141      	bne.n	80028d2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800284e:	4b31      	ldr	r3, [pc, #196]	; (8002914 <HAL_RCC_OscConfig+0x478>)
 8002850:	2200      	movs	r2, #0
 8002852:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002854:	f7fe f9a6 	bl	8000ba4 <HAL_GetTick>
 8002858:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800285a:	e008      	b.n	800286e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800285c:	f7fe f9a2 	bl	8000ba4 <HAL_GetTick>
 8002860:	4602      	mov	r2, r0
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	1ad3      	subs	r3, r2, r3
 8002866:	2b02      	cmp	r3, #2
 8002868:	d901      	bls.n	800286e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800286a:	2303      	movs	r3, #3
 800286c:	e087      	b.n	800297e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800286e:	4b27      	ldr	r3, [pc, #156]	; (800290c <HAL_RCC_OscConfig+0x470>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002876:	2b00      	cmp	r3, #0
 8002878:	d1f0      	bne.n	800285c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	69da      	ldr	r2, [r3, #28]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6a1b      	ldr	r3, [r3, #32]
 8002882:	431a      	orrs	r2, r3
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002888:	019b      	lsls	r3, r3, #6
 800288a:	431a      	orrs	r2, r3
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002890:	085b      	lsrs	r3, r3, #1
 8002892:	3b01      	subs	r3, #1
 8002894:	041b      	lsls	r3, r3, #16
 8002896:	431a      	orrs	r2, r3
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800289c:	061b      	lsls	r3, r3, #24
 800289e:	491b      	ldr	r1, [pc, #108]	; (800290c <HAL_RCC_OscConfig+0x470>)
 80028a0:	4313      	orrs	r3, r2
 80028a2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028a4:	4b1b      	ldr	r3, [pc, #108]	; (8002914 <HAL_RCC_OscConfig+0x478>)
 80028a6:	2201      	movs	r2, #1
 80028a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028aa:	f7fe f97b 	bl	8000ba4 <HAL_GetTick>
 80028ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028b0:	e008      	b.n	80028c4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028b2:	f7fe f977 	bl	8000ba4 <HAL_GetTick>
 80028b6:	4602      	mov	r2, r0
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	1ad3      	subs	r3, r2, r3
 80028bc:	2b02      	cmp	r3, #2
 80028be:	d901      	bls.n	80028c4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80028c0:	2303      	movs	r3, #3
 80028c2:	e05c      	b.n	800297e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028c4:	4b11      	ldr	r3, [pc, #68]	; (800290c <HAL_RCC_OscConfig+0x470>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d0f0      	beq.n	80028b2 <HAL_RCC_OscConfig+0x416>
 80028d0:	e054      	b.n	800297c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028d2:	4b10      	ldr	r3, [pc, #64]	; (8002914 <HAL_RCC_OscConfig+0x478>)
 80028d4:	2200      	movs	r2, #0
 80028d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028d8:	f7fe f964 	bl	8000ba4 <HAL_GetTick>
 80028dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028de:	e008      	b.n	80028f2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028e0:	f7fe f960 	bl	8000ba4 <HAL_GetTick>
 80028e4:	4602      	mov	r2, r0
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	1ad3      	subs	r3, r2, r3
 80028ea:	2b02      	cmp	r3, #2
 80028ec:	d901      	bls.n	80028f2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80028ee:	2303      	movs	r3, #3
 80028f0:	e045      	b.n	800297e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028f2:	4b06      	ldr	r3, [pc, #24]	; (800290c <HAL_RCC_OscConfig+0x470>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d1f0      	bne.n	80028e0 <HAL_RCC_OscConfig+0x444>
 80028fe:	e03d      	b.n	800297c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	699b      	ldr	r3, [r3, #24]
 8002904:	2b01      	cmp	r3, #1
 8002906:	d107      	bne.n	8002918 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002908:	2301      	movs	r3, #1
 800290a:	e038      	b.n	800297e <HAL_RCC_OscConfig+0x4e2>
 800290c:	40023800 	.word	0x40023800
 8002910:	40007000 	.word	0x40007000
 8002914:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002918:	4b1b      	ldr	r3, [pc, #108]	; (8002988 <HAL_RCC_OscConfig+0x4ec>)
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	699b      	ldr	r3, [r3, #24]
 8002922:	2b01      	cmp	r3, #1
 8002924:	d028      	beq.n	8002978 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002930:	429a      	cmp	r2, r3
 8002932:	d121      	bne.n	8002978 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800293e:	429a      	cmp	r2, r3
 8002940:	d11a      	bne.n	8002978 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002942:	68fa      	ldr	r2, [r7, #12]
 8002944:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002948:	4013      	ands	r3, r2
 800294a:	687a      	ldr	r2, [r7, #4]
 800294c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800294e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002950:	4293      	cmp	r3, r2
 8002952:	d111      	bne.n	8002978 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800295e:	085b      	lsrs	r3, r3, #1
 8002960:	3b01      	subs	r3, #1
 8002962:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002964:	429a      	cmp	r2, r3
 8002966:	d107      	bne.n	8002978 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002972:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002974:	429a      	cmp	r2, r3
 8002976:	d001      	beq.n	800297c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002978:	2301      	movs	r3, #1
 800297a:	e000      	b.n	800297e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800297c:	2300      	movs	r3, #0
}
 800297e:	4618      	mov	r0, r3
 8002980:	3718      	adds	r7, #24
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}
 8002986:	bf00      	nop
 8002988:	40023800 	.word	0x40023800

0800298c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b084      	sub	sp, #16
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
 8002994:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d101      	bne.n	80029a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800299c:	2301      	movs	r3, #1
 800299e:	e0cc      	b.n	8002b3a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80029a0:	4b68      	ldr	r3, [pc, #416]	; (8002b44 <HAL_RCC_ClockConfig+0x1b8>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f003 0307 	and.w	r3, r3, #7
 80029a8:	683a      	ldr	r2, [r7, #0]
 80029aa:	429a      	cmp	r2, r3
 80029ac:	d90c      	bls.n	80029c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029ae:	4b65      	ldr	r3, [pc, #404]	; (8002b44 <HAL_RCC_ClockConfig+0x1b8>)
 80029b0:	683a      	ldr	r2, [r7, #0]
 80029b2:	b2d2      	uxtb	r2, r2
 80029b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029b6:	4b63      	ldr	r3, [pc, #396]	; (8002b44 <HAL_RCC_ClockConfig+0x1b8>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f003 0307 	and.w	r3, r3, #7
 80029be:	683a      	ldr	r2, [r7, #0]
 80029c0:	429a      	cmp	r2, r3
 80029c2:	d001      	beq.n	80029c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80029c4:	2301      	movs	r3, #1
 80029c6:	e0b8      	b.n	8002b3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f003 0302 	and.w	r3, r3, #2
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d020      	beq.n	8002a16 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f003 0304 	and.w	r3, r3, #4
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d005      	beq.n	80029ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029e0:	4b59      	ldr	r3, [pc, #356]	; (8002b48 <HAL_RCC_ClockConfig+0x1bc>)
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	4a58      	ldr	r2, [pc, #352]	; (8002b48 <HAL_RCC_ClockConfig+0x1bc>)
 80029e6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80029ea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f003 0308 	and.w	r3, r3, #8
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d005      	beq.n	8002a04 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80029f8:	4b53      	ldr	r3, [pc, #332]	; (8002b48 <HAL_RCC_ClockConfig+0x1bc>)
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	4a52      	ldr	r2, [pc, #328]	; (8002b48 <HAL_RCC_ClockConfig+0x1bc>)
 80029fe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002a02:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a04:	4b50      	ldr	r3, [pc, #320]	; (8002b48 <HAL_RCC_ClockConfig+0x1bc>)
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	494d      	ldr	r1, [pc, #308]	; (8002b48 <HAL_RCC_ClockConfig+0x1bc>)
 8002a12:	4313      	orrs	r3, r2
 8002a14:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f003 0301 	and.w	r3, r3, #1
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d044      	beq.n	8002aac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	2b01      	cmp	r3, #1
 8002a28:	d107      	bne.n	8002a3a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a2a:	4b47      	ldr	r3, [pc, #284]	; (8002b48 <HAL_RCC_ClockConfig+0x1bc>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d119      	bne.n	8002a6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	e07f      	b.n	8002b3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	2b02      	cmp	r3, #2
 8002a40:	d003      	beq.n	8002a4a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a46:	2b03      	cmp	r3, #3
 8002a48:	d107      	bne.n	8002a5a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a4a:	4b3f      	ldr	r3, [pc, #252]	; (8002b48 <HAL_RCC_ClockConfig+0x1bc>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d109      	bne.n	8002a6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	e06f      	b.n	8002b3a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a5a:	4b3b      	ldr	r3, [pc, #236]	; (8002b48 <HAL_RCC_ClockConfig+0x1bc>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f003 0302 	and.w	r3, r3, #2
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d101      	bne.n	8002a6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	e067      	b.n	8002b3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a6a:	4b37      	ldr	r3, [pc, #220]	; (8002b48 <HAL_RCC_ClockConfig+0x1bc>)
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	f023 0203 	bic.w	r2, r3, #3
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	4934      	ldr	r1, [pc, #208]	; (8002b48 <HAL_RCC_ClockConfig+0x1bc>)
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a7c:	f7fe f892 	bl	8000ba4 <HAL_GetTick>
 8002a80:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a82:	e00a      	b.n	8002a9a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a84:	f7fe f88e 	bl	8000ba4 <HAL_GetTick>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	1ad3      	subs	r3, r2, r3
 8002a8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d901      	bls.n	8002a9a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a96:	2303      	movs	r3, #3
 8002a98:	e04f      	b.n	8002b3a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a9a:	4b2b      	ldr	r3, [pc, #172]	; (8002b48 <HAL_RCC_ClockConfig+0x1bc>)
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	f003 020c 	and.w	r2, r3, #12
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	d1eb      	bne.n	8002a84 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002aac:	4b25      	ldr	r3, [pc, #148]	; (8002b44 <HAL_RCC_ClockConfig+0x1b8>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f003 0307 	and.w	r3, r3, #7
 8002ab4:	683a      	ldr	r2, [r7, #0]
 8002ab6:	429a      	cmp	r2, r3
 8002ab8:	d20c      	bcs.n	8002ad4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aba:	4b22      	ldr	r3, [pc, #136]	; (8002b44 <HAL_RCC_ClockConfig+0x1b8>)
 8002abc:	683a      	ldr	r2, [r7, #0]
 8002abe:	b2d2      	uxtb	r2, r2
 8002ac0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ac2:	4b20      	ldr	r3, [pc, #128]	; (8002b44 <HAL_RCC_ClockConfig+0x1b8>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 0307 	and.w	r3, r3, #7
 8002aca:	683a      	ldr	r2, [r7, #0]
 8002acc:	429a      	cmp	r2, r3
 8002ace:	d001      	beq.n	8002ad4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	e032      	b.n	8002b3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f003 0304 	and.w	r3, r3, #4
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d008      	beq.n	8002af2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ae0:	4b19      	ldr	r3, [pc, #100]	; (8002b48 <HAL_RCC_ClockConfig+0x1bc>)
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	68db      	ldr	r3, [r3, #12]
 8002aec:	4916      	ldr	r1, [pc, #88]	; (8002b48 <HAL_RCC_ClockConfig+0x1bc>)
 8002aee:	4313      	orrs	r3, r2
 8002af0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 0308 	and.w	r3, r3, #8
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d009      	beq.n	8002b12 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002afe:	4b12      	ldr	r3, [pc, #72]	; (8002b48 <HAL_RCC_ClockConfig+0x1bc>)
 8002b00:	689b      	ldr	r3, [r3, #8]
 8002b02:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	691b      	ldr	r3, [r3, #16]
 8002b0a:	00db      	lsls	r3, r3, #3
 8002b0c:	490e      	ldr	r1, [pc, #56]	; (8002b48 <HAL_RCC_ClockConfig+0x1bc>)
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002b12:	f000 f821 	bl	8002b58 <HAL_RCC_GetSysClockFreq>
 8002b16:	4602      	mov	r2, r0
 8002b18:	4b0b      	ldr	r3, [pc, #44]	; (8002b48 <HAL_RCC_ClockConfig+0x1bc>)
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	091b      	lsrs	r3, r3, #4
 8002b1e:	f003 030f 	and.w	r3, r3, #15
 8002b22:	490a      	ldr	r1, [pc, #40]	; (8002b4c <HAL_RCC_ClockConfig+0x1c0>)
 8002b24:	5ccb      	ldrb	r3, [r1, r3]
 8002b26:	fa22 f303 	lsr.w	r3, r2, r3
 8002b2a:	4a09      	ldr	r2, [pc, #36]	; (8002b50 <HAL_RCC_ClockConfig+0x1c4>)
 8002b2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002b2e:	4b09      	ldr	r3, [pc, #36]	; (8002b54 <HAL_RCC_ClockConfig+0x1c8>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4618      	mov	r0, r3
 8002b34:	f7fd fff2 	bl	8000b1c <HAL_InitTick>

  return HAL_OK;
 8002b38:	2300      	movs	r3, #0
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	3710      	adds	r7, #16
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}
 8002b42:	bf00      	nop
 8002b44:	40023c00 	.word	0x40023c00
 8002b48:	40023800 	.word	0x40023800
 8002b4c:	08007034 	.word	0x08007034
 8002b50:	20000000 	.word	0x20000000
 8002b54:	20000004 	.word	0x20000004

08002b58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b5c:	b090      	sub	sp, #64	; 0x40
 8002b5e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002b60:	2300      	movs	r3, #0
 8002b62:	637b      	str	r3, [r7, #52]	; 0x34
 8002b64:	2300      	movs	r3, #0
 8002b66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b68:	2300      	movs	r3, #0
 8002b6a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b70:	4b59      	ldr	r3, [pc, #356]	; (8002cd8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	f003 030c 	and.w	r3, r3, #12
 8002b78:	2b08      	cmp	r3, #8
 8002b7a:	d00d      	beq.n	8002b98 <HAL_RCC_GetSysClockFreq+0x40>
 8002b7c:	2b08      	cmp	r3, #8
 8002b7e:	f200 80a1 	bhi.w	8002cc4 <HAL_RCC_GetSysClockFreq+0x16c>
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d002      	beq.n	8002b8c <HAL_RCC_GetSysClockFreq+0x34>
 8002b86:	2b04      	cmp	r3, #4
 8002b88:	d003      	beq.n	8002b92 <HAL_RCC_GetSysClockFreq+0x3a>
 8002b8a:	e09b      	b.n	8002cc4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b8c:	4b53      	ldr	r3, [pc, #332]	; (8002cdc <HAL_RCC_GetSysClockFreq+0x184>)
 8002b8e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002b90:	e09b      	b.n	8002cca <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b92:	4b53      	ldr	r3, [pc, #332]	; (8002ce0 <HAL_RCC_GetSysClockFreq+0x188>)
 8002b94:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002b96:	e098      	b.n	8002cca <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b98:	4b4f      	ldr	r3, [pc, #316]	; (8002cd8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ba0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ba2:	4b4d      	ldr	r3, [pc, #308]	; (8002cd8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d028      	beq.n	8002c00 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bae:	4b4a      	ldr	r3, [pc, #296]	; (8002cd8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	099b      	lsrs	r3, r3, #6
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	623b      	str	r3, [r7, #32]
 8002bb8:	627a      	str	r2, [r7, #36]	; 0x24
 8002bba:	6a3b      	ldr	r3, [r7, #32]
 8002bbc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002bc0:	2100      	movs	r1, #0
 8002bc2:	4b47      	ldr	r3, [pc, #284]	; (8002ce0 <HAL_RCC_GetSysClockFreq+0x188>)
 8002bc4:	fb03 f201 	mul.w	r2, r3, r1
 8002bc8:	2300      	movs	r3, #0
 8002bca:	fb00 f303 	mul.w	r3, r0, r3
 8002bce:	4413      	add	r3, r2
 8002bd0:	4a43      	ldr	r2, [pc, #268]	; (8002ce0 <HAL_RCC_GetSysClockFreq+0x188>)
 8002bd2:	fba0 1202 	umull	r1, r2, r0, r2
 8002bd6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002bd8:	460a      	mov	r2, r1
 8002bda:	62ba      	str	r2, [r7, #40]	; 0x28
 8002bdc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002bde:	4413      	add	r3, r2
 8002be0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002be2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002be4:	2200      	movs	r2, #0
 8002be6:	61bb      	str	r3, [r7, #24]
 8002be8:	61fa      	str	r2, [r7, #28]
 8002bea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002bee:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002bf2:	f7fd fb89 	bl	8000308 <__aeabi_uldivmod>
 8002bf6:	4602      	mov	r2, r0
 8002bf8:	460b      	mov	r3, r1
 8002bfa:	4613      	mov	r3, r2
 8002bfc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002bfe:	e053      	b.n	8002ca8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c00:	4b35      	ldr	r3, [pc, #212]	; (8002cd8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	099b      	lsrs	r3, r3, #6
 8002c06:	2200      	movs	r2, #0
 8002c08:	613b      	str	r3, [r7, #16]
 8002c0a:	617a      	str	r2, [r7, #20]
 8002c0c:	693b      	ldr	r3, [r7, #16]
 8002c0e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002c12:	f04f 0b00 	mov.w	fp, #0
 8002c16:	4652      	mov	r2, sl
 8002c18:	465b      	mov	r3, fp
 8002c1a:	f04f 0000 	mov.w	r0, #0
 8002c1e:	f04f 0100 	mov.w	r1, #0
 8002c22:	0159      	lsls	r1, r3, #5
 8002c24:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c28:	0150      	lsls	r0, r2, #5
 8002c2a:	4602      	mov	r2, r0
 8002c2c:	460b      	mov	r3, r1
 8002c2e:	ebb2 080a 	subs.w	r8, r2, sl
 8002c32:	eb63 090b 	sbc.w	r9, r3, fp
 8002c36:	f04f 0200 	mov.w	r2, #0
 8002c3a:	f04f 0300 	mov.w	r3, #0
 8002c3e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002c42:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002c46:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002c4a:	ebb2 0408 	subs.w	r4, r2, r8
 8002c4e:	eb63 0509 	sbc.w	r5, r3, r9
 8002c52:	f04f 0200 	mov.w	r2, #0
 8002c56:	f04f 0300 	mov.w	r3, #0
 8002c5a:	00eb      	lsls	r3, r5, #3
 8002c5c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c60:	00e2      	lsls	r2, r4, #3
 8002c62:	4614      	mov	r4, r2
 8002c64:	461d      	mov	r5, r3
 8002c66:	eb14 030a 	adds.w	r3, r4, sl
 8002c6a:	603b      	str	r3, [r7, #0]
 8002c6c:	eb45 030b 	adc.w	r3, r5, fp
 8002c70:	607b      	str	r3, [r7, #4]
 8002c72:	f04f 0200 	mov.w	r2, #0
 8002c76:	f04f 0300 	mov.w	r3, #0
 8002c7a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002c7e:	4629      	mov	r1, r5
 8002c80:	028b      	lsls	r3, r1, #10
 8002c82:	4621      	mov	r1, r4
 8002c84:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002c88:	4621      	mov	r1, r4
 8002c8a:	028a      	lsls	r2, r1, #10
 8002c8c:	4610      	mov	r0, r2
 8002c8e:	4619      	mov	r1, r3
 8002c90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c92:	2200      	movs	r2, #0
 8002c94:	60bb      	str	r3, [r7, #8]
 8002c96:	60fa      	str	r2, [r7, #12]
 8002c98:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002c9c:	f7fd fb34 	bl	8000308 <__aeabi_uldivmod>
 8002ca0:	4602      	mov	r2, r0
 8002ca2:	460b      	mov	r3, r1
 8002ca4:	4613      	mov	r3, r2
 8002ca6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002ca8:	4b0b      	ldr	r3, [pc, #44]	; (8002cd8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	0c1b      	lsrs	r3, r3, #16
 8002cae:	f003 0303 	and.w	r3, r3, #3
 8002cb2:	3301      	adds	r3, #1
 8002cb4:	005b      	lsls	r3, r3, #1
 8002cb6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002cb8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cc0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002cc2:	e002      	b.n	8002cca <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002cc4:	4b05      	ldr	r3, [pc, #20]	; (8002cdc <HAL_RCC_GetSysClockFreq+0x184>)
 8002cc6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002cc8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002cca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	3740      	adds	r7, #64	; 0x40
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002cd6:	bf00      	nop
 8002cd8:	40023800 	.word	0x40023800
 8002cdc:	00f42400 	.word	0x00f42400
 8002ce0:	017d7840 	.word	0x017d7840

08002ce4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ce8:	4b03      	ldr	r3, [pc, #12]	; (8002cf8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002cea:	681b      	ldr	r3, [r3, #0]
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf4:	4770      	bx	lr
 8002cf6:	bf00      	nop
 8002cf8:	20000000 	.word	0x20000000

08002cfc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b082      	sub	sp, #8
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d101      	bne.n	8002d0e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e041      	b.n	8002d92 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d14:	b2db      	uxtb	r3, r3
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d106      	bne.n	8002d28 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	f7fd fe36 	bl	8000994 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2202      	movs	r2, #2
 8002d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	3304      	adds	r3, #4
 8002d38:	4619      	mov	r1, r3
 8002d3a:	4610      	mov	r0, r2
 8002d3c:	f000 fa88 	bl	8003250 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2201      	movs	r2, #1
 8002d44:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2201      	movs	r2, #1
 8002d54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2201      	movs	r2, #1
 8002d64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2201      	movs	r2, #1
 8002d74:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2201      	movs	r2, #1
 8002d84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d90:	2300      	movs	r3, #0
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	3708      	adds	r7, #8
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}
	...

08002d9c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b085      	sub	sp, #20
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002daa:	b2db      	uxtb	r3, r3
 8002dac:	2b01      	cmp	r3, #1
 8002dae:	d001      	beq.n	8002db4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002db0:	2301      	movs	r3, #1
 8002db2:	e044      	b.n	8002e3e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2202      	movs	r2, #2
 8002db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	68da      	ldr	r2, [r3, #12]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f042 0201 	orr.w	r2, r2, #1
 8002dca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a1e      	ldr	r2, [pc, #120]	; (8002e4c <HAL_TIM_Base_Start_IT+0xb0>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d018      	beq.n	8002e08 <HAL_TIM_Base_Start_IT+0x6c>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dde:	d013      	beq.n	8002e08 <HAL_TIM_Base_Start_IT+0x6c>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a1a      	ldr	r2, [pc, #104]	; (8002e50 <HAL_TIM_Base_Start_IT+0xb4>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d00e      	beq.n	8002e08 <HAL_TIM_Base_Start_IT+0x6c>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a19      	ldr	r2, [pc, #100]	; (8002e54 <HAL_TIM_Base_Start_IT+0xb8>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d009      	beq.n	8002e08 <HAL_TIM_Base_Start_IT+0x6c>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a17      	ldr	r2, [pc, #92]	; (8002e58 <HAL_TIM_Base_Start_IT+0xbc>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d004      	beq.n	8002e08 <HAL_TIM_Base_Start_IT+0x6c>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a16      	ldr	r2, [pc, #88]	; (8002e5c <HAL_TIM_Base_Start_IT+0xc0>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d111      	bne.n	8002e2c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	f003 0307 	and.w	r3, r3, #7
 8002e12:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	2b06      	cmp	r3, #6
 8002e18:	d010      	beq.n	8002e3c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	681a      	ldr	r2, [r3, #0]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f042 0201 	orr.w	r2, r2, #1
 8002e28:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e2a:	e007      	b.n	8002e3c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	681a      	ldr	r2, [r3, #0]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f042 0201 	orr.w	r2, r2, #1
 8002e3a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002e3c:	2300      	movs	r3, #0
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	3714      	adds	r7, #20
 8002e42:	46bd      	mov	sp, r7
 8002e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e48:	4770      	bx	lr
 8002e4a:	bf00      	nop
 8002e4c:	40010000 	.word	0x40010000
 8002e50:	40000400 	.word	0x40000400
 8002e54:	40000800 	.word	0x40000800
 8002e58:	40000c00 	.word	0x40000c00
 8002e5c:	40014000 	.word	0x40014000

08002e60 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b082      	sub	sp, #8
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	691b      	ldr	r3, [r3, #16]
 8002e6e:	f003 0302 	and.w	r3, r3, #2
 8002e72:	2b02      	cmp	r3, #2
 8002e74:	d122      	bne.n	8002ebc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	68db      	ldr	r3, [r3, #12]
 8002e7c:	f003 0302 	and.w	r3, r3, #2
 8002e80:	2b02      	cmp	r3, #2
 8002e82:	d11b      	bne.n	8002ebc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f06f 0202 	mvn.w	r2, #2
 8002e8c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2201      	movs	r2, #1
 8002e92:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	699b      	ldr	r3, [r3, #24]
 8002e9a:	f003 0303 	and.w	r3, r3, #3
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d003      	beq.n	8002eaa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002ea2:	6878      	ldr	r0, [r7, #4]
 8002ea4:	f000 f9b5 	bl	8003212 <HAL_TIM_IC_CaptureCallback>
 8002ea8:	e005      	b.n	8002eb6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002eaa:	6878      	ldr	r0, [r7, #4]
 8002eac:	f000 f9a7 	bl	80031fe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002eb0:	6878      	ldr	r0, [r7, #4]
 8002eb2:	f000 f9b8 	bl	8003226 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	691b      	ldr	r3, [r3, #16]
 8002ec2:	f003 0304 	and.w	r3, r3, #4
 8002ec6:	2b04      	cmp	r3, #4
 8002ec8:	d122      	bne.n	8002f10 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	68db      	ldr	r3, [r3, #12]
 8002ed0:	f003 0304 	and.w	r3, r3, #4
 8002ed4:	2b04      	cmp	r3, #4
 8002ed6:	d11b      	bne.n	8002f10 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f06f 0204 	mvn.w	r2, #4
 8002ee0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2202      	movs	r2, #2
 8002ee6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	699b      	ldr	r3, [r3, #24]
 8002eee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d003      	beq.n	8002efe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ef6:	6878      	ldr	r0, [r7, #4]
 8002ef8:	f000 f98b 	bl	8003212 <HAL_TIM_IC_CaptureCallback>
 8002efc:	e005      	b.n	8002f0a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	f000 f97d 	bl	80031fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f04:	6878      	ldr	r0, [r7, #4]
 8002f06:	f000 f98e 	bl	8003226 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	691b      	ldr	r3, [r3, #16]
 8002f16:	f003 0308 	and.w	r3, r3, #8
 8002f1a:	2b08      	cmp	r3, #8
 8002f1c:	d122      	bne.n	8002f64 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	68db      	ldr	r3, [r3, #12]
 8002f24:	f003 0308 	and.w	r3, r3, #8
 8002f28:	2b08      	cmp	r3, #8
 8002f2a:	d11b      	bne.n	8002f64 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f06f 0208 	mvn.w	r2, #8
 8002f34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2204      	movs	r2, #4
 8002f3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	69db      	ldr	r3, [r3, #28]
 8002f42:	f003 0303 	and.w	r3, r3, #3
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d003      	beq.n	8002f52 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f4a:	6878      	ldr	r0, [r7, #4]
 8002f4c:	f000 f961 	bl	8003212 <HAL_TIM_IC_CaptureCallback>
 8002f50:	e005      	b.n	8002f5e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	f000 f953 	bl	80031fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f58:	6878      	ldr	r0, [r7, #4]
 8002f5a:	f000 f964 	bl	8003226 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2200      	movs	r2, #0
 8002f62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	691b      	ldr	r3, [r3, #16]
 8002f6a:	f003 0310 	and.w	r3, r3, #16
 8002f6e:	2b10      	cmp	r3, #16
 8002f70:	d122      	bne.n	8002fb8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	68db      	ldr	r3, [r3, #12]
 8002f78:	f003 0310 	and.w	r3, r3, #16
 8002f7c:	2b10      	cmp	r3, #16
 8002f7e:	d11b      	bne.n	8002fb8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f06f 0210 	mvn.w	r2, #16
 8002f88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2208      	movs	r2, #8
 8002f8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	69db      	ldr	r3, [r3, #28]
 8002f96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d003      	beq.n	8002fa6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f000 f937 	bl	8003212 <HAL_TIM_IC_CaptureCallback>
 8002fa4:	e005      	b.n	8002fb2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	f000 f929 	bl	80031fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fac:	6878      	ldr	r0, [r7, #4]
 8002fae:	f000 f93a 	bl	8003226 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	691b      	ldr	r3, [r3, #16]
 8002fbe:	f003 0301 	and.w	r3, r3, #1
 8002fc2:	2b01      	cmp	r3, #1
 8002fc4:	d10e      	bne.n	8002fe4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	68db      	ldr	r3, [r3, #12]
 8002fcc:	f003 0301 	and.w	r3, r3, #1
 8002fd0:	2b01      	cmp	r3, #1
 8002fd2:	d107      	bne.n	8002fe4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f06f 0201 	mvn.w	r2, #1
 8002fdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f7fd fc90 	bl	8000904 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	691b      	ldr	r3, [r3, #16]
 8002fea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fee:	2b80      	cmp	r3, #128	; 0x80
 8002ff0:	d10e      	bne.n	8003010 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	68db      	ldr	r3, [r3, #12]
 8002ff8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ffc:	2b80      	cmp	r3, #128	; 0x80
 8002ffe:	d107      	bne.n	8003010 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003008:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	f000 fab2 	bl	8003574 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	691b      	ldr	r3, [r3, #16]
 8003016:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800301a:	2b40      	cmp	r3, #64	; 0x40
 800301c:	d10e      	bne.n	800303c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	68db      	ldr	r3, [r3, #12]
 8003024:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003028:	2b40      	cmp	r3, #64	; 0x40
 800302a:	d107      	bne.n	800303c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003034:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003036:	6878      	ldr	r0, [r7, #4]
 8003038:	f000 f8ff 	bl	800323a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	691b      	ldr	r3, [r3, #16]
 8003042:	f003 0320 	and.w	r3, r3, #32
 8003046:	2b20      	cmp	r3, #32
 8003048:	d10e      	bne.n	8003068 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	68db      	ldr	r3, [r3, #12]
 8003050:	f003 0320 	and.w	r3, r3, #32
 8003054:	2b20      	cmp	r3, #32
 8003056:	d107      	bne.n	8003068 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f06f 0220 	mvn.w	r2, #32
 8003060:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003062:	6878      	ldr	r0, [r7, #4]
 8003064:	f000 fa7c 	bl	8003560 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003068:	bf00      	nop
 800306a:	3708      	adds	r7, #8
 800306c:	46bd      	mov	sp, r7
 800306e:	bd80      	pop	{r7, pc}

08003070 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b084      	sub	sp, #16
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
 8003078:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800307a:	2300      	movs	r3, #0
 800307c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003084:	2b01      	cmp	r3, #1
 8003086:	d101      	bne.n	800308c <HAL_TIM_ConfigClockSource+0x1c>
 8003088:	2302      	movs	r3, #2
 800308a:	e0b4      	b.n	80031f6 <HAL_TIM_ConfigClockSource+0x186>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2201      	movs	r2, #1
 8003090:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2202      	movs	r2, #2
 8003098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	689b      	ldr	r3, [r3, #8]
 80030a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80030aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80030b2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	68ba      	ldr	r2, [r7, #8]
 80030ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030c4:	d03e      	beq.n	8003144 <HAL_TIM_ConfigClockSource+0xd4>
 80030c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030ca:	f200 8087 	bhi.w	80031dc <HAL_TIM_ConfigClockSource+0x16c>
 80030ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030d2:	f000 8086 	beq.w	80031e2 <HAL_TIM_ConfigClockSource+0x172>
 80030d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030da:	d87f      	bhi.n	80031dc <HAL_TIM_ConfigClockSource+0x16c>
 80030dc:	2b70      	cmp	r3, #112	; 0x70
 80030de:	d01a      	beq.n	8003116 <HAL_TIM_ConfigClockSource+0xa6>
 80030e0:	2b70      	cmp	r3, #112	; 0x70
 80030e2:	d87b      	bhi.n	80031dc <HAL_TIM_ConfigClockSource+0x16c>
 80030e4:	2b60      	cmp	r3, #96	; 0x60
 80030e6:	d050      	beq.n	800318a <HAL_TIM_ConfigClockSource+0x11a>
 80030e8:	2b60      	cmp	r3, #96	; 0x60
 80030ea:	d877      	bhi.n	80031dc <HAL_TIM_ConfigClockSource+0x16c>
 80030ec:	2b50      	cmp	r3, #80	; 0x50
 80030ee:	d03c      	beq.n	800316a <HAL_TIM_ConfigClockSource+0xfa>
 80030f0:	2b50      	cmp	r3, #80	; 0x50
 80030f2:	d873      	bhi.n	80031dc <HAL_TIM_ConfigClockSource+0x16c>
 80030f4:	2b40      	cmp	r3, #64	; 0x40
 80030f6:	d058      	beq.n	80031aa <HAL_TIM_ConfigClockSource+0x13a>
 80030f8:	2b40      	cmp	r3, #64	; 0x40
 80030fa:	d86f      	bhi.n	80031dc <HAL_TIM_ConfigClockSource+0x16c>
 80030fc:	2b30      	cmp	r3, #48	; 0x30
 80030fe:	d064      	beq.n	80031ca <HAL_TIM_ConfigClockSource+0x15a>
 8003100:	2b30      	cmp	r3, #48	; 0x30
 8003102:	d86b      	bhi.n	80031dc <HAL_TIM_ConfigClockSource+0x16c>
 8003104:	2b20      	cmp	r3, #32
 8003106:	d060      	beq.n	80031ca <HAL_TIM_ConfigClockSource+0x15a>
 8003108:	2b20      	cmp	r3, #32
 800310a:	d867      	bhi.n	80031dc <HAL_TIM_ConfigClockSource+0x16c>
 800310c:	2b00      	cmp	r3, #0
 800310e:	d05c      	beq.n	80031ca <HAL_TIM_ConfigClockSource+0x15a>
 8003110:	2b10      	cmp	r3, #16
 8003112:	d05a      	beq.n	80031ca <HAL_TIM_ConfigClockSource+0x15a>
 8003114:	e062      	b.n	80031dc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6818      	ldr	r0, [r3, #0]
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	6899      	ldr	r1, [r3, #8]
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	685a      	ldr	r2, [r3, #4]
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	68db      	ldr	r3, [r3, #12]
 8003126:	f000 f98d 	bl	8003444 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003138:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	68ba      	ldr	r2, [r7, #8]
 8003140:	609a      	str	r2, [r3, #8]
      break;
 8003142:	e04f      	b.n	80031e4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6818      	ldr	r0, [r3, #0]
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	6899      	ldr	r1, [r3, #8]
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	685a      	ldr	r2, [r3, #4]
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	68db      	ldr	r3, [r3, #12]
 8003154:	f000 f976 	bl	8003444 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	689a      	ldr	r2, [r3, #8]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003166:	609a      	str	r2, [r3, #8]
      break;
 8003168:	e03c      	b.n	80031e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6818      	ldr	r0, [r3, #0]
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	6859      	ldr	r1, [r3, #4]
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	68db      	ldr	r3, [r3, #12]
 8003176:	461a      	mov	r2, r3
 8003178:	f000 f8ea 	bl	8003350 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	2150      	movs	r1, #80	; 0x50
 8003182:	4618      	mov	r0, r3
 8003184:	f000 f943 	bl	800340e <TIM_ITRx_SetConfig>
      break;
 8003188:	e02c      	b.n	80031e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6818      	ldr	r0, [r3, #0]
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	6859      	ldr	r1, [r3, #4]
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	68db      	ldr	r3, [r3, #12]
 8003196:	461a      	mov	r2, r3
 8003198:	f000 f909 	bl	80033ae <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	2160      	movs	r1, #96	; 0x60
 80031a2:	4618      	mov	r0, r3
 80031a4:	f000 f933 	bl	800340e <TIM_ITRx_SetConfig>
      break;
 80031a8:	e01c      	b.n	80031e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6818      	ldr	r0, [r3, #0]
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	6859      	ldr	r1, [r3, #4]
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	68db      	ldr	r3, [r3, #12]
 80031b6:	461a      	mov	r2, r3
 80031b8:	f000 f8ca 	bl	8003350 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	2140      	movs	r1, #64	; 0x40
 80031c2:	4618      	mov	r0, r3
 80031c4:	f000 f923 	bl	800340e <TIM_ITRx_SetConfig>
      break;
 80031c8:	e00c      	b.n	80031e4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4619      	mov	r1, r3
 80031d4:	4610      	mov	r0, r2
 80031d6:	f000 f91a 	bl	800340e <TIM_ITRx_SetConfig>
      break;
 80031da:	e003      	b.n	80031e4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80031dc:	2301      	movs	r3, #1
 80031de:	73fb      	strb	r3, [r7, #15]
      break;
 80031e0:	e000      	b.n	80031e4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80031e2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2201      	movs	r2, #1
 80031e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2200      	movs	r2, #0
 80031f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80031f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	3710      	adds	r7, #16
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}

080031fe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80031fe:	b480      	push	{r7}
 8003200:	b083      	sub	sp, #12
 8003202:	af00      	add	r7, sp, #0
 8003204:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003206:	bf00      	nop
 8003208:	370c      	adds	r7, #12
 800320a:	46bd      	mov	sp, r7
 800320c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003210:	4770      	bx	lr

08003212 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003212:	b480      	push	{r7}
 8003214:	b083      	sub	sp, #12
 8003216:	af00      	add	r7, sp, #0
 8003218:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800321a:	bf00      	nop
 800321c:	370c      	adds	r7, #12
 800321e:	46bd      	mov	sp, r7
 8003220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003224:	4770      	bx	lr

08003226 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003226:	b480      	push	{r7}
 8003228:	b083      	sub	sp, #12
 800322a:	af00      	add	r7, sp, #0
 800322c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800322e:	bf00      	nop
 8003230:	370c      	adds	r7, #12
 8003232:	46bd      	mov	sp, r7
 8003234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003238:	4770      	bx	lr

0800323a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800323a:	b480      	push	{r7}
 800323c:	b083      	sub	sp, #12
 800323e:	af00      	add	r7, sp, #0
 8003240:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003242:	bf00      	nop
 8003244:	370c      	adds	r7, #12
 8003246:	46bd      	mov	sp, r7
 8003248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324c:	4770      	bx	lr
	...

08003250 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003250:	b480      	push	{r7}
 8003252:	b085      	sub	sp, #20
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
 8003258:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	4a34      	ldr	r2, [pc, #208]	; (8003334 <TIM_Base_SetConfig+0xe4>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d00f      	beq.n	8003288 <TIM_Base_SetConfig+0x38>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800326e:	d00b      	beq.n	8003288 <TIM_Base_SetConfig+0x38>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	4a31      	ldr	r2, [pc, #196]	; (8003338 <TIM_Base_SetConfig+0xe8>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d007      	beq.n	8003288 <TIM_Base_SetConfig+0x38>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	4a30      	ldr	r2, [pc, #192]	; (800333c <TIM_Base_SetConfig+0xec>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d003      	beq.n	8003288 <TIM_Base_SetConfig+0x38>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	4a2f      	ldr	r2, [pc, #188]	; (8003340 <TIM_Base_SetConfig+0xf0>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d108      	bne.n	800329a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800328e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	68fa      	ldr	r2, [r7, #12]
 8003296:	4313      	orrs	r3, r2
 8003298:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	4a25      	ldr	r2, [pc, #148]	; (8003334 <TIM_Base_SetConfig+0xe4>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d01b      	beq.n	80032da <TIM_Base_SetConfig+0x8a>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032a8:	d017      	beq.n	80032da <TIM_Base_SetConfig+0x8a>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	4a22      	ldr	r2, [pc, #136]	; (8003338 <TIM_Base_SetConfig+0xe8>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d013      	beq.n	80032da <TIM_Base_SetConfig+0x8a>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	4a21      	ldr	r2, [pc, #132]	; (800333c <TIM_Base_SetConfig+0xec>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d00f      	beq.n	80032da <TIM_Base_SetConfig+0x8a>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	4a20      	ldr	r2, [pc, #128]	; (8003340 <TIM_Base_SetConfig+0xf0>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d00b      	beq.n	80032da <TIM_Base_SetConfig+0x8a>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	4a1f      	ldr	r2, [pc, #124]	; (8003344 <TIM_Base_SetConfig+0xf4>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d007      	beq.n	80032da <TIM_Base_SetConfig+0x8a>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	4a1e      	ldr	r2, [pc, #120]	; (8003348 <TIM_Base_SetConfig+0xf8>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d003      	beq.n	80032da <TIM_Base_SetConfig+0x8a>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	4a1d      	ldr	r2, [pc, #116]	; (800334c <TIM_Base_SetConfig+0xfc>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d108      	bne.n	80032ec <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	68db      	ldr	r3, [r3, #12]
 80032e6:	68fa      	ldr	r2, [r7, #12]
 80032e8:	4313      	orrs	r3, r2
 80032ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	695b      	ldr	r3, [r3, #20]
 80032f6:	4313      	orrs	r3, r2
 80032f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	68fa      	ldr	r2, [r7, #12]
 80032fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	689a      	ldr	r2, [r3, #8]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	681a      	ldr	r2, [r3, #0]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	4a08      	ldr	r2, [pc, #32]	; (8003334 <TIM_Base_SetConfig+0xe4>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d103      	bne.n	8003320 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	691a      	ldr	r2, [r3, #16]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2201      	movs	r2, #1
 8003324:	615a      	str	r2, [r3, #20]
}
 8003326:	bf00      	nop
 8003328:	3714      	adds	r7, #20
 800332a:	46bd      	mov	sp, r7
 800332c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003330:	4770      	bx	lr
 8003332:	bf00      	nop
 8003334:	40010000 	.word	0x40010000
 8003338:	40000400 	.word	0x40000400
 800333c:	40000800 	.word	0x40000800
 8003340:	40000c00 	.word	0x40000c00
 8003344:	40014000 	.word	0x40014000
 8003348:	40014400 	.word	0x40014400
 800334c:	40014800 	.word	0x40014800

08003350 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003350:	b480      	push	{r7}
 8003352:	b087      	sub	sp, #28
 8003354:	af00      	add	r7, sp, #0
 8003356:	60f8      	str	r0, [r7, #12]
 8003358:	60b9      	str	r1, [r7, #8]
 800335a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	6a1b      	ldr	r3, [r3, #32]
 8003360:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	6a1b      	ldr	r3, [r3, #32]
 8003366:	f023 0201 	bic.w	r2, r3, #1
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	699b      	ldr	r3, [r3, #24]
 8003372:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800337a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	011b      	lsls	r3, r3, #4
 8003380:	693a      	ldr	r2, [r7, #16]
 8003382:	4313      	orrs	r3, r2
 8003384:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	f023 030a 	bic.w	r3, r3, #10
 800338c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800338e:	697a      	ldr	r2, [r7, #20]
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	4313      	orrs	r3, r2
 8003394:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	693a      	ldr	r2, [r7, #16]
 800339a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	697a      	ldr	r2, [r7, #20]
 80033a0:	621a      	str	r2, [r3, #32]
}
 80033a2:	bf00      	nop
 80033a4:	371c      	adds	r7, #28
 80033a6:	46bd      	mov	sp, r7
 80033a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ac:	4770      	bx	lr

080033ae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80033ae:	b480      	push	{r7}
 80033b0:	b087      	sub	sp, #28
 80033b2:	af00      	add	r7, sp, #0
 80033b4:	60f8      	str	r0, [r7, #12]
 80033b6:	60b9      	str	r1, [r7, #8]
 80033b8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	6a1b      	ldr	r3, [r3, #32]
 80033be:	f023 0210 	bic.w	r2, r3, #16
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	699b      	ldr	r3, [r3, #24]
 80033ca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	6a1b      	ldr	r3, [r3, #32]
 80033d0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80033d8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	031b      	lsls	r3, r3, #12
 80033de:	697a      	ldr	r2, [r7, #20]
 80033e0:	4313      	orrs	r3, r2
 80033e2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80033ea:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	011b      	lsls	r3, r3, #4
 80033f0:	693a      	ldr	r2, [r7, #16]
 80033f2:	4313      	orrs	r3, r2
 80033f4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	697a      	ldr	r2, [r7, #20]
 80033fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	693a      	ldr	r2, [r7, #16]
 8003400:	621a      	str	r2, [r3, #32]
}
 8003402:	bf00      	nop
 8003404:	371c      	adds	r7, #28
 8003406:	46bd      	mov	sp, r7
 8003408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340c:	4770      	bx	lr

0800340e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800340e:	b480      	push	{r7}
 8003410:	b085      	sub	sp, #20
 8003412:	af00      	add	r7, sp, #0
 8003414:	6078      	str	r0, [r7, #4]
 8003416:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003424:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003426:	683a      	ldr	r2, [r7, #0]
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	4313      	orrs	r3, r2
 800342c:	f043 0307 	orr.w	r3, r3, #7
 8003430:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	68fa      	ldr	r2, [r7, #12]
 8003436:	609a      	str	r2, [r3, #8]
}
 8003438:	bf00      	nop
 800343a:	3714      	adds	r7, #20
 800343c:	46bd      	mov	sp, r7
 800343e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003442:	4770      	bx	lr

08003444 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003444:	b480      	push	{r7}
 8003446:	b087      	sub	sp, #28
 8003448:	af00      	add	r7, sp, #0
 800344a:	60f8      	str	r0, [r7, #12]
 800344c:	60b9      	str	r1, [r7, #8]
 800344e:	607a      	str	r2, [r7, #4]
 8003450:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800345e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	021a      	lsls	r2, r3, #8
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	431a      	orrs	r2, r3
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	4313      	orrs	r3, r2
 800346c:	697a      	ldr	r2, [r7, #20]
 800346e:	4313      	orrs	r3, r2
 8003470:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	697a      	ldr	r2, [r7, #20]
 8003476:	609a      	str	r2, [r3, #8]
}
 8003478:	bf00      	nop
 800347a:	371c      	adds	r7, #28
 800347c:	46bd      	mov	sp, r7
 800347e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003482:	4770      	bx	lr

08003484 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003484:	b480      	push	{r7}
 8003486:	b085      	sub	sp, #20
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
 800348c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003494:	2b01      	cmp	r3, #1
 8003496:	d101      	bne.n	800349c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003498:	2302      	movs	r3, #2
 800349a:	e050      	b.n	800353e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2201      	movs	r2, #1
 80034a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2202      	movs	r2, #2
 80034a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	68fa      	ldr	r2, [r7, #12]
 80034ca:	4313      	orrs	r3, r2
 80034cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	68fa      	ldr	r2, [r7, #12]
 80034d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a1c      	ldr	r2, [pc, #112]	; (800354c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d018      	beq.n	8003512 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034e8:	d013      	beq.n	8003512 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a18      	ldr	r2, [pc, #96]	; (8003550 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d00e      	beq.n	8003512 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a16      	ldr	r2, [pc, #88]	; (8003554 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d009      	beq.n	8003512 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a15      	ldr	r2, [pc, #84]	; (8003558 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d004      	beq.n	8003512 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a13      	ldr	r2, [pc, #76]	; (800355c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d10c      	bne.n	800352c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003512:	68bb      	ldr	r3, [r7, #8]
 8003514:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003518:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	68ba      	ldr	r2, [r7, #8]
 8003520:	4313      	orrs	r3, r2
 8003522:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	68ba      	ldr	r2, [r7, #8]
 800352a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2201      	movs	r2, #1
 8003530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2200      	movs	r2, #0
 8003538:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800353c:	2300      	movs	r3, #0
}
 800353e:	4618      	mov	r0, r3
 8003540:	3714      	adds	r7, #20
 8003542:	46bd      	mov	sp, r7
 8003544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003548:	4770      	bx	lr
 800354a:	bf00      	nop
 800354c:	40010000 	.word	0x40010000
 8003550:	40000400 	.word	0x40000400
 8003554:	40000800 	.word	0x40000800
 8003558:	40000c00 	.word	0x40000c00
 800355c:	40014000 	.word	0x40014000

08003560 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003560:	b480      	push	{r7}
 8003562:	b083      	sub	sp, #12
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003568:	bf00      	nop
 800356a:	370c      	adds	r7, #12
 800356c:	46bd      	mov	sp, r7
 800356e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003572:	4770      	bx	lr

08003574 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003574:	b480      	push	{r7}
 8003576:	b083      	sub	sp, #12
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800357c:	bf00      	nop
 800357e:	370c      	adds	r7, #12
 8003580:	46bd      	mov	sp, r7
 8003582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003586:	4770      	bx	lr

08003588 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003588:	b084      	sub	sp, #16
 800358a:	b580      	push	{r7, lr}
 800358c:	b084      	sub	sp, #16
 800358e:	af00      	add	r7, sp, #0
 8003590:	6078      	str	r0, [r7, #4]
 8003592:	f107 001c 	add.w	r0, r7, #28
 8003596:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800359a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800359c:	2b01      	cmp	r3, #1
 800359e:	d122      	bne.n	80035e6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035a4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	68db      	ldr	r3, [r3, #12]
 80035b0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80035b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80035b8:	687a      	ldr	r2, [r7, #4]
 80035ba:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	68db      	ldr	r3, [r3, #12]
 80035c0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80035c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035ca:	2b01      	cmp	r3, #1
 80035cc:	d105      	bne.n	80035da <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	68db      	ldr	r3, [r3, #12]
 80035d2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	f001 fb1c 	bl	8004c18 <USB_CoreReset>
 80035e0:	4603      	mov	r3, r0
 80035e2:	73fb      	strb	r3, [r7, #15]
 80035e4:	e01a      	b.n	800361c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	68db      	ldr	r3, [r3, #12]
 80035ea:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	f001 fb10 	bl	8004c18 <USB_CoreReset>
 80035f8:	4603      	mov	r3, r0
 80035fa:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80035fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d106      	bne.n	8003610 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003606:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	639a      	str	r2, [r3, #56]	; 0x38
 800360e:	e005      	b.n	800361c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003614:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800361c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800361e:	2b01      	cmp	r3, #1
 8003620:	d10b      	bne.n	800363a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	689b      	ldr	r3, [r3, #8]
 8003626:	f043 0206 	orr.w	r2, r3, #6
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	689b      	ldr	r3, [r3, #8]
 8003632:	f043 0220 	orr.w	r2, r3, #32
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800363a:	7bfb      	ldrb	r3, [r7, #15]
}
 800363c:	4618      	mov	r0, r3
 800363e:	3710      	adds	r7, #16
 8003640:	46bd      	mov	sp, r7
 8003642:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003646:	b004      	add	sp, #16
 8003648:	4770      	bx	lr
	...

0800364c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800364c:	b480      	push	{r7}
 800364e:	b087      	sub	sp, #28
 8003650:	af00      	add	r7, sp, #0
 8003652:	60f8      	str	r0, [r7, #12]
 8003654:	60b9      	str	r1, [r7, #8]
 8003656:	4613      	mov	r3, r2
 8003658:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800365a:	79fb      	ldrb	r3, [r7, #7]
 800365c:	2b02      	cmp	r3, #2
 800365e:	d165      	bne.n	800372c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	4a41      	ldr	r2, [pc, #260]	; (8003768 <USB_SetTurnaroundTime+0x11c>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d906      	bls.n	8003676 <USB_SetTurnaroundTime+0x2a>
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	4a40      	ldr	r2, [pc, #256]	; (800376c <USB_SetTurnaroundTime+0x120>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d202      	bcs.n	8003676 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003670:	230f      	movs	r3, #15
 8003672:	617b      	str	r3, [r7, #20]
 8003674:	e062      	b.n	800373c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003676:	68bb      	ldr	r3, [r7, #8]
 8003678:	4a3c      	ldr	r2, [pc, #240]	; (800376c <USB_SetTurnaroundTime+0x120>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d306      	bcc.n	800368c <USB_SetTurnaroundTime+0x40>
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	4a3b      	ldr	r2, [pc, #236]	; (8003770 <USB_SetTurnaroundTime+0x124>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d202      	bcs.n	800368c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003686:	230e      	movs	r3, #14
 8003688:	617b      	str	r3, [r7, #20]
 800368a:	e057      	b.n	800373c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	4a38      	ldr	r2, [pc, #224]	; (8003770 <USB_SetTurnaroundTime+0x124>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d306      	bcc.n	80036a2 <USB_SetTurnaroundTime+0x56>
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	4a37      	ldr	r2, [pc, #220]	; (8003774 <USB_SetTurnaroundTime+0x128>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d202      	bcs.n	80036a2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800369c:	230d      	movs	r3, #13
 800369e:	617b      	str	r3, [r7, #20]
 80036a0:	e04c      	b.n	800373c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	4a33      	ldr	r2, [pc, #204]	; (8003774 <USB_SetTurnaroundTime+0x128>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d306      	bcc.n	80036b8 <USB_SetTurnaroundTime+0x6c>
 80036aa:	68bb      	ldr	r3, [r7, #8]
 80036ac:	4a32      	ldr	r2, [pc, #200]	; (8003778 <USB_SetTurnaroundTime+0x12c>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d802      	bhi.n	80036b8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80036b2:	230c      	movs	r3, #12
 80036b4:	617b      	str	r3, [r7, #20]
 80036b6:	e041      	b.n	800373c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	4a2f      	ldr	r2, [pc, #188]	; (8003778 <USB_SetTurnaroundTime+0x12c>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d906      	bls.n	80036ce <USB_SetTurnaroundTime+0x82>
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	4a2e      	ldr	r2, [pc, #184]	; (800377c <USB_SetTurnaroundTime+0x130>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d802      	bhi.n	80036ce <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80036c8:	230b      	movs	r3, #11
 80036ca:	617b      	str	r3, [r7, #20]
 80036cc:	e036      	b.n	800373c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	4a2a      	ldr	r2, [pc, #168]	; (800377c <USB_SetTurnaroundTime+0x130>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d906      	bls.n	80036e4 <USB_SetTurnaroundTime+0x98>
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	4a29      	ldr	r2, [pc, #164]	; (8003780 <USB_SetTurnaroundTime+0x134>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d802      	bhi.n	80036e4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80036de:	230a      	movs	r3, #10
 80036e0:	617b      	str	r3, [r7, #20]
 80036e2:	e02b      	b.n	800373c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	4a26      	ldr	r2, [pc, #152]	; (8003780 <USB_SetTurnaroundTime+0x134>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d906      	bls.n	80036fa <USB_SetTurnaroundTime+0xae>
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	4a25      	ldr	r2, [pc, #148]	; (8003784 <USB_SetTurnaroundTime+0x138>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d202      	bcs.n	80036fa <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80036f4:	2309      	movs	r3, #9
 80036f6:	617b      	str	r3, [r7, #20]
 80036f8:	e020      	b.n	800373c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	4a21      	ldr	r2, [pc, #132]	; (8003784 <USB_SetTurnaroundTime+0x138>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d306      	bcc.n	8003710 <USB_SetTurnaroundTime+0xc4>
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	4a20      	ldr	r2, [pc, #128]	; (8003788 <USB_SetTurnaroundTime+0x13c>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d802      	bhi.n	8003710 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800370a:	2308      	movs	r3, #8
 800370c:	617b      	str	r3, [r7, #20]
 800370e:	e015      	b.n	800373c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	4a1d      	ldr	r2, [pc, #116]	; (8003788 <USB_SetTurnaroundTime+0x13c>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d906      	bls.n	8003726 <USB_SetTurnaroundTime+0xda>
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	4a1c      	ldr	r2, [pc, #112]	; (800378c <USB_SetTurnaroundTime+0x140>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d202      	bcs.n	8003726 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003720:	2307      	movs	r3, #7
 8003722:	617b      	str	r3, [r7, #20]
 8003724:	e00a      	b.n	800373c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003726:	2306      	movs	r3, #6
 8003728:	617b      	str	r3, [r7, #20]
 800372a:	e007      	b.n	800373c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800372c:	79fb      	ldrb	r3, [r7, #7]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d102      	bne.n	8003738 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003732:	2309      	movs	r3, #9
 8003734:	617b      	str	r3, [r7, #20]
 8003736:	e001      	b.n	800373c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003738:	2309      	movs	r3, #9
 800373a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	68db      	ldr	r3, [r3, #12]
 8003740:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	68da      	ldr	r2, [r3, #12]
 800374c:	697b      	ldr	r3, [r7, #20]
 800374e:	029b      	lsls	r3, r3, #10
 8003750:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003754:	431a      	orrs	r2, r3
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800375a:	2300      	movs	r3, #0
}
 800375c:	4618      	mov	r0, r3
 800375e:	371c      	adds	r7, #28
 8003760:	46bd      	mov	sp, r7
 8003762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003766:	4770      	bx	lr
 8003768:	00d8acbf 	.word	0x00d8acbf
 800376c:	00e4e1c0 	.word	0x00e4e1c0
 8003770:	00f42400 	.word	0x00f42400
 8003774:	01067380 	.word	0x01067380
 8003778:	011a499f 	.word	0x011a499f
 800377c:	01312cff 	.word	0x01312cff
 8003780:	014ca43f 	.word	0x014ca43f
 8003784:	016e3600 	.word	0x016e3600
 8003788:	01a6ab1f 	.word	0x01a6ab1f
 800378c:	01e84800 	.word	0x01e84800

08003790 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003790:	b480      	push	{r7}
 8003792:	b083      	sub	sp, #12
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	689b      	ldr	r3, [r3, #8]
 800379c:	f043 0201 	orr.w	r2, r3, #1
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80037a4:	2300      	movs	r3, #0
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	370c      	adds	r7, #12
 80037aa:	46bd      	mov	sp, r7
 80037ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b0:	4770      	bx	lr

080037b2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80037b2:	b480      	push	{r7}
 80037b4:	b083      	sub	sp, #12
 80037b6:	af00      	add	r7, sp, #0
 80037b8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	f023 0201 	bic.w	r2, r3, #1
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80037c6:	2300      	movs	r3, #0
}
 80037c8:	4618      	mov	r0, r3
 80037ca:	370c      	adds	r7, #12
 80037cc:	46bd      	mov	sp, r7
 80037ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d2:	4770      	bx	lr

080037d4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b084      	sub	sp, #16
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
 80037dc:	460b      	mov	r3, r1
 80037de:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80037e0:	2300      	movs	r3, #0
 80037e2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	68db      	ldr	r3, [r3, #12]
 80037e8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80037f0:	78fb      	ldrb	r3, [r7, #3]
 80037f2:	2b01      	cmp	r3, #1
 80037f4:	d115      	bne.n	8003822 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	68db      	ldr	r3, [r3, #12]
 80037fa:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003802:	2001      	movs	r0, #1
 8003804:	f7fd f9da 	bl	8000bbc <HAL_Delay>
      ms++;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	3301      	adds	r3, #1
 800380c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	f001 f972 	bl	8004af8 <USB_GetMode>
 8003814:	4603      	mov	r3, r0
 8003816:	2b01      	cmp	r3, #1
 8003818:	d01e      	beq.n	8003858 <USB_SetCurrentMode+0x84>
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	2b31      	cmp	r3, #49	; 0x31
 800381e:	d9f0      	bls.n	8003802 <USB_SetCurrentMode+0x2e>
 8003820:	e01a      	b.n	8003858 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003822:	78fb      	ldrb	r3, [r7, #3]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d115      	bne.n	8003854 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	68db      	ldr	r3, [r3, #12]
 800382c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003834:	2001      	movs	r0, #1
 8003836:	f7fd f9c1 	bl	8000bbc <HAL_Delay>
      ms++;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	3301      	adds	r3, #1
 800383e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003840:	6878      	ldr	r0, [r7, #4]
 8003842:	f001 f959 	bl	8004af8 <USB_GetMode>
 8003846:	4603      	mov	r3, r0
 8003848:	2b00      	cmp	r3, #0
 800384a:	d005      	beq.n	8003858 <USB_SetCurrentMode+0x84>
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	2b31      	cmp	r3, #49	; 0x31
 8003850:	d9f0      	bls.n	8003834 <USB_SetCurrentMode+0x60>
 8003852:	e001      	b.n	8003858 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	e005      	b.n	8003864 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	2b32      	cmp	r3, #50	; 0x32
 800385c:	d101      	bne.n	8003862 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	e000      	b.n	8003864 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003862:	2300      	movs	r3, #0
}
 8003864:	4618      	mov	r0, r3
 8003866:	3710      	adds	r7, #16
 8003868:	46bd      	mov	sp, r7
 800386a:	bd80      	pop	{r7, pc}

0800386c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800386c:	b084      	sub	sp, #16
 800386e:	b580      	push	{r7, lr}
 8003870:	b086      	sub	sp, #24
 8003872:	af00      	add	r7, sp, #0
 8003874:	6078      	str	r0, [r7, #4]
 8003876:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800387a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800387e:	2300      	movs	r3, #0
 8003880:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003886:	2300      	movs	r3, #0
 8003888:	613b      	str	r3, [r7, #16]
 800388a:	e009      	b.n	80038a0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800388c:	687a      	ldr	r2, [r7, #4]
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	3340      	adds	r3, #64	; 0x40
 8003892:	009b      	lsls	r3, r3, #2
 8003894:	4413      	add	r3, r2
 8003896:	2200      	movs	r2, #0
 8003898:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	3301      	adds	r3, #1
 800389e:	613b      	str	r3, [r7, #16]
 80038a0:	693b      	ldr	r3, [r7, #16]
 80038a2:	2b0e      	cmp	r3, #14
 80038a4:	d9f2      	bls.n	800388c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80038a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d11c      	bne.n	80038e6 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	68fa      	ldr	r2, [r7, #12]
 80038b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80038ba:	f043 0302 	orr.w	r3, r3, #2
 80038be:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038c4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038d0:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038dc:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	639a      	str	r2, [r3, #56]	; 0x38
 80038e4:	e00b      	b.n	80038fe <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ea:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038f6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003904:	461a      	mov	r2, r3
 8003906:	2300      	movs	r3, #0
 8003908:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003910:	4619      	mov	r1, r3
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003918:	461a      	mov	r2, r3
 800391a:	680b      	ldr	r3, [r1, #0]
 800391c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800391e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003920:	2b01      	cmp	r3, #1
 8003922:	d10c      	bne.n	800393e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003926:	2b00      	cmp	r3, #0
 8003928:	d104      	bne.n	8003934 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800392a:	2100      	movs	r1, #0
 800392c:	6878      	ldr	r0, [r7, #4]
 800392e:	f000 f945 	bl	8003bbc <USB_SetDevSpeed>
 8003932:	e008      	b.n	8003946 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003934:	2101      	movs	r1, #1
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	f000 f940 	bl	8003bbc <USB_SetDevSpeed>
 800393c:	e003      	b.n	8003946 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800393e:	2103      	movs	r1, #3
 8003940:	6878      	ldr	r0, [r7, #4]
 8003942:	f000 f93b 	bl	8003bbc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003946:	2110      	movs	r1, #16
 8003948:	6878      	ldr	r0, [r7, #4]
 800394a:	f000 f8f3 	bl	8003b34 <USB_FlushTxFifo>
 800394e:	4603      	mov	r3, r0
 8003950:	2b00      	cmp	r3, #0
 8003952:	d001      	beq.n	8003958 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003954:	2301      	movs	r3, #1
 8003956:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003958:	6878      	ldr	r0, [r7, #4]
 800395a:	f000 f90f 	bl	8003b7c <USB_FlushRxFifo>
 800395e:	4603      	mov	r3, r0
 8003960:	2b00      	cmp	r3, #0
 8003962:	d001      	beq.n	8003968 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003964:	2301      	movs	r3, #1
 8003966:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800396e:	461a      	mov	r2, r3
 8003970:	2300      	movs	r3, #0
 8003972:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800397a:	461a      	mov	r2, r3
 800397c:	2300      	movs	r3, #0
 800397e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003986:	461a      	mov	r2, r3
 8003988:	2300      	movs	r3, #0
 800398a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800398c:	2300      	movs	r3, #0
 800398e:	613b      	str	r3, [r7, #16]
 8003990:	e043      	b.n	8003a1a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	015a      	lsls	r2, r3, #5
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	4413      	add	r3, r2
 800399a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80039a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80039a8:	d118      	bne.n	80039dc <USB_DevInit+0x170>
    {
      if (i == 0U)
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d10a      	bne.n	80039c6 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80039b0:	693b      	ldr	r3, [r7, #16]
 80039b2:	015a      	lsls	r2, r3, #5
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	4413      	add	r3, r2
 80039b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039bc:	461a      	mov	r2, r3
 80039be:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80039c2:	6013      	str	r3, [r2, #0]
 80039c4:	e013      	b.n	80039ee <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	015a      	lsls	r2, r3, #5
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	4413      	add	r3, r2
 80039ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039d2:	461a      	mov	r2, r3
 80039d4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80039d8:	6013      	str	r3, [r2, #0]
 80039da:	e008      	b.n	80039ee <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80039dc:	693b      	ldr	r3, [r7, #16]
 80039de:	015a      	lsls	r2, r3, #5
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	4413      	add	r3, r2
 80039e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039e8:	461a      	mov	r2, r3
 80039ea:	2300      	movs	r3, #0
 80039ec:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	015a      	lsls	r2, r3, #5
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	4413      	add	r3, r2
 80039f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039fa:	461a      	mov	r2, r3
 80039fc:	2300      	movs	r3, #0
 80039fe:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003a00:	693b      	ldr	r3, [r7, #16]
 8003a02:	015a      	lsls	r2, r3, #5
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	4413      	add	r3, r2
 8003a08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a0c:	461a      	mov	r2, r3
 8003a0e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003a12:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003a14:	693b      	ldr	r3, [r7, #16]
 8003a16:	3301      	adds	r3, #1
 8003a18:	613b      	str	r3, [r7, #16]
 8003a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a1c:	693a      	ldr	r2, [r7, #16]
 8003a1e:	429a      	cmp	r2, r3
 8003a20:	d3b7      	bcc.n	8003992 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003a22:	2300      	movs	r3, #0
 8003a24:	613b      	str	r3, [r7, #16]
 8003a26:	e043      	b.n	8003ab0 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	015a      	lsls	r2, r3, #5
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	4413      	add	r3, r2
 8003a30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003a3a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003a3e:	d118      	bne.n	8003a72 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d10a      	bne.n	8003a5c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	015a      	lsls	r2, r3, #5
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	4413      	add	r3, r2
 8003a4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a52:	461a      	mov	r2, r3
 8003a54:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003a58:	6013      	str	r3, [r2, #0]
 8003a5a:	e013      	b.n	8003a84 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	015a      	lsls	r2, r3, #5
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	4413      	add	r3, r2
 8003a64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a68:	461a      	mov	r2, r3
 8003a6a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003a6e:	6013      	str	r3, [r2, #0]
 8003a70:	e008      	b.n	8003a84 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	015a      	lsls	r2, r3, #5
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	4413      	add	r3, r2
 8003a7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a7e:	461a      	mov	r2, r3
 8003a80:	2300      	movs	r3, #0
 8003a82:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	015a      	lsls	r2, r3, #5
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	4413      	add	r3, r2
 8003a8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a90:	461a      	mov	r2, r3
 8003a92:	2300      	movs	r3, #0
 8003a94:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	015a      	lsls	r2, r3, #5
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	4413      	add	r3, r2
 8003a9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003aa2:	461a      	mov	r2, r3
 8003aa4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003aa8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	3301      	adds	r3, #1
 8003aae:	613b      	str	r3, [r7, #16]
 8003ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab2:	693a      	ldr	r2, [r7, #16]
 8003ab4:	429a      	cmp	r2, r3
 8003ab6:	d3b7      	bcc.n	8003a28 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003abe:	691b      	ldr	r3, [r3, #16]
 8003ac0:	68fa      	ldr	r2, [r7, #12]
 8003ac2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ac6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003aca:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003ad8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d105      	bne.n	8003aec <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	699b      	ldr	r3, [r3, #24]
 8003ae4:	f043 0210 	orr.w	r2, r3, #16
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	699a      	ldr	r2, [r3, #24]
 8003af0:	4b0f      	ldr	r3, [pc, #60]	; (8003b30 <USB_DevInit+0x2c4>)
 8003af2:	4313      	orrs	r3, r2
 8003af4:	687a      	ldr	r2, [r7, #4]
 8003af6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003af8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d005      	beq.n	8003b0a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	699b      	ldr	r3, [r3, #24]
 8003b02:	f043 0208 	orr.w	r2, r3, #8
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003b0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b0c:	2b01      	cmp	r3, #1
 8003b0e:	d107      	bne.n	8003b20 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	699b      	ldr	r3, [r3, #24]
 8003b14:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003b18:	f043 0304 	orr.w	r3, r3, #4
 8003b1c:	687a      	ldr	r2, [r7, #4]
 8003b1e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003b20:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	3718      	adds	r7, #24
 8003b26:	46bd      	mov	sp, r7
 8003b28:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003b2c:	b004      	add	sp, #16
 8003b2e:	4770      	bx	lr
 8003b30:	803c3800 	.word	0x803c3800

08003b34 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b085      	sub	sp, #20
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
 8003b3c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	019b      	lsls	r3, r3, #6
 8003b46:	f043 0220 	orr.w	r2, r3, #32
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	3301      	adds	r3, #1
 8003b52:	60fb      	str	r3, [r7, #12]
 8003b54:	4a08      	ldr	r2, [pc, #32]	; (8003b78 <USB_FlushTxFifo+0x44>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d901      	bls.n	8003b5e <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8003b5a:	2303      	movs	r3, #3
 8003b5c:	e006      	b.n	8003b6c <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	691b      	ldr	r3, [r3, #16]
 8003b62:	f003 0320 	and.w	r3, r3, #32
 8003b66:	2b20      	cmp	r3, #32
 8003b68:	d0f1      	beq.n	8003b4e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8003b6a:	2300      	movs	r3, #0
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	3714      	adds	r7, #20
 8003b70:	46bd      	mov	sp, r7
 8003b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b76:	4770      	bx	lr
 8003b78:	00030d40 	.word	0x00030d40

08003b7c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	b085      	sub	sp, #20
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003b84:	2300      	movs	r3, #0
 8003b86:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2210      	movs	r2, #16
 8003b8c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	3301      	adds	r3, #1
 8003b92:	60fb      	str	r3, [r7, #12]
 8003b94:	4a08      	ldr	r2, [pc, #32]	; (8003bb8 <USB_FlushRxFifo+0x3c>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d901      	bls.n	8003b9e <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8003b9a:	2303      	movs	r3, #3
 8003b9c:	e006      	b.n	8003bac <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	691b      	ldr	r3, [r3, #16]
 8003ba2:	f003 0310 	and.w	r3, r3, #16
 8003ba6:	2b10      	cmp	r3, #16
 8003ba8:	d0f1      	beq.n	8003b8e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8003baa:	2300      	movs	r3, #0
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	3714      	adds	r7, #20
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb6:	4770      	bx	lr
 8003bb8:	00030d40 	.word	0x00030d40

08003bbc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b085      	sub	sp, #20
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
 8003bc4:	460b      	mov	r3, r1
 8003bc6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bd2:	681a      	ldr	r2, [r3, #0]
 8003bd4:	78fb      	ldrb	r3, [r7, #3]
 8003bd6:	68f9      	ldr	r1, [r7, #12]
 8003bd8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003be0:	2300      	movs	r3, #0
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	3714      	adds	r7, #20
 8003be6:	46bd      	mov	sp, r7
 8003be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bec:	4770      	bx	lr

08003bee <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8003bee:	b480      	push	{r7}
 8003bf0:	b087      	sub	sp, #28
 8003bf2:	af00      	add	r7, sp, #0
 8003bf4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c00:	689b      	ldr	r3, [r3, #8]
 8003c02:	f003 0306 	and.w	r3, r3, #6
 8003c06:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d102      	bne.n	8003c14 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003c0e:	2300      	movs	r3, #0
 8003c10:	75fb      	strb	r3, [r7, #23]
 8003c12:	e00a      	b.n	8003c2a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	2b02      	cmp	r3, #2
 8003c18:	d002      	beq.n	8003c20 <USB_GetDevSpeed+0x32>
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	2b06      	cmp	r3, #6
 8003c1e:	d102      	bne.n	8003c26 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003c20:	2302      	movs	r3, #2
 8003c22:	75fb      	strb	r3, [r7, #23]
 8003c24:	e001      	b.n	8003c2a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003c26:	230f      	movs	r3, #15
 8003c28:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003c2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	371c      	adds	r7, #28
 8003c30:	46bd      	mov	sp, r7
 8003c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c36:	4770      	bx	lr

08003c38 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b085      	sub	sp, #20
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
 8003c40:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	781b      	ldrb	r3, [r3, #0]
 8003c4a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	785b      	ldrb	r3, [r3, #1]
 8003c50:	2b01      	cmp	r3, #1
 8003c52:	d13a      	bne.n	8003cca <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c5a:	69da      	ldr	r2, [r3, #28]
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	781b      	ldrb	r3, [r3, #0]
 8003c60:	f003 030f 	and.w	r3, r3, #15
 8003c64:	2101      	movs	r1, #1
 8003c66:	fa01 f303 	lsl.w	r3, r1, r3
 8003c6a:	b29b      	uxth	r3, r3
 8003c6c:	68f9      	ldr	r1, [r7, #12]
 8003c6e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003c72:	4313      	orrs	r3, r2
 8003c74:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	015a      	lsls	r2, r3, #5
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	4413      	add	r3, r2
 8003c7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d155      	bne.n	8003d38 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003c8c:	68bb      	ldr	r3, [r7, #8]
 8003c8e:	015a      	lsls	r2, r3, #5
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	4413      	add	r3, r2
 8003c94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c98:	681a      	ldr	r2, [r3, #0]
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	78db      	ldrb	r3, [r3, #3]
 8003ca6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003ca8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	059b      	lsls	r3, r3, #22
 8003cae:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	68ba      	ldr	r2, [r7, #8]
 8003cb4:	0151      	lsls	r1, r2, #5
 8003cb6:	68fa      	ldr	r2, [r7, #12]
 8003cb8:	440a      	add	r2, r1
 8003cba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003cbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cc2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003cc6:	6013      	str	r3, [r2, #0]
 8003cc8:	e036      	b.n	8003d38 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cd0:	69da      	ldr	r2, [r3, #28]
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	781b      	ldrb	r3, [r3, #0]
 8003cd6:	f003 030f 	and.w	r3, r3, #15
 8003cda:	2101      	movs	r1, #1
 8003cdc:	fa01 f303 	lsl.w	r3, r1, r3
 8003ce0:	041b      	lsls	r3, r3, #16
 8003ce2:	68f9      	ldr	r1, [r7, #12]
 8003ce4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	015a      	lsls	r2, r3, #5
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	4413      	add	r3, r2
 8003cf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d11a      	bne.n	8003d38 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	015a      	lsls	r2, r3, #5
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	4413      	add	r3, r2
 8003d0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d0e:	681a      	ldr	r2, [r3, #0]
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	689b      	ldr	r3, [r3, #8]
 8003d14:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	78db      	ldrb	r3, [r3, #3]
 8003d1c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003d1e:	430b      	orrs	r3, r1
 8003d20:	4313      	orrs	r3, r2
 8003d22:	68ba      	ldr	r2, [r7, #8]
 8003d24:	0151      	lsls	r1, r2, #5
 8003d26:	68fa      	ldr	r2, [r7, #12]
 8003d28:	440a      	add	r2, r1
 8003d2a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003d2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d36:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003d38:	2300      	movs	r3, #0
}
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	3714      	adds	r7, #20
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d44:	4770      	bx	lr
	...

08003d48 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b085      	sub	sp, #20
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
 8003d50:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	781b      	ldrb	r3, [r3, #0]
 8003d5a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	785b      	ldrb	r3, [r3, #1]
 8003d60:	2b01      	cmp	r3, #1
 8003d62:	d161      	bne.n	8003e28 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	015a      	lsls	r2, r3, #5
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	4413      	add	r3, r2
 8003d6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003d76:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003d7a:	d11f      	bne.n	8003dbc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	015a      	lsls	r2, r3, #5
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	4413      	add	r3, r2
 8003d84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	68ba      	ldr	r2, [r7, #8]
 8003d8c:	0151      	lsls	r1, r2, #5
 8003d8e:	68fa      	ldr	r2, [r7, #12]
 8003d90:	440a      	add	r2, r1
 8003d92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d96:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003d9a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	015a      	lsls	r2, r3, #5
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	4413      	add	r3, r2
 8003da4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	68ba      	ldr	r2, [r7, #8]
 8003dac:	0151      	lsls	r1, r2, #5
 8003dae:	68fa      	ldr	r2, [r7, #12]
 8003db0:	440a      	add	r2, r1
 8003db2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003db6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003dba:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dc2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	781b      	ldrb	r3, [r3, #0]
 8003dc8:	f003 030f 	and.w	r3, r3, #15
 8003dcc:	2101      	movs	r1, #1
 8003dce:	fa01 f303 	lsl.w	r3, r1, r3
 8003dd2:	b29b      	uxth	r3, r3
 8003dd4:	43db      	mvns	r3, r3
 8003dd6:	68f9      	ldr	r1, [r7, #12]
 8003dd8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003ddc:	4013      	ands	r3, r2
 8003dde:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003de6:	69da      	ldr	r2, [r3, #28]
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	781b      	ldrb	r3, [r3, #0]
 8003dec:	f003 030f 	and.w	r3, r3, #15
 8003df0:	2101      	movs	r1, #1
 8003df2:	fa01 f303 	lsl.w	r3, r1, r3
 8003df6:	b29b      	uxth	r3, r3
 8003df8:	43db      	mvns	r3, r3
 8003dfa:	68f9      	ldr	r1, [r7, #12]
 8003dfc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003e00:	4013      	ands	r3, r2
 8003e02:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	015a      	lsls	r2, r3, #5
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	4413      	add	r3, r2
 8003e0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e10:	681a      	ldr	r2, [r3, #0]
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	0159      	lsls	r1, r3, #5
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	440b      	add	r3, r1
 8003e1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e1e:	4619      	mov	r1, r3
 8003e20:	4b35      	ldr	r3, [pc, #212]	; (8003ef8 <USB_DeactivateEndpoint+0x1b0>)
 8003e22:	4013      	ands	r3, r2
 8003e24:	600b      	str	r3, [r1, #0]
 8003e26:	e060      	b.n	8003eea <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	015a      	lsls	r2, r3, #5
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	4413      	add	r3, r2
 8003e30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003e3a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003e3e:	d11f      	bne.n	8003e80 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	015a      	lsls	r2, r3, #5
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	4413      	add	r3, r2
 8003e48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	68ba      	ldr	r2, [r7, #8]
 8003e50:	0151      	lsls	r1, r2, #5
 8003e52:	68fa      	ldr	r2, [r7, #12]
 8003e54:	440a      	add	r2, r1
 8003e56:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003e5a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003e5e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	015a      	lsls	r2, r3, #5
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	4413      	add	r3, r2
 8003e68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	68ba      	ldr	r2, [r7, #8]
 8003e70:	0151      	lsls	r1, r2, #5
 8003e72:	68fa      	ldr	r2, [r7, #12]
 8003e74:	440a      	add	r2, r1
 8003e76:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003e7a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003e7e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e86:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	781b      	ldrb	r3, [r3, #0]
 8003e8c:	f003 030f 	and.w	r3, r3, #15
 8003e90:	2101      	movs	r1, #1
 8003e92:	fa01 f303 	lsl.w	r3, r1, r3
 8003e96:	041b      	lsls	r3, r3, #16
 8003e98:	43db      	mvns	r3, r3
 8003e9a:	68f9      	ldr	r1, [r7, #12]
 8003e9c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003ea0:	4013      	ands	r3, r2
 8003ea2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003eaa:	69da      	ldr	r2, [r3, #28]
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	781b      	ldrb	r3, [r3, #0]
 8003eb0:	f003 030f 	and.w	r3, r3, #15
 8003eb4:	2101      	movs	r1, #1
 8003eb6:	fa01 f303 	lsl.w	r3, r1, r3
 8003eba:	041b      	lsls	r3, r3, #16
 8003ebc:	43db      	mvns	r3, r3
 8003ebe:	68f9      	ldr	r1, [r7, #12]
 8003ec0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003ec4:	4013      	ands	r3, r2
 8003ec6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	015a      	lsls	r2, r3, #5
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	4413      	add	r3, r2
 8003ed0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ed4:	681a      	ldr	r2, [r3, #0]
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	0159      	lsls	r1, r3, #5
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	440b      	add	r3, r1
 8003ede:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ee2:	4619      	mov	r1, r3
 8003ee4:	4b05      	ldr	r3, [pc, #20]	; (8003efc <USB_DeactivateEndpoint+0x1b4>)
 8003ee6:	4013      	ands	r3, r2
 8003ee8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8003eea:	2300      	movs	r3, #0
}
 8003eec:	4618      	mov	r0, r3
 8003eee:	3714      	adds	r7, #20
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef6:	4770      	bx	lr
 8003ef8:	ec337800 	.word	0xec337800
 8003efc:	eff37800 	.word	0xeff37800

08003f00 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b08a      	sub	sp, #40	; 0x28
 8003f04:	af02      	add	r7, sp, #8
 8003f06:	60f8      	str	r0, [r7, #12]
 8003f08:	60b9      	str	r1, [r7, #8]
 8003f0a:	4613      	mov	r3, r2
 8003f0c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8003f12:	68bb      	ldr	r3, [r7, #8]
 8003f14:	781b      	ldrb	r3, [r3, #0]
 8003f16:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	785b      	ldrb	r3, [r3, #1]
 8003f1c:	2b01      	cmp	r3, #1
 8003f1e:	f040 815c 	bne.w	80041da <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003f22:	68bb      	ldr	r3, [r7, #8]
 8003f24:	695b      	ldr	r3, [r3, #20]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d132      	bne.n	8003f90 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003f2a:	69bb      	ldr	r3, [r7, #24]
 8003f2c:	015a      	lsls	r2, r3, #5
 8003f2e:	69fb      	ldr	r3, [r7, #28]
 8003f30:	4413      	add	r3, r2
 8003f32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f36:	691b      	ldr	r3, [r3, #16]
 8003f38:	69ba      	ldr	r2, [r7, #24]
 8003f3a:	0151      	lsls	r1, r2, #5
 8003f3c:	69fa      	ldr	r2, [r7, #28]
 8003f3e:	440a      	add	r2, r1
 8003f40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f44:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003f48:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003f4c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003f4e:	69bb      	ldr	r3, [r7, #24]
 8003f50:	015a      	lsls	r2, r3, #5
 8003f52:	69fb      	ldr	r3, [r7, #28]
 8003f54:	4413      	add	r3, r2
 8003f56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f5a:	691b      	ldr	r3, [r3, #16]
 8003f5c:	69ba      	ldr	r2, [r7, #24]
 8003f5e:	0151      	lsls	r1, r2, #5
 8003f60:	69fa      	ldr	r2, [r7, #28]
 8003f62:	440a      	add	r2, r1
 8003f64:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f68:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003f6c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003f6e:	69bb      	ldr	r3, [r7, #24]
 8003f70:	015a      	lsls	r2, r3, #5
 8003f72:	69fb      	ldr	r3, [r7, #28]
 8003f74:	4413      	add	r3, r2
 8003f76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f7a:	691b      	ldr	r3, [r3, #16]
 8003f7c:	69ba      	ldr	r2, [r7, #24]
 8003f7e:	0151      	lsls	r1, r2, #5
 8003f80:	69fa      	ldr	r2, [r7, #28]
 8003f82:	440a      	add	r2, r1
 8003f84:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f88:	0cdb      	lsrs	r3, r3, #19
 8003f8a:	04db      	lsls	r3, r3, #19
 8003f8c:	6113      	str	r3, [r2, #16]
 8003f8e:	e074      	b.n	800407a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003f90:	69bb      	ldr	r3, [r7, #24]
 8003f92:	015a      	lsls	r2, r3, #5
 8003f94:	69fb      	ldr	r3, [r7, #28]
 8003f96:	4413      	add	r3, r2
 8003f98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f9c:	691b      	ldr	r3, [r3, #16]
 8003f9e:	69ba      	ldr	r2, [r7, #24]
 8003fa0:	0151      	lsls	r1, r2, #5
 8003fa2:	69fa      	ldr	r2, [r7, #28]
 8003fa4:	440a      	add	r2, r1
 8003fa6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003faa:	0cdb      	lsrs	r3, r3, #19
 8003fac:	04db      	lsls	r3, r3, #19
 8003fae:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003fb0:	69bb      	ldr	r3, [r7, #24]
 8003fb2:	015a      	lsls	r2, r3, #5
 8003fb4:	69fb      	ldr	r3, [r7, #28]
 8003fb6:	4413      	add	r3, r2
 8003fb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fbc:	691b      	ldr	r3, [r3, #16]
 8003fbe:	69ba      	ldr	r2, [r7, #24]
 8003fc0:	0151      	lsls	r1, r2, #5
 8003fc2:	69fa      	ldr	r2, [r7, #28]
 8003fc4:	440a      	add	r2, r1
 8003fc6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003fca:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003fce:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003fd2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003fd4:	69bb      	ldr	r3, [r7, #24]
 8003fd6:	015a      	lsls	r2, r3, #5
 8003fd8:	69fb      	ldr	r3, [r7, #28]
 8003fda:	4413      	add	r3, r2
 8003fdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fe0:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8003fe2:	68bb      	ldr	r3, [r7, #8]
 8003fe4:	6959      	ldr	r1, [r3, #20]
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	440b      	add	r3, r1
 8003fec:	1e59      	subs	r1, r3, #1
 8003fee:	68bb      	ldr	r3, [r7, #8]
 8003ff0:	689b      	ldr	r3, [r3, #8]
 8003ff2:	fbb1 f3f3 	udiv	r3, r1, r3
 8003ff6:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003ff8:	4b9d      	ldr	r3, [pc, #628]	; (8004270 <USB_EPStartXfer+0x370>)
 8003ffa:	400b      	ands	r3, r1
 8003ffc:	69b9      	ldr	r1, [r7, #24]
 8003ffe:	0148      	lsls	r0, r1, #5
 8004000:	69f9      	ldr	r1, [r7, #28]
 8004002:	4401      	add	r1, r0
 8004004:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004008:	4313      	orrs	r3, r2
 800400a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800400c:	69bb      	ldr	r3, [r7, #24]
 800400e:	015a      	lsls	r2, r3, #5
 8004010:	69fb      	ldr	r3, [r7, #28]
 8004012:	4413      	add	r3, r2
 8004014:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004018:	691a      	ldr	r2, [r3, #16]
 800401a:	68bb      	ldr	r3, [r7, #8]
 800401c:	695b      	ldr	r3, [r3, #20]
 800401e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004022:	69b9      	ldr	r1, [r7, #24]
 8004024:	0148      	lsls	r0, r1, #5
 8004026:	69f9      	ldr	r1, [r7, #28]
 8004028:	4401      	add	r1, r0
 800402a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800402e:	4313      	orrs	r3, r2
 8004030:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004032:	68bb      	ldr	r3, [r7, #8]
 8004034:	78db      	ldrb	r3, [r3, #3]
 8004036:	2b01      	cmp	r3, #1
 8004038:	d11f      	bne.n	800407a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800403a:	69bb      	ldr	r3, [r7, #24]
 800403c:	015a      	lsls	r2, r3, #5
 800403e:	69fb      	ldr	r3, [r7, #28]
 8004040:	4413      	add	r3, r2
 8004042:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004046:	691b      	ldr	r3, [r3, #16]
 8004048:	69ba      	ldr	r2, [r7, #24]
 800404a:	0151      	lsls	r1, r2, #5
 800404c:	69fa      	ldr	r2, [r7, #28]
 800404e:	440a      	add	r2, r1
 8004050:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004054:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004058:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800405a:	69bb      	ldr	r3, [r7, #24]
 800405c:	015a      	lsls	r2, r3, #5
 800405e:	69fb      	ldr	r3, [r7, #28]
 8004060:	4413      	add	r3, r2
 8004062:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004066:	691b      	ldr	r3, [r3, #16]
 8004068:	69ba      	ldr	r2, [r7, #24]
 800406a:	0151      	lsls	r1, r2, #5
 800406c:	69fa      	ldr	r2, [r7, #28]
 800406e:	440a      	add	r2, r1
 8004070:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004074:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004078:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800407a:	79fb      	ldrb	r3, [r7, #7]
 800407c:	2b01      	cmp	r3, #1
 800407e:	d14b      	bne.n	8004118 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	691b      	ldr	r3, [r3, #16]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d009      	beq.n	800409c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004088:	69bb      	ldr	r3, [r7, #24]
 800408a:	015a      	lsls	r2, r3, #5
 800408c:	69fb      	ldr	r3, [r7, #28]
 800408e:	4413      	add	r3, r2
 8004090:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004094:	461a      	mov	r2, r3
 8004096:	68bb      	ldr	r3, [r7, #8]
 8004098:	691b      	ldr	r3, [r3, #16]
 800409a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	78db      	ldrb	r3, [r3, #3]
 80040a0:	2b01      	cmp	r3, #1
 80040a2:	d128      	bne.n	80040f6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80040a4:	69fb      	ldr	r3, [r7, #28]
 80040a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040aa:	689b      	ldr	r3, [r3, #8]
 80040ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d110      	bne.n	80040d6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80040b4:	69bb      	ldr	r3, [r7, #24]
 80040b6:	015a      	lsls	r2, r3, #5
 80040b8:	69fb      	ldr	r3, [r7, #28]
 80040ba:	4413      	add	r3, r2
 80040bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	69ba      	ldr	r2, [r7, #24]
 80040c4:	0151      	lsls	r1, r2, #5
 80040c6:	69fa      	ldr	r2, [r7, #28]
 80040c8:	440a      	add	r2, r1
 80040ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040ce:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80040d2:	6013      	str	r3, [r2, #0]
 80040d4:	e00f      	b.n	80040f6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80040d6:	69bb      	ldr	r3, [r7, #24]
 80040d8:	015a      	lsls	r2, r3, #5
 80040da:	69fb      	ldr	r3, [r7, #28]
 80040dc:	4413      	add	r3, r2
 80040de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	69ba      	ldr	r2, [r7, #24]
 80040e6:	0151      	lsls	r1, r2, #5
 80040e8:	69fa      	ldr	r2, [r7, #28]
 80040ea:	440a      	add	r2, r1
 80040ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040f4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80040f6:	69bb      	ldr	r3, [r7, #24]
 80040f8:	015a      	lsls	r2, r3, #5
 80040fa:	69fb      	ldr	r3, [r7, #28]
 80040fc:	4413      	add	r3, r2
 80040fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	69ba      	ldr	r2, [r7, #24]
 8004106:	0151      	lsls	r1, r2, #5
 8004108:	69fa      	ldr	r2, [r7, #28]
 800410a:	440a      	add	r2, r1
 800410c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004110:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004114:	6013      	str	r3, [r2, #0]
 8004116:	e12f      	b.n	8004378 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004118:	69bb      	ldr	r3, [r7, #24]
 800411a:	015a      	lsls	r2, r3, #5
 800411c:	69fb      	ldr	r3, [r7, #28]
 800411e:	4413      	add	r3, r2
 8004120:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	69ba      	ldr	r2, [r7, #24]
 8004128:	0151      	lsls	r1, r2, #5
 800412a:	69fa      	ldr	r2, [r7, #28]
 800412c:	440a      	add	r2, r1
 800412e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004132:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004136:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	78db      	ldrb	r3, [r3, #3]
 800413c:	2b01      	cmp	r3, #1
 800413e:	d015      	beq.n	800416c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004140:	68bb      	ldr	r3, [r7, #8]
 8004142:	695b      	ldr	r3, [r3, #20]
 8004144:	2b00      	cmp	r3, #0
 8004146:	f000 8117 	beq.w	8004378 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800414a:	69fb      	ldr	r3, [r7, #28]
 800414c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004150:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	781b      	ldrb	r3, [r3, #0]
 8004156:	f003 030f 	and.w	r3, r3, #15
 800415a:	2101      	movs	r1, #1
 800415c:	fa01 f303 	lsl.w	r3, r1, r3
 8004160:	69f9      	ldr	r1, [r7, #28]
 8004162:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004166:	4313      	orrs	r3, r2
 8004168:	634b      	str	r3, [r1, #52]	; 0x34
 800416a:	e105      	b.n	8004378 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800416c:	69fb      	ldr	r3, [r7, #28]
 800416e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004172:	689b      	ldr	r3, [r3, #8]
 8004174:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004178:	2b00      	cmp	r3, #0
 800417a:	d110      	bne.n	800419e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800417c:	69bb      	ldr	r3, [r7, #24]
 800417e:	015a      	lsls	r2, r3, #5
 8004180:	69fb      	ldr	r3, [r7, #28]
 8004182:	4413      	add	r3, r2
 8004184:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	69ba      	ldr	r2, [r7, #24]
 800418c:	0151      	lsls	r1, r2, #5
 800418e:	69fa      	ldr	r2, [r7, #28]
 8004190:	440a      	add	r2, r1
 8004192:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004196:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800419a:	6013      	str	r3, [r2, #0]
 800419c:	e00f      	b.n	80041be <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800419e:	69bb      	ldr	r3, [r7, #24]
 80041a0:	015a      	lsls	r2, r3, #5
 80041a2:	69fb      	ldr	r3, [r7, #28]
 80041a4:	4413      	add	r3, r2
 80041a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	69ba      	ldr	r2, [r7, #24]
 80041ae:	0151      	lsls	r1, r2, #5
 80041b0:	69fa      	ldr	r2, [r7, #28]
 80041b2:	440a      	add	r2, r1
 80041b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041bc:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80041be:	68bb      	ldr	r3, [r7, #8]
 80041c0:	68d9      	ldr	r1, [r3, #12]
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	781a      	ldrb	r2, [r3, #0]
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	695b      	ldr	r3, [r3, #20]
 80041ca:	b298      	uxth	r0, r3
 80041cc:	79fb      	ldrb	r3, [r7, #7]
 80041ce:	9300      	str	r3, [sp, #0]
 80041d0:	4603      	mov	r3, r0
 80041d2:	68f8      	ldr	r0, [r7, #12]
 80041d4:	f000 fa2b 	bl	800462e <USB_WritePacket>
 80041d8:	e0ce      	b.n	8004378 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80041da:	69bb      	ldr	r3, [r7, #24]
 80041dc:	015a      	lsls	r2, r3, #5
 80041de:	69fb      	ldr	r3, [r7, #28]
 80041e0:	4413      	add	r3, r2
 80041e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041e6:	691b      	ldr	r3, [r3, #16]
 80041e8:	69ba      	ldr	r2, [r7, #24]
 80041ea:	0151      	lsls	r1, r2, #5
 80041ec:	69fa      	ldr	r2, [r7, #28]
 80041ee:	440a      	add	r2, r1
 80041f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80041f4:	0cdb      	lsrs	r3, r3, #19
 80041f6:	04db      	lsls	r3, r3, #19
 80041f8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80041fa:	69bb      	ldr	r3, [r7, #24]
 80041fc:	015a      	lsls	r2, r3, #5
 80041fe:	69fb      	ldr	r3, [r7, #28]
 8004200:	4413      	add	r3, r2
 8004202:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004206:	691b      	ldr	r3, [r3, #16]
 8004208:	69ba      	ldr	r2, [r7, #24]
 800420a:	0151      	lsls	r1, r2, #5
 800420c:	69fa      	ldr	r2, [r7, #28]
 800420e:	440a      	add	r2, r1
 8004210:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004214:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004218:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800421c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	695b      	ldr	r3, [r3, #20]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d126      	bne.n	8004274 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004226:	69bb      	ldr	r3, [r7, #24]
 8004228:	015a      	lsls	r2, r3, #5
 800422a:	69fb      	ldr	r3, [r7, #28]
 800422c:	4413      	add	r3, r2
 800422e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004232:	691a      	ldr	r2, [r3, #16]
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	689b      	ldr	r3, [r3, #8]
 8004238:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800423c:	69b9      	ldr	r1, [r7, #24]
 800423e:	0148      	lsls	r0, r1, #5
 8004240:	69f9      	ldr	r1, [r7, #28]
 8004242:	4401      	add	r1, r0
 8004244:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004248:	4313      	orrs	r3, r2
 800424a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800424c:	69bb      	ldr	r3, [r7, #24]
 800424e:	015a      	lsls	r2, r3, #5
 8004250:	69fb      	ldr	r3, [r7, #28]
 8004252:	4413      	add	r3, r2
 8004254:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004258:	691b      	ldr	r3, [r3, #16]
 800425a:	69ba      	ldr	r2, [r7, #24]
 800425c:	0151      	lsls	r1, r2, #5
 800425e:	69fa      	ldr	r2, [r7, #28]
 8004260:	440a      	add	r2, r1
 8004262:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004266:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800426a:	6113      	str	r3, [r2, #16]
 800426c:	e036      	b.n	80042dc <USB_EPStartXfer+0x3dc>
 800426e:	bf00      	nop
 8004270:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	695a      	ldr	r2, [r3, #20]
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	689b      	ldr	r3, [r3, #8]
 800427c:	4413      	add	r3, r2
 800427e:	1e5a      	subs	r2, r3, #1
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	fbb2 f3f3 	udiv	r3, r2, r3
 8004288:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800428a:	69bb      	ldr	r3, [r7, #24]
 800428c:	015a      	lsls	r2, r3, #5
 800428e:	69fb      	ldr	r3, [r7, #28]
 8004290:	4413      	add	r3, r2
 8004292:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004296:	691a      	ldr	r2, [r3, #16]
 8004298:	8afb      	ldrh	r3, [r7, #22]
 800429a:	04d9      	lsls	r1, r3, #19
 800429c:	4b39      	ldr	r3, [pc, #228]	; (8004384 <USB_EPStartXfer+0x484>)
 800429e:	400b      	ands	r3, r1
 80042a0:	69b9      	ldr	r1, [r7, #24]
 80042a2:	0148      	lsls	r0, r1, #5
 80042a4:	69f9      	ldr	r1, [r7, #28]
 80042a6:	4401      	add	r1, r0
 80042a8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80042ac:	4313      	orrs	r3, r2
 80042ae:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80042b0:	69bb      	ldr	r3, [r7, #24]
 80042b2:	015a      	lsls	r2, r3, #5
 80042b4:	69fb      	ldr	r3, [r7, #28]
 80042b6:	4413      	add	r3, r2
 80042b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042bc:	691a      	ldr	r2, [r3, #16]
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	689b      	ldr	r3, [r3, #8]
 80042c2:	8af9      	ldrh	r1, [r7, #22]
 80042c4:	fb01 f303 	mul.w	r3, r1, r3
 80042c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042cc:	69b9      	ldr	r1, [r7, #24]
 80042ce:	0148      	lsls	r0, r1, #5
 80042d0:	69f9      	ldr	r1, [r7, #28]
 80042d2:	4401      	add	r1, r0
 80042d4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80042d8:	4313      	orrs	r3, r2
 80042da:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80042dc:	79fb      	ldrb	r3, [r7, #7]
 80042de:	2b01      	cmp	r3, #1
 80042e0:	d10d      	bne.n	80042fe <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	68db      	ldr	r3, [r3, #12]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d009      	beq.n	80042fe <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	68d9      	ldr	r1, [r3, #12]
 80042ee:	69bb      	ldr	r3, [r7, #24]
 80042f0:	015a      	lsls	r2, r3, #5
 80042f2:	69fb      	ldr	r3, [r7, #28]
 80042f4:	4413      	add	r3, r2
 80042f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042fa:	460a      	mov	r2, r1
 80042fc:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	78db      	ldrb	r3, [r3, #3]
 8004302:	2b01      	cmp	r3, #1
 8004304:	d128      	bne.n	8004358 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004306:	69fb      	ldr	r3, [r7, #28]
 8004308:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800430c:	689b      	ldr	r3, [r3, #8]
 800430e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004312:	2b00      	cmp	r3, #0
 8004314:	d110      	bne.n	8004338 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004316:	69bb      	ldr	r3, [r7, #24]
 8004318:	015a      	lsls	r2, r3, #5
 800431a:	69fb      	ldr	r3, [r7, #28]
 800431c:	4413      	add	r3, r2
 800431e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	69ba      	ldr	r2, [r7, #24]
 8004326:	0151      	lsls	r1, r2, #5
 8004328:	69fa      	ldr	r2, [r7, #28]
 800432a:	440a      	add	r2, r1
 800432c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004330:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004334:	6013      	str	r3, [r2, #0]
 8004336:	e00f      	b.n	8004358 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004338:	69bb      	ldr	r3, [r7, #24]
 800433a:	015a      	lsls	r2, r3, #5
 800433c:	69fb      	ldr	r3, [r7, #28]
 800433e:	4413      	add	r3, r2
 8004340:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	69ba      	ldr	r2, [r7, #24]
 8004348:	0151      	lsls	r1, r2, #5
 800434a:	69fa      	ldr	r2, [r7, #28]
 800434c:	440a      	add	r2, r1
 800434e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004352:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004356:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004358:	69bb      	ldr	r3, [r7, #24]
 800435a:	015a      	lsls	r2, r3, #5
 800435c:	69fb      	ldr	r3, [r7, #28]
 800435e:	4413      	add	r3, r2
 8004360:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	69ba      	ldr	r2, [r7, #24]
 8004368:	0151      	lsls	r1, r2, #5
 800436a:	69fa      	ldr	r2, [r7, #28]
 800436c:	440a      	add	r2, r1
 800436e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004372:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004376:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004378:	2300      	movs	r3, #0
}
 800437a:	4618      	mov	r0, r3
 800437c:	3720      	adds	r7, #32
 800437e:	46bd      	mov	sp, r7
 8004380:	bd80      	pop	{r7, pc}
 8004382:	bf00      	nop
 8004384:	1ff80000 	.word	0x1ff80000

08004388 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004388:	b480      	push	{r7}
 800438a:	b087      	sub	sp, #28
 800438c:	af00      	add	r7, sp, #0
 800438e:	60f8      	str	r0, [r7, #12]
 8004390:	60b9      	str	r1, [r7, #8]
 8004392:	4613      	mov	r3, r2
 8004394:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800439a:	68bb      	ldr	r3, [r7, #8]
 800439c:	781b      	ldrb	r3, [r3, #0]
 800439e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	785b      	ldrb	r3, [r3, #1]
 80043a4:	2b01      	cmp	r3, #1
 80043a6:	f040 80cd 	bne.w	8004544 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80043aa:	68bb      	ldr	r3, [r7, #8]
 80043ac:	695b      	ldr	r3, [r3, #20]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d132      	bne.n	8004418 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80043b2:	693b      	ldr	r3, [r7, #16]
 80043b4:	015a      	lsls	r2, r3, #5
 80043b6:	697b      	ldr	r3, [r7, #20]
 80043b8:	4413      	add	r3, r2
 80043ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043be:	691b      	ldr	r3, [r3, #16]
 80043c0:	693a      	ldr	r2, [r7, #16]
 80043c2:	0151      	lsls	r1, r2, #5
 80043c4:	697a      	ldr	r2, [r7, #20]
 80043c6:	440a      	add	r2, r1
 80043c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043cc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80043d0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80043d4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80043d6:	693b      	ldr	r3, [r7, #16]
 80043d8:	015a      	lsls	r2, r3, #5
 80043da:	697b      	ldr	r3, [r7, #20]
 80043dc:	4413      	add	r3, r2
 80043de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043e2:	691b      	ldr	r3, [r3, #16]
 80043e4:	693a      	ldr	r2, [r7, #16]
 80043e6:	0151      	lsls	r1, r2, #5
 80043e8:	697a      	ldr	r2, [r7, #20]
 80043ea:	440a      	add	r2, r1
 80043ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043f0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80043f4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80043f6:	693b      	ldr	r3, [r7, #16]
 80043f8:	015a      	lsls	r2, r3, #5
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	4413      	add	r3, r2
 80043fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004402:	691b      	ldr	r3, [r3, #16]
 8004404:	693a      	ldr	r2, [r7, #16]
 8004406:	0151      	lsls	r1, r2, #5
 8004408:	697a      	ldr	r2, [r7, #20]
 800440a:	440a      	add	r2, r1
 800440c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004410:	0cdb      	lsrs	r3, r3, #19
 8004412:	04db      	lsls	r3, r3, #19
 8004414:	6113      	str	r3, [r2, #16]
 8004416:	e04e      	b.n	80044b6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004418:	693b      	ldr	r3, [r7, #16]
 800441a:	015a      	lsls	r2, r3, #5
 800441c:	697b      	ldr	r3, [r7, #20]
 800441e:	4413      	add	r3, r2
 8004420:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004424:	691b      	ldr	r3, [r3, #16]
 8004426:	693a      	ldr	r2, [r7, #16]
 8004428:	0151      	lsls	r1, r2, #5
 800442a:	697a      	ldr	r2, [r7, #20]
 800442c:	440a      	add	r2, r1
 800442e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004432:	0cdb      	lsrs	r3, r3, #19
 8004434:	04db      	lsls	r3, r3, #19
 8004436:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004438:	693b      	ldr	r3, [r7, #16]
 800443a:	015a      	lsls	r2, r3, #5
 800443c:	697b      	ldr	r3, [r7, #20]
 800443e:	4413      	add	r3, r2
 8004440:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004444:	691b      	ldr	r3, [r3, #16]
 8004446:	693a      	ldr	r2, [r7, #16]
 8004448:	0151      	lsls	r1, r2, #5
 800444a:	697a      	ldr	r2, [r7, #20]
 800444c:	440a      	add	r2, r1
 800444e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004452:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004456:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800445a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	695a      	ldr	r2, [r3, #20]
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	689b      	ldr	r3, [r3, #8]
 8004464:	429a      	cmp	r2, r3
 8004466:	d903      	bls.n	8004470 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	689a      	ldr	r2, [r3, #8]
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004470:	693b      	ldr	r3, [r7, #16]
 8004472:	015a      	lsls	r2, r3, #5
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	4413      	add	r3, r2
 8004478:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800447c:	691b      	ldr	r3, [r3, #16]
 800447e:	693a      	ldr	r2, [r7, #16]
 8004480:	0151      	lsls	r1, r2, #5
 8004482:	697a      	ldr	r2, [r7, #20]
 8004484:	440a      	add	r2, r1
 8004486:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800448a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800448e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004490:	693b      	ldr	r3, [r7, #16]
 8004492:	015a      	lsls	r2, r3, #5
 8004494:	697b      	ldr	r3, [r7, #20]
 8004496:	4413      	add	r3, r2
 8004498:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800449c:	691a      	ldr	r2, [r3, #16]
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	695b      	ldr	r3, [r3, #20]
 80044a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044a6:	6939      	ldr	r1, [r7, #16]
 80044a8:	0148      	lsls	r0, r1, #5
 80044aa:	6979      	ldr	r1, [r7, #20]
 80044ac:	4401      	add	r1, r0
 80044ae:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80044b2:	4313      	orrs	r3, r2
 80044b4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80044b6:	79fb      	ldrb	r3, [r7, #7]
 80044b8:	2b01      	cmp	r3, #1
 80044ba:	d11e      	bne.n	80044fa <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	691b      	ldr	r3, [r3, #16]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d009      	beq.n	80044d8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80044c4:	693b      	ldr	r3, [r7, #16]
 80044c6:	015a      	lsls	r2, r3, #5
 80044c8:	697b      	ldr	r3, [r7, #20]
 80044ca:	4413      	add	r3, r2
 80044cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044d0:	461a      	mov	r2, r3
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	691b      	ldr	r3, [r3, #16]
 80044d6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	015a      	lsls	r2, r3, #5
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	4413      	add	r3, r2
 80044e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	693a      	ldr	r2, [r7, #16]
 80044e8:	0151      	lsls	r1, r2, #5
 80044ea:	697a      	ldr	r2, [r7, #20]
 80044ec:	440a      	add	r2, r1
 80044ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044f2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80044f6:	6013      	str	r3, [r2, #0]
 80044f8:	e092      	b.n	8004620 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	015a      	lsls	r2, r3, #5
 80044fe:	697b      	ldr	r3, [r7, #20]
 8004500:	4413      	add	r3, r2
 8004502:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	693a      	ldr	r2, [r7, #16]
 800450a:	0151      	lsls	r1, r2, #5
 800450c:	697a      	ldr	r2, [r7, #20]
 800450e:	440a      	add	r2, r1
 8004510:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004514:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004518:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	695b      	ldr	r3, [r3, #20]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d07e      	beq.n	8004620 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004522:	697b      	ldr	r3, [r7, #20]
 8004524:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004528:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	781b      	ldrb	r3, [r3, #0]
 800452e:	f003 030f 	and.w	r3, r3, #15
 8004532:	2101      	movs	r1, #1
 8004534:	fa01 f303 	lsl.w	r3, r1, r3
 8004538:	6979      	ldr	r1, [r7, #20]
 800453a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800453e:	4313      	orrs	r3, r2
 8004540:	634b      	str	r3, [r1, #52]	; 0x34
 8004542:	e06d      	b.n	8004620 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	015a      	lsls	r2, r3, #5
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	4413      	add	r3, r2
 800454c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004550:	691b      	ldr	r3, [r3, #16]
 8004552:	693a      	ldr	r2, [r7, #16]
 8004554:	0151      	lsls	r1, r2, #5
 8004556:	697a      	ldr	r2, [r7, #20]
 8004558:	440a      	add	r2, r1
 800455a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800455e:	0cdb      	lsrs	r3, r3, #19
 8004560:	04db      	lsls	r3, r3, #19
 8004562:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004564:	693b      	ldr	r3, [r7, #16]
 8004566:	015a      	lsls	r2, r3, #5
 8004568:	697b      	ldr	r3, [r7, #20]
 800456a:	4413      	add	r3, r2
 800456c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004570:	691b      	ldr	r3, [r3, #16]
 8004572:	693a      	ldr	r2, [r7, #16]
 8004574:	0151      	lsls	r1, r2, #5
 8004576:	697a      	ldr	r2, [r7, #20]
 8004578:	440a      	add	r2, r1
 800457a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800457e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004582:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004586:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	695b      	ldr	r3, [r3, #20]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d003      	beq.n	8004598 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	689a      	ldr	r2, [r3, #8]
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004598:	693b      	ldr	r3, [r7, #16]
 800459a:	015a      	lsls	r2, r3, #5
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	4413      	add	r3, r2
 80045a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045a4:	691b      	ldr	r3, [r3, #16]
 80045a6:	693a      	ldr	r2, [r7, #16]
 80045a8:	0151      	lsls	r1, r2, #5
 80045aa:	697a      	ldr	r2, [r7, #20]
 80045ac:	440a      	add	r2, r1
 80045ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80045b2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80045b6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80045b8:	693b      	ldr	r3, [r7, #16]
 80045ba:	015a      	lsls	r2, r3, #5
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	4413      	add	r3, r2
 80045c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045c4:	691a      	ldr	r2, [r3, #16]
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	689b      	ldr	r3, [r3, #8]
 80045ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045ce:	6939      	ldr	r1, [r7, #16]
 80045d0:	0148      	lsls	r0, r1, #5
 80045d2:	6979      	ldr	r1, [r7, #20]
 80045d4:	4401      	add	r1, r0
 80045d6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80045da:	4313      	orrs	r3, r2
 80045dc:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80045de:	79fb      	ldrb	r3, [r7, #7]
 80045e0:	2b01      	cmp	r3, #1
 80045e2:	d10d      	bne.n	8004600 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	68db      	ldr	r3, [r3, #12]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d009      	beq.n	8004600 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	68d9      	ldr	r1, [r3, #12]
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	015a      	lsls	r2, r3, #5
 80045f4:	697b      	ldr	r3, [r7, #20]
 80045f6:	4413      	add	r3, r2
 80045f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045fc:	460a      	mov	r2, r1
 80045fe:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	015a      	lsls	r2, r3, #5
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	4413      	add	r3, r2
 8004608:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	693a      	ldr	r2, [r7, #16]
 8004610:	0151      	lsls	r1, r2, #5
 8004612:	697a      	ldr	r2, [r7, #20]
 8004614:	440a      	add	r2, r1
 8004616:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800461a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800461e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004620:	2300      	movs	r3, #0
}
 8004622:	4618      	mov	r0, r3
 8004624:	371c      	adds	r7, #28
 8004626:	46bd      	mov	sp, r7
 8004628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462c:	4770      	bx	lr

0800462e <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800462e:	b480      	push	{r7}
 8004630:	b089      	sub	sp, #36	; 0x24
 8004632:	af00      	add	r7, sp, #0
 8004634:	60f8      	str	r0, [r7, #12]
 8004636:	60b9      	str	r1, [r7, #8]
 8004638:	4611      	mov	r1, r2
 800463a:	461a      	mov	r2, r3
 800463c:	460b      	mov	r3, r1
 800463e:	71fb      	strb	r3, [r7, #7]
 8004640:	4613      	mov	r3, r2
 8004642:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800464c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004650:	2b00      	cmp	r3, #0
 8004652:	d123      	bne.n	800469c <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004654:	88bb      	ldrh	r3, [r7, #4]
 8004656:	3303      	adds	r3, #3
 8004658:	089b      	lsrs	r3, r3, #2
 800465a:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800465c:	2300      	movs	r3, #0
 800465e:	61bb      	str	r3, [r7, #24]
 8004660:	e018      	b.n	8004694 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004662:	79fb      	ldrb	r3, [r7, #7]
 8004664:	031a      	lsls	r2, r3, #12
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	4413      	add	r3, r2
 800466a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800466e:	461a      	mov	r2, r3
 8004670:	69fb      	ldr	r3, [r7, #28]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004676:	69fb      	ldr	r3, [r7, #28]
 8004678:	3301      	adds	r3, #1
 800467a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800467c:	69fb      	ldr	r3, [r7, #28]
 800467e:	3301      	adds	r3, #1
 8004680:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004682:	69fb      	ldr	r3, [r7, #28]
 8004684:	3301      	adds	r3, #1
 8004686:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004688:	69fb      	ldr	r3, [r7, #28]
 800468a:	3301      	adds	r3, #1
 800468c:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800468e:	69bb      	ldr	r3, [r7, #24]
 8004690:	3301      	adds	r3, #1
 8004692:	61bb      	str	r3, [r7, #24]
 8004694:	69ba      	ldr	r2, [r7, #24]
 8004696:	693b      	ldr	r3, [r7, #16]
 8004698:	429a      	cmp	r2, r3
 800469a:	d3e2      	bcc.n	8004662 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800469c:	2300      	movs	r3, #0
}
 800469e:	4618      	mov	r0, r3
 80046a0:	3724      	adds	r7, #36	; 0x24
 80046a2:	46bd      	mov	sp, r7
 80046a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a8:	4770      	bx	lr

080046aa <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80046aa:	b480      	push	{r7}
 80046ac:	b08b      	sub	sp, #44	; 0x2c
 80046ae:	af00      	add	r7, sp, #0
 80046b0:	60f8      	str	r0, [r7, #12]
 80046b2:	60b9      	str	r1, [r7, #8]
 80046b4:	4613      	mov	r3, r2
 80046b6:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80046c0:	88fb      	ldrh	r3, [r7, #6]
 80046c2:	089b      	lsrs	r3, r3, #2
 80046c4:	b29b      	uxth	r3, r3
 80046c6:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80046c8:	88fb      	ldrh	r3, [r7, #6]
 80046ca:	f003 0303 	and.w	r3, r3, #3
 80046ce:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80046d0:	2300      	movs	r3, #0
 80046d2:	623b      	str	r3, [r7, #32]
 80046d4:	e014      	b.n	8004700 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80046d6:	69bb      	ldr	r3, [r7, #24]
 80046d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046dc:	681a      	ldr	r2, [r3, #0]
 80046de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e0:	601a      	str	r2, [r3, #0]
    pDest++;
 80046e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e4:	3301      	adds	r3, #1
 80046e6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80046e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ea:	3301      	adds	r3, #1
 80046ec:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80046ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f0:	3301      	adds	r3, #1
 80046f2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80046f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f6:	3301      	adds	r3, #1
 80046f8:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80046fa:	6a3b      	ldr	r3, [r7, #32]
 80046fc:	3301      	adds	r3, #1
 80046fe:	623b      	str	r3, [r7, #32]
 8004700:	6a3a      	ldr	r2, [r7, #32]
 8004702:	697b      	ldr	r3, [r7, #20]
 8004704:	429a      	cmp	r2, r3
 8004706:	d3e6      	bcc.n	80046d6 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004708:	8bfb      	ldrh	r3, [r7, #30]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d01e      	beq.n	800474c <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800470e:	2300      	movs	r3, #0
 8004710:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004712:	69bb      	ldr	r3, [r7, #24]
 8004714:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004718:	461a      	mov	r2, r3
 800471a:	f107 0310 	add.w	r3, r7, #16
 800471e:	6812      	ldr	r2, [r2, #0]
 8004720:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004722:	693a      	ldr	r2, [r7, #16]
 8004724:	6a3b      	ldr	r3, [r7, #32]
 8004726:	b2db      	uxtb	r3, r3
 8004728:	00db      	lsls	r3, r3, #3
 800472a:	fa22 f303 	lsr.w	r3, r2, r3
 800472e:	b2da      	uxtb	r2, r3
 8004730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004732:	701a      	strb	r2, [r3, #0]
      i++;
 8004734:	6a3b      	ldr	r3, [r7, #32]
 8004736:	3301      	adds	r3, #1
 8004738:	623b      	str	r3, [r7, #32]
      pDest++;
 800473a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800473c:	3301      	adds	r3, #1
 800473e:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004740:	8bfb      	ldrh	r3, [r7, #30]
 8004742:	3b01      	subs	r3, #1
 8004744:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004746:	8bfb      	ldrh	r3, [r7, #30]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d1ea      	bne.n	8004722 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800474c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800474e:	4618      	mov	r0, r3
 8004750:	372c      	adds	r7, #44	; 0x2c
 8004752:	46bd      	mov	sp, r7
 8004754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004758:	4770      	bx	lr

0800475a <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800475a:	b480      	push	{r7}
 800475c:	b085      	sub	sp, #20
 800475e:	af00      	add	r7, sp, #0
 8004760:	6078      	str	r0, [r7, #4]
 8004762:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	781b      	ldrb	r3, [r3, #0]
 800476c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	785b      	ldrb	r3, [r3, #1]
 8004772:	2b01      	cmp	r3, #1
 8004774:	d12c      	bne.n	80047d0 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	015a      	lsls	r2, r3, #5
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	4413      	add	r3, r2
 800477e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	2b00      	cmp	r3, #0
 8004786:	db12      	blt.n	80047ae <USB_EPSetStall+0x54>
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d00f      	beq.n	80047ae <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	015a      	lsls	r2, r3, #5
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	4413      	add	r3, r2
 8004796:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	68ba      	ldr	r2, [r7, #8]
 800479e:	0151      	lsls	r1, r2, #5
 80047a0:	68fa      	ldr	r2, [r7, #12]
 80047a2:	440a      	add	r2, r1
 80047a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047a8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80047ac:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	015a      	lsls	r2, r3, #5
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	4413      	add	r3, r2
 80047b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	68ba      	ldr	r2, [r7, #8]
 80047be:	0151      	lsls	r1, r2, #5
 80047c0:	68fa      	ldr	r2, [r7, #12]
 80047c2:	440a      	add	r2, r1
 80047c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047c8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80047cc:	6013      	str	r3, [r2, #0]
 80047ce:	e02b      	b.n	8004828 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80047d0:	68bb      	ldr	r3, [r7, #8]
 80047d2:	015a      	lsls	r2, r3, #5
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	4413      	add	r3, r2
 80047d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	db12      	blt.n	8004808 <USB_EPSetStall+0xae>
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d00f      	beq.n	8004808 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	015a      	lsls	r2, r3, #5
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	4413      	add	r3, r2
 80047f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	68ba      	ldr	r2, [r7, #8]
 80047f8:	0151      	lsls	r1, r2, #5
 80047fa:	68fa      	ldr	r2, [r7, #12]
 80047fc:	440a      	add	r2, r1
 80047fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004802:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004806:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	015a      	lsls	r2, r3, #5
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	4413      	add	r3, r2
 8004810:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	68ba      	ldr	r2, [r7, #8]
 8004818:	0151      	lsls	r1, r2, #5
 800481a:	68fa      	ldr	r2, [r7, #12]
 800481c:	440a      	add	r2, r1
 800481e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004822:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004826:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004828:	2300      	movs	r3, #0
}
 800482a:	4618      	mov	r0, r3
 800482c:	3714      	adds	r7, #20
 800482e:	46bd      	mov	sp, r7
 8004830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004834:	4770      	bx	lr

08004836 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004836:	b480      	push	{r7}
 8004838:	b085      	sub	sp, #20
 800483a:	af00      	add	r7, sp, #0
 800483c:	6078      	str	r0, [r7, #4]
 800483e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	781b      	ldrb	r3, [r3, #0]
 8004848:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	785b      	ldrb	r3, [r3, #1]
 800484e:	2b01      	cmp	r3, #1
 8004850:	d128      	bne.n	80048a4 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004852:	68bb      	ldr	r3, [r7, #8]
 8004854:	015a      	lsls	r2, r3, #5
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	4413      	add	r3, r2
 800485a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	68ba      	ldr	r2, [r7, #8]
 8004862:	0151      	lsls	r1, r2, #5
 8004864:	68fa      	ldr	r2, [r7, #12]
 8004866:	440a      	add	r2, r1
 8004868:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800486c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004870:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	78db      	ldrb	r3, [r3, #3]
 8004876:	2b03      	cmp	r3, #3
 8004878:	d003      	beq.n	8004882 <USB_EPClearStall+0x4c>
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	78db      	ldrb	r3, [r3, #3]
 800487e:	2b02      	cmp	r3, #2
 8004880:	d138      	bne.n	80048f4 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004882:	68bb      	ldr	r3, [r7, #8]
 8004884:	015a      	lsls	r2, r3, #5
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	4413      	add	r3, r2
 800488a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	68ba      	ldr	r2, [r7, #8]
 8004892:	0151      	lsls	r1, r2, #5
 8004894:	68fa      	ldr	r2, [r7, #12]
 8004896:	440a      	add	r2, r1
 8004898:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800489c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048a0:	6013      	str	r3, [r2, #0]
 80048a2:	e027      	b.n	80048f4 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	015a      	lsls	r2, r3, #5
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	4413      	add	r3, r2
 80048ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	68ba      	ldr	r2, [r7, #8]
 80048b4:	0151      	lsls	r1, r2, #5
 80048b6:	68fa      	ldr	r2, [r7, #12]
 80048b8:	440a      	add	r2, r1
 80048ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80048be:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80048c2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	78db      	ldrb	r3, [r3, #3]
 80048c8:	2b03      	cmp	r3, #3
 80048ca:	d003      	beq.n	80048d4 <USB_EPClearStall+0x9e>
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	78db      	ldrb	r3, [r3, #3]
 80048d0:	2b02      	cmp	r3, #2
 80048d2:	d10f      	bne.n	80048f4 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80048d4:	68bb      	ldr	r3, [r7, #8]
 80048d6:	015a      	lsls	r2, r3, #5
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	4413      	add	r3, r2
 80048dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	68ba      	ldr	r2, [r7, #8]
 80048e4:	0151      	lsls	r1, r2, #5
 80048e6:	68fa      	ldr	r2, [r7, #12]
 80048e8:	440a      	add	r2, r1
 80048ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80048ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048f2:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80048f4:	2300      	movs	r3, #0
}
 80048f6:	4618      	mov	r0, r3
 80048f8:	3714      	adds	r7, #20
 80048fa:	46bd      	mov	sp, r7
 80048fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004900:	4770      	bx	lr

08004902 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004902:	b480      	push	{r7}
 8004904:	b085      	sub	sp, #20
 8004906:	af00      	add	r7, sp, #0
 8004908:	6078      	str	r0, [r7, #4]
 800490a:	460b      	mov	r3, r1
 800490c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	68fa      	ldr	r2, [r7, #12]
 800491c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004920:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004924:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800492c:	681a      	ldr	r2, [r3, #0]
 800492e:	78fb      	ldrb	r3, [r7, #3]
 8004930:	011b      	lsls	r3, r3, #4
 8004932:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004936:	68f9      	ldr	r1, [r7, #12]
 8004938:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800493c:	4313      	orrs	r3, r2
 800493e:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004940:	2300      	movs	r3, #0
}
 8004942:	4618      	mov	r0, r3
 8004944:	3714      	adds	r7, #20
 8004946:	46bd      	mov	sp, r7
 8004948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494c:	4770      	bx	lr

0800494e <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800494e:	b480      	push	{r7}
 8004950:	b085      	sub	sp, #20
 8004952:	af00      	add	r7, sp, #0
 8004954:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	68fa      	ldr	r2, [r7, #12]
 8004964:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004968:	f023 0303 	bic.w	r3, r3, #3
 800496c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	68fa      	ldr	r2, [r7, #12]
 8004978:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800497c:	f023 0302 	bic.w	r3, r3, #2
 8004980:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004982:	2300      	movs	r3, #0
}
 8004984:	4618      	mov	r0, r3
 8004986:	3714      	adds	r7, #20
 8004988:	46bd      	mov	sp, r7
 800498a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498e:	4770      	bx	lr

08004990 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004990:	b480      	push	{r7}
 8004992:	b085      	sub	sp, #20
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	68fa      	ldr	r2, [r7, #12]
 80049a6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80049aa:	f023 0303 	bic.w	r3, r3, #3
 80049ae:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049b6:	685b      	ldr	r3, [r3, #4]
 80049b8:	68fa      	ldr	r2, [r7, #12]
 80049ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80049be:	f043 0302 	orr.w	r3, r3, #2
 80049c2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80049c4:	2300      	movs	r3, #0
}
 80049c6:	4618      	mov	r0, r3
 80049c8:	3714      	adds	r7, #20
 80049ca:	46bd      	mov	sp, r7
 80049cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d0:	4770      	bx	lr

080049d2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80049d2:	b480      	push	{r7}
 80049d4:	b085      	sub	sp, #20
 80049d6:	af00      	add	r7, sp, #0
 80049d8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	695b      	ldr	r3, [r3, #20]
 80049de:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	699b      	ldr	r3, [r3, #24]
 80049e4:	68fa      	ldr	r2, [r7, #12]
 80049e6:	4013      	ands	r3, r2
 80049e8:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80049ea:	68fb      	ldr	r3, [r7, #12]
}
 80049ec:	4618      	mov	r0, r3
 80049ee:	3714      	adds	r7, #20
 80049f0:	46bd      	mov	sp, r7
 80049f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f6:	4770      	bx	lr

080049f8 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80049f8:	b480      	push	{r7}
 80049fa:	b085      	sub	sp, #20
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a0a:	699b      	ldr	r3, [r3, #24]
 8004a0c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a14:	69db      	ldr	r3, [r3, #28]
 8004a16:	68ba      	ldr	r2, [r7, #8]
 8004a18:	4013      	ands	r3, r2
 8004a1a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	0c1b      	lsrs	r3, r3, #16
}
 8004a20:	4618      	mov	r0, r3
 8004a22:	3714      	adds	r7, #20
 8004a24:	46bd      	mov	sp, r7
 8004a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2a:	4770      	bx	lr

08004a2c <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b085      	sub	sp, #20
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a3e:	699b      	ldr	r3, [r3, #24]
 8004a40:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a48:	69db      	ldr	r3, [r3, #28]
 8004a4a:	68ba      	ldr	r2, [r7, #8]
 8004a4c:	4013      	ands	r3, r2
 8004a4e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	b29b      	uxth	r3, r3
}
 8004a54:	4618      	mov	r0, r3
 8004a56:	3714      	adds	r7, #20
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5e:	4770      	bx	lr

08004a60 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004a60:	b480      	push	{r7}
 8004a62:	b085      	sub	sp, #20
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
 8004a68:	460b      	mov	r3, r1
 8004a6a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004a70:	78fb      	ldrb	r3, [r7, #3]
 8004a72:	015a      	lsls	r2, r3, #5
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	4413      	add	r3, r2
 8004a78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a7c:	689b      	ldr	r3, [r3, #8]
 8004a7e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a86:	695b      	ldr	r3, [r3, #20]
 8004a88:	68ba      	ldr	r2, [r7, #8]
 8004a8a:	4013      	ands	r3, r2
 8004a8c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004a8e:	68bb      	ldr	r3, [r7, #8]
}
 8004a90:	4618      	mov	r0, r3
 8004a92:	3714      	adds	r7, #20
 8004a94:	46bd      	mov	sp, r7
 8004a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9a:	4770      	bx	lr

08004a9c <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b087      	sub	sp, #28
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
 8004aa4:	460b      	mov	r3, r1
 8004aa6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004aac:	697b      	ldr	r3, [r7, #20]
 8004aae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ab2:	691b      	ldr	r3, [r3, #16]
 8004ab4:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004abc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004abe:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004ac0:	78fb      	ldrb	r3, [r7, #3]
 8004ac2:	f003 030f 	and.w	r3, r3, #15
 8004ac6:	68fa      	ldr	r2, [r7, #12]
 8004ac8:	fa22 f303 	lsr.w	r3, r2, r3
 8004acc:	01db      	lsls	r3, r3, #7
 8004ace:	b2db      	uxtb	r3, r3
 8004ad0:	693a      	ldr	r2, [r7, #16]
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004ad6:	78fb      	ldrb	r3, [r7, #3]
 8004ad8:	015a      	lsls	r2, r3, #5
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	4413      	add	r3, r2
 8004ade:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ae2:	689b      	ldr	r3, [r3, #8]
 8004ae4:	693a      	ldr	r2, [r7, #16]
 8004ae6:	4013      	ands	r3, r2
 8004ae8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004aea:	68bb      	ldr	r3, [r7, #8]
}
 8004aec:	4618      	mov	r0, r3
 8004aee:	371c      	adds	r7, #28
 8004af0:	46bd      	mov	sp, r7
 8004af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af6:	4770      	bx	lr

08004af8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004af8:	b480      	push	{r7}
 8004afa:	b083      	sub	sp, #12
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	695b      	ldr	r3, [r3, #20]
 8004b04:	f003 0301 	and.w	r3, r3, #1
}
 8004b08:	4618      	mov	r0, r3
 8004b0a:	370c      	adds	r7, #12
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b12:	4770      	bx	lr

08004b14 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8004b14:	b480      	push	{r7}
 8004b16:	b085      	sub	sp, #20
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	68fa      	ldr	r2, [r7, #12]
 8004b2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b2e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004b32:	f023 0307 	bic.w	r3, r3, #7
 8004b36:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	68fa      	ldr	r2, [r7, #12]
 8004b42:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b4a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004b4c:	2300      	movs	r3, #0
}
 8004b4e:	4618      	mov	r0, r3
 8004b50:	3714      	adds	r7, #20
 8004b52:	46bd      	mov	sp, r7
 8004b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b58:	4770      	bx	lr
	...

08004b5c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b087      	sub	sp, #28
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	60f8      	str	r0, [r7, #12]
 8004b64:	460b      	mov	r3, r1
 8004b66:	607a      	str	r2, [r7, #4]
 8004b68:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	333c      	adds	r3, #60	; 0x3c
 8004b72:	3304      	adds	r3, #4
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004b78:	693b      	ldr	r3, [r7, #16]
 8004b7a:	4a26      	ldr	r2, [pc, #152]	; (8004c14 <USB_EP0_OutStart+0xb8>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d90a      	bls.n	8004b96 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004b80:	697b      	ldr	r3, [r7, #20]
 8004b82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004b8c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004b90:	d101      	bne.n	8004b96 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004b92:	2300      	movs	r3, #0
 8004b94:	e037      	b.n	8004c06 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004b96:	697b      	ldr	r3, [r7, #20]
 8004b98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b9c:	461a      	mov	r2, r3
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ba8:	691b      	ldr	r3, [r3, #16]
 8004baa:	697a      	ldr	r2, [r7, #20]
 8004bac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004bb0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004bb4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004bb6:	697b      	ldr	r3, [r7, #20]
 8004bb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bbc:	691b      	ldr	r3, [r3, #16]
 8004bbe:	697a      	ldr	r2, [r7, #20]
 8004bc0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004bc4:	f043 0318 	orr.w	r3, r3, #24
 8004bc8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004bca:	697b      	ldr	r3, [r7, #20]
 8004bcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bd0:	691b      	ldr	r3, [r3, #16]
 8004bd2:	697a      	ldr	r2, [r7, #20]
 8004bd4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004bd8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004bdc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004bde:	7afb      	ldrb	r3, [r7, #11]
 8004be0:	2b01      	cmp	r3, #1
 8004be2:	d10f      	bne.n	8004c04 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004be4:	697b      	ldr	r3, [r7, #20]
 8004be6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bea:	461a      	mov	r2, r3
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004bf0:	697b      	ldr	r3, [r7, #20]
 8004bf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	697a      	ldr	r2, [r7, #20]
 8004bfa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004bfe:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8004c02:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004c04:	2300      	movs	r3, #0
}
 8004c06:	4618      	mov	r0, r3
 8004c08:	371c      	adds	r7, #28
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c10:	4770      	bx	lr
 8004c12:	bf00      	nop
 8004c14:	4f54300a 	.word	0x4f54300a

08004c18 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b085      	sub	sp, #20
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004c20:	2300      	movs	r3, #0
 8004c22:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	3301      	adds	r3, #1
 8004c28:	60fb      	str	r3, [r7, #12]
 8004c2a:	4a13      	ldr	r2, [pc, #76]	; (8004c78 <USB_CoreReset+0x60>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d901      	bls.n	8004c34 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8004c30:	2303      	movs	r3, #3
 8004c32:	e01a      	b.n	8004c6a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	691b      	ldr	r3, [r3, #16]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	daf3      	bge.n	8004c24 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	691b      	ldr	r3, [r3, #16]
 8004c44:	f043 0201 	orr.w	r2, r3, #1
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	3301      	adds	r3, #1
 8004c50:	60fb      	str	r3, [r7, #12]
 8004c52:	4a09      	ldr	r2, [pc, #36]	; (8004c78 <USB_CoreReset+0x60>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d901      	bls.n	8004c5c <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8004c58:	2303      	movs	r3, #3
 8004c5a:	e006      	b.n	8004c6a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	691b      	ldr	r3, [r3, #16]
 8004c60:	f003 0301 	and.w	r3, r3, #1
 8004c64:	2b01      	cmp	r3, #1
 8004c66:	d0f1      	beq.n	8004c4c <USB_CoreReset+0x34>

  return HAL_OK;
 8004c68:	2300      	movs	r3, #0
}
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	3714      	adds	r7, #20
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c74:	4770      	bx	lr
 8004c76:	bf00      	nop
 8004c78:	00030d40 	.word	0x00030d40

08004c7c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b084      	sub	sp, #16
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
 8004c84:	460b      	mov	r3, r1
 8004c86:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004c88:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004c8c:	f002 f952 	bl	8006f34 <USBD_static_malloc>
 8004c90:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d105      	bne.n	8004ca4 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8004ca0:	2302      	movs	r3, #2
 8004ca2:	e066      	b.n	8004d72 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	68fa      	ldr	r2, [r7, #12]
 8004ca8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	7c1b      	ldrb	r3, [r3, #16]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d119      	bne.n	8004ce8 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004cb4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004cb8:	2202      	movs	r2, #2
 8004cba:	2181      	movs	r1, #129	; 0x81
 8004cbc:	6878      	ldr	r0, [r7, #4]
 8004cbe:	f002 f816 	bl	8006cee <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2201      	movs	r2, #1
 8004cc6:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004cc8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004ccc:	2202      	movs	r2, #2
 8004cce:	2101      	movs	r1, #1
 8004cd0:	6878      	ldr	r0, [r7, #4]
 8004cd2:	f002 f80c 	bl	8006cee <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2201      	movs	r2, #1
 8004cda:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2210      	movs	r2, #16
 8004ce2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8004ce6:	e016      	b.n	8004d16 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004ce8:	2340      	movs	r3, #64	; 0x40
 8004cea:	2202      	movs	r2, #2
 8004cec:	2181      	movs	r1, #129	; 0x81
 8004cee:	6878      	ldr	r0, [r7, #4]
 8004cf0:	f001 fffd 	bl	8006cee <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004cfa:	2340      	movs	r3, #64	; 0x40
 8004cfc:	2202      	movs	r2, #2
 8004cfe:	2101      	movs	r1, #1
 8004d00:	6878      	ldr	r0, [r7, #4]
 8004d02:	f001 fff4 	bl	8006cee <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2201      	movs	r2, #1
 8004d0a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2210      	movs	r2, #16
 8004d12:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004d16:	2308      	movs	r3, #8
 8004d18:	2203      	movs	r2, #3
 8004d1a:	2182      	movs	r1, #130	; 0x82
 8004d1c:	6878      	ldr	r0, [r7, #4]
 8004d1e:	f001 ffe6 	bl	8006cee <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2201      	movs	r2, #1
 8004d26:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	2200      	movs	r2, #0
 8004d38:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	2200      	movs	r2, #0
 8004d40:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	7c1b      	ldrb	r3, [r3, #16]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d109      	bne.n	8004d60 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004d52:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004d56:	2101      	movs	r1, #1
 8004d58:	6878      	ldr	r0, [r7, #4]
 8004d5a:	f002 f8b7 	bl	8006ecc <USBD_LL_PrepareReceive>
 8004d5e:	e007      	b.n	8004d70 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004d66:	2340      	movs	r3, #64	; 0x40
 8004d68:	2101      	movs	r1, #1
 8004d6a:	6878      	ldr	r0, [r7, #4]
 8004d6c:	f002 f8ae 	bl	8006ecc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8004d70:	2300      	movs	r3, #0
}
 8004d72:	4618      	mov	r0, r3
 8004d74:	3710      	adds	r7, #16
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bd80      	pop	{r7, pc}

08004d7a <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004d7a:	b580      	push	{r7, lr}
 8004d7c:	b082      	sub	sp, #8
 8004d7e:	af00      	add	r7, sp, #0
 8004d80:	6078      	str	r0, [r7, #4]
 8004d82:	460b      	mov	r3, r1
 8004d84:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8004d86:	2181      	movs	r1, #129	; 0x81
 8004d88:	6878      	ldr	r0, [r7, #4]
 8004d8a:	f001 ffd6 	bl	8006d3a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2200      	movs	r2, #0
 8004d92:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8004d94:	2101      	movs	r1, #1
 8004d96:	6878      	ldr	r0, [r7, #4]
 8004d98:	f001 ffcf 	bl	8006d3a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8004da4:	2182      	movs	r1, #130	; 0x82
 8004da6:	6878      	ldr	r0, [r7, #4]
 8004da8:	f001 ffc7 	bl	8006d3a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2200      	movs	r2, #0
 8004db0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2200      	movs	r2, #0
 8004db8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d00e      	beq.n	8004de4 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	f002 f8ba 	bl	8006f50 <USBD_static_free>
    pdev->pClassData = NULL;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2200      	movs	r2, #0
 8004de0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8004de4:	2300      	movs	r3, #0
}
 8004de6:	4618      	mov	r0, r3
 8004de8:	3708      	adds	r7, #8
 8004dea:	46bd      	mov	sp, r7
 8004dec:	bd80      	pop	{r7, pc}
	...

08004df0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b086      	sub	sp, #24
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
 8004df8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004e00:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8004e02:	2300      	movs	r3, #0
 8004e04:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8004e06:	2300      	movs	r3, #0
 8004e08:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8004e0e:	693b      	ldr	r3, [r7, #16]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d101      	bne.n	8004e18 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8004e14:	2303      	movs	r3, #3
 8004e16:	e0af      	b.n	8004f78 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	781b      	ldrb	r3, [r3, #0]
 8004e1c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d03f      	beq.n	8004ea4 <USBD_CDC_Setup+0xb4>
 8004e24:	2b20      	cmp	r3, #32
 8004e26:	f040 809f 	bne.w	8004f68 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	88db      	ldrh	r3, [r3, #6]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d02e      	beq.n	8004e90 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	781b      	ldrb	r3, [r3, #0]
 8004e36:	b25b      	sxtb	r3, r3
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	da16      	bge.n	8004e6a <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004e42:	689b      	ldr	r3, [r3, #8]
 8004e44:	683a      	ldr	r2, [r7, #0]
 8004e46:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8004e48:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004e4a:	683a      	ldr	r2, [r7, #0]
 8004e4c:	88d2      	ldrh	r2, [r2, #6]
 8004e4e:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	88db      	ldrh	r3, [r3, #6]
 8004e54:	2b07      	cmp	r3, #7
 8004e56:	bf28      	it	cs
 8004e58:	2307      	movcs	r3, #7
 8004e5a:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8004e5c:	693b      	ldr	r3, [r7, #16]
 8004e5e:	89fa      	ldrh	r2, [r7, #14]
 8004e60:	4619      	mov	r1, r3
 8004e62:	6878      	ldr	r0, [r7, #4]
 8004e64:	f001 fb19 	bl	800649a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8004e68:	e085      	b.n	8004f76 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	785a      	ldrb	r2, [r3, #1]
 8004e6e:	693b      	ldr	r3, [r7, #16]
 8004e70:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	88db      	ldrh	r3, [r3, #6]
 8004e78:	b2da      	uxtb	r2, r3
 8004e7a:	693b      	ldr	r3, [r7, #16]
 8004e7c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8004e80:	6939      	ldr	r1, [r7, #16]
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	88db      	ldrh	r3, [r3, #6]
 8004e86:	461a      	mov	r2, r3
 8004e88:	6878      	ldr	r0, [r7, #4]
 8004e8a:	f001 fb32 	bl	80064f2 <USBD_CtlPrepareRx>
      break;
 8004e8e:	e072      	b.n	8004f76 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004e96:	689b      	ldr	r3, [r3, #8]
 8004e98:	683a      	ldr	r2, [r7, #0]
 8004e9a:	7850      	ldrb	r0, [r2, #1]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	6839      	ldr	r1, [r7, #0]
 8004ea0:	4798      	blx	r3
      break;
 8004ea2:	e068      	b.n	8004f76 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	785b      	ldrb	r3, [r3, #1]
 8004ea8:	2b0b      	cmp	r3, #11
 8004eaa:	d852      	bhi.n	8004f52 <USBD_CDC_Setup+0x162>
 8004eac:	a201      	add	r2, pc, #4	; (adr r2, 8004eb4 <USBD_CDC_Setup+0xc4>)
 8004eae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eb2:	bf00      	nop
 8004eb4:	08004ee5 	.word	0x08004ee5
 8004eb8:	08004f61 	.word	0x08004f61
 8004ebc:	08004f53 	.word	0x08004f53
 8004ec0:	08004f53 	.word	0x08004f53
 8004ec4:	08004f53 	.word	0x08004f53
 8004ec8:	08004f53 	.word	0x08004f53
 8004ecc:	08004f53 	.word	0x08004f53
 8004ed0:	08004f53 	.word	0x08004f53
 8004ed4:	08004f53 	.word	0x08004f53
 8004ed8:	08004f53 	.word	0x08004f53
 8004edc:	08004f0f 	.word	0x08004f0f
 8004ee0:	08004f39 	.word	0x08004f39
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004eea:	b2db      	uxtb	r3, r3
 8004eec:	2b03      	cmp	r3, #3
 8004eee:	d107      	bne.n	8004f00 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8004ef0:	f107 030a 	add.w	r3, r7, #10
 8004ef4:	2202      	movs	r2, #2
 8004ef6:	4619      	mov	r1, r3
 8004ef8:	6878      	ldr	r0, [r7, #4]
 8004efa:	f001 face 	bl	800649a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004efe:	e032      	b.n	8004f66 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8004f00:	6839      	ldr	r1, [r7, #0]
 8004f02:	6878      	ldr	r0, [r7, #4]
 8004f04:	f001 fa58 	bl	80063b8 <USBD_CtlError>
            ret = USBD_FAIL;
 8004f08:	2303      	movs	r3, #3
 8004f0a:	75fb      	strb	r3, [r7, #23]
          break;
 8004f0c:	e02b      	b.n	8004f66 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004f14:	b2db      	uxtb	r3, r3
 8004f16:	2b03      	cmp	r3, #3
 8004f18:	d107      	bne.n	8004f2a <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8004f1a:	f107 030d 	add.w	r3, r7, #13
 8004f1e:	2201      	movs	r2, #1
 8004f20:	4619      	mov	r1, r3
 8004f22:	6878      	ldr	r0, [r7, #4]
 8004f24:	f001 fab9 	bl	800649a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004f28:	e01d      	b.n	8004f66 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8004f2a:	6839      	ldr	r1, [r7, #0]
 8004f2c:	6878      	ldr	r0, [r7, #4]
 8004f2e:	f001 fa43 	bl	80063b8 <USBD_CtlError>
            ret = USBD_FAIL;
 8004f32:	2303      	movs	r3, #3
 8004f34:	75fb      	strb	r3, [r7, #23]
          break;
 8004f36:	e016      	b.n	8004f66 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004f3e:	b2db      	uxtb	r3, r3
 8004f40:	2b03      	cmp	r3, #3
 8004f42:	d00f      	beq.n	8004f64 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8004f44:	6839      	ldr	r1, [r7, #0]
 8004f46:	6878      	ldr	r0, [r7, #4]
 8004f48:	f001 fa36 	bl	80063b8 <USBD_CtlError>
            ret = USBD_FAIL;
 8004f4c:	2303      	movs	r3, #3
 8004f4e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8004f50:	e008      	b.n	8004f64 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8004f52:	6839      	ldr	r1, [r7, #0]
 8004f54:	6878      	ldr	r0, [r7, #4]
 8004f56:	f001 fa2f 	bl	80063b8 <USBD_CtlError>
          ret = USBD_FAIL;
 8004f5a:	2303      	movs	r3, #3
 8004f5c:	75fb      	strb	r3, [r7, #23]
          break;
 8004f5e:	e002      	b.n	8004f66 <USBD_CDC_Setup+0x176>
          break;
 8004f60:	bf00      	nop
 8004f62:	e008      	b.n	8004f76 <USBD_CDC_Setup+0x186>
          break;
 8004f64:	bf00      	nop
      }
      break;
 8004f66:	e006      	b.n	8004f76 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8004f68:	6839      	ldr	r1, [r7, #0]
 8004f6a:	6878      	ldr	r0, [r7, #4]
 8004f6c:	f001 fa24 	bl	80063b8 <USBD_CtlError>
      ret = USBD_FAIL;
 8004f70:	2303      	movs	r3, #3
 8004f72:	75fb      	strb	r3, [r7, #23]
      break;
 8004f74:	bf00      	nop
  }

  return (uint8_t)ret;
 8004f76:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f78:	4618      	mov	r0, r3
 8004f7a:	3718      	adds	r7, #24
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	bd80      	pop	{r7, pc}

08004f80 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b084      	sub	sp, #16
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
 8004f88:	460b      	mov	r3, r1
 8004f8a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8004f92:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d101      	bne.n	8004fa2 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8004f9e:	2303      	movs	r3, #3
 8004fa0:	e04f      	b.n	8005042 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004fa8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8004faa:	78fa      	ldrb	r2, [r7, #3]
 8004fac:	6879      	ldr	r1, [r7, #4]
 8004fae:	4613      	mov	r3, r2
 8004fb0:	009b      	lsls	r3, r3, #2
 8004fb2:	4413      	add	r3, r2
 8004fb4:	009b      	lsls	r3, r3, #2
 8004fb6:	440b      	add	r3, r1
 8004fb8:	3318      	adds	r3, #24
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d029      	beq.n	8005014 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8004fc0:	78fa      	ldrb	r2, [r7, #3]
 8004fc2:	6879      	ldr	r1, [r7, #4]
 8004fc4:	4613      	mov	r3, r2
 8004fc6:	009b      	lsls	r3, r3, #2
 8004fc8:	4413      	add	r3, r2
 8004fca:	009b      	lsls	r3, r3, #2
 8004fcc:	440b      	add	r3, r1
 8004fce:	3318      	adds	r3, #24
 8004fd0:	681a      	ldr	r2, [r3, #0]
 8004fd2:	78f9      	ldrb	r1, [r7, #3]
 8004fd4:	68f8      	ldr	r0, [r7, #12]
 8004fd6:	460b      	mov	r3, r1
 8004fd8:	00db      	lsls	r3, r3, #3
 8004fda:	1a5b      	subs	r3, r3, r1
 8004fdc:	009b      	lsls	r3, r3, #2
 8004fde:	4403      	add	r3, r0
 8004fe0:	3344      	adds	r3, #68	; 0x44
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	fbb2 f1f3 	udiv	r1, r2, r3
 8004fe8:	fb01 f303 	mul.w	r3, r1, r3
 8004fec:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d110      	bne.n	8005014 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8004ff2:	78fa      	ldrb	r2, [r7, #3]
 8004ff4:	6879      	ldr	r1, [r7, #4]
 8004ff6:	4613      	mov	r3, r2
 8004ff8:	009b      	lsls	r3, r3, #2
 8004ffa:	4413      	add	r3, r2
 8004ffc:	009b      	lsls	r3, r3, #2
 8004ffe:	440b      	add	r3, r1
 8005000:	3318      	adds	r3, #24
 8005002:	2200      	movs	r2, #0
 8005004:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005006:	78f9      	ldrb	r1, [r7, #3]
 8005008:	2300      	movs	r3, #0
 800500a:	2200      	movs	r2, #0
 800500c:	6878      	ldr	r0, [r7, #4]
 800500e:	f001 ff3c 	bl	8006e8a <USBD_LL_Transmit>
 8005012:	e015      	b.n	8005040 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8005014:	68bb      	ldr	r3, [r7, #8]
 8005016:	2200      	movs	r2, #0
 8005018:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005022:	691b      	ldr	r3, [r3, #16]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d00b      	beq.n	8005040 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800502e:	691b      	ldr	r3, [r3, #16]
 8005030:	68ba      	ldr	r2, [r7, #8]
 8005032:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8005036:	68ba      	ldr	r2, [r7, #8]
 8005038:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800503c:	78fa      	ldrb	r2, [r7, #3]
 800503e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005040:	2300      	movs	r3, #0
}
 8005042:	4618      	mov	r0, r3
 8005044:	3710      	adds	r7, #16
 8005046:	46bd      	mov	sp, r7
 8005048:	bd80      	pop	{r7, pc}

0800504a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800504a:	b580      	push	{r7, lr}
 800504c:	b084      	sub	sp, #16
 800504e:	af00      	add	r7, sp, #0
 8005050:	6078      	str	r0, [r7, #4]
 8005052:	460b      	mov	r3, r1
 8005054:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800505c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005064:	2b00      	cmp	r3, #0
 8005066:	d101      	bne.n	800506c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005068:	2303      	movs	r3, #3
 800506a:	e015      	b.n	8005098 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800506c:	78fb      	ldrb	r3, [r7, #3]
 800506e:	4619      	mov	r1, r3
 8005070:	6878      	ldr	r0, [r7, #4]
 8005072:	f001 ff4c 	bl	8006f0e <USBD_LL_GetRxDataSize>
 8005076:	4602      	mov	r2, r0
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005084:	68db      	ldr	r3, [r3, #12]
 8005086:	68fa      	ldr	r2, [r7, #12]
 8005088:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800508c:	68fa      	ldr	r2, [r7, #12]
 800508e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005092:	4611      	mov	r1, r2
 8005094:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005096:	2300      	movs	r3, #0
}
 8005098:	4618      	mov	r0, r3
 800509a:	3710      	adds	r7, #16
 800509c:	46bd      	mov	sp, r7
 800509e:	bd80      	pop	{r7, pc}

080050a0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b084      	sub	sp, #16
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80050ae:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d101      	bne.n	80050ba <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 80050b6:	2303      	movs	r3, #3
 80050b8:	e01b      	b.n	80050f2 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d015      	beq.n	80050f0 <USBD_CDC_EP0_RxReady+0x50>
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80050ca:	2bff      	cmp	r3, #255	; 0xff
 80050cc:	d010      	beq.n	80050f0 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80050d4:	689b      	ldr	r3, [r3, #8]
 80050d6:	68fa      	ldr	r2, [r7, #12]
 80050d8:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 80050dc:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80050de:	68fa      	ldr	r2, [r7, #12]
 80050e0:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80050e4:	b292      	uxth	r2, r2
 80050e6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	22ff      	movs	r2, #255	; 0xff
 80050ec:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80050f0:	2300      	movs	r3, #0
}
 80050f2:	4618      	mov	r0, r3
 80050f4:	3710      	adds	r7, #16
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bd80      	pop	{r7, pc}
	...

080050fc <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80050fc:	b480      	push	{r7}
 80050fe:	b083      	sub	sp, #12
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2243      	movs	r2, #67	; 0x43
 8005108:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800510a:	4b03      	ldr	r3, [pc, #12]	; (8005118 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800510c:	4618      	mov	r0, r3
 800510e:	370c      	adds	r7, #12
 8005110:	46bd      	mov	sp, r7
 8005112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005116:	4770      	bx	lr
 8005118:	20000094 	.word	0x20000094

0800511c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800511c:	b480      	push	{r7}
 800511e:	b083      	sub	sp, #12
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2243      	movs	r2, #67	; 0x43
 8005128:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800512a:	4b03      	ldr	r3, [pc, #12]	; (8005138 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800512c:	4618      	mov	r0, r3
 800512e:	370c      	adds	r7, #12
 8005130:	46bd      	mov	sp, r7
 8005132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005136:	4770      	bx	lr
 8005138:	20000050 	.word	0x20000050

0800513c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800513c:	b480      	push	{r7}
 800513e:	b083      	sub	sp, #12
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2243      	movs	r2, #67	; 0x43
 8005148:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800514a:	4b03      	ldr	r3, [pc, #12]	; (8005158 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800514c:	4618      	mov	r0, r3
 800514e:	370c      	adds	r7, #12
 8005150:	46bd      	mov	sp, r7
 8005152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005156:	4770      	bx	lr
 8005158:	200000d8 	.word	0x200000d8

0800515c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800515c:	b480      	push	{r7}
 800515e:	b083      	sub	sp, #12
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	220a      	movs	r2, #10
 8005168:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800516a:	4b03      	ldr	r3, [pc, #12]	; (8005178 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800516c:	4618      	mov	r0, r3
 800516e:	370c      	adds	r7, #12
 8005170:	46bd      	mov	sp, r7
 8005172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005176:	4770      	bx	lr
 8005178:	2000000c 	.word	0x2000000c

0800517c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800517c:	b480      	push	{r7}
 800517e:	b083      	sub	sp, #12
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
 8005184:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d101      	bne.n	8005190 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800518c:	2303      	movs	r3, #3
 800518e:	e004      	b.n	800519a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	683a      	ldr	r2, [r7, #0]
 8005194:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8005198:	2300      	movs	r3, #0
}
 800519a:	4618      	mov	r0, r3
 800519c:	370c      	adds	r7, #12
 800519e:	46bd      	mov	sp, r7
 80051a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a4:	4770      	bx	lr

080051a6 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80051a6:	b480      	push	{r7}
 80051a8:	b087      	sub	sp, #28
 80051aa:	af00      	add	r7, sp, #0
 80051ac:	60f8      	str	r0, [r7, #12]
 80051ae:	60b9      	str	r1, [r7, #8]
 80051b0:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80051b8:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80051ba:	697b      	ldr	r3, [r7, #20]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d101      	bne.n	80051c4 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80051c0:	2303      	movs	r3, #3
 80051c2:	e008      	b.n	80051d6 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 80051c4:	697b      	ldr	r3, [r7, #20]
 80051c6:	68ba      	ldr	r2, [r7, #8]
 80051c8:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80051cc:	697b      	ldr	r3, [r7, #20]
 80051ce:	687a      	ldr	r2, [r7, #4]
 80051d0:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80051d4:	2300      	movs	r3, #0
}
 80051d6:	4618      	mov	r0, r3
 80051d8:	371c      	adds	r7, #28
 80051da:	46bd      	mov	sp, r7
 80051dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e0:	4770      	bx	lr

080051e2 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80051e2:	b480      	push	{r7}
 80051e4:	b085      	sub	sp, #20
 80051e6:	af00      	add	r7, sp, #0
 80051e8:	6078      	str	r0, [r7, #4]
 80051ea:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80051f2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d101      	bne.n	80051fe <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 80051fa:	2303      	movs	r3, #3
 80051fc:	e004      	b.n	8005208 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	683a      	ldr	r2, [r7, #0]
 8005202:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8005206:	2300      	movs	r3, #0
}
 8005208:	4618      	mov	r0, r3
 800520a:	3714      	adds	r7, #20
 800520c:	46bd      	mov	sp, r7
 800520e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005212:	4770      	bx	lr

08005214 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b084      	sub	sp, #16
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005222:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8005224:	2301      	movs	r3, #1
 8005226:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800522e:	2b00      	cmp	r3, #0
 8005230:	d101      	bne.n	8005236 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005232:	2303      	movs	r3, #3
 8005234:	e01a      	b.n	800526c <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8005236:	68bb      	ldr	r3, [r7, #8]
 8005238:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800523c:	2b00      	cmp	r3, #0
 800523e:	d114      	bne.n	800526a <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	2201      	movs	r2, #1
 8005244:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8005248:	68bb      	ldr	r3, [r7, #8]
 800524a:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8005252:	68bb      	ldr	r3, [r7, #8]
 8005254:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800525e:	2181      	movs	r1, #129	; 0x81
 8005260:	6878      	ldr	r0, [r7, #4]
 8005262:	f001 fe12 	bl	8006e8a <USBD_LL_Transmit>

    ret = USBD_OK;
 8005266:	2300      	movs	r3, #0
 8005268:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800526a:	7bfb      	ldrb	r3, [r7, #15]
}
 800526c:	4618      	mov	r0, r3
 800526e:	3710      	adds	r7, #16
 8005270:	46bd      	mov	sp, r7
 8005272:	bd80      	pop	{r7, pc}

08005274 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b084      	sub	sp, #16
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005282:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800528a:	2b00      	cmp	r3, #0
 800528c:	d101      	bne.n	8005292 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800528e:	2303      	movs	r3, #3
 8005290:	e016      	b.n	80052c0 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	7c1b      	ldrb	r3, [r3, #16]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d109      	bne.n	80052ae <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80052a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80052a4:	2101      	movs	r1, #1
 80052a6:	6878      	ldr	r0, [r7, #4]
 80052a8:	f001 fe10 	bl	8006ecc <USBD_LL_PrepareReceive>
 80052ac:	e007      	b.n	80052be <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80052b4:	2340      	movs	r3, #64	; 0x40
 80052b6:	2101      	movs	r1, #1
 80052b8:	6878      	ldr	r0, [r7, #4]
 80052ba:	f001 fe07 	bl	8006ecc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80052be:	2300      	movs	r3, #0
}
 80052c0:	4618      	mov	r0, r3
 80052c2:	3710      	adds	r7, #16
 80052c4:	46bd      	mov	sp, r7
 80052c6:	bd80      	pop	{r7, pc}

080052c8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b086      	sub	sp, #24
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	60f8      	str	r0, [r7, #12]
 80052d0:	60b9      	str	r1, [r7, #8]
 80052d2:	4613      	mov	r3, r2
 80052d4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d101      	bne.n	80052e0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80052dc:	2303      	movs	r3, #3
 80052de:	e01f      	b.n	8005320 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	2200      	movs	r2, #0
 80052e4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	2200      	movs	r2, #0
 80052ec:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	2200      	movs	r2, #0
 80052f4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d003      	beq.n	8005306 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	68ba      	ldr	r2, [r7, #8]
 8005302:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	2201      	movs	r2, #1
 800530a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	79fa      	ldrb	r2, [r7, #7]
 8005312:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005314:	68f8      	ldr	r0, [r7, #12]
 8005316:	f001 fc83 	bl	8006c20 <USBD_LL_Init>
 800531a:	4603      	mov	r3, r0
 800531c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800531e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005320:	4618      	mov	r0, r3
 8005322:	3718      	adds	r7, #24
 8005324:	46bd      	mov	sp, r7
 8005326:	bd80      	pop	{r7, pc}

08005328 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b084      	sub	sp, #16
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
 8005330:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005332:	2300      	movs	r3, #0
 8005334:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d101      	bne.n	8005340 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800533c:	2303      	movs	r3, #3
 800533e:	e016      	b.n	800536e <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	683a      	ldr	r2, [r7, #0]
 8005344:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800534e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005350:	2b00      	cmp	r3, #0
 8005352:	d00b      	beq.n	800536c <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800535a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800535c:	f107 020e 	add.w	r2, r7, #14
 8005360:	4610      	mov	r0, r2
 8005362:	4798      	blx	r3
 8005364:	4602      	mov	r2, r0
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800536c:	2300      	movs	r3, #0
}
 800536e:	4618      	mov	r0, r3
 8005370:	3710      	adds	r7, #16
 8005372:	46bd      	mov	sp, r7
 8005374:	bd80      	pop	{r7, pc}

08005376 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005376:	b580      	push	{r7, lr}
 8005378:	b082      	sub	sp, #8
 800537a:	af00      	add	r7, sp, #0
 800537c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800537e:	6878      	ldr	r0, [r7, #4]
 8005380:	f001 fc9a 	bl	8006cb8 <USBD_LL_Start>
 8005384:	4603      	mov	r3, r0
}
 8005386:	4618      	mov	r0, r3
 8005388:	3708      	adds	r7, #8
 800538a:	46bd      	mov	sp, r7
 800538c:	bd80      	pop	{r7, pc}

0800538e <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800538e:	b480      	push	{r7}
 8005390:	b083      	sub	sp, #12
 8005392:	af00      	add	r7, sp, #0
 8005394:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005396:	2300      	movs	r3, #0
}
 8005398:	4618      	mov	r0, r3
 800539a:	370c      	adds	r7, #12
 800539c:	46bd      	mov	sp, r7
 800539e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a2:	4770      	bx	lr

080053a4 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b084      	sub	sp, #16
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
 80053ac:	460b      	mov	r3, r1
 80053ae:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80053b0:	2303      	movs	r3, #3
 80053b2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d009      	beq.n	80053d2 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	78fa      	ldrb	r2, [r7, #3]
 80053c8:	4611      	mov	r1, r2
 80053ca:	6878      	ldr	r0, [r7, #4]
 80053cc:	4798      	blx	r3
 80053ce:	4603      	mov	r3, r0
 80053d0:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80053d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80053d4:	4618      	mov	r0, r3
 80053d6:	3710      	adds	r7, #16
 80053d8:	46bd      	mov	sp, r7
 80053da:	bd80      	pop	{r7, pc}

080053dc <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b082      	sub	sp, #8
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
 80053e4:	460b      	mov	r3, r1
 80053e6:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d007      	beq.n	8005402 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80053f8:	685b      	ldr	r3, [r3, #4]
 80053fa:	78fa      	ldrb	r2, [r7, #3]
 80053fc:	4611      	mov	r1, r2
 80053fe:	6878      	ldr	r0, [r7, #4]
 8005400:	4798      	blx	r3
  }

  return USBD_OK;
 8005402:	2300      	movs	r3, #0
}
 8005404:	4618      	mov	r0, r3
 8005406:	3708      	adds	r7, #8
 8005408:	46bd      	mov	sp, r7
 800540a:	bd80      	pop	{r7, pc}

0800540c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b084      	sub	sp, #16
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
 8005414:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800541c:	6839      	ldr	r1, [r7, #0]
 800541e:	4618      	mov	r0, r3
 8005420:	f000 ff90 	bl	8006344 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2201      	movs	r2, #1
 8005428:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005432:	461a      	mov	r2, r3
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005440:	f003 031f 	and.w	r3, r3, #31
 8005444:	2b02      	cmp	r3, #2
 8005446:	d01a      	beq.n	800547e <USBD_LL_SetupStage+0x72>
 8005448:	2b02      	cmp	r3, #2
 800544a:	d822      	bhi.n	8005492 <USBD_LL_SetupStage+0x86>
 800544c:	2b00      	cmp	r3, #0
 800544e:	d002      	beq.n	8005456 <USBD_LL_SetupStage+0x4a>
 8005450:	2b01      	cmp	r3, #1
 8005452:	d00a      	beq.n	800546a <USBD_LL_SetupStage+0x5e>
 8005454:	e01d      	b.n	8005492 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800545c:	4619      	mov	r1, r3
 800545e:	6878      	ldr	r0, [r7, #4]
 8005460:	f000 fa62 	bl	8005928 <USBD_StdDevReq>
 8005464:	4603      	mov	r3, r0
 8005466:	73fb      	strb	r3, [r7, #15]
      break;
 8005468:	e020      	b.n	80054ac <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005470:	4619      	mov	r1, r3
 8005472:	6878      	ldr	r0, [r7, #4]
 8005474:	f000 fac6 	bl	8005a04 <USBD_StdItfReq>
 8005478:	4603      	mov	r3, r0
 800547a:	73fb      	strb	r3, [r7, #15]
      break;
 800547c:	e016      	b.n	80054ac <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005484:	4619      	mov	r1, r3
 8005486:	6878      	ldr	r0, [r7, #4]
 8005488:	f000 fb05 	bl	8005a96 <USBD_StdEPReq>
 800548c:	4603      	mov	r3, r0
 800548e:	73fb      	strb	r3, [r7, #15]
      break;
 8005490:	e00c      	b.n	80054ac <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005498:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800549c:	b2db      	uxtb	r3, r3
 800549e:	4619      	mov	r1, r3
 80054a0:	6878      	ldr	r0, [r7, #4]
 80054a2:	f001 fc69 	bl	8006d78 <USBD_LL_StallEP>
 80054a6:	4603      	mov	r3, r0
 80054a8:	73fb      	strb	r3, [r7, #15]
      break;
 80054aa:	bf00      	nop
  }

  return ret;
 80054ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80054ae:	4618      	mov	r0, r3
 80054b0:	3710      	adds	r7, #16
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bd80      	pop	{r7, pc}

080054b6 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80054b6:	b580      	push	{r7, lr}
 80054b8:	b086      	sub	sp, #24
 80054ba:	af00      	add	r7, sp, #0
 80054bc:	60f8      	str	r0, [r7, #12]
 80054be:	460b      	mov	r3, r1
 80054c0:	607a      	str	r2, [r7, #4]
 80054c2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80054c4:	7afb      	ldrb	r3, [r7, #11]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d138      	bne.n	800553c <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80054d0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80054d8:	2b03      	cmp	r3, #3
 80054da:	d14a      	bne.n	8005572 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80054dc:	693b      	ldr	r3, [r7, #16]
 80054de:	689a      	ldr	r2, [r3, #8]
 80054e0:	693b      	ldr	r3, [r7, #16]
 80054e2:	68db      	ldr	r3, [r3, #12]
 80054e4:	429a      	cmp	r2, r3
 80054e6:	d913      	bls.n	8005510 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80054e8:	693b      	ldr	r3, [r7, #16]
 80054ea:	689a      	ldr	r2, [r3, #8]
 80054ec:	693b      	ldr	r3, [r7, #16]
 80054ee:	68db      	ldr	r3, [r3, #12]
 80054f0:	1ad2      	subs	r2, r2, r3
 80054f2:	693b      	ldr	r3, [r7, #16]
 80054f4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80054f6:	693b      	ldr	r3, [r7, #16]
 80054f8:	68da      	ldr	r2, [r3, #12]
 80054fa:	693b      	ldr	r3, [r7, #16]
 80054fc:	689b      	ldr	r3, [r3, #8]
 80054fe:	4293      	cmp	r3, r2
 8005500:	bf28      	it	cs
 8005502:	4613      	movcs	r3, r2
 8005504:	461a      	mov	r2, r3
 8005506:	6879      	ldr	r1, [r7, #4]
 8005508:	68f8      	ldr	r0, [r7, #12]
 800550a:	f001 f80f 	bl	800652c <USBD_CtlContinueRx>
 800550e:	e030      	b.n	8005572 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005516:	b2db      	uxtb	r3, r3
 8005518:	2b03      	cmp	r3, #3
 800551a:	d10b      	bne.n	8005534 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005522:	691b      	ldr	r3, [r3, #16]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d005      	beq.n	8005534 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800552e:	691b      	ldr	r3, [r3, #16]
 8005530:	68f8      	ldr	r0, [r7, #12]
 8005532:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005534:	68f8      	ldr	r0, [r7, #12]
 8005536:	f001 f80a 	bl	800654e <USBD_CtlSendStatus>
 800553a:	e01a      	b.n	8005572 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005542:	b2db      	uxtb	r3, r3
 8005544:	2b03      	cmp	r3, #3
 8005546:	d114      	bne.n	8005572 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800554e:	699b      	ldr	r3, [r3, #24]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d00e      	beq.n	8005572 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800555a:	699b      	ldr	r3, [r3, #24]
 800555c:	7afa      	ldrb	r2, [r7, #11]
 800555e:	4611      	mov	r1, r2
 8005560:	68f8      	ldr	r0, [r7, #12]
 8005562:	4798      	blx	r3
 8005564:	4603      	mov	r3, r0
 8005566:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8005568:	7dfb      	ldrb	r3, [r7, #23]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d001      	beq.n	8005572 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800556e:	7dfb      	ldrb	r3, [r7, #23]
 8005570:	e000      	b.n	8005574 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8005572:	2300      	movs	r3, #0
}
 8005574:	4618      	mov	r0, r3
 8005576:	3718      	adds	r7, #24
 8005578:	46bd      	mov	sp, r7
 800557a:	bd80      	pop	{r7, pc}

0800557c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b086      	sub	sp, #24
 8005580:	af00      	add	r7, sp, #0
 8005582:	60f8      	str	r0, [r7, #12]
 8005584:	460b      	mov	r3, r1
 8005586:	607a      	str	r2, [r7, #4]
 8005588:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800558a:	7afb      	ldrb	r3, [r7, #11]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d16b      	bne.n	8005668 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	3314      	adds	r3, #20
 8005594:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800559c:	2b02      	cmp	r3, #2
 800559e:	d156      	bne.n	800564e <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 80055a0:	693b      	ldr	r3, [r7, #16]
 80055a2:	689a      	ldr	r2, [r3, #8]
 80055a4:	693b      	ldr	r3, [r7, #16]
 80055a6:	68db      	ldr	r3, [r3, #12]
 80055a8:	429a      	cmp	r2, r3
 80055aa:	d914      	bls.n	80055d6 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80055ac:	693b      	ldr	r3, [r7, #16]
 80055ae:	689a      	ldr	r2, [r3, #8]
 80055b0:	693b      	ldr	r3, [r7, #16]
 80055b2:	68db      	ldr	r3, [r3, #12]
 80055b4:	1ad2      	subs	r2, r2, r3
 80055b6:	693b      	ldr	r3, [r7, #16]
 80055b8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80055ba:	693b      	ldr	r3, [r7, #16]
 80055bc:	689b      	ldr	r3, [r3, #8]
 80055be:	461a      	mov	r2, r3
 80055c0:	6879      	ldr	r1, [r7, #4]
 80055c2:	68f8      	ldr	r0, [r7, #12]
 80055c4:	f000 ff84 	bl	80064d0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80055c8:	2300      	movs	r3, #0
 80055ca:	2200      	movs	r2, #0
 80055cc:	2100      	movs	r1, #0
 80055ce:	68f8      	ldr	r0, [r7, #12]
 80055d0:	f001 fc7c 	bl	8006ecc <USBD_LL_PrepareReceive>
 80055d4:	e03b      	b.n	800564e <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80055d6:	693b      	ldr	r3, [r7, #16]
 80055d8:	68da      	ldr	r2, [r3, #12]
 80055da:	693b      	ldr	r3, [r7, #16]
 80055dc:	689b      	ldr	r3, [r3, #8]
 80055de:	429a      	cmp	r2, r3
 80055e0:	d11c      	bne.n	800561c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80055e2:	693b      	ldr	r3, [r7, #16]
 80055e4:	685a      	ldr	r2, [r3, #4]
 80055e6:	693b      	ldr	r3, [r7, #16]
 80055e8:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80055ea:	429a      	cmp	r2, r3
 80055ec:	d316      	bcc.n	800561c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80055ee:	693b      	ldr	r3, [r7, #16]
 80055f0:	685a      	ldr	r2, [r3, #4]
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80055f8:	429a      	cmp	r2, r3
 80055fa:	d20f      	bcs.n	800561c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80055fc:	2200      	movs	r2, #0
 80055fe:	2100      	movs	r1, #0
 8005600:	68f8      	ldr	r0, [r7, #12]
 8005602:	f000 ff65 	bl	80064d0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	2200      	movs	r2, #0
 800560a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800560e:	2300      	movs	r3, #0
 8005610:	2200      	movs	r2, #0
 8005612:	2100      	movs	r1, #0
 8005614:	68f8      	ldr	r0, [r7, #12]
 8005616:	f001 fc59 	bl	8006ecc <USBD_LL_PrepareReceive>
 800561a:	e018      	b.n	800564e <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005622:	b2db      	uxtb	r3, r3
 8005624:	2b03      	cmp	r3, #3
 8005626:	d10b      	bne.n	8005640 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800562e:	68db      	ldr	r3, [r3, #12]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d005      	beq.n	8005640 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800563a:	68db      	ldr	r3, [r3, #12]
 800563c:	68f8      	ldr	r0, [r7, #12]
 800563e:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005640:	2180      	movs	r1, #128	; 0x80
 8005642:	68f8      	ldr	r0, [r7, #12]
 8005644:	f001 fb98 	bl	8006d78 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005648:	68f8      	ldr	r0, [r7, #12]
 800564a:	f000 ff93 	bl	8006574 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005654:	2b01      	cmp	r3, #1
 8005656:	d122      	bne.n	800569e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8005658:	68f8      	ldr	r0, [r7, #12]
 800565a:	f7ff fe98 	bl	800538e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	2200      	movs	r2, #0
 8005662:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005666:	e01a      	b.n	800569e <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800566e:	b2db      	uxtb	r3, r3
 8005670:	2b03      	cmp	r3, #3
 8005672:	d114      	bne.n	800569e <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800567a:	695b      	ldr	r3, [r3, #20]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d00e      	beq.n	800569e <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005686:	695b      	ldr	r3, [r3, #20]
 8005688:	7afa      	ldrb	r2, [r7, #11]
 800568a:	4611      	mov	r1, r2
 800568c:	68f8      	ldr	r0, [r7, #12]
 800568e:	4798      	blx	r3
 8005690:	4603      	mov	r3, r0
 8005692:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8005694:	7dfb      	ldrb	r3, [r7, #23]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d001      	beq.n	800569e <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800569a:	7dfb      	ldrb	r3, [r7, #23]
 800569c:	e000      	b.n	80056a0 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800569e:	2300      	movs	r3, #0
}
 80056a0:	4618      	mov	r0, r3
 80056a2:	3718      	adds	r7, #24
 80056a4:	46bd      	mov	sp, r7
 80056a6:	bd80      	pop	{r7, pc}

080056a8 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b082      	sub	sp, #8
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2201      	movs	r2, #1
 80056b4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2200      	movs	r2, #0
 80056bc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2200      	movs	r2, #0
 80056c4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2200      	movs	r2, #0
 80056ca:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d101      	bne.n	80056dc <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 80056d8:	2303      	movs	r3, #3
 80056da:	e02f      	b.n	800573c <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d00f      	beq.n	8005706 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80056ec:	685b      	ldr	r3, [r3, #4]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d009      	beq.n	8005706 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	687a      	ldr	r2, [r7, #4]
 80056fc:	6852      	ldr	r2, [r2, #4]
 80056fe:	b2d2      	uxtb	r2, r2
 8005700:	4611      	mov	r1, r2
 8005702:	6878      	ldr	r0, [r7, #4]
 8005704:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005706:	2340      	movs	r3, #64	; 0x40
 8005708:	2200      	movs	r2, #0
 800570a:	2100      	movs	r1, #0
 800570c:	6878      	ldr	r0, [r7, #4]
 800570e:	f001 faee 	bl	8006cee <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2201      	movs	r2, #1
 8005716:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2240      	movs	r2, #64	; 0x40
 800571e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005722:	2340      	movs	r3, #64	; 0x40
 8005724:	2200      	movs	r2, #0
 8005726:	2180      	movs	r1, #128	; 0x80
 8005728:	6878      	ldr	r0, [r7, #4]
 800572a:	f001 fae0 	bl	8006cee <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2201      	movs	r2, #1
 8005732:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2240      	movs	r2, #64	; 0x40
 8005738:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800573a:	2300      	movs	r3, #0
}
 800573c:	4618      	mov	r0, r3
 800573e:	3708      	adds	r7, #8
 8005740:	46bd      	mov	sp, r7
 8005742:	bd80      	pop	{r7, pc}

08005744 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005744:	b480      	push	{r7}
 8005746:	b083      	sub	sp, #12
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
 800574c:	460b      	mov	r3, r1
 800574e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	78fa      	ldrb	r2, [r7, #3]
 8005754:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005756:	2300      	movs	r3, #0
}
 8005758:	4618      	mov	r0, r3
 800575a:	370c      	adds	r7, #12
 800575c:	46bd      	mov	sp, r7
 800575e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005762:	4770      	bx	lr

08005764 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005764:	b480      	push	{r7}
 8005766:	b083      	sub	sp, #12
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005772:	b2da      	uxtb	r2, r3
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2204      	movs	r2, #4
 800577e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005782:	2300      	movs	r3, #0
}
 8005784:	4618      	mov	r0, r3
 8005786:	370c      	adds	r7, #12
 8005788:	46bd      	mov	sp, r7
 800578a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578e:	4770      	bx	lr

08005790 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005790:	b480      	push	{r7}
 8005792:	b083      	sub	sp, #12
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800579e:	b2db      	uxtb	r3, r3
 80057a0:	2b04      	cmp	r3, #4
 80057a2:	d106      	bne.n	80057b2 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80057aa:	b2da      	uxtb	r2, r3
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80057b2:	2300      	movs	r3, #0
}
 80057b4:	4618      	mov	r0, r3
 80057b6:	370c      	adds	r7, #12
 80057b8:	46bd      	mov	sp, r7
 80057ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057be:	4770      	bx	lr

080057c0 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b082      	sub	sp, #8
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d101      	bne.n	80057d6 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 80057d2:	2303      	movs	r3, #3
 80057d4:	e012      	b.n	80057fc <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80057dc:	b2db      	uxtb	r3, r3
 80057de:	2b03      	cmp	r3, #3
 80057e0:	d10b      	bne.n	80057fa <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80057e8:	69db      	ldr	r3, [r3, #28]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d005      	beq.n	80057fa <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80057f4:	69db      	ldr	r3, [r3, #28]
 80057f6:	6878      	ldr	r0, [r7, #4]
 80057f8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80057fa:	2300      	movs	r3, #0
}
 80057fc:	4618      	mov	r0, r3
 80057fe:	3708      	adds	r7, #8
 8005800:	46bd      	mov	sp, r7
 8005802:	bd80      	pop	{r7, pc}

08005804 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005804:	b580      	push	{r7, lr}
 8005806:	b082      	sub	sp, #8
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
 800580c:	460b      	mov	r3, r1
 800580e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005816:	2b00      	cmp	r3, #0
 8005818:	d101      	bne.n	800581e <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800581a:	2303      	movs	r3, #3
 800581c:	e014      	b.n	8005848 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005824:	b2db      	uxtb	r3, r3
 8005826:	2b03      	cmp	r3, #3
 8005828:	d10d      	bne.n	8005846 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005830:	6a1b      	ldr	r3, [r3, #32]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d007      	beq.n	8005846 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800583c:	6a1b      	ldr	r3, [r3, #32]
 800583e:	78fa      	ldrb	r2, [r7, #3]
 8005840:	4611      	mov	r1, r2
 8005842:	6878      	ldr	r0, [r7, #4]
 8005844:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005846:	2300      	movs	r3, #0
}
 8005848:	4618      	mov	r0, r3
 800584a:	3708      	adds	r7, #8
 800584c:	46bd      	mov	sp, r7
 800584e:	bd80      	pop	{r7, pc}

08005850 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b082      	sub	sp, #8
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
 8005858:	460b      	mov	r3, r1
 800585a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005862:	2b00      	cmp	r3, #0
 8005864:	d101      	bne.n	800586a <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8005866:	2303      	movs	r3, #3
 8005868:	e014      	b.n	8005894 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005870:	b2db      	uxtb	r3, r3
 8005872:	2b03      	cmp	r3, #3
 8005874:	d10d      	bne.n	8005892 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800587c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800587e:	2b00      	cmp	r3, #0
 8005880:	d007      	beq.n	8005892 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800588a:	78fa      	ldrb	r2, [r7, #3]
 800588c:	4611      	mov	r1, r2
 800588e:	6878      	ldr	r0, [r7, #4]
 8005890:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005892:	2300      	movs	r3, #0
}
 8005894:	4618      	mov	r0, r3
 8005896:	3708      	adds	r7, #8
 8005898:	46bd      	mov	sp, r7
 800589a:	bd80      	pop	{r7, pc}

0800589c <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800589c:	b480      	push	{r7}
 800589e:	b083      	sub	sp, #12
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80058a4:	2300      	movs	r3, #0
}
 80058a6:	4618      	mov	r0, r3
 80058a8:	370c      	adds	r7, #12
 80058aa:	46bd      	mov	sp, r7
 80058ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b0:	4770      	bx	lr

080058b2 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80058b2:	b580      	push	{r7, lr}
 80058b4:	b082      	sub	sp, #8
 80058b6:	af00      	add	r7, sp, #0
 80058b8:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2201      	movs	r2, #1
 80058be:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d009      	beq.n	80058e0 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80058d2:	685b      	ldr	r3, [r3, #4]
 80058d4:	687a      	ldr	r2, [r7, #4]
 80058d6:	6852      	ldr	r2, [r2, #4]
 80058d8:	b2d2      	uxtb	r2, r2
 80058da:	4611      	mov	r1, r2
 80058dc:	6878      	ldr	r0, [r7, #4]
 80058de:	4798      	blx	r3
  }

  return USBD_OK;
 80058e0:	2300      	movs	r3, #0
}
 80058e2:	4618      	mov	r0, r3
 80058e4:	3708      	adds	r7, #8
 80058e6:	46bd      	mov	sp, r7
 80058e8:	bd80      	pop	{r7, pc}

080058ea <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80058ea:	b480      	push	{r7}
 80058ec:	b087      	sub	sp, #28
 80058ee:	af00      	add	r7, sp, #0
 80058f0:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80058f6:	697b      	ldr	r3, [r7, #20]
 80058f8:	781b      	ldrb	r3, [r3, #0]
 80058fa:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80058fc:	697b      	ldr	r3, [r7, #20]
 80058fe:	3301      	adds	r3, #1
 8005900:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8005902:	697b      	ldr	r3, [r7, #20]
 8005904:	781b      	ldrb	r3, [r3, #0]
 8005906:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005908:	8a3b      	ldrh	r3, [r7, #16]
 800590a:	021b      	lsls	r3, r3, #8
 800590c:	b21a      	sxth	r2, r3
 800590e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005912:	4313      	orrs	r3, r2
 8005914:	b21b      	sxth	r3, r3
 8005916:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8005918:	89fb      	ldrh	r3, [r7, #14]
}
 800591a:	4618      	mov	r0, r3
 800591c:	371c      	adds	r7, #28
 800591e:	46bd      	mov	sp, r7
 8005920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005924:	4770      	bx	lr
	...

08005928 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005928:	b580      	push	{r7, lr}
 800592a:	b084      	sub	sp, #16
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
 8005930:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005932:	2300      	movs	r3, #0
 8005934:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	781b      	ldrb	r3, [r3, #0]
 800593a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800593e:	2b40      	cmp	r3, #64	; 0x40
 8005940:	d005      	beq.n	800594e <USBD_StdDevReq+0x26>
 8005942:	2b40      	cmp	r3, #64	; 0x40
 8005944:	d853      	bhi.n	80059ee <USBD_StdDevReq+0xc6>
 8005946:	2b00      	cmp	r3, #0
 8005948:	d00b      	beq.n	8005962 <USBD_StdDevReq+0x3a>
 800594a:	2b20      	cmp	r3, #32
 800594c:	d14f      	bne.n	80059ee <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005954:	689b      	ldr	r3, [r3, #8]
 8005956:	6839      	ldr	r1, [r7, #0]
 8005958:	6878      	ldr	r0, [r7, #4]
 800595a:	4798      	blx	r3
 800595c:	4603      	mov	r3, r0
 800595e:	73fb      	strb	r3, [r7, #15]
      break;
 8005960:	e04a      	b.n	80059f8 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	785b      	ldrb	r3, [r3, #1]
 8005966:	2b09      	cmp	r3, #9
 8005968:	d83b      	bhi.n	80059e2 <USBD_StdDevReq+0xba>
 800596a:	a201      	add	r2, pc, #4	; (adr r2, 8005970 <USBD_StdDevReq+0x48>)
 800596c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005970:	080059c5 	.word	0x080059c5
 8005974:	080059d9 	.word	0x080059d9
 8005978:	080059e3 	.word	0x080059e3
 800597c:	080059cf 	.word	0x080059cf
 8005980:	080059e3 	.word	0x080059e3
 8005984:	080059a3 	.word	0x080059a3
 8005988:	08005999 	.word	0x08005999
 800598c:	080059e3 	.word	0x080059e3
 8005990:	080059bb 	.word	0x080059bb
 8005994:	080059ad 	.word	0x080059ad
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005998:	6839      	ldr	r1, [r7, #0]
 800599a:	6878      	ldr	r0, [r7, #4]
 800599c:	f000 f9de 	bl	8005d5c <USBD_GetDescriptor>
          break;
 80059a0:	e024      	b.n	80059ec <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80059a2:	6839      	ldr	r1, [r7, #0]
 80059a4:	6878      	ldr	r0, [r7, #4]
 80059a6:	f000 fb43 	bl	8006030 <USBD_SetAddress>
          break;
 80059aa:	e01f      	b.n	80059ec <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80059ac:	6839      	ldr	r1, [r7, #0]
 80059ae:	6878      	ldr	r0, [r7, #4]
 80059b0:	f000 fb82 	bl	80060b8 <USBD_SetConfig>
 80059b4:	4603      	mov	r3, r0
 80059b6:	73fb      	strb	r3, [r7, #15]
          break;
 80059b8:	e018      	b.n	80059ec <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80059ba:	6839      	ldr	r1, [r7, #0]
 80059bc:	6878      	ldr	r0, [r7, #4]
 80059be:	f000 fc21 	bl	8006204 <USBD_GetConfig>
          break;
 80059c2:	e013      	b.n	80059ec <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80059c4:	6839      	ldr	r1, [r7, #0]
 80059c6:	6878      	ldr	r0, [r7, #4]
 80059c8:	f000 fc52 	bl	8006270 <USBD_GetStatus>
          break;
 80059cc:	e00e      	b.n	80059ec <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80059ce:	6839      	ldr	r1, [r7, #0]
 80059d0:	6878      	ldr	r0, [r7, #4]
 80059d2:	f000 fc81 	bl	80062d8 <USBD_SetFeature>
          break;
 80059d6:	e009      	b.n	80059ec <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80059d8:	6839      	ldr	r1, [r7, #0]
 80059da:	6878      	ldr	r0, [r7, #4]
 80059dc:	f000 fc90 	bl	8006300 <USBD_ClrFeature>
          break;
 80059e0:	e004      	b.n	80059ec <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80059e2:	6839      	ldr	r1, [r7, #0]
 80059e4:	6878      	ldr	r0, [r7, #4]
 80059e6:	f000 fce7 	bl	80063b8 <USBD_CtlError>
          break;
 80059ea:	bf00      	nop
      }
      break;
 80059ec:	e004      	b.n	80059f8 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80059ee:	6839      	ldr	r1, [r7, #0]
 80059f0:	6878      	ldr	r0, [r7, #4]
 80059f2:	f000 fce1 	bl	80063b8 <USBD_CtlError>
      break;
 80059f6:	bf00      	nop
  }

  return ret;
 80059f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80059fa:	4618      	mov	r0, r3
 80059fc:	3710      	adds	r7, #16
 80059fe:	46bd      	mov	sp, r7
 8005a00:	bd80      	pop	{r7, pc}
 8005a02:	bf00      	nop

08005a04 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b084      	sub	sp, #16
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
 8005a0c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005a0e:	2300      	movs	r3, #0
 8005a10:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	781b      	ldrb	r3, [r3, #0]
 8005a16:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005a1a:	2b40      	cmp	r3, #64	; 0x40
 8005a1c:	d005      	beq.n	8005a2a <USBD_StdItfReq+0x26>
 8005a1e:	2b40      	cmp	r3, #64	; 0x40
 8005a20:	d82f      	bhi.n	8005a82 <USBD_StdItfReq+0x7e>
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d001      	beq.n	8005a2a <USBD_StdItfReq+0x26>
 8005a26:	2b20      	cmp	r3, #32
 8005a28:	d12b      	bne.n	8005a82 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a30:	b2db      	uxtb	r3, r3
 8005a32:	3b01      	subs	r3, #1
 8005a34:	2b02      	cmp	r3, #2
 8005a36:	d81d      	bhi.n	8005a74 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	889b      	ldrh	r3, [r3, #4]
 8005a3c:	b2db      	uxtb	r3, r3
 8005a3e:	2b01      	cmp	r3, #1
 8005a40:	d813      	bhi.n	8005a6a <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a48:	689b      	ldr	r3, [r3, #8]
 8005a4a:	6839      	ldr	r1, [r7, #0]
 8005a4c:	6878      	ldr	r0, [r7, #4]
 8005a4e:	4798      	blx	r3
 8005a50:	4603      	mov	r3, r0
 8005a52:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	88db      	ldrh	r3, [r3, #6]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d110      	bne.n	8005a7e <USBD_StdItfReq+0x7a>
 8005a5c:	7bfb      	ldrb	r3, [r7, #15]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d10d      	bne.n	8005a7e <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8005a62:	6878      	ldr	r0, [r7, #4]
 8005a64:	f000 fd73 	bl	800654e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005a68:	e009      	b.n	8005a7e <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8005a6a:	6839      	ldr	r1, [r7, #0]
 8005a6c:	6878      	ldr	r0, [r7, #4]
 8005a6e:	f000 fca3 	bl	80063b8 <USBD_CtlError>
          break;
 8005a72:	e004      	b.n	8005a7e <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8005a74:	6839      	ldr	r1, [r7, #0]
 8005a76:	6878      	ldr	r0, [r7, #4]
 8005a78:	f000 fc9e 	bl	80063b8 <USBD_CtlError>
          break;
 8005a7c:	e000      	b.n	8005a80 <USBD_StdItfReq+0x7c>
          break;
 8005a7e:	bf00      	nop
      }
      break;
 8005a80:	e004      	b.n	8005a8c <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8005a82:	6839      	ldr	r1, [r7, #0]
 8005a84:	6878      	ldr	r0, [r7, #4]
 8005a86:	f000 fc97 	bl	80063b8 <USBD_CtlError>
      break;
 8005a8a:	bf00      	nop
  }

  return ret;
 8005a8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a8e:	4618      	mov	r0, r3
 8005a90:	3710      	adds	r7, #16
 8005a92:	46bd      	mov	sp, r7
 8005a94:	bd80      	pop	{r7, pc}

08005a96 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005a96:	b580      	push	{r7, lr}
 8005a98:	b084      	sub	sp, #16
 8005a9a:	af00      	add	r7, sp, #0
 8005a9c:	6078      	str	r0, [r7, #4]
 8005a9e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	889b      	ldrh	r3, [r3, #4]
 8005aa8:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	781b      	ldrb	r3, [r3, #0]
 8005aae:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005ab2:	2b40      	cmp	r3, #64	; 0x40
 8005ab4:	d007      	beq.n	8005ac6 <USBD_StdEPReq+0x30>
 8005ab6:	2b40      	cmp	r3, #64	; 0x40
 8005ab8:	f200 8145 	bhi.w	8005d46 <USBD_StdEPReq+0x2b0>
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d00c      	beq.n	8005ada <USBD_StdEPReq+0x44>
 8005ac0:	2b20      	cmp	r3, #32
 8005ac2:	f040 8140 	bne.w	8005d46 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005acc:	689b      	ldr	r3, [r3, #8]
 8005ace:	6839      	ldr	r1, [r7, #0]
 8005ad0:	6878      	ldr	r0, [r7, #4]
 8005ad2:	4798      	blx	r3
 8005ad4:	4603      	mov	r3, r0
 8005ad6:	73fb      	strb	r3, [r7, #15]
      break;
 8005ad8:	e13a      	b.n	8005d50 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	785b      	ldrb	r3, [r3, #1]
 8005ade:	2b03      	cmp	r3, #3
 8005ae0:	d007      	beq.n	8005af2 <USBD_StdEPReq+0x5c>
 8005ae2:	2b03      	cmp	r3, #3
 8005ae4:	f300 8129 	bgt.w	8005d3a <USBD_StdEPReq+0x2a4>
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d07f      	beq.n	8005bec <USBD_StdEPReq+0x156>
 8005aec:	2b01      	cmp	r3, #1
 8005aee:	d03c      	beq.n	8005b6a <USBD_StdEPReq+0xd4>
 8005af0:	e123      	b.n	8005d3a <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005af8:	b2db      	uxtb	r3, r3
 8005afa:	2b02      	cmp	r3, #2
 8005afc:	d002      	beq.n	8005b04 <USBD_StdEPReq+0x6e>
 8005afe:	2b03      	cmp	r3, #3
 8005b00:	d016      	beq.n	8005b30 <USBD_StdEPReq+0x9a>
 8005b02:	e02c      	b.n	8005b5e <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005b04:	7bbb      	ldrb	r3, [r7, #14]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d00d      	beq.n	8005b26 <USBD_StdEPReq+0x90>
 8005b0a:	7bbb      	ldrb	r3, [r7, #14]
 8005b0c:	2b80      	cmp	r3, #128	; 0x80
 8005b0e:	d00a      	beq.n	8005b26 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005b10:	7bbb      	ldrb	r3, [r7, #14]
 8005b12:	4619      	mov	r1, r3
 8005b14:	6878      	ldr	r0, [r7, #4]
 8005b16:	f001 f92f 	bl	8006d78 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005b1a:	2180      	movs	r1, #128	; 0x80
 8005b1c:	6878      	ldr	r0, [r7, #4]
 8005b1e:	f001 f92b 	bl	8006d78 <USBD_LL_StallEP>
 8005b22:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005b24:	e020      	b.n	8005b68 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8005b26:	6839      	ldr	r1, [r7, #0]
 8005b28:	6878      	ldr	r0, [r7, #4]
 8005b2a:	f000 fc45 	bl	80063b8 <USBD_CtlError>
              break;
 8005b2e:	e01b      	b.n	8005b68 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	885b      	ldrh	r3, [r3, #2]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d10e      	bne.n	8005b56 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005b38:	7bbb      	ldrb	r3, [r7, #14]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d00b      	beq.n	8005b56 <USBD_StdEPReq+0xc0>
 8005b3e:	7bbb      	ldrb	r3, [r7, #14]
 8005b40:	2b80      	cmp	r3, #128	; 0x80
 8005b42:	d008      	beq.n	8005b56 <USBD_StdEPReq+0xc0>
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	88db      	ldrh	r3, [r3, #6]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d104      	bne.n	8005b56 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8005b4c:	7bbb      	ldrb	r3, [r7, #14]
 8005b4e:	4619      	mov	r1, r3
 8005b50:	6878      	ldr	r0, [r7, #4]
 8005b52:	f001 f911 	bl	8006d78 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8005b56:	6878      	ldr	r0, [r7, #4]
 8005b58:	f000 fcf9 	bl	800654e <USBD_CtlSendStatus>

              break;
 8005b5c:	e004      	b.n	8005b68 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8005b5e:	6839      	ldr	r1, [r7, #0]
 8005b60:	6878      	ldr	r0, [r7, #4]
 8005b62:	f000 fc29 	bl	80063b8 <USBD_CtlError>
              break;
 8005b66:	bf00      	nop
          }
          break;
 8005b68:	e0ec      	b.n	8005d44 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b70:	b2db      	uxtb	r3, r3
 8005b72:	2b02      	cmp	r3, #2
 8005b74:	d002      	beq.n	8005b7c <USBD_StdEPReq+0xe6>
 8005b76:	2b03      	cmp	r3, #3
 8005b78:	d016      	beq.n	8005ba8 <USBD_StdEPReq+0x112>
 8005b7a:	e030      	b.n	8005bde <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005b7c:	7bbb      	ldrb	r3, [r7, #14]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d00d      	beq.n	8005b9e <USBD_StdEPReq+0x108>
 8005b82:	7bbb      	ldrb	r3, [r7, #14]
 8005b84:	2b80      	cmp	r3, #128	; 0x80
 8005b86:	d00a      	beq.n	8005b9e <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005b88:	7bbb      	ldrb	r3, [r7, #14]
 8005b8a:	4619      	mov	r1, r3
 8005b8c:	6878      	ldr	r0, [r7, #4]
 8005b8e:	f001 f8f3 	bl	8006d78 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005b92:	2180      	movs	r1, #128	; 0x80
 8005b94:	6878      	ldr	r0, [r7, #4]
 8005b96:	f001 f8ef 	bl	8006d78 <USBD_LL_StallEP>
 8005b9a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005b9c:	e025      	b.n	8005bea <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8005b9e:	6839      	ldr	r1, [r7, #0]
 8005ba0:	6878      	ldr	r0, [r7, #4]
 8005ba2:	f000 fc09 	bl	80063b8 <USBD_CtlError>
              break;
 8005ba6:	e020      	b.n	8005bea <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	885b      	ldrh	r3, [r3, #2]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d11b      	bne.n	8005be8 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005bb0:	7bbb      	ldrb	r3, [r7, #14]
 8005bb2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d004      	beq.n	8005bc4 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8005bba:	7bbb      	ldrb	r3, [r7, #14]
 8005bbc:	4619      	mov	r1, r3
 8005bbe:	6878      	ldr	r0, [r7, #4]
 8005bc0:	f001 f8f9 	bl	8006db6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8005bc4:	6878      	ldr	r0, [r7, #4]
 8005bc6:	f000 fcc2 	bl	800654e <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005bd0:	689b      	ldr	r3, [r3, #8]
 8005bd2:	6839      	ldr	r1, [r7, #0]
 8005bd4:	6878      	ldr	r0, [r7, #4]
 8005bd6:	4798      	blx	r3
 8005bd8:	4603      	mov	r3, r0
 8005bda:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8005bdc:	e004      	b.n	8005be8 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8005bde:	6839      	ldr	r1, [r7, #0]
 8005be0:	6878      	ldr	r0, [r7, #4]
 8005be2:	f000 fbe9 	bl	80063b8 <USBD_CtlError>
              break;
 8005be6:	e000      	b.n	8005bea <USBD_StdEPReq+0x154>
              break;
 8005be8:	bf00      	nop
          }
          break;
 8005bea:	e0ab      	b.n	8005d44 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005bf2:	b2db      	uxtb	r3, r3
 8005bf4:	2b02      	cmp	r3, #2
 8005bf6:	d002      	beq.n	8005bfe <USBD_StdEPReq+0x168>
 8005bf8:	2b03      	cmp	r3, #3
 8005bfa:	d032      	beq.n	8005c62 <USBD_StdEPReq+0x1cc>
 8005bfc:	e097      	b.n	8005d2e <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005bfe:	7bbb      	ldrb	r3, [r7, #14]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d007      	beq.n	8005c14 <USBD_StdEPReq+0x17e>
 8005c04:	7bbb      	ldrb	r3, [r7, #14]
 8005c06:	2b80      	cmp	r3, #128	; 0x80
 8005c08:	d004      	beq.n	8005c14 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8005c0a:	6839      	ldr	r1, [r7, #0]
 8005c0c:	6878      	ldr	r0, [r7, #4]
 8005c0e:	f000 fbd3 	bl	80063b8 <USBD_CtlError>
                break;
 8005c12:	e091      	b.n	8005d38 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005c14:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	da0b      	bge.n	8005c34 <USBD_StdEPReq+0x19e>
 8005c1c:	7bbb      	ldrb	r3, [r7, #14]
 8005c1e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005c22:	4613      	mov	r3, r2
 8005c24:	009b      	lsls	r3, r3, #2
 8005c26:	4413      	add	r3, r2
 8005c28:	009b      	lsls	r3, r3, #2
 8005c2a:	3310      	adds	r3, #16
 8005c2c:	687a      	ldr	r2, [r7, #4]
 8005c2e:	4413      	add	r3, r2
 8005c30:	3304      	adds	r3, #4
 8005c32:	e00b      	b.n	8005c4c <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005c34:	7bbb      	ldrb	r3, [r7, #14]
 8005c36:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005c3a:	4613      	mov	r3, r2
 8005c3c:	009b      	lsls	r3, r3, #2
 8005c3e:	4413      	add	r3, r2
 8005c40:	009b      	lsls	r3, r3, #2
 8005c42:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005c46:	687a      	ldr	r2, [r7, #4]
 8005c48:	4413      	add	r3, r2
 8005c4a:	3304      	adds	r3, #4
 8005c4c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8005c4e:	68bb      	ldr	r3, [r7, #8]
 8005c50:	2200      	movs	r2, #0
 8005c52:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	2202      	movs	r2, #2
 8005c58:	4619      	mov	r1, r3
 8005c5a:	6878      	ldr	r0, [r7, #4]
 8005c5c:	f000 fc1d 	bl	800649a <USBD_CtlSendData>
              break;
 8005c60:	e06a      	b.n	8005d38 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8005c62:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	da11      	bge.n	8005c8e <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005c6a:	7bbb      	ldrb	r3, [r7, #14]
 8005c6c:	f003 020f 	and.w	r2, r3, #15
 8005c70:	6879      	ldr	r1, [r7, #4]
 8005c72:	4613      	mov	r3, r2
 8005c74:	009b      	lsls	r3, r3, #2
 8005c76:	4413      	add	r3, r2
 8005c78:	009b      	lsls	r3, r3, #2
 8005c7a:	440b      	add	r3, r1
 8005c7c:	3324      	adds	r3, #36	; 0x24
 8005c7e:	881b      	ldrh	r3, [r3, #0]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d117      	bne.n	8005cb4 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8005c84:	6839      	ldr	r1, [r7, #0]
 8005c86:	6878      	ldr	r0, [r7, #4]
 8005c88:	f000 fb96 	bl	80063b8 <USBD_CtlError>
                  break;
 8005c8c:	e054      	b.n	8005d38 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005c8e:	7bbb      	ldrb	r3, [r7, #14]
 8005c90:	f003 020f 	and.w	r2, r3, #15
 8005c94:	6879      	ldr	r1, [r7, #4]
 8005c96:	4613      	mov	r3, r2
 8005c98:	009b      	lsls	r3, r3, #2
 8005c9a:	4413      	add	r3, r2
 8005c9c:	009b      	lsls	r3, r3, #2
 8005c9e:	440b      	add	r3, r1
 8005ca0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005ca4:	881b      	ldrh	r3, [r3, #0]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d104      	bne.n	8005cb4 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8005caa:	6839      	ldr	r1, [r7, #0]
 8005cac:	6878      	ldr	r0, [r7, #4]
 8005cae:	f000 fb83 	bl	80063b8 <USBD_CtlError>
                  break;
 8005cb2:	e041      	b.n	8005d38 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005cb4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	da0b      	bge.n	8005cd4 <USBD_StdEPReq+0x23e>
 8005cbc:	7bbb      	ldrb	r3, [r7, #14]
 8005cbe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005cc2:	4613      	mov	r3, r2
 8005cc4:	009b      	lsls	r3, r3, #2
 8005cc6:	4413      	add	r3, r2
 8005cc8:	009b      	lsls	r3, r3, #2
 8005cca:	3310      	adds	r3, #16
 8005ccc:	687a      	ldr	r2, [r7, #4]
 8005cce:	4413      	add	r3, r2
 8005cd0:	3304      	adds	r3, #4
 8005cd2:	e00b      	b.n	8005cec <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005cd4:	7bbb      	ldrb	r3, [r7, #14]
 8005cd6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005cda:	4613      	mov	r3, r2
 8005cdc:	009b      	lsls	r3, r3, #2
 8005cde:	4413      	add	r3, r2
 8005ce0:	009b      	lsls	r3, r3, #2
 8005ce2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005ce6:	687a      	ldr	r2, [r7, #4]
 8005ce8:	4413      	add	r3, r2
 8005cea:	3304      	adds	r3, #4
 8005cec:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005cee:	7bbb      	ldrb	r3, [r7, #14]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d002      	beq.n	8005cfa <USBD_StdEPReq+0x264>
 8005cf4:	7bbb      	ldrb	r3, [r7, #14]
 8005cf6:	2b80      	cmp	r3, #128	; 0x80
 8005cf8:	d103      	bne.n	8005d02 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8005cfa:	68bb      	ldr	r3, [r7, #8]
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	601a      	str	r2, [r3, #0]
 8005d00:	e00e      	b.n	8005d20 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8005d02:	7bbb      	ldrb	r3, [r7, #14]
 8005d04:	4619      	mov	r1, r3
 8005d06:	6878      	ldr	r0, [r7, #4]
 8005d08:	f001 f874 	bl	8006df4 <USBD_LL_IsStallEP>
 8005d0c:	4603      	mov	r3, r0
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d003      	beq.n	8005d1a <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8005d12:	68bb      	ldr	r3, [r7, #8]
 8005d14:	2201      	movs	r2, #1
 8005d16:	601a      	str	r2, [r3, #0]
 8005d18:	e002      	b.n	8005d20 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8005d1a:	68bb      	ldr	r3, [r7, #8]
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	2202      	movs	r2, #2
 8005d24:	4619      	mov	r1, r3
 8005d26:	6878      	ldr	r0, [r7, #4]
 8005d28:	f000 fbb7 	bl	800649a <USBD_CtlSendData>
              break;
 8005d2c:	e004      	b.n	8005d38 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8005d2e:	6839      	ldr	r1, [r7, #0]
 8005d30:	6878      	ldr	r0, [r7, #4]
 8005d32:	f000 fb41 	bl	80063b8 <USBD_CtlError>
              break;
 8005d36:	bf00      	nop
          }
          break;
 8005d38:	e004      	b.n	8005d44 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8005d3a:	6839      	ldr	r1, [r7, #0]
 8005d3c:	6878      	ldr	r0, [r7, #4]
 8005d3e:	f000 fb3b 	bl	80063b8 <USBD_CtlError>
          break;
 8005d42:	bf00      	nop
      }
      break;
 8005d44:	e004      	b.n	8005d50 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8005d46:	6839      	ldr	r1, [r7, #0]
 8005d48:	6878      	ldr	r0, [r7, #4]
 8005d4a:	f000 fb35 	bl	80063b8 <USBD_CtlError>
      break;
 8005d4e:	bf00      	nop
  }

  return ret;
 8005d50:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d52:	4618      	mov	r0, r3
 8005d54:	3710      	adds	r7, #16
 8005d56:	46bd      	mov	sp, r7
 8005d58:	bd80      	pop	{r7, pc}
	...

08005d5c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b084      	sub	sp, #16
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
 8005d64:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005d66:	2300      	movs	r3, #0
 8005d68:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8005d6e:	2300      	movs	r3, #0
 8005d70:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	885b      	ldrh	r3, [r3, #2]
 8005d76:	0a1b      	lsrs	r3, r3, #8
 8005d78:	b29b      	uxth	r3, r3
 8005d7a:	3b01      	subs	r3, #1
 8005d7c:	2b06      	cmp	r3, #6
 8005d7e:	f200 8128 	bhi.w	8005fd2 <USBD_GetDescriptor+0x276>
 8005d82:	a201      	add	r2, pc, #4	; (adr r2, 8005d88 <USBD_GetDescriptor+0x2c>)
 8005d84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d88:	08005da5 	.word	0x08005da5
 8005d8c:	08005dbd 	.word	0x08005dbd
 8005d90:	08005dfd 	.word	0x08005dfd
 8005d94:	08005fd3 	.word	0x08005fd3
 8005d98:	08005fd3 	.word	0x08005fd3
 8005d9c:	08005f73 	.word	0x08005f73
 8005da0:	08005f9f 	.word	0x08005f9f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	687a      	ldr	r2, [r7, #4]
 8005dae:	7c12      	ldrb	r2, [r2, #16]
 8005db0:	f107 0108 	add.w	r1, r7, #8
 8005db4:	4610      	mov	r0, r2
 8005db6:	4798      	blx	r3
 8005db8:	60f8      	str	r0, [r7, #12]
      break;
 8005dba:	e112      	b.n	8005fe2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	7c1b      	ldrb	r3, [r3, #16]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d10d      	bne.n	8005de0 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005dca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dcc:	f107 0208 	add.w	r2, r7, #8
 8005dd0:	4610      	mov	r0, r2
 8005dd2:	4798      	blx	r3
 8005dd4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	3301      	adds	r3, #1
 8005dda:	2202      	movs	r2, #2
 8005ddc:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8005dde:	e100      	b.n	8005fe2 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005de8:	f107 0208 	add.w	r2, r7, #8
 8005dec:	4610      	mov	r0, r2
 8005dee:	4798      	blx	r3
 8005df0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	3301      	adds	r3, #1
 8005df6:	2202      	movs	r2, #2
 8005df8:	701a      	strb	r2, [r3, #0]
      break;
 8005dfa:	e0f2      	b.n	8005fe2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	885b      	ldrh	r3, [r3, #2]
 8005e00:	b2db      	uxtb	r3, r3
 8005e02:	2b05      	cmp	r3, #5
 8005e04:	f200 80ac 	bhi.w	8005f60 <USBD_GetDescriptor+0x204>
 8005e08:	a201      	add	r2, pc, #4	; (adr r2, 8005e10 <USBD_GetDescriptor+0xb4>)
 8005e0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e0e:	bf00      	nop
 8005e10:	08005e29 	.word	0x08005e29
 8005e14:	08005e5d 	.word	0x08005e5d
 8005e18:	08005e91 	.word	0x08005e91
 8005e1c:	08005ec5 	.word	0x08005ec5
 8005e20:	08005ef9 	.word	0x08005ef9
 8005e24:	08005f2d 	.word	0x08005f2d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e2e:	685b      	ldr	r3, [r3, #4]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d00b      	beq.n	8005e4c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e3a:	685b      	ldr	r3, [r3, #4]
 8005e3c:	687a      	ldr	r2, [r7, #4]
 8005e3e:	7c12      	ldrb	r2, [r2, #16]
 8005e40:	f107 0108 	add.w	r1, r7, #8
 8005e44:	4610      	mov	r0, r2
 8005e46:	4798      	blx	r3
 8005e48:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005e4a:	e091      	b.n	8005f70 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005e4c:	6839      	ldr	r1, [r7, #0]
 8005e4e:	6878      	ldr	r0, [r7, #4]
 8005e50:	f000 fab2 	bl	80063b8 <USBD_CtlError>
            err++;
 8005e54:	7afb      	ldrb	r3, [r7, #11]
 8005e56:	3301      	adds	r3, #1
 8005e58:	72fb      	strb	r3, [r7, #11]
          break;
 8005e5a:	e089      	b.n	8005f70 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e62:	689b      	ldr	r3, [r3, #8]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d00b      	beq.n	8005e80 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e6e:	689b      	ldr	r3, [r3, #8]
 8005e70:	687a      	ldr	r2, [r7, #4]
 8005e72:	7c12      	ldrb	r2, [r2, #16]
 8005e74:	f107 0108 	add.w	r1, r7, #8
 8005e78:	4610      	mov	r0, r2
 8005e7a:	4798      	blx	r3
 8005e7c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005e7e:	e077      	b.n	8005f70 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005e80:	6839      	ldr	r1, [r7, #0]
 8005e82:	6878      	ldr	r0, [r7, #4]
 8005e84:	f000 fa98 	bl	80063b8 <USBD_CtlError>
            err++;
 8005e88:	7afb      	ldrb	r3, [r7, #11]
 8005e8a:	3301      	adds	r3, #1
 8005e8c:	72fb      	strb	r3, [r7, #11]
          break;
 8005e8e:	e06f      	b.n	8005f70 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e96:	68db      	ldr	r3, [r3, #12]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d00b      	beq.n	8005eb4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005ea2:	68db      	ldr	r3, [r3, #12]
 8005ea4:	687a      	ldr	r2, [r7, #4]
 8005ea6:	7c12      	ldrb	r2, [r2, #16]
 8005ea8:	f107 0108 	add.w	r1, r7, #8
 8005eac:	4610      	mov	r0, r2
 8005eae:	4798      	blx	r3
 8005eb0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005eb2:	e05d      	b.n	8005f70 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005eb4:	6839      	ldr	r1, [r7, #0]
 8005eb6:	6878      	ldr	r0, [r7, #4]
 8005eb8:	f000 fa7e 	bl	80063b8 <USBD_CtlError>
            err++;
 8005ebc:	7afb      	ldrb	r3, [r7, #11]
 8005ebe:	3301      	adds	r3, #1
 8005ec0:	72fb      	strb	r3, [r7, #11]
          break;
 8005ec2:	e055      	b.n	8005f70 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005eca:	691b      	ldr	r3, [r3, #16]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d00b      	beq.n	8005ee8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005ed6:	691b      	ldr	r3, [r3, #16]
 8005ed8:	687a      	ldr	r2, [r7, #4]
 8005eda:	7c12      	ldrb	r2, [r2, #16]
 8005edc:	f107 0108 	add.w	r1, r7, #8
 8005ee0:	4610      	mov	r0, r2
 8005ee2:	4798      	blx	r3
 8005ee4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005ee6:	e043      	b.n	8005f70 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005ee8:	6839      	ldr	r1, [r7, #0]
 8005eea:	6878      	ldr	r0, [r7, #4]
 8005eec:	f000 fa64 	bl	80063b8 <USBD_CtlError>
            err++;
 8005ef0:	7afb      	ldrb	r3, [r7, #11]
 8005ef2:	3301      	adds	r3, #1
 8005ef4:	72fb      	strb	r3, [r7, #11]
          break;
 8005ef6:	e03b      	b.n	8005f70 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005efe:	695b      	ldr	r3, [r3, #20]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d00b      	beq.n	8005f1c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f0a:	695b      	ldr	r3, [r3, #20]
 8005f0c:	687a      	ldr	r2, [r7, #4]
 8005f0e:	7c12      	ldrb	r2, [r2, #16]
 8005f10:	f107 0108 	add.w	r1, r7, #8
 8005f14:	4610      	mov	r0, r2
 8005f16:	4798      	blx	r3
 8005f18:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005f1a:	e029      	b.n	8005f70 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005f1c:	6839      	ldr	r1, [r7, #0]
 8005f1e:	6878      	ldr	r0, [r7, #4]
 8005f20:	f000 fa4a 	bl	80063b8 <USBD_CtlError>
            err++;
 8005f24:	7afb      	ldrb	r3, [r7, #11]
 8005f26:	3301      	adds	r3, #1
 8005f28:	72fb      	strb	r3, [r7, #11]
          break;
 8005f2a:	e021      	b.n	8005f70 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f32:	699b      	ldr	r3, [r3, #24]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d00b      	beq.n	8005f50 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f3e:	699b      	ldr	r3, [r3, #24]
 8005f40:	687a      	ldr	r2, [r7, #4]
 8005f42:	7c12      	ldrb	r2, [r2, #16]
 8005f44:	f107 0108 	add.w	r1, r7, #8
 8005f48:	4610      	mov	r0, r2
 8005f4a:	4798      	blx	r3
 8005f4c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005f4e:	e00f      	b.n	8005f70 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005f50:	6839      	ldr	r1, [r7, #0]
 8005f52:	6878      	ldr	r0, [r7, #4]
 8005f54:	f000 fa30 	bl	80063b8 <USBD_CtlError>
            err++;
 8005f58:	7afb      	ldrb	r3, [r7, #11]
 8005f5a:	3301      	adds	r3, #1
 8005f5c:	72fb      	strb	r3, [r7, #11]
          break;
 8005f5e:	e007      	b.n	8005f70 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8005f60:	6839      	ldr	r1, [r7, #0]
 8005f62:	6878      	ldr	r0, [r7, #4]
 8005f64:	f000 fa28 	bl	80063b8 <USBD_CtlError>
          err++;
 8005f68:	7afb      	ldrb	r3, [r7, #11]
 8005f6a:	3301      	adds	r3, #1
 8005f6c:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8005f6e:	bf00      	nop
      }
      break;
 8005f70:	e037      	b.n	8005fe2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	7c1b      	ldrb	r3, [r3, #16]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d109      	bne.n	8005f8e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f82:	f107 0208 	add.w	r2, r7, #8
 8005f86:	4610      	mov	r0, r2
 8005f88:	4798      	blx	r3
 8005f8a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005f8c:	e029      	b.n	8005fe2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005f8e:	6839      	ldr	r1, [r7, #0]
 8005f90:	6878      	ldr	r0, [r7, #4]
 8005f92:	f000 fa11 	bl	80063b8 <USBD_CtlError>
        err++;
 8005f96:	7afb      	ldrb	r3, [r7, #11]
 8005f98:	3301      	adds	r3, #1
 8005f9a:	72fb      	strb	r3, [r7, #11]
      break;
 8005f9c:	e021      	b.n	8005fe2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	7c1b      	ldrb	r3, [r3, #16]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d10d      	bne.n	8005fc2 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fae:	f107 0208 	add.w	r2, r7, #8
 8005fb2:	4610      	mov	r0, r2
 8005fb4:	4798      	blx	r3
 8005fb6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	3301      	adds	r3, #1
 8005fbc:	2207      	movs	r2, #7
 8005fbe:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005fc0:	e00f      	b.n	8005fe2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005fc2:	6839      	ldr	r1, [r7, #0]
 8005fc4:	6878      	ldr	r0, [r7, #4]
 8005fc6:	f000 f9f7 	bl	80063b8 <USBD_CtlError>
        err++;
 8005fca:	7afb      	ldrb	r3, [r7, #11]
 8005fcc:	3301      	adds	r3, #1
 8005fce:	72fb      	strb	r3, [r7, #11]
      break;
 8005fd0:	e007      	b.n	8005fe2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8005fd2:	6839      	ldr	r1, [r7, #0]
 8005fd4:	6878      	ldr	r0, [r7, #4]
 8005fd6:	f000 f9ef 	bl	80063b8 <USBD_CtlError>
      err++;
 8005fda:	7afb      	ldrb	r3, [r7, #11]
 8005fdc:	3301      	adds	r3, #1
 8005fde:	72fb      	strb	r3, [r7, #11]
      break;
 8005fe0:	bf00      	nop
  }

  if (err != 0U)
 8005fe2:	7afb      	ldrb	r3, [r7, #11]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d11e      	bne.n	8006026 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	88db      	ldrh	r3, [r3, #6]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d016      	beq.n	800601e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8005ff0:	893b      	ldrh	r3, [r7, #8]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d00e      	beq.n	8006014 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	88da      	ldrh	r2, [r3, #6]
 8005ffa:	893b      	ldrh	r3, [r7, #8]
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	bf28      	it	cs
 8006000:	4613      	movcs	r3, r2
 8006002:	b29b      	uxth	r3, r3
 8006004:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006006:	893b      	ldrh	r3, [r7, #8]
 8006008:	461a      	mov	r2, r3
 800600a:	68f9      	ldr	r1, [r7, #12]
 800600c:	6878      	ldr	r0, [r7, #4]
 800600e:	f000 fa44 	bl	800649a <USBD_CtlSendData>
 8006012:	e009      	b.n	8006028 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006014:	6839      	ldr	r1, [r7, #0]
 8006016:	6878      	ldr	r0, [r7, #4]
 8006018:	f000 f9ce 	bl	80063b8 <USBD_CtlError>
 800601c:	e004      	b.n	8006028 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800601e:	6878      	ldr	r0, [r7, #4]
 8006020:	f000 fa95 	bl	800654e <USBD_CtlSendStatus>
 8006024:	e000      	b.n	8006028 <USBD_GetDescriptor+0x2cc>
    return;
 8006026:	bf00      	nop
  }
}
 8006028:	3710      	adds	r7, #16
 800602a:	46bd      	mov	sp, r7
 800602c:	bd80      	pop	{r7, pc}
 800602e:	bf00      	nop

08006030 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b084      	sub	sp, #16
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
 8006038:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	889b      	ldrh	r3, [r3, #4]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d131      	bne.n	80060a6 <USBD_SetAddress+0x76>
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	88db      	ldrh	r3, [r3, #6]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d12d      	bne.n	80060a6 <USBD_SetAddress+0x76>
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	885b      	ldrh	r3, [r3, #2]
 800604e:	2b7f      	cmp	r3, #127	; 0x7f
 8006050:	d829      	bhi.n	80060a6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	885b      	ldrh	r3, [r3, #2]
 8006056:	b2db      	uxtb	r3, r3
 8006058:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800605c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006064:	b2db      	uxtb	r3, r3
 8006066:	2b03      	cmp	r3, #3
 8006068:	d104      	bne.n	8006074 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800606a:	6839      	ldr	r1, [r7, #0]
 800606c:	6878      	ldr	r0, [r7, #4]
 800606e:	f000 f9a3 	bl	80063b8 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006072:	e01d      	b.n	80060b0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	7bfa      	ldrb	r2, [r7, #15]
 8006078:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800607c:	7bfb      	ldrb	r3, [r7, #15]
 800607e:	4619      	mov	r1, r3
 8006080:	6878      	ldr	r0, [r7, #4]
 8006082:	f000 fee3 	bl	8006e4c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006086:	6878      	ldr	r0, [r7, #4]
 8006088:	f000 fa61 	bl	800654e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800608c:	7bfb      	ldrb	r3, [r7, #15]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d004      	beq.n	800609c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2202      	movs	r2, #2
 8006096:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800609a:	e009      	b.n	80060b0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2201      	movs	r2, #1
 80060a0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80060a4:	e004      	b.n	80060b0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80060a6:	6839      	ldr	r1, [r7, #0]
 80060a8:	6878      	ldr	r0, [r7, #4]
 80060aa:	f000 f985 	bl	80063b8 <USBD_CtlError>
  }
}
 80060ae:	bf00      	nop
 80060b0:	bf00      	nop
 80060b2:	3710      	adds	r7, #16
 80060b4:	46bd      	mov	sp, r7
 80060b6:	bd80      	pop	{r7, pc}

080060b8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b084      	sub	sp, #16
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
 80060c0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80060c2:	2300      	movs	r3, #0
 80060c4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	885b      	ldrh	r3, [r3, #2]
 80060ca:	b2da      	uxtb	r2, r3
 80060cc:	4b4c      	ldr	r3, [pc, #304]	; (8006200 <USBD_SetConfig+0x148>)
 80060ce:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80060d0:	4b4b      	ldr	r3, [pc, #300]	; (8006200 <USBD_SetConfig+0x148>)
 80060d2:	781b      	ldrb	r3, [r3, #0]
 80060d4:	2b01      	cmp	r3, #1
 80060d6:	d905      	bls.n	80060e4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80060d8:	6839      	ldr	r1, [r7, #0]
 80060da:	6878      	ldr	r0, [r7, #4]
 80060dc:	f000 f96c 	bl	80063b8 <USBD_CtlError>
    return USBD_FAIL;
 80060e0:	2303      	movs	r3, #3
 80060e2:	e088      	b.n	80061f6 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060ea:	b2db      	uxtb	r3, r3
 80060ec:	2b02      	cmp	r3, #2
 80060ee:	d002      	beq.n	80060f6 <USBD_SetConfig+0x3e>
 80060f0:	2b03      	cmp	r3, #3
 80060f2:	d025      	beq.n	8006140 <USBD_SetConfig+0x88>
 80060f4:	e071      	b.n	80061da <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80060f6:	4b42      	ldr	r3, [pc, #264]	; (8006200 <USBD_SetConfig+0x148>)
 80060f8:	781b      	ldrb	r3, [r3, #0]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d01c      	beq.n	8006138 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 80060fe:	4b40      	ldr	r3, [pc, #256]	; (8006200 <USBD_SetConfig+0x148>)
 8006100:	781b      	ldrb	r3, [r3, #0]
 8006102:	461a      	mov	r2, r3
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006108:	4b3d      	ldr	r3, [pc, #244]	; (8006200 <USBD_SetConfig+0x148>)
 800610a:	781b      	ldrb	r3, [r3, #0]
 800610c:	4619      	mov	r1, r3
 800610e:	6878      	ldr	r0, [r7, #4]
 8006110:	f7ff f948 	bl	80053a4 <USBD_SetClassConfig>
 8006114:	4603      	mov	r3, r0
 8006116:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006118:	7bfb      	ldrb	r3, [r7, #15]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d004      	beq.n	8006128 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800611e:	6839      	ldr	r1, [r7, #0]
 8006120:	6878      	ldr	r0, [r7, #4]
 8006122:	f000 f949 	bl	80063b8 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006126:	e065      	b.n	80061f4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8006128:	6878      	ldr	r0, [r7, #4]
 800612a:	f000 fa10 	bl	800654e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2203      	movs	r2, #3
 8006132:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006136:	e05d      	b.n	80061f4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8006138:	6878      	ldr	r0, [r7, #4]
 800613a:	f000 fa08 	bl	800654e <USBD_CtlSendStatus>
      break;
 800613e:	e059      	b.n	80061f4 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006140:	4b2f      	ldr	r3, [pc, #188]	; (8006200 <USBD_SetConfig+0x148>)
 8006142:	781b      	ldrb	r3, [r3, #0]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d112      	bne.n	800616e <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2202      	movs	r2, #2
 800614c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8006150:	4b2b      	ldr	r3, [pc, #172]	; (8006200 <USBD_SetConfig+0x148>)
 8006152:	781b      	ldrb	r3, [r3, #0]
 8006154:	461a      	mov	r2, r3
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800615a:	4b29      	ldr	r3, [pc, #164]	; (8006200 <USBD_SetConfig+0x148>)
 800615c:	781b      	ldrb	r3, [r3, #0]
 800615e:	4619      	mov	r1, r3
 8006160:	6878      	ldr	r0, [r7, #4]
 8006162:	f7ff f93b 	bl	80053dc <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006166:	6878      	ldr	r0, [r7, #4]
 8006168:	f000 f9f1 	bl	800654e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800616c:	e042      	b.n	80061f4 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800616e:	4b24      	ldr	r3, [pc, #144]	; (8006200 <USBD_SetConfig+0x148>)
 8006170:	781b      	ldrb	r3, [r3, #0]
 8006172:	461a      	mov	r2, r3
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	685b      	ldr	r3, [r3, #4]
 8006178:	429a      	cmp	r2, r3
 800617a:	d02a      	beq.n	80061d2 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	685b      	ldr	r3, [r3, #4]
 8006180:	b2db      	uxtb	r3, r3
 8006182:	4619      	mov	r1, r3
 8006184:	6878      	ldr	r0, [r7, #4]
 8006186:	f7ff f929 	bl	80053dc <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800618a:	4b1d      	ldr	r3, [pc, #116]	; (8006200 <USBD_SetConfig+0x148>)
 800618c:	781b      	ldrb	r3, [r3, #0]
 800618e:	461a      	mov	r2, r3
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006194:	4b1a      	ldr	r3, [pc, #104]	; (8006200 <USBD_SetConfig+0x148>)
 8006196:	781b      	ldrb	r3, [r3, #0]
 8006198:	4619      	mov	r1, r3
 800619a:	6878      	ldr	r0, [r7, #4]
 800619c:	f7ff f902 	bl	80053a4 <USBD_SetClassConfig>
 80061a0:	4603      	mov	r3, r0
 80061a2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80061a4:	7bfb      	ldrb	r3, [r7, #15]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d00f      	beq.n	80061ca <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 80061aa:	6839      	ldr	r1, [r7, #0]
 80061ac:	6878      	ldr	r0, [r7, #4]
 80061ae:	f000 f903 	bl	80063b8 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	685b      	ldr	r3, [r3, #4]
 80061b6:	b2db      	uxtb	r3, r3
 80061b8:	4619      	mov	r1, r3
 80061ba:	6878      	ldr	r0, [r7, #4]
 80061bc:	f7ff f90e 	bl	80053dc <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2202      	movs	r2, #2
 80061c4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80061c8:	e014      	b.n	80061f4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80061ca:	6878      	ldr	r0, [r7, #4]
 80061cc:	f000 f9bf 	bl	800654e <USBD_CtlSendStatus>
      break;
 80061d0:	e010      	b.n	80061f4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80061d2:	6878      	ldr	r0, [r7, #4]
 80061d4:	f000 f9bb 	bl	800654e <USBD_CtlSendStatus>
      break;
 80061d8:	e00c      	b.n	80061f4 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80061da:	6839      	ldr	r1, [r7, #0]
 80061dc:	6878      	ldr	r0, [r7, #4]
 80061de:	f000 f8eb 	bl	80063b8 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80061e2:	4b07      	ldr	r3, [pc, #28]	; (8006200 <USBD_SetConfig+0x148>)
 80061e4:	781b      	ldrb	r3, [r3, #0]
 80061e6:	4619      	mov	r1, r3
 80061e8:	6878      	ldr	r0, [r7, #4]
 80061ea:	f7ff f8f7 	bl	80053dc <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80061ee:	2303      	movs	r3, #3
 80061f0:	73fb      	strb	r3, [r7, #15]
      break;
 80061f2:	bf00      	nop
  }

  return ret;
 80061f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80061f6:	4618      	mov	r0, r3
 80061f8:	3710      	adds	r7, #16
 80061fa:	46bd      	mov	sp, r7
 80061fc:	bd80      	pop	{r7, pc}
 80061fe:	bf00      	nop
 8006200:	200001ec 	.word	0x200001ec

08006204 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b082      	sub	sp, #8
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
 800620c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	88db      	ldrh	r3, [r3, #6]
 8006212:	2b01      	cmp	r3, #1
 8006214:	d004      	beq.n	8006220 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006216:	6839      	ldr	r1, [r7, #0]
 8006218:	6878      	ldr	r0, [r7, #4]
 800621a:	f000 f8cd 	bl	80063b8 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800621e:	e023      	b.n	8006268 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006226:	b2db      	uxtb	r3, r3
 8006228:	2b02      	cmp	r3, #2
 800622a:	dc02      	bgt.n	8006232 <USBD_GetConfig+0x2e>
 800622c:	2b00      	cmp	r3, #0
 800622e:	dc03      	bgt.n	8006238 <USBD_GetConfig+0x34>
 8006230:	e015      	b.n	800625e <USBD_GetConfig+0x5a>
 8006232:	2b03      	cmp	r3, #3
 8006234:	d00b      	beq.n	800624e <USBD_GetConfig+0x4a>
 8006236:	e012      	b.n	800625e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2200      	movs	r2, #0
 800623c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	3308      	adds	r3, #8
 8006242:	2201      	movs	r2, #1
 8006244:	4619      	mov	r1, r3
 8006246:	6878      	ldr	r0, [r7, #4]
 8006248:	f000 f927 	bl	800649a <USBD_CtlSendData>
        break;
 800624c:	e00c      	b.n	8006268 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	3304      	adds	r3, #4
 8006252:	2201      	movs	r2, #1
 8006254:	4619      	mov	r1, r3
 8006256:	6878      	ldr	r0, [r7, #4]
 8006258:	f000 f91f 	bl	800649a <USBD_CtlSendData>
        break;
 800625c:	e004      	b.n	8006268 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800625e:	6839      	ldr	r1, [r7, #0]
 8006260:	6878      	ldr	r0, [r7, #4]
 8006262:	f000 f8a9 	bl	80063b8 <USBD_CtlError>
        break;
 8006266:	bf00      	nop
}
 8006268:	bf00      	nop
 800626a:	3708      	adds	r7, #8
 800626c:	46bd      	mov	sp, r7
 800626e:	bd80      	pop	{r7, pc}

08006270 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b082      	sub	sp, #8
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
 8006278:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006280:	b2db      	uxtb	r3, r3
 8006282:	3b01      	subs	r3, #1
 8006284:	2b02      	cmp	r3, #2
 8006286:	d81e      	bhi.n	80062c6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	88db      	ldrh	r3, [r3, #6]
 800628c:	2b02      	cmp	r3, #2
 800628e:	d004      	beq.n	800629a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006290:	6839      	ldr	r1, [r7, #0]
 8006292:	6878      	ldr	r0, [r7, #4]
 8006294:	f000 f890 	bl	80063b8 <USBD_CtlError>
        break;
 8006298:	e01a      	b.n	80062d0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2201      	movs	r2, #1
 800629e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d005      	beq.n	80062b6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	68db      	ldr	r3, [r3, #12]
 80062ae:	f043 0202 	orr.w	r2, r3, #2
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	330c      	adds	r3, #12
 80062ba:	2202      	movs	r2, #2
 80062bc:	4619      	mov	r1, r3
 80062be:	6878      	ldr	r0, [r7, #4]
 80062c0:	f000 f8eb 	bl	800649a <USBD_CtlSendData>
      break;
 80062c4:	e004      	b.n	80062d0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80062c6:	6839      	ldr	r1, [r7, #0]
 80062c8:	6878      	ldr	r0, [r7, #4]
 80062ca:	f000 f875 	bl	80063b8 <USBD_CtlError>
      break;
 80062ce:	bf00      	nop
  }
}
 80062d0:	bf00      	nop
 80062d2:	3708      	adds	r7, #8
 80062d4:	46bd      	mov	sp, r7
 80062d6:	bd80      	pop	{r7, pc}

080062d8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	b082      	sub	sp, #8
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
 80062e0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	885b      	ldrh	r3, [r3, #2]
 80062e6:	2b01      	cmp	r3, #1
 80062e8:	d106      	bne.n	80062f8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2201      	movs	r2, #1
 80062ee:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80062f2:	6878      	ldr	r0, [r7, #4]
 80062f4:	f000 f92b 	bl	800654e <USBD_CtlSendStatus>
  }
}
 80062f8:	bf00      	nop
 80062fa:	3708      	adds	r7, #8
 80062fc:	46bd      	mov	sp, r7
 80062fe:	bd80      	pop	{r7, pc}

08006300 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b082      	sub	sp, #8
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
 8006308:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006310:	b2db      	uxtb	r3, r3
 8006312:	3b01      	subs	r3, #1
 8006314:	2b02      	cmp	r3, #2
 8006316:	d80b      	bhi.n	8006330 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	885b      	ldrh	r3, [r3, #2]
 800631c:	2b01      	cmp	r3, #1
 800631e:	d10c      	bne.n	800633a <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2200      	movs	r2, #0
 8006324:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006328:	6878      	ldr	r0, [r7, #4]
 800632a:	f000 f910 	bl	800654e <USBD_CtlSendStatus>
      }
      break;
 800632e:	e004      	b.n	800633a <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006330:	6839      	ldr	r1, [r7, #0]
 8006332:	6878      	ldr	r0, [r7, #4]
 8006334:	f000 f840 	bl	80063b8 <USBD_CtlError>
      break;
 8006338:	e000      	b.n	800633c <USBD_ClrFeature+0x3c>
      break;
 800633a:	bf00      	nop
  }
}
 800633c:	bf00      	nop
 800633e:	3708      	adds	r7, #8
 8006340:	46bd      	mov	sp, r7
 8006342:	bd80      	pop	{r7, pc}

08006344 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b084      	sub	sp, #16
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
 800634c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	781a      	ldrb	r2, [r3, #0]
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	3301      	adds	r3, #1
 800635e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	781a      	ldrb	r2, [r3, #0]
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	3301      	adds	r3, #1
 800636c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800636e:	68f8      	ldr	r0, [r7, #12]
 8006370:	f7ff fabb 	bl	80058ea <SWAPBYTE>
 8006374:	4603      	mov	r3, r0
 8006376:	461a      	mov	r2, r3
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	3301      	adds	r3, #1
 8006380:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	3301      	adds	r3, #1
 8006386:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006388:	68f8      	ldr	r0, [r7, #12]
 800638a:	f7ff faae 	bl	80058ea <SWAPBYTE>
 800638e:	4603      	mov	r3, r0
 8006390:	461a      	mov	r2, r3
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	3301      	adds	r3, #1
 800639a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	3301      	adds	r3, #1
 80063a0:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80063a2:	68f8      	ldr	r0, [r7, #12]
 80063a4:	f7ff faa1 	bl	80058ea <SWAPBYTE>
 80063a8:	4603      	mov	r3, r0
 80063aa:	461a      	mov	r2, r3
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	80da      	strh	r2, [r3, #6]
}
 80063b0:	bf00      	nop
 80063b2:	3710      	adds	r7, #16
 80063b4:	46bd      	mov	sp, r7
 80063b6:	bd80      	pop	{r7, pc}

080063b8 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b082      	sub	sp, #8
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
 80063c0:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80063c2:	2180      	movs	r1, #128	; 0x80
 80063c4:	6878      	ldr	r0, [r7, #4]
 80063c6:	f000 fcd7 	bl	8006d78 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80063ca:	2100      	movs	r1, #0
 80063cc:	6878      	ldr	r0, [r7, #4]
 80063ce:	f000 fcd3 	bl	8006d78 <USBD_LL_StallEP>
}
 80063d2:	bf00      	nop
 80063d4:	3708      	adds	r7, #8
 80063d6:	46bd      	mov	sp, r7
 80063d8:	bd80      	pop	{r7, pc}

080063da <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80063da:	b580      	push	{r7, lr}
 80063dc:	b086      	sub	sp, #24
 80063de:	af00      	add	r7, sp, #0
 80063e0:	60f8      	str	r0, [r7, #12]
 80063e2:	60b9      	str	r1, [r7, #8]
 80063e4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80063e6:	2300      	movs	r3, #0
 80063e8:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d036      	beq.n	800645e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80063f4:	6938      	ldr	r0, [r7, #16]
 80063f6:	f000 f836 	bl	8006466 <USBD_GetLen>
 80063fa:	4603      	mov	r3, r0
 80063fc:	3301      	adds	r3, #1
 80063fe:	b29b      	uxth	r3, r3
 8006400:	005b      	lsls	r3, r3, #1
 8006402:	b29a      	uxth	r2, r3
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006408:	7dfb      	ldrb	r3, [r7, #23]
 800640a:	68ba      	ldr	r2, [r7, #8]
 800640c:	4413      	add	r3, r2
 800640e:	687a      	ldr	r2, [r7, #4]
 8006410:	7812      	ldrb	r2, [r2, #0]
 8006412:	701a      	strb	r2, [r3, #0]
  idx++;
 8006414:	7dfb      	ldrb	r3, [r7, #23]
 8006416:	3301      	adds	r3, #1
 8006418:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800641a:	7dfb      	ldrb	r3, [r7, #23]
 800641c:	68ba      	ldr	r2, [r7, #8]
 800641e:	4413      	add	r3, r2
 8006420:	2203      	movs	r2, #3
 8006422:	701a      	strb	r2, [r3, #0]
  idx++;
 8006424:	7dfb      	ldrb	r3, [r7, #23]
 8006426:	3301      	adds	r3, #1
 8006428:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800642a:	e013      	b.n	8006454 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800642c:	7dfb      	ldrb	r3, [r7, #23]
 800642e:	68ba      	ldr	r2, [r7, #8]
 8006430:	4413      	add	r3, r2
 8006432:	693a      	ldr	r2, [r7, #16]
 8006434:	7812      	ldrb	r2, [r2, #0]
 8006436:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006438:	693b      	ldr	r3, [r7, #16]
 800643a:	3301      	adds	r3, #1
 800643c:	613b      	str	r3, [r7, #16]
    idx++;
 800643e:	7dfb      	ldrb	r3, [r7, #23]
 8006440:	3301      	adds	r3, #1
 8006442:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006444:	7dfb      	ldrb	r3, [r7, #23]
 8006446:	68ba      	ldr	r2, [r7, #8]
 8006448:	4413      	add	r3, r2
 800644a:	2200      	movs	r2, #0
 800644c:	701a      	strb	r2, [r3, #0]
    idx++;
 800644e:	7dfb      	ldrb	r3, [r7, #23]
 8006450:	3301      	adds	r3, #1
 8006452:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006454:	693b      	ldr	r3, [r7, #16]
 8006456:	781b      	ldrb	r3, [r3, #0]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d1e7      	bne.n	800642c <USBD_GetString+0x52>
 800645c:	e000      	b.n	8006460 <USBD_GetString+0x86>
    return;
 800645e:	bf00      	nop
  }
}
 8006460:	3718      	adds	r7, #24
 8006462:	46bd      	mov	sp, r7
 8006464:	bd80      	pop	{r7, pc}

08006466 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006466:	b480      	push	{r7}
 8006468:	b085      	sub	sp, #20
 800646a:	af00      	add	r7, sp, #0
 800646c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800646e:	2300      	movs	r3, #0
 8006470:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006476:	e005      	b.n	8006484 <USBD_GetLen+0x1e>
  {
    len++;
 8006478:	7bfb      	ldrb	r3, [r7, #15]
 800647a:	3301      	adds	r3, #1
 800647c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800647e:	68bb      	ldr	r3, [r7, #8]
 8006480:	3301      	adds	r3, #1
 8006482:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006484:	68bb      	ldr	r3, [r7, #8]
 8006486:	781b      	ldrb	r3, [r3, #0]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d1f5      	bne.n	8006478 <USBD_GetLen+0x12>
  }

  return len;
 800648c:	7bfb      	ldrb	r3, [r7, #15]
}
 800648e:	4618      	mov	r0, r3
 8006490:	3714      	adds	r7, #20
 8006492:	46bd      	mov	sp, r7
 8006494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006498:	4770      	bx	lr

0800649a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800649a:	b580      	push	{r7, lr}
 800649c:	b084      	sub	sp, #16
 800649e:	af00      	add	r7, sp, #0
 80064a0:	60f8      	str	r0, [r7, #12]
 80064a2:	60b9      	str	r1, [r7, #8]
 80064a4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	2202      	movs	r2, #2
 80064aa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	687a      	ldr	r2, [r7, #4]
 80064b2:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	687a      	ldr	r2, [r7, #4]
 80064b8:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	68ba      	ldr	r2, [r7, #8]
 80064be:	2100      	movs	r1, #0
 80064c0:	68f8      	ldr	r0, [r7, #12]
 80064c2:	f000 fce2 	bl	8006e8a <USBD_LL_Transmit>

  return USBD_OK;
 80064c6:	2300      	movs	r3, #0
}
 80064c8:	4618      	mov	r0, r3
 80064ca:	3710      	adds	r7, #16
 80064cc:	46bd      	mov	sp, r7
 80064ce:	bd80      	pop	{r7, pc}

080064d0 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b084      	sub	sp, #16
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	60f8      	str	r0, [r7, #12]
 80064d8:	60b9      	str	r1, [r7, #8]
 80064da:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	68ba      	ldr	r2, [r7, #8]
 80064e0:	2100      	movs	r1, #0
 80064e2:	68f8      	ldr	r0, [r7, #12]
 80064e4:	f000 fcd1 	bl	8006e8a <USBD_LL_Transmit>

  return USBD_OK;
 80064e8:	2300      	movs	r3, #0
}
 80064ea:	4618      	mov	r0, r3
 80064ec:	3710      	adds	r7, #16
 80064ee:	46bd      	mov	sp, r7
 80064f0:	bd80      	pop	{r7, pc}

080064f2 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80064f2:	b580      	push	{r7, lr}
 80064f4:	b084      	sub	sp, #16
 80064f6:	af00      	add	r7, sp, #0
 80064f8:	60f8      	str	r0, [r7, #12]
 80064fa:	60b9      	str	r1, [r7, #8]
 80064fc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	2203      	movs	r2, #3
 8006502:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	687a      	ldr	r2, [r7, #4]
 800650a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	687a      	ldr	r2, [r7, #4]
 8006512:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	68ba      	ldr	r2, [r7, #8]
 800651a:	2100      	movs	r1, #0
 800651c:	68f8      	ldr	r0, [r7, #12]
 800651e:	f000 fcd5 	bl	8006ecc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006522:	2300      	movs	r3, #0
}
 8006524:	4618      	mov	r0, r3
 8006526:	3710      	adds	r7, #16
 8006528:	46bd      	mov	sp, r7
 800652a:	bd80      	pop	{r7, pc}

0800652c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800652c:	b580      	push	{r7, lr}
 800652e:	b084      	sub	sp, #16
 8006530:	af00      	add	r7, sp, #0
 8006532:	60f8      	str	r0, [r7, #12]
 8006534:	60b9      	str	r1, [r7, #8]
 8006536:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	68ba      	ldr	r2, [r7, #8]
 800653c:	2100      	movs	r1, #0
 800653e:	68f8      	ldr	r0, [r7, #12]
 8006540:	f000 fcc4 	bl	8006ecc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006544:	2300      	movs	r3, #0
}
 8006546:	4618      	mov	r0, r3
 8006548:	3710      	adds	r7, #16
 800654a:	46bd      	mov	sp, r7
 800654c:	bd80      	pop	{r7, pc}

0800654e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800654e:	b580      	push	{r7, lr}
 8006550:	b082      	sub	sp, #8
 8006552:	af00      	add	r7, sp, #0
 8006554:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2204      	movs	r2, #4
 800655a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800655e:	2300      	movs	r3, #0
 8006560:	2200      	movs	r2, #0
 8006562:	2100      	movs	r1, #0
 8006564:	6878      	ldr	r0, [r7, #4]
 8006566:	f000 fc90 	bl	8006e8a <USBD_LL_Transmit>

  return USBD_OK;
 800656a:	2300      	movs	r3, #0
}
 800656c:	4618      	mov	r0, r3
 800656e:	3708      	adds	r7, #8
 8006570:	46bd      	mov	sp, r7
 8006572:	bd80      	pop	{r7, pc}

08006574 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006574:	b580      	push	{r7, lr}
 8006576:	b082      	sub	sp, #8
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2205      	movs	r2, #5
 8006580:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006584:	2300      	movs	r3, #0
 8006586:	2200      	movs	r2, #0
 8006588:	2100      	movs	r1, #0
 800658a:	6878      	ldr	r0, [r7, #4]
 800658c:	f000 fc9e 	bl	8006ecc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006590:	2300      	movs	r3, #0
}
 8006592:	4618      	mov	r0, r3
 8006594:	3708      	adds	r7, #8
 8006596:	46bd      	mov	sp, r7
 8006598:	bd80      	pop	{r7, pc}
	...

0800659c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800659c:	b580      	push	{r7, lr}
 800659e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80065a0:	2200      	movs	r2, #0
 80065a2:	4912      	ldr	r1, [pc, #72]	; (80065ec <MX_USB_DEVICE_Init+0x50>)
 80065a4:	4812      	ldr	r0, [pc, #72]	; (80065f0 <MX_USB_DEVICE_Init+0x54>)
 80065a6:	f7fe fe8f 	bl	80052c8 <USBD_Init>
 80065aa:	4603      	mov	r3, r0
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d001      	beq.n	80065b4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80065b0:	f7fa f9c2 	bl	8000938 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80065b4:	490f      	ldr	r1, [pc, #60]	; (80065f4 <MX_USB_DEVICE_Init+0x58>)
 80065b6:	480e      	ldr	r0, [pc, #56]	; (80065f0 <MX_USB_DEVICE_Init+0x54>)
 80065b8:	f7fe feb6 	bl	8005328 <USBD_RegisterClass>
 80065bc:	4603      	mov	r3, r0
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d001      	beq.n	80065c6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80065c2:	f7fa f9b9 	bl	8000938 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80065c6:	490c      	ldr	r1, [pc, #48]	; (80065f8 <MX_USB_DEVICE_Init+0x5c>)
 80065c8:	4809      	ldr	r0, [pc, #36]	; (80065f0 <MX_USB_DEVICE_Init+0x54>)
 80065ca:	f7fe fdd7 	bl	800517c <USBD_CDC_RegisterInterface>
 80065ce:	4603      	mov	r3, r0
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d001      	beq.n	80065d8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80065d4:	f7fa f9b0 	bl	8000938 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80065d8:	4805      	ldr	r0, [pc, #20]	; (80065f0 <MX_USB_DEVICE_Init+0x54>)
 80065da:	f7fe fecc 	bl	8005376 <USBD_Start>
 80065de:	4603      	mov	r3, r0
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d001      	beq.n	80065e8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80065e4:	f7fa f9a8 	bl	8000938 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80065e8:	bf00      	nop
 80065ea:	bd80      	pop	{r7, pc}
 80065ec:	20000130 	.word	0x20000130
 80065f0:	200001f0 	.word	0x200001f0
 80065f4:	20000018 	.word	0x20000018
 80065f8:	2000011c 	.word	0x2000011c

080065fc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006600:	2200      	movs	r2, #0
 8006602:	4905      	ldr	r1, [pc, #20]	; (8006618 <CDC_Init_FS+0x1c>)
 8006604:	4805      	ldr	r0, [pc, #20]	; (800661c <CDC_Init_FS+0x20>)
 8006606:	f7fe fdce 	bl	80051a6 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800660a:	4905      	ldr	r1, [pc, #20]	; (8006620 <CDC_Init_FS+0x24>)
 800660c:	4803      	ldr	r0, [pc, #12]	; (800661c <CDC_Init_FS+0x20>)
 800660e:	f7fe fde8 	bl	80051e2 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8006612:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006614:	4618      	mov	r0, r3
 8006616:	bd80      	pop	{r7, pc}
 8006618:	200008a8 	.word	0x200008a8
 800661c:	200001f0 	.word	0x200001f0
 8006620:	200004c0 	.word	0x200004c0

08006624 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006624:	b480      	push	{r7}
 8006626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006628:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800662a:	4618      	mov	r0, r3
 800662c:	46bd      	mov	sp, r7
 800662e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006632:	4770      	bx	lr

08006634 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006634:	b480      	push	{r7}
 8006636:	b083      	sub	sp, #12
 8006638:	af00      	add	r7, sp, #0
 800663a:	4603      	mov	r3, r0
 800663c:	6039      	str	r1, [r7, #0]
 800663e:	71fb      	strb	r3, [r7, #7]
 8006640:	4613      	mov	r3, r2
 8006642:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006644:	79fb      	ldrb	r3, [r7, #7]
 8006646:	2b23      	cmp	r3, #35	; 0x23
 8006648:	d84a      	bhi.n	80066e0 <CDC_Control_FS+0xac>
 800664a:	a201      	add	r2, pc, #4	; (adr r2, 8006650 <CDC_Control_FS+0x1c>)
 800664c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006650:	080066e1 	.word	0x080066e1
 8006654:	080066e1 	.word	0x080066e1
 8006658:	080066e1 	.word	0x080066e1
 800665c:	080066e1 	.word	0x080066e1
 8006660:	080066e1 	.word	0x080066e1
 8006664:	080066e1 	.word	0x080066e1
 8006668:	080066e1 	.word	0x080066e1
 800666c:	080066e1 	.word	0x080066e1
 8006670:	080066e1 	.word	0x080066e1
 8006674:	080066e1 	.word	0x080066e1
 8006678:	080066e1 	.word	0x080066e1
 800667c:	080066e1 	.word	0x080066e1
 8006680:	080066e1 	.word	0x080066e1
 8006684:	080066e1 	.word	0x080066e1
 8006688:	080066e1 	.word	0x080066e1
 800668c:	080066e1 	.word	0x080066e1
 8006690:	080066e1 	.word	0x080066e1
 8006694:	080066e1 	.word	0x080066e1
 8006698:	080066e1 	.word	0x080066e1
 800669c:	080066e1 	.word	0x080066e1
 80066a0:	080066e1 	.word	0x080066e1
 80066a4:	080066e1 	.word	0x080066e1
 80066a8:	080066e1 	.word	0x080066e1
 80066ac:	080066e1 	.word	0x080066e1
 80066b0:	080066e1 	.word	0x080066e1
 80066b4:	080066e1 	.word	0x080066e1
 80066b8:	080066e1 	.word	0x080066e1
 80066bc:	080066e1 	.word	0x080066e1
 80066c0:	080066e1 	.word	0x080066e1
 80066c4:	080066e1 	.word	0x080066e1
 80066c8:	080066e1 	.word	0x080066e1
 80066cc:	080066e1 	.word	0x080066e1
 80066d0:	080066e1 	.word	0x080066e1
 80066d4:	080066e1 	.word	0x080066e1
 80066d8:	080066e1 	.word	0x080066e1
 80066dc:	080066e1 	.word	0x080066e1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80066e0:	bf00      	nop
  }

  return (USBD_OK);
 80066e2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80066e4:	4618      	mov	r0, r3
 80066e6:	370c      	adds	r7, #12
 80066e8:	46bd      	mov	sp, r7
 80066ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ee:	4770      	bx	lr

080066f0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b082      	sub	sp, #8
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
 80066f8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80066fa:	6879      	ldr	r1, [r7, #4]
 80066fc:	4805      	ldr	r0, [pc, #20]	; (8006714 <CDC_Receive_FS+0x24>)
 80066fe:	f7fe fd70 	bl	80051e2 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006702:	4804      	ldr	r0, [pc, #16]	; (8006714 <CDC_Receive_FS+0x24>)
 8006704:	f7fe fdb6 	bl	8005274 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8006708:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800670a:	4618      	mov	r0, r3
 800670c:	3708      	adds	r7, #8
 800670e:	46bd      	mov	sp, r7
 8006710:	bd80      	pop	{r7, pc}
 8006712:	bf00      	nop
 8006714:	200001f0 	.word	0x200001f0

08006718 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b084      	sub	sp, #16
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
 8006720:	460b      	mov	r3, r1
 8006722:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8006724:	2300      	movs	r3, #0
 8006726:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8006728:	4b0d      	ldr	r3, [pc, #52]	; (8006760 <CDC_Transmit_FS+0x48>)
 800672a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800672e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8006730:	68bb      	ldr	r3, [r7, #8]
 8006732:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006736:	2b00      	cmp	r3, #0
 8006738:	d001      	beq.n	800673e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800673a:	2301      	movs	r3, #1
 800673c:	e00b      	b.n	8006756 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800673e:	887b      	ldrh	r3, [r7, #2]
 8006740:	461a      	mov	r2, r3
 8006742:	6879      	ldr	r1, [r7, #4]
 8006744:	4806      	ldr	r0, [pc, #24]	; (8006760 <CDC_Transmit_FS+0x48>)
 8006746:	f7fe fd2e 	bl	80051a6 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800674a:	4805      	ldr	r0, [pc, #20]	; (8006760 <CDC_Transmit_FS+0x48>)
 800674c:	f7fe fd62 	bl	8005214 <USBD_CDC_TransmitPacket>
 8006750:	4603      	mov	r3, r0
 8006752:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8006754:	7bfb      	ldrb	r3, [r7, #15]
}
 8006756:	4618      	mov	r0, r3
 8006758:	3710      	adds	r7, #16
 800675a:	46bd      	mov	sp, r7
 800675c:	bd80      	pop	{r7, pc}
 800675e:	bf00      	nop
 8006760:	200001f0 	.word	0x200001f0

08006764 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8006764:	b480      	push	{r7}
 8006766:	b087      	sub	sp, #28
 8006768:	af00      	add	r7, sp, #0
 800676a:	60f8      	str	r0, [r7, #12]
 800676c:	60b9      	str	r1, [r7, #8]
 800676e:	4613      	mov	r3, r2
 8006770:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8006772:	2300      	movs	r3, #0
 8006774:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8006776:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800677a:	4618      	mov	r0, r3
 800677c:	371c      	adds	r7, #28
 800677e:	46bd      	mov	sp, r7
 8006780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006784:	4770      	bx	lr
	...

08006788 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006788:	b480      	push	{r7}
 800678a:	b083      	sub	sp, #12
 800678c:	af00      	add	r7, sp, #0
 800678e:	4603      	mov	r3, r0
 8006790:	6039      	str	r1, [r7, #0]
 8006792:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	2212      	movs	r2, #18
 8006798:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800679a:	4b03      	ldr	r3, [pc, #12]	; (80067a8 <USBD_FS_DeviceDescriptor+0x20>)
}
 800679c:	4618      	mov	r0, r3
 800679e:	370c      	adds	r7, #12
 80067a0:	46bd      	mov	sp, r7
 80067a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a6:	4770      	bx	lr
 80067a8:	2000014c 	.word	0x2000014c

080067ac <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80067ac:	b480      	push	{r7}
 80067ae:	b083      	sub	sp, #12
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	4603      	mov	r3, r0
 80067b4:	6039      	str	r1, [r7, #0]
 80067b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	2204      	movs	r2, #4
 80067bc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80067be:	4b03      	ldr	r3, [pc, #12]	; (80067cc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80067c0:	4618      	mov	r0, r3
 80067c2:	370c      	adds	r7, #12
 80067c4:	46bd      	mov	sp, r7
 80067c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ca:	4770      	bx	lr
 80067cc:	20000160 	.word	0x20000160

080067d0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b082      	sub	sp, #8
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	4603      	mov	r3, r0
 80067d8:	6039      	str	r1, [r7, #0]
 80067da:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80067dc:	79fb      	ldrb	r3, [r7, #7]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d105      	bne.n	80067ee <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80067e2:	683a      	ldr	r2, [r7, #0]
 80067e4:	4907      	ldr	r1, [pc, #28]	; (8006804 <USBD_FS_ProductStrDescriptor+0x34>)
 80067e6:	4808      	ldr	r0, [pc, #32]	; (8006808 <USBD_FS_ProductStrDescriptor+0x38>)
 80067e8:	f7ff fdf7 	bl	80063da <USBD_GetString>
 80067ec:	e004      	b.n	80067f8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80067ee:	683a      	ldr	r2, [r7, #0]
 80067f0:	4904      	ldr	r1, [pc, #16]	; (8006804 <USBD_FS_ProductStrDescriptor+0x34>)
 80067f2:	4805      	ldr	r0, [pc, #20]	; (8006808 <USBD_FS_ProductStrDescriptor+0x38>)
 80067f4:	f7ff fdf1 	bl	80063da <USBD_GetString>
  }
  return USBD_StrDesc;
 80067f8:	4b02      	ldr	r3, [pc, #8]	; (8006804 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80067fa:	4618      	mov	r0, r3
 80067fc:	3708      	adds	r7, #8
 80067fe:	46bd      	mov	sp, r7
 8006800:	bd80      	pop	{r7, pc}
 8006802:	bf00      	nop
 8006804:	20000c90 	.word	0x20000c90
 8006808:	08006fec 	.word	0x08006fec

0800680c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b082      	sub	sp, #8
 8006810:	af00      	add	r7, sp, #0
 8006812:	4603      	mov	r3, r0
 8006814:	6039      	str	r1, [r7, #0]
 8006816:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006818:	683a      	ldr	r2, [r7, #0]
 800681a:	4904      	ldr	r1, [pc, #16]	; (800682c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800681c:	4804      	ldr	r0, [pc, #16]	; (8006830 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800681e:	f7ff fddc 	bl	80063da <USBD_GetString>
  return USBD_StrDesc;
 8006822:	4b02      	ldr	r3, [pc, #8]	; (800682c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006824:	4618      	mov	r0, r3
 8006826:	3708      	adds	r7, #8
 8006828:	46bd      	mov	sp, r7
 800682a:	bd80      	pop	{r7, pc}
 800682c:	20000c90 	.word	0x20000c90
 8006830:	08007004 	.word	0x08007004

08006834 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006834:	b580      	push	{r7, lr}
 8006836:	b082      	sub	sp, #8
 8006838:	af00      	add	r7, sp, #0
 800683a:	4603      	mov	r3, r0
 800683c:	6039      	str	r1, [r7, #0]
 800683e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	221a      	movs	r2, #26
 8006844:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006846:	f000 f843 	bl	80068d0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800684a:	4b02      	ldr	r3, [pc, #8]	; (8006854 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800684c:	4618      	mov	r0, r3
 800684e:	3708      	adds	r7, #8
 8006850:	46bd      	mov	sp, r7
 8006852:	bd80      	pop	{r7, pc}
 8006854:	20000164 	.word	0x20000164

08006858 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b082      	sub	sp, #8
 800685c:	af00      	add	r7, sp, #0
 800685e:	4603      	mov	r3, r0
 8006860:	6039      	str	r1, [r7, #0]
 8006862:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006864:	79fb      	ldrb	r3, [r7, #7]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d105      	bne.n	8006876 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800686a:	683a      	ldr	r2, [r7, #0]
 800686c:	4907      	ldr	r1, [pc, #28]	; (800688c <USBD_FS_ConfigStrDescriptor+0x34>)
 800686e:	4808      	ldr	r0, [pc, #32]	; (8006890 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006870:	f7ff fdb3 	bl	80063da <USBD_GetString>
 8006874:	e004      	b.n	8006880 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006876:	683a      	ldr	r2, [r7, #0]
 8006878:	4904      	ldr	r1, [pc, #16]	; (800688c <USBD_FS_ConfigStrDescriptor+0x34>)
 800687a:	4805      	ldr	r0, [pc, #20]	; (8006890 <USBD_FS_ConfigStrDescriptor+0x38>)
 800687c:	f7ff fdad 	bl	80063da <USBD_GetString>
  }
  return USBD_StrDesc;
 8006880:	4b02      	ldr	r3, [pc, #8]	; (800688c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006882:	4618      	mov	r0, r3
 8006884:	3708      	adds	r7, #8
 8006886:	46bd      	mov	sp, r7
 8006888:	bd80      	pop	{r7, pc}
 800688a:	bf00      	nop
 800688c:	20000c90 	.word	0x20000c90
 8006890:	08007018 	.word	0x08007018

08006894 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006894:	b580      	push	{r7, lr}
 8006896:	b082      	sub	sp, #8
 8006898:	af00      	add	r7, sp, #0
 800689a:	4603      	mov	r3, r0
 800689c:	6039      	str	r1, [r7, #0]
 800689e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80068a0:	79fb      	ldrb	r3, [r7, #7]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d105      	bne.n	80068b2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80068a6:	683a      	ldr	r2, [r7, #0]
 80068a8:	4907      	ldr	r1, [pc, #28]	; (80068c8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80068aa:	4808      	ldr	r0, [pc, #32]	; (80068cc <USBD_FS_InterfaceStrDescriptor+0x38>)
 80068ac:	f7ff fd95 	bl	80063da <USBD_GetString>
 80068b0:	e004      	b.n	80068bc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80068b2:	683a      	ldr	r2, [r7, #0]
 80068b4:	4904      	ldr	r1, [pc, #16]	; (80068c8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80068b6:	4805      	ldr	r0, [pc, #20]	; (80068cc <USBD_FS_InterfaceStrDescriptor+0x38>)
 80068b8:	f7ff fd8f 	bl	80063da <USBD_GetString>
  }
  return USBD_StrDesc;
 80068bc:	4b02      	ldr	r3, [pc, #8]	; (80068c8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80068be:	4618      	mov	r0, r3
 80068c0:	3708      	adds	r7, #8
 80068c2:	46bd      	mov	sp, r7
 80068c4:	bd80      	pop	{r7, pc}
 80068c6:	bf00      	nop
 80068c8:	20000c90 	.word	0x20000c90
 80068cc:	08007024 	.word	0x08007024

080068d0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b084      	sub	sp, #16
 80068d4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80068d6:	4b0f      	ldr	r3, [pc, #60]	; (8006914 <Get_SerialNum+0x44>)
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80068dc:	4b0e      	ldr	r3, [pc, #56]	; (8006918 <Get_SerialNum+0x48>)
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80068e2:	4b0e      	ldr	r3, [pc, #56]	; (800691c <Get_SerialNum+0x4c>)
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80068e8:	68fa      	ldr	r2, [r7, #12]
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	4413      	add	r3, r2
 80068ee:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d009      	beq.n	800690a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80068f6:	2208      	movs	r2, #8
 80068f8:	4909      	ldr	r1, [pc, #36]	; (8006920 <Get_SerialNum+0x50>)
 80068fa:	68f8      	ldr	r0, [r7, #12]
 80068fc:	f000 f814 	bl	8006928 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006900:	2204      	movs	r2, #4
 8006902:	4908      	ldr	r1, [pc, #32]	; (8006924 <Get_SerialNum+0x54>)
 8006904:	68b8      	ldr	r0, [r7, #8]
 8006906:	f000 f80f 	bl	8006928 <IntToUnicode>
  }
}
 800690a:	bf00      	nop
 800690c:	3710      	adds	r7, #16
 800690e:	46bd      	mov	sp, r7
 8006910:	bd80      	pop	{r7, pc}
 8006912:	bf00      	nop
 8006914:	1fff7a10 	.word	0x1fff7a10
 8006918:	1fff7a14 	.word	0x1fff7a14
 800691c:	1fff7a18 	.word	0x1fff7a18
 8006920:	20000166 	.word	0x20000166
 8006924:	20000176 	.word	0x20000176

08006928 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006928:	b480      	push	{r7}
 800692a:	b087      	sub	sp, #28
 800692c:	af00      	add	r7, sp, #0
 800692e:	60f8      	str	r0, [r7, #12]
 8006930:	60b9      	str	r1, [r7, #8]
 8006932:	4613      	mov	r3, r2
 8006934:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006936:	2300      	movs	r3, #0
 8006938:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800693a:	2300      	movs	r3, #0
 800693c:	75fb      	strb	r3, [r7, #23]
 800693e:	e027      	b.n	8006990 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	0f1b      	lsrs	r3, r3, #28
 8006944:	2b09      	cmp	r3, #9
 8006946:	d80b      	bhi.n	8006960 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	0f1b      	lsrs	r3, r3, #28
 800694c:	b2da      	uxtb	r2, r3
 800694e:	7dfb      	ldrb	r3, [r7, #23]
 8006950:	005b      	lsls	r3, r3, #1
 8006952:	4619      	mov	r1, r3
 8006954:	68bb      	ldr	r3, [r7, #8]
 8006956:	440b      	add	r3, r1
 8006958:	3230      	adds	r2, #48	; 0x30
 800695a:	b2d2      	uxtb	r2, r2
 800695c:	701a      	strb	r2, [r3, #0]
 800695e:	e00a      	b.n	8006976 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	0f1b      	lsrs	r3, r3, #28
 8006964:	b2da      	uxtb	r2, r3
 8006966:	7dfb      	ldrb	r3, [r7, #23]
 8006968:	005b      	lsls	r3, r3, #1
 800696a:	4619      	mov	r1, r3
 800696c:	68bb      	ldr	r3, [r7, #8]
 800696e:	440b      	add	r3, r1
 8006970:	3237      	adds	r2, #55	; 0x37
 8006972:	b2d2      	uxtb	r2, r2
 8006974:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	011b      	lsls	r3, r3, #4
 800697a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800697c:	7dfb      	ldrb	r3, [r7, #23]
 800697e:	005b      	lsls	r3, r3, #1
 8006980:	3301      	adds	r3, #1
 8006982:	68ba      	ldr	r2, [r7, #8]
 8006984:	4413      	add	r3, r2
 8006986:	2200      	movs	r2, #0
 8006988:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800698a:	7dfb      	ldrb	r3, [r7, #23]
 800698c:	3301      	adds	r3, #1
 800698e:	75fb      	strb	r3, [r7, #23]
 8006990:	7dfa      	ldrb	r2, [r7, #23]
 8006992:	79fb      	ldrb	r3, [r7, #7]
 8006994:	429a      	cmp	r2, r3
 8006996:	d3d3      	bcc.n	8006940 <IntToUnicode+0x18>
  }
}
 8006998:	bf00      	nop
 800699a:	bf00      	nop
 800699c:	371c      	adds	r7, #28
 800699e:	46bd      	mov	sp, r7
 80069a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a4:	4770      	bx	lr
	...

080069a8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b08a      	sub	sp, #40	; 0x28
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80069b0:	f107 0314 	add.w	r3, r7, #20
 80069b4:	2200      	movs	r2, #0
 80069b6:	601a      	str	r2, [r3, #0]
 80069b8:	605a      	str	r2, [r3, #4]
 80069ba:	609a      	str	r2, [r3, #8]
 80069bc:	60da      	str	r2, [r3, #12]
 80069be:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80069c8:	d13a      	bne.n	8006a40 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80069ca:	2300      	movs	r3, #0
 80069cc:	613b      	str	r3, [r7, #16]
 80069ce:	4b1e      	ldr	r3, [pc, #120]	; (8006a48 <HAL_PCD_MspInit+0xa0>)
 80069d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069d2:	4a1d      	ldr	r2, [pc, #116]	; (8006a48 <HAL_PCD_MspInit+0xa0>)
 80069d4:	f043 0301 	orr.w	r3, r3, #1
 80069d8:	6313      	str	r3, [r2, #48]	; 0x30
 80069da:	4b1b      	ldr	r3, [pc, #108]	; (8006a48 <HAL_PCD_MspInit+0xa0>)
 80069dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069de:	f003 0301 	and.w	r3, r3, #1
 80069e2:	613b      	str	r3, [r7, #16]
 80069e4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80069e6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80069ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80069ec:	2302      	movs	r3, #2
 80069ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069f0:	2300      	movs	r3, #0
 80069f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80069f4:	2303      	movs	r3, #3
 80069f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80069f8:	230a      	movs	r3, #10
 80069fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80069fc:	f107 0314 	add.w	r3, r7, #20
 8006a00:	4619      	mov	r1, r3
 8006a02:	4812      	ldr	r0, [pc, #72]	; (8006a4c <HAL_PCD_MspInit+0xa4>)
 8006a04:	f7fa fa10 	bl	8000e28 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006a08:	4b0f      	ldr	r3, [pc, #60]	; (8006a48 <HAL_PCD_MspInit+0xa0>)
 8006a0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a0c:	4a0e      	ldr	r2, [pc, #56]	; (8006a48 <HAL_PCD_MspInit+0xa0>)
 8006a0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a12:	6353      	str	r3, [r2, #52]	; 0x34
 8006a14:	2300      	movs	r3, #0
 8006a16:	60fb      	str	r3, [r7, #12]
 8006a18:	4b0b      	ldr	r3, [pc, #44]	; (8006a48 <HAL_PCD_MspInit+0xa0>)
 8006a1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a1c:	4a0a      	ldr	r2, [pc, #40]	; (8006a48 <HAL_PCD_MspInit+0xa0>)
 8006a1e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006a22:	6453      	str	r3, [r2, #68]	; 0x44
 8006a24:	4b08      	ldr	r3, [pc, #32]	; (8006a48 <HAL_PCD_MspInit+0xa0>)
 8006a26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006a2c:	60fb      	str	r3, [r7, #12]
 8006a2e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006a30:	2200      	movs	r2, #0
 8006a32:	2100      	movs	r1, #0
 8006a34:	2043      	movs	r0, #67	; 0x43
 8006a36:	f7fa f9c0 	bl	8000dba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8006a3a:	2043      	movs	r0, #67	; 0x43
 8006a3c:	f7fa f9d9 	bl	8000df2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006a40:	bf00      	nop
 8006a42:	3728      	adds	r7, #40	; 0x28
 8006a44:	46bd      	mov	sp, r7
 8006a46:	bd80      	pop	{r7, pc}
 8006a48:	40023800 	.word	0x40023800
 8006a4c:	40020000 	.word	0x40020000

08006a50 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b082      	sub	sp, #8
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006a64:	4619      	mov	r1, r3
 8006a66:	4610      	mov	r0, r2
 8006a68:	f7fe fcd0 	bl	800540c <USBD_LL_SetupStage>
}
 8006a6c:	bf00      	nop
 8006a6e:	3708      	adds	r7, #8
 8006a70:	46bd      	mov	sp, r7
 8006a72:	bd80      	pop	{r7, pc}

08006a74 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b082      	sub	sp, #8
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
 8006a7c:	460b      	mov	r3, r1
 8006a7e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8006a86:	78fa      	ldrb	r2, [r7, #3]
 8006a88:	6879      	ldr	r1, [r7, #4]
 8006a8a:	4613      	mov	r3, r2
 8006a8c:	00db      	lsls	r3, r3, #3
 8006a8e:	1a9b      	subs	r3, r3, r2
 8006a90:	009b      	lsls	r3, r3, #2
 8006a92:	440b      	add	r3, r1
 8006a94:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006a98:	681a      	ldr	r2, [r3, #0]
 8006a9a:	78fb      	ldrb	r3, [r7, #3]
 8006a9c:	4619      	mov	r1, r3
 8006a9e:	f7fe fd0a 	bl	80054b6 <USBD_LL_DataOutStage>
}
 8006aa2:	bf00      	nop
 8006aa4:	3708      	adds	r7, #8
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	bd80      	pop	{r7, pc}

08006aaa <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006aaa:	b580      	push	{r7, lr}
 8006aac:	b082      	sub	sp, #8
 8006aae:	af00      	add	r7, sp, #0
 8006ab0:	6078      	str	r0, [r7, #4]
 8006ab2:	460b      	mov	r3, r1
 8006ab4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8006abc:	78fa      	ldrb	r2, [r7, #3]
 8006abe:	6879      	ldr	r1, [r7, #4]
 8006ac0:	4613      	mov	r3, r2
 8006ac2:	00db      	lsls	r3, r3, #3
 8006ac4:	1a9b      	subs	r3, r3, r2
 8006ac6:	009b      	lsls	r3, r3, #2
 8006ac8:	440b      	add	r3, r1
 8006aca:	3348      	adds	r3, #72	; 0x48
 8006acc:	681a      	ldr	r2, [r3, #0]
 8006ace:	78fb      	ldrb	r3, [r7, #3]
 8006ad0:	4619      	mov	r1, r3
 8006ad2:	f7fe fd53 	bl	800557c <USBD_LL_DataInStage>
}
 8006ad6:	bf00      	nop
 8006ad8:	3708      	adds	r7, #8
 8006ada:	46bd      	mov	sp, r7
 8006adc:	bd80      	pop	{r7, pc}

08006ade <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006ade:	b580      	push	{r7, lr}
 8006ae0:	b082      	sub	sp, #8
 8006ae2:	af00      	add	r7, sp, #0
 8006ae4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006aec:	4618      	mov	r0, r3
 8006aee:	f7fe fe67 	bl	80057c0 <USBD_LL_SOF>
}
 8006af2:	bf00      	nop
 8006af4:	3708      	adds	r7, #8
 8006af6:	46bd      	mov	sp, r7
 8006af8:	bd80      	pop	{r7, pc}

08006afa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006afa:	b580      	push	{r7, lr}
 8006afc:	b084      	sub	sp, #16
 8006afe:	af00      	add	r7, sp, #0
 8006b00:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8006b02:	2301      	movs	r3, #1
 8006b04:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	68db      	ldr	r3, [r3, #12]
 8006b0a:	2b02      	cmp	r3, #2
 8006b0c:	d001      	beq.n	8006b12 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8006b0e:	f7f9 ff13 	bl	8000938 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006b18:	7bfa      	ldrb	r2, [r7, #15]
 8006b1a:	4611      	mov	r1, r2
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	f7fe fe11 	bl	8005744 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006b28:	4618      	mov	r0, r3
 8006b2a:	f7fe fdbd 	bl	80056a8 <USBD_LL_Reset>
}
 8006b2e:	bf00      	nop
 8006b30:	3710      	adds	r7, #16
 8006b32:	46bd      	mov	sp, r7
 8006b34:	bd80      	pop	{r7, pc}
	...

08006b38 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b082      	sub	sp, #8
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006b46:	4618      	mov	r0, r3
 8006b48:	f7fe fe0c 	bl	8005764 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	687a      	ldr	r2, [r7, #4]
 8006b58:	6812      	ldr	r2, [r2, #0]
 8006b5a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006b5e:	f043 0301 	orr.w	r3, r3, #1
 8006b62:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	6a1b      	ldr	r3, [r3, #32]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d005      	beq.n	8006b78 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006b6c:	4b04      	ldr	r3, [pc, #16]	; (8006b80 <HAL_PCD_SuspendCallback+0x48>)
 8006b6e:	691b      	ldr	r3, [r3, #16]
 8006b70:	4a03      	ldr	r2, [pc, #12]	; (8006b80 <HAL_PCD_SuspendCallback+0x48>)
 8006b72:	f043 0306 	orr.w	r3, r3, #6
 8006b76:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006b78:	bf00      	nop
 8006b7a:	3708      	adds	r7, #8
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	bd80      	pop	{r7, pc}
 8006b80:	e000ed00 	.word	0xe000ed00

08006b84 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b082      	sub	sp, #8
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006b92:	4618      	mov	r0, r3
 8006b94:	f7fe fdfc 	bl	8005790 <USBD_LL_Resume>
}
 8006b98:	bf00      	nop
 8006b9a:	3708      	adds	r7, #8
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	bd80      	pop	{r7, pc}

08006ba0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b082      	sub	sp, #8
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
 8006ba8:	460b      	mov	r3, r1
 8006baa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006bb2:	78fa      	ldrb	r2, [r7, #3]
 8006bb4:	4611      	mov	r1, r2
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	f7fe fe4a 	bl	8005850 <USBD_LL_IsoOUTIncomplete>
}
 8006bbc:	bf00      	nop
 8006bbe:	3708      	adds	r7, #8
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	bd80      	pop	{r7, pc}

08006bc4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	b082      	sub	sp, #8
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
 8006bcc:	460b      	mov	r3, r1
 8006bce:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006bd6:	78fa      	ldrb	r2, [r7, #3]
 8006bd8:	4611      	mov	r1, r2
 8006bda:	4618      	mov	r0, r3
 8006bdc:	f7fe fe12 	bl	8005804 <USBD_LL_IsoINIncomplete>
}
 8006be0:	bf00      	nop
 8006be2:	3708      	adds	r7, #8
 8006be4:	46bd      	mov	sp, r7
 8006be6:	bd80      	pop	{r7, pc}

08006be8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b082      	sub	sp, #8
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	f7fe fe50 	bl	800589c <USBD_LL_DevConnected>
}
 8006bfc:	bf00      	nop
 8006bfe:	3708      	adds	r7, #8
 8006c00:	46bd      	mov	sp, r7
 8006c02:	bd80      	pop	{r7, pc}

08006c04 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b082      	sub	sp, #8
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006c12:	4618      	mov	r0, r3
 8006c14:	f7fe fe4d 	bl	80058b2 <USBD_LL_DevDisconnected>
}
 8006c18:	bf00      	nop
 8006c1a:	3708      	adds	r7, #8
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	bd80      	pop	{r7, pc}

08006c20 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b082      	sub	sp, #8
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	781b      	ldrb	r3, [r3, #0]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d13c      	bne.n	8006caa <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8006c30:	4a20      	ldr	r2, [pc, #128]	; (8006cb4 <USBD_LL_Init+0x94>)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	4a1e      	ldr	r2, [pc, #120]	; (8006cb4 <USBD_LL_Init+0x94>)
 8006c3c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8006c40:	4b1c      	ldr	r3, [pc, #112]	; (8006cb4 <USBD_LL_Init+0x94>)
 8006c42:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8006c46:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8006c48:	4b1a      	ldr	r3, [pc, #104]	; (8006cb4 <USBD_LL_Init+0x94>)
 8006c4a:	2204      	movs	r2, #4
 8006c4c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8006c4e:	4b19      	ldr	r3, [pc, #100]	; (8006cb4 <USBD_LL_Init+0x94>)
 8006c50:	2202      	movs	r2, #2
 8006c52:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8006c54:	4b17      	ldr	r3, [pc, #92]	; (8006cb4 <USBD_LL_Init+0x94>)
 8006c56:	2200      	movs	r2, #0
 8006c58:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8006c5a:	4b16      	ldr	r3, [pc, #88]	; (8006cb4 <USBD_LL_Init+0x94>)
 8006c5c:	2202      	movs	r2, #2
 8006c5e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8006c60:	4b14      	ldr	r3, [pc, #80]	; (8006cb4 <USBD_LL_Init+0x94>)
 8006c62:	2200      	movs	r2, #0
 8006c64:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8006c66:	4b13      	ldr	r3, [pc, #76]	; (8006cb4 <USBD_LL_Init+0x94>)
 8006c68:	2200      	movs	r2, #0
 8006c6a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8006c6c:	4b11      	ldr	r3, [pc, #68]	; (8006cb4 <USBD_LL_Init+0x94>)
 8006c6e:	2200      	movs	r2, #0
 8006c70:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8006c72:	4b10      	ldr	r3, [pc, #64]	; (8006cb4 <USBD_LL_Init+0x94>)
 8006c74:	2200      	movs	r2, #0
 8006c76:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8006c78:	4b0e      	ldr	r3, [pc, #56]	; (8006cb4 <USBD_LL_Init+0x94>)
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8006c7e:	480d      	ldr	r0, [pc, #52]	; (8006cb4 <USBD_LL_Init+0x94>)
 8006c80:	f7fa fa89 	bl	8001196 <HAL_PCD_Init>
 8006c84:	4603      	mov	r3, r0
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d001      	beq.n	8006c8e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8006c8a:	f7f9 fe55 	bl	8000938 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8006c8e:	2180      	movs	r1, #128	; 0x80
 8006c90:	4808      	ldr	r0, [pc, #32]	; (8006cb4 <USBD_LL_Init+0x94>)
 8006c92:	f7fb fbe6 	bl	8002462 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8006c96:	2240      	movs	r2, #64	; 0x40
 8006c98:	2100      	movs	r1, #0
 8006c9a:	4806      	ldr	r0, [pc, #24]	; (8006cb4 <USBD_LL_Init+0x94>)
 8006c9c:	f7fb fb9a 	bl	80023d4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8006ca0:	2280      	movs	r2, #128	; 0x80
 8006ca2:	2101      	movs	r1, #1
 8006ca4:	4803      	ldr	r0, [pc, #12]	; (8006cb4 <USBD_LL_Init+0x94>)
 8006ca6:	f7fb fb95 	bl	80023d4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8006caa:	2300      	movs	r3, #0
}
 8006cac:	4618      	mov	r0, r3
 8006cae:	3708      	adds	r7, #8
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	bd80      	pop	{r7, pc}
 8006cb4:	20000e90 	.word	0x20000e90

08006cb8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b084      	sub	sp, #16
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006cce:	4618      	mov	r0, r3
 8006cd0:	f7fa fb7e 	bl	80013d0 <HAL_PCD_Start>
 8006cd4:	4603      	mov	r3, r0
 8006cd6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006cd8:	7bfb      	ldrb	r3, [r7, #15]
 8006cda:	4618      	mov	r0, r3
 8006cdc:	f000 f942 	bl	8006f64 <USBD_Get_USB_Status>
 8006ce0:	4603      	mov	r3, r0
 8006ce2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006ce4:	7bbb      	ldrb	r3, [r7, #14]
}
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	3710      	adds	r7, #16
 8006cea:	46bd      	mov	sp, r7
 8006cec:	bd80      	pop	{r7, pc}

08006cee <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8006cee:	b580      	push	{r7, lr}
 8006cf0:	b084      	sub	sp, #16
 8006cf2:	af00      	add	r7, sp, #0
 8006cf4:	6078      	str	r0, [r7, #4]
 8006cf6:	4608      	mov	r0, r1
 8006cf8:	4611      	mov	r1, r2
 8006cfa:	461a      	mov	r2, r3
 8006cfc:	4603      	mov	r3, r0
 8006cfe:	70fb      	strb	r3, [r7, #3]
 8006d00:	460b      	mov	r3, r1
 8006d02:	70bb      	strb	r3, [r7, #2]
 8006d04:	4613      	mov	r3, r2
 8006d06:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006d08:	2300      	movs	r3, #0
 8006d0a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8006d16:	78bb      	ldrb	r3, [r7, #2]
 8006d18:	883a      	ldrh	r2, [r7, #0]
 8006d1a:	78f9      	ldrb	r1, [r7, #3]
 8006d1c:	f7fa ff62 	bl	8001be4 <HAL_PCD_EP_Open>
 8006d20:	4603      	mov	r3, r0
 8006d22:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006d24:	7bfb      	ldrb	r3, [r7, #15]
 8006d26:	4618      	mov	r0, r3
 8006d28:	f000 f91c 	bl	8006f64 <USBD_Get_USB_Status>
 8006d2c:	4603      	mov	r3, r0
 8006d2e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006d30:	7bbb      	ldrb	r3, [r7, #14]
}
 8006d32:	4618      	mov	r0, r3
 8006d34:	3710      	adds	r7, #16
 8006d36:	46bd      	mov	sp, r7
 8006d38:	bd80      	pop	{r7, pc}

08006d3a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006d3a:	b580      	push	{r7, lr}
 8006d3c:	b084      	sub	sp, #16
 8006d3e:	af00      	add	r7, sp, #0
 8006d40:	6078      	str	r0, [r7, #4]
 8006d42:	460b      	mov	r3, r1
 8006d44:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006d46:	2300      	movs	r3, #0
 8006d48:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006d54:	78fa      	ldrb	r2, [r7, #3]
 8006d56:	4611      	mov	r1, r2
 8006d58:	4618      	mov	r0, r3
 8006d5a:	f7fa ffab 	bl	8001cb4 <HAL_PCD_EP_Close>
 8006d5e:	4603      	mov	r3, r0
 8006d60:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006d62:	7bfb      	ldrb	r3, [r7, #15]
 8006d64:	4618      	mov	r0, r3
 8006d66:	f000 f8fd 	bl	8006f64 <USBD_Get_USB_Status>
 8006d6a:	4603      	mov	r3, r0
 8006d6c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006d6e:	7bbb      	ldrb	r3, [r7, #14]
}
 8006d70:	4618      	mov	r0, r3
 8006d72:	3710      	adds	r7, #16
 8006d74:	46bd      	mov	sp, r7
 8006d76:	bd80      	pop	{r7, pc}

08006d78 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b084      	sub	sp, #16
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
 8006d80:	460b      	mov	r3, r1
 8006d82:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006d84:	2300      	movs	r3, #0
 8006d86:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006d88:	2300      	movs	r3, #0
 8006d8a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006d92:	78fa      	ldrb	r2, [r7, #3]
 8006d94:	4611      	mov	r1, r2
 8006d96:	4618      	mov	r0, r3
 8006d98:	f7fb f883 	bl	8001ea2 <HAL_PCD_EP_SetStall>
 8006d9c:	4603      	mov	r3, r0
 8006d9e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006da0:	7bfb      	ldrb	r3, [r7, #15]
 8006da2:	4618      	mov	r0, r3
 8006da4:	f000 f8de 	bl	8006f64 <USBD_Get_USB_Status>
 8006da8:	4603      	mov	r3, r0
 8006daa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006dac:	7bbb      	ldrb	r3, [r7, #14]
}
 8006dae:	4618      	mov	r0, r3
 8006db0:	3710      	adds	r7, #16
 8006db2:	46bd      	mov	sp, r7
 8006db4:	bd80      	pop	{r7, pc}

08006db6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006db6:	b580      	push	{r7, lr}
 8006db8:	b084      	sub	sp, #16
 8006dba:	af00      	add	r7, sp, #0
 8006dbc:	6078      	str	r0, [r7, #4]
 8006dbe:	460b      	mov	r3, r1
 8006dc0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006dd0:	78fa      	ldrb	r2, [r7, #3]
 8006dd2:	4611      	mov	r1, r2
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	f7fb f8c8 	bl	8001f6a <HAL_PCD_EP_ClrStall>
 8006dda:	4603      	mov	r3, r0
 8006ddc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006dde:	7bfb      	ldrb	r3, [r7, #15]
 8006de0:	4618      	mov	r0, r3
 8006de2:	f000 f8bf 	bl	8006f64 <USBD_Get_USB_Status>
 8006de6:	4603      	mov	r3, r0
 8006de8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006dea:	7bbb      	ldrb	r3, [r7, #14]
}
 8006dec:	4618      	mov	r0, r3
 8006dee:	3710      	adds	r7, #16
 8006df0:	46bd      	mov	sp, r7
 8006df2:	bd80      	pop	{r7, pc}

08006df4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006df4:	b480      	push	{r7}
 8006df6:	b085      	sub	sp, #20
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
 8006dfc:	460b      	mov	r3, r1
 8006dfe:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006e06:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8006e08:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	da0b      	bge.n	8006e28 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8006e10:	78fb      	ldrb	r3, [r7, #3]
 8006e12:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006e16:	68f9      	ldr	r1, [r7, #12]
 8006e18:	4613      	mov	r3, r2
 8006e1a:	00db      	lsls	r3, r3, #3
 8006e1c:	1a9b      	subs	r3, r3, r2
 8006e1e:	009b      	lsls	r3, r3, #2
 8006e20:	440b      	add	r3, r1
 8006e22:	333e      	adds	r3, #62	; 0x3e
 8006e24:	781b      	ldrb	r3, [r3, #0]
 8006e26:	e00b      	b.n	8006e40 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8006e28:	78fb      	ldrb	r3, [r7, #3]
 8006e2a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006e2e:	68f9      	ldr	r1, [r7, #12]
 8006e30:	4613      	mov	r3, r2
 8006e32:	00db      	lsls	r3, r3, #3
 8006e34:	1a9b      	subs	r3, r3, r2
 8006e36:	009b      	lsls	r3, r3, #2
 8006e38:	440b      	add	r3, r1
 8006e3a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006e3e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006e40:	4618      	mov	r0, r3
 8006e42:	3714      	adds	r7, #20
 8006e44:	46bd      	mov	sp, r7
 8006e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4a:	4770      	bx	lr

08006e4c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b084      	sub	sp, #16
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
 8006e54:	460b      	mov	r3, r1
 8006e56:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006e58:	2300      	movs	r3, #0
 8006e5a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006e66:	78fa      	ldrb	r2, [r7, #3]
 8006e68:	4611      	mov	r1, r2
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	f7fa fe95 	bl	8001b9a <HAL_PCD_SetAddress>
 8006e70:	4603      	mov	r3, r0
 8006e72:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006e74:	7bfb      	ldrb	r3, [r7, #15]
 8006e76:	4618      	mov	r0, r3
 8006e78:	f000 f874 	bl	8006f64 <USBD_Get_USB_Status>
 8006e7c:	4603      	mov	r3, r0
 8006e7e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006e80:	7bbb      	ldrb	r3, [r7, #14]
}
 8006e82:	4618      	mov	r0, r3
 8006e84:	3710      	adds	r7, #16
 8006e86:	46bd      	mov	sp, r7
 8006e88:	bd80      	pop	{r7, pc}

08006e8a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006e8a:	b580      	push	{r7, lr}
 8006e8c:	b086      	sub	sp, #24
 8006e8e:	af00      	add	r7, sp, #0
 8006e90:	60f8      	str	r0, [r7, #12]
 8006e92:	607a      	str	r2, [r7, #4]
 8006e94:	603b      	str	r3, [r7, #0]
 8006e96:	460b      	mov	r3, r1
 8006e98:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8006ea8:	7af9      	ldrb	r1, [r7, #11]
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	687a      	ldr	r2, [r7, #4]
 8006eae:	f7fa ffae 	bl	8001e0e <HAL_PCD_EP_Transmit>
 8006eb2:	4603      	mov	r3, r0
 8006eb4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006eb6:	7dfb      	ldrb	r3, [r7, #23]
 8006eb8:	4618      	mov	r0, r3
 8006eba:	f000 f853 	bl	8006f64 <USBD_Get_USB_Status>
 8006ebe:	4603      	mov	r3, r0
 8006ec0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006ec2:	7dbb      	ldrb	r3, [r7, #22]
}
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	3718      	adds	r7, #24
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	bd80      	pop	{r7, pc}

08006ecc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b086      	sub	sp, #24
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	60f8      	str	r0, [r7, #12]
 8006ed4:	607a      	str	r2, [r7, #4]
 8006ed6:	603b      	str	r3, [r7, #0]
 8006ed8:	460b      	mov	r3, r1
 8006eda:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006edc:	2300      	movs	r3, #0
 8006ede:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8006eea:	7af9      	ldrb	r1, [r7, #11]
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	687a      	ldr	r2, [r7, #4]
 8006ef0:	f7fa ff2a 	bl	8001d48 <HAL_PCD_EP_Receive>
 8006ef4:	4603      	mov	r3, r0
 8006ef6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006ef8:	7dfb      	ldrb	r3, [r7, #23]
 8006efa:	4618      	mov	r0, r3
 8006efc:	f000 f832 	bl	8006f64 <USBD_Get_USB_Status>
 8006f00:	4603      	mov	r3, r0
 8006f02:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006f04:	7dbb      	ldrb	r3, [r7, #22]
}
 8006f06:	4618      	mov	r0, r3
 8006f08:	3718      	adds	r7, #24
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	bd80      	pop	{r7, pc}

08006f0e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006f0e:	b580      	push	{r7, lr}
 8006f10:	b082      	sub	sp, #8
 8006f12:	af00      	add	r7, sp, #0
 8006f14:	6078      	str	r0, [r7, #4]
 8006f16:	460b      	mov	r3, r1
 8006f18:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006f20:	78fa      	ldrb	r2, [r7, #3]
 8006f22:	4611      	mov	r1, r2
 8006f24:	4618      	mov	r0, r3
 8006f26:	f7fa ff5a 	bl	8001dde <HAL_PCD_EP_GetRxCount>
 8006f2a:	4603      	mov	r3, r0
}
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	3708      	adds	r7, #8
 8006f30:	46bd      	mov	sp, r7
 8006f32:	bd80      	pop	{r7, pc}

08006f34 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8006f34:	b480      	push	{r7}
 8006f36:	b083      	sub	sp, #12
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8006f3c:	4b03      	ldr	r3, [pc, #12]	; (8006f4c <USBD_static_malloc+0x18>)
}
 8006f3e:	4618      	mov	r0, r3
 8006f40:	370c      	adds	r7, #12
 8006f42:	46bd      	mov	sp, r7
 8006f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f48:	4770      	bx	lr
 8006f4a:	bf00      	nop
 8006f4c:	20001298 	.word	0x20001298

08006f50 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8006f50:	b480      	push	{r7}
 8006f52:	b083      	sub	sp, #12
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]

}
 8006f58:	bf00      	nop
 8006f5a:	370c      	adds	r7, #12
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f62:	4770      	bx	lr

08006f64 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8006f64:	b480      	push	{r7}
 8006f66:	b085      	sub	sp, #20
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	4603      	mov	r3, r0
 8006f6c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006f6e:	2300      	movs	r3, #0
 8006f70:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8006f72:	79fb      	ldrb	r3, [r7, #7]
 8006f74:	2b03      	cmp	r3, #3
 8006f76:	d817      	bhi.n	8006fa8 <USBD_Get_USB_Status+0x44>
 8006f78:	a201      	add	r2, pc, #4	; (adr r2, 8006f80 <USBD_Get_USB_Status+0x1c>)
 8006f7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f7e:	bf00      	nop
 8006f80:	08006f91 	.word	0x08006f91
 8006f84:	08006f97 	.word	0x08006f97
 8006f88:	08006f9d 	.word	0x08006f9d
 8006f8c:	08006fa3 	.word	0x08006fa3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8006f90:	2300      	movs	r3, #0
 8006f92:	73fb      	strb	r3, [r7, #15]
    break;
 8006f94:	e00b      	b.n	8006fae <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006f96:	2303      	movs	r3, #3
 8006f98:	73fb      	strb	r3, [r7, #15]
    break;
 8006f9a:	e008      	b.n	8006fae <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006f9c:	2301      	movs	r3, #1
 8006f9e:	73fb      	strb	r3, [r7, #15]
    break;
 8006fa0:	e005      	b.n	8006fae <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006fa2:	2303      	movs	r3, #3
 8006fa4:	73fb      	strb	r3, [r7, #15]
    break;
 8006fa6:	e002      	b.n	8006fae <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8006fa8:	2303      	movs	r3, #3
 8006faa:	73fb      	strb	r3, [r7, #15]
    break;
 8006fac:	bf00      	nop
  }
  return usb_status;
 8006fae:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	3714      	adds	r7, #20
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fba:	4770      	bx	lr

08006fbc <_init>:
 8006fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fbe:	bf00      	nop
 8006fc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fc2:	bc08      	pop	{r3}
 8006fc4:	469e      	mov	lr, r3
 8006fc6:	4770      	bx	lr

08006fc8 <_fini>:
 8006fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fca:	bf00      	nop
 8006fcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fce:	bc08      	pop	{r3}
 8006fd0:	469e      	mov	lr, r3
 8006fd2:	4770      	bx	lr
