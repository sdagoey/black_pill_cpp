
black_pill_cpp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006bcc  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08006d60  08006d60  00016d60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006db8  08006db8  00020180  2**0
                  CONTENTS
  4 .ARM          00000008  08006db8  08006db8  00016db8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006dc0  08006dc0  00020180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006dc0  08006dc0  00016dc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006dc4  08006dc4  00016dc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000180  20000000  08006dc8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001334  20000180  08006f48  00020180  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200014b4  08006f48  000214b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 12 .comment      00000033  00000000  00000000  000201b0  2**0
                  CONTENTS, READONLY
 13 .debug_info   000121f9  00000000  00000000  000201e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002ed8  00000000  00000000  000323dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010f8  00000000  00000000  000352b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000fe8  00000000  00000000  000363b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000189bf  00000000  00000000  00037398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010264  00000000  00000000  0004fd57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008ec6a  00000000  00000000  0005ffbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000043e8  00000000  00000000  000eec28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    000012f5  00000000  00000000  000f3010  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <deregister_tm_clones>:
 8000194:	4803      	ldr	r0, [pc, #12]	; (80001a4 <deregister_tm_clones+0x10>)
 8000196:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <deregister_tm_clones+0x14>)
 8000198:	4283      	cmp	r3, r0
 800019a:	d002      	beq.n	80001a2 <deregister_tm_clones+0xe>
 800019c:	4b03      	ldr	r3, [pc, #12]	; (80001ac <deregister_tm_clones+0x18>)
 800019e:	b103      	cbz	r3, 80001a2 <deregister_tm_clones+0xe>
 80001a0:	4718      	bx	r3
 80001a2:	4770      	bx	lr
 80001a4:	20000180 	.word	0x20000180
 80001a8:	20000180 	.word	0x20000180
 80001ac:	00000000 	.word	0x00000000

080001b0 <register_tm_clones>:
 80001b0:	4805      	ldr	r0, [pc, #20]	; (80001c8 <register_tm_clones+0x18>)
 80001b2:	4906      	ldr	r1, [pc, #24]	; (80001cc <register_tm_clones+0x1c>)
 80001b4:	1a0b      	subs	r3, r1, r0
 80001b6:	0fd9      	lsrs	r1, r3, #31
 80001b8:	eb01 01a3 	add.w	r1, r1, r3, asr #2
 80001bc:	1049      	asrs	r1, r1, #1
 80001be:	d002      	beq.n	80001c6 <register_tm_clones+0x16>
 80001c0:	4b03      	ldr	r3, [pc, #12]	; (80001d0 <register_tm_clones+0x20>)
 80001c2:	b103      	cbz	r3, 80001c6 <register_tm_clones+0x16>
 80001c4:	4718      	bx	r3
 80001c6:	4770      	bx	lr
 80001c8:	20000180 	.word	0x20000180
 80001cc:	20000180 	.word	0x20000180
 80001d0:	00000000 	.word	0x00000000

080001d4 <__do_global_dtors_aux>:
 80001d4:	b510      	push	{r4, lr}
 80001d6:	4c06      	ldr	r4, [pc, #24]	; (80001f0 <__do_global_dtors_aux+0x1c>)
 80001d8:	7823      	ldrb	r3, [r4, #0]
 80001da:	b943      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x1a>
 80001dc:	f7ff ffda 	bl	8000194 <deregister_tm_clones>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x20>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x16>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x24>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000180 	.word	0x20000180
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08006d48 	.word	0x08006d48

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b04      	ldr	r3, [pc, #16]	; (8000210 <frame_dummy+0x14>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4904      	ldr	r1, [pc, #16]	; (8000214 <frame_dummy+0x18>)
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <frame_dummy+0x1c>)
 8000206:	f3af 8000 	nop.w
 800020a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800020e:	e7cf      	b.n	80001b0 <register_tm_clones>
 8000210:	00000000 	.word	0x00000000
 8000214:	20000184 	.word	0x20000184
 8000218:	08006d48 	.word	0x08006d48

0800021c <__libc_init_array>:
 800021c:	b570      	push	{r4, r5, r6, lr}
 800021e:	4e0d      	ldr	r6, [pc, #52]	; (8000254 <__libc_init_array+0x38>)
 8000220:	4d0d      	ldr	r5, [pc, #52]	; (8000258 <__libc_init_array+0x3c>)
 8000222:	1b76      	subs	r6, r6, r5
 8000224:	10b6      	asrs	r6, r6, #2
 8000226:	d006      	beq.n	8000236 <__libc_init_array+0x1a>
 8000228:	2400      	movs	r4, #0
 800022a:	f855 3b04 	ldr.w	r3, [r5], #4
 800022e:	3401      	adds	r4, #1
 8000230:	4798      	blx	r3
 8000232:	42a6      	cmp	r6, r4
 8000234:	d1f9      	bne.n	800022a <__libc_init_array+0xe>
 8000236:	4e09      	ldr	r6, [pc, #36]	; (800025c <__libc_init_array+0x40>)
 8000238:	4d09      	ldr	r5, [pc, #36]	; (8000260 <__libc_init_array+0x44>)
 800023a:	1b76      	subs	r6, r6, r5
 800023c:	f006 fd84 	bl	8006d48 <_init>
 8000240:	10b6      	asrs	r6, r6, #2
 8000242:	d006      	beq.n	8000252 <__libc_init_array+0x36>
 8000244:	2400      	movs	r4, #0
 8000246:	f855 3b04 	ldr.w	r3, [r5], #4
 800024a:	3401      	adds	r4, #1
 800024c:	4798      	blx	r3
 800024e:	42a6      	cmp	r6, r4
 8000250:	d1f9      	bne.n	8000246 <__libc_init_array+0x2a>
 8000252:	bd70      	pop	{r4, r5, r6, pc}
 8000254:	08006dc0 	.word	0x08006dc0
 8000258:	08006dc0 	.word	0x08006dc0
 800025c:	08006dc4 	.word	0x08006dc4
 8000260:	08006dc0 	.word	0x08006dc0

08000264 <memset>:
 8000264:	0783      	lsls	r3, r0, #30
 8000266:	b530      	push	{r4, r5, lr}
 8000268:	d048      	beq.n	80002fc <memset+0x98>
 800026a:	1e54      	subs	r4, r2, #1
 800026c:	2a00      	cmp	r2, #0
 800026e:	d03f      	beq.n	80002f0 <memset+0x8c>
 8000270:	b2ca      	uxtb	r2, r1
 8000272:	4603      	mov	r3, r0
 8000274:	e001      	b.n	800027a <memset+0x16>
 8000276:	3c01      	subs	r4, #1
 8000278:	d33a      	bcc.n	80002f0 <memset+0x8c>
 800027a:	f803 2b01 	strb.w	r2, [r3], #1
 800027e:	079d      	lsls	r5, r3, #30
 8000280:	d1f9      	bne.n	8000276 <memset+0x12>
 8000282:	2c03      	cmp	r4, #3
 8000284:	d92d      	bls.n	80002e2 <memset+0x7e>
 8000286:	b2cd      	uxtb	r5, r1
 8000288:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 800028c:	2c0f      	cmp	r4, #15
 800028e:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8000292:	d936      	bls.n	8000302 <memset+0x9e>
 8000294:	f1a4 0210 	sub.w	r2, r4, #16
 8000298:	f022 0c0f 	bic.w	ip, r2, #15
 800029c:	f103 0e20 	add.w	lr, r3, #32
 80002a0:	44e6      	add	lr, ip
 80002a2:	ea4f 1c12 	mov.w	ip, r2, lsr #4
 80002a6:	f103 0210 	add.w	r2, r3, #16
 80002aa:	e942 5504 	strd	r5, r5, [r2, #-16]
 80002ae:	e942 5502 	strd	r5, r5, [r2, #-8]
 80002b2:	3210      	adds	r2, #16
 80002b4:	4572      	cmp	r2, lr
 80002b6:	d1f8      	bne.n	80002aa <memset+0x46>
 80002b8:	f10c 0201 	add.w	r2, ip, #1
 80002bc:	f014 0f0c 	tst.w	r4, #12
 80002c0:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 80002c4:	f004 0c0f 	and.w	ip, r4, #15
 80002c8:	d013      	beq.n	80002f2 <memset+0x8e>
 80002ca:	f1ac 0304 	sub.w	r3, ip, #4
 80002ce:	f023 0303 	bic.w	r3, r3, #3
 80002d2:	3304      	adds	r3, #4
 80002d4:	4413      	add	r3, r2
 80002d6:	f842 5b04 	str.w	r5, [r2], #4
 80002da:	4293      	cmp	r3, r2
 80002dc:	d1fb      	bne.n	80002d6 <memset+0x72>
 80002de:	f00c 0403 	and.w	r4, ip, #3
 80002e2:	b12c      	cbz	r4, 80002f0 <memset+0x8c>
 80002e4:	b2ca      	uxtb	r2, r1
 80002e6:	441c      	add	r4, r3
 80002e8:	f803 2b01 	strb.w	r2, [r3], #1
 80002ec:	429c      	cmp	r4, r3
 80002ee:	d1fb      	bne.n	80002e8 <memset+0x84>
 80002f0:	bd30      	pop	{r4, r5, pc}
 80002f2:	4664      	mov	r4, ip
 80002f4:	4613      	mov	r3, r2
 80002f6:	2c00      	cmp	r4, #0
 80002f8:	d1f4      	bne.n	80002e4 <memset+0x80>
 80002fa:	e7f9      	b.n	80002f0 <memset+0x8c>
 80002fc:	4603      	mov	r3, r0
 80002fe:	4614      	mov	r4, r2
 8000300:	e7bf      	b.n	8000282 <memset+0x1e>
 8000302:	461a      	mov	r2, r3
 8000304:	46a4      	mov	ip, r4
 8000306:	e7e0      	b.n	80002ca <memset+0x66>

08000308 <__aeabi_uldivmod>:
 8000308:	b953      	cbnz	r3, 8000320 <__aeabi_uldivmod+0x18>
 800030a:	b94a      	cbnz	r2, 8000320 <__aeabi_uldivmod+0x18>
 800030c:	2900      	cmp	r1, #0
 800030e:	bf08      	it	eq
 8000310:	2800      	cmpeq	r0, #0
 8000312:	bf1c      	itt	ne
 8000314:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000318:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800031c:	f000 b974 	b.w	8000608 <__aeabi_idiv0>
 8000320:	f1ad 0c08 	sub.w	ip, sp, #8
 8000324:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000328:	f000 f806 	bl	8000338 <__udivmoddi4>
 800032c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000330:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000334:	b004      	add	sp, #16
 8000336:	4770      	bx	lr

08000338 <__udivmoddi4>:
 8000338:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800033c:	9d08      	ldr	r5, [sp, #32]
 800033e:	4604      	mov	r4, r0
 8000340:	468e      	mov	lr, r1
 8000342:	2b00      	cmp	r3, #0
 8000344:	d14d      	bne.n	80003e2 <__udivmoddi4+0xaa>
 8000346:	428a      	cmp	r2, r1
 8000348:	4694      	mov	ip, r2
 800034a:	d969      	bls.n	8000420 <__udivmoddi4+0xe8>
 800034c:	fab2 f282 	clz	r2, r2
 8000350:	b152      	cbz	r2, 8000368 <__udivmoddi4+0x30>
 8000352:	fa01 f302 	lsl.w	r3, r1, r2
 8000356:	f1c2 0120 	rsb	r1, r2, #32
 800035a:	fa20 f101 	lsr.w	r1, r0, r1
 800035e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000362:	ea41 0e03 	orr.w	lr, r1, r3
 8000366:	4094      	lsls	r4, r2
 8000368:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800036c:	0c21      	lsrs	r1, r4, #16
 800036e:	fbbe f6f8 	udiv	r6, lr, r8
 8000372:	fa1f f78c 	uxth.w	r7, ip
 8000376:	fb08 e316 	mls	r3, r8, r6, lr
 800037a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800037e:	fb06 f107 	mul.w	r1, r6, r7
 8000382:	4299      	cmp	r1, r3
 8000384:	d90a      	bls.n	800039c <__udivmoddi4+0x64>
 8000386:	eb1c 0303 	adds.w	r3, ip, r3
 800038a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800038e:	f080 811f 	bcs.w	80005d0 <__udivmoddi4+0x298>
 8000392:	4299      	cmp	r1, r3
 8000394:	f240 811c 	bls.w	80005d0 <__udivmoddi4+0x298>
 8000398:	3e02      	subs	r6, #2
 800039a:	4463      	add	r3, ip
 800039c:	1a5b      	subs	r3, r3, r1
 800039e:	b2a4      	uxth	r4, r4
 80003a0:	fbb3 f0f8 	udiv	r0, r3, r8
 80003a4:	fb08 3310 	mls	r3, r8, r0, r3
 80003a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003ac:	fb00 f707 	mul.w	r7, r0, r7
 80003b0:	42a7      	cmp	r7, r4
 80003b2:	d90a      	bls.n	80003ca <__udivmoddi4+0x92>
 80003b4:	eb1c 0404 	adds.w	r4, ip, r4
 80003b8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003bc:	f080 810a 	bcs.w	80005d4 <__udivmoddi4+0x29c>
 80003c0:	42a7      	cmp	r7, r4
 80003c2:	f240 8107 	bls.w	80005d4 <__udivmoddi4+0x29c>
 80003c6:	4464      	add	r4, ip
 80003c8:	3802      	subs	r0, #2
 80003ca:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ce:	1be4      	subs	r4, r4, r7
 80003d0:	2600      	movs	r6, #0
 80003d2:	b11d      	cbz	r5, 80003dc <__udivmoddi4+0xa4>
 80003d4:	40d4      	lsrs	r4, r2
 80003d6:	2300      	movs	r3, #0
 80003d8:	e9c5 4300 	strd	r4, r3, [r5]
 80003dc:	4631      	mov	r1, r6
 80003de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e2:	428b      	cmp	r3, r1
 80003e4:	d909      	bls.n	80003fa <__udivmoddi4+0xc2>
 80003e6:	2d00      	cmp	r5, #0
 80003e8:	f000 80ef 	beq.w	80005ca <__udivmoddi4+0x292>
 80003ec:	2600      	movs	r6, #0
 80003ee:	e9c5 0100 	strd	r0, r1, [r5]
 80003f2:	4630      	mov	r0, r6
 80003f4:	4631      	mov	r1, r6
 80003f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fa:	fab3 f683 	clz	r6, r3
 80003fe:	2e00      	cmp	r6, #0
 8000400:	d14a      	bne.n	8000498 <__udivmoddi4+0x160>
 8000402:	428b      	cmp	r3, r1
 8000404:	d302      	bcc.n	800040c <__udivmoddi4+0xd4>
 8000406:	4282      	cmp	r2, r0
 8000408:	f200 80f9 	bhi.w	80005fe <__udivmoddi4+0x2c6>
 800040c:	1a84      	subs	r4, r0, r2
 800040e:	eb61 0303 	sbc.w	r3, r1, r3
 8000412:	2001      	movs	r0, #1
 8000414:	469e      	mov	lr, r3
 8000416:	2d00      	cmp	r5, #0
 8000418:	d0e0      	beq.n	80003dc <__udivmoddi4+0xa4>
 800041a:	e9c5 4e00 	strd	r4, lr, [r5]
 800041e:	e7dd      	b.n	80003dc <__udivmoddi4+0xa4>
 8000420:	b902      	cbnz	r2, 8000424 <__udivmoddi4+0xec>
 8000422:	deff      	udf	#255	; 0xff
 8000424:	fab2 f282 	clz	r2, r2
 8000428:	2a00      	cmp	r2, #0
 800042a:	f040 8092 	bne.w	8000552 <__udivmoddi4+0x21a>
 800042e:	eba1 010c 	sub.w	r1, r1, ip
 8000432:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000436:	fa1f fe8c 	uxth.w	lr, ip
 800043a:	2601      	movs	r6, #1
 800043c:	0c20      	lsrs	r0, r4, #16
 800043e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000442:	fb07 1113 	mls	r1, r7, r3, r1
 8000446:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800044a:	fb0e f003 	mul.w	r0, lr, r3
 800044e:	4288      	cmp	r0, r1
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x12c>
 8000452:	eb1c 0101 	adds.w	r1, ip, r1
 8000456:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800045a:	d202      	bcs.n	8000462 <__udivmoddi4+0x12a>
 800045c:	4288      	cmp	r0, r1
 800045e:	f200 80cb 	bhi.w	80005f8 <__udivmoddi4+0x2c0>
 8000462:	4643      	mov	r3, r8
 8000464:	1a09      	subs	r1, r1, r0
 8000466:	b2a4      	uxth	r4, r4
 8000468:	fbb1 f0f7 	udiv	r0, r1, r7
 800046c:	fb07 1110 	mls	r1, r7, r0, r1
 8000470:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000474:	fb0e fe00 	mul.w	lr, lr, r0
 8000478:	45a6      	cmp	lr, r4
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x156>
 800047c:	eb1c 0404 	adds.w	r4, ip, r4
 8000480:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000484:	d202      	bcs.n	800048c <__udivmoddi4+0x154>
 8000486:	45a6      	cmp	lr, r4
 8000488:	f200 80bb 	bhi.w	8000602 <__udivmoddi4+0x2ca>
 800048c:	4608      	mov	r0, r1
 800048e:	eba4 040e 	sub.w	r4, r4, lr
 8000492:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000496:	e79c      	b.n	80003d2 <__udivmoddi4+0x9a>
 8000498:	f1c6 0720 	rsb	r7, r6, #32
 800049c:	40b3      	lsls	r3, r6
 800049e:	fa22 fc07 	lsr.w	ip, r2, r7
 80004a2:	ea4c 0c03 	orr.w	ip, ip, r3
 80004a6:	fa20 f407 	lsr.w	r4, r0, r7
 80004aa:	fa01 f306 	lsl.w	r3, r1, r6
 80004ae:	431c      	orrs	r4, r3
 80004b0:	40f9      	lsrs	r1, r7
 80004b2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004b6:	fa00 f306 	lsl.w	r3, r0, r6
 80004ba:	fbb1 f8f9 	udiv	r8, r1, r9
 80004be:	0c20      	lsrs	r0, r4, #16
 80004c0:	fa1f fe8c 	uxth.w	lr, ip
 80004c4:	fb09 1118 	mls	r1, r9, r8, r1
 80004c8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004cc:	fb08 f00e 	mul.w	r0, r8, lr
 80004d0:	4288      	cmp	r0, r1
 80004d2:	fa02 f206 	lsl.w	r2, r2, r6
 80004d6:	d90b      	bls.n	80004f0 <__udivmoddi4+0x1b8>
 80004d8:	eb1c 0101 	adds.w	r1, ip, r1
 80004dc:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004e0:	f080 8088 	bcs.w	80005f4 <__udivmoddi4+0x2bc>
 80004e4:	4288      	cmp	r0, r1
 80004e6:	f240 8085 	bls.w	80005f4 <__udivmoddi4+0x2bc>
 80004ea:	f1a8 0802 	sub.w	r8, r8, #2
 80004ee:	4461      	add	r1, ip
 80004f0:	1a09      	subs	r1, r1, r0
 80004f2:	b2a4      	uxth	r4, r4
 80004f4:	fbb1 f0f9 	udiv	r0, r1, r9
 80004f8:	fb09 1110 	mls	r1, r9, r0, r1
 80004fc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000500:	fb00 fe0e 	mul.w	lr, r0, lr
 8000504:	458e      	cmp	lr, r1
 8000506:	d908      	bls.n	800051a <__udivmoddi4+0x1e2>
 8000508:	eb1c 0101 	adds.w	r1, ip, r1
 800050c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000510:	d26c      	bcs.n	80005ec <__udivmoddi4+0x2b4>
 8000512:	458e      	cmp	lr, r1
 8000514:	d96a      	bls.n	80005ec <__udivmoddi4+0x2b4>
 8000516:	3802      	subs	r0, #2
 8000518:	4461      	add	r1, ip
 800051a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800051e:	fba0 9402 	umull	r9, r4, r0, r2
 8000522:	eba1 010e 	sub.w	r1, r1, lr
 8000526:	42a1      	cmp	r1, r4
 8000528:	46c8      	mov	r8, r9
 800052a:	46a6      	mov	lr, r4
 800052c:	d356      	bcc.n	80005dc <__udivmoddi4+0x2a4>
 800052e:	d053      	beq.n	80005d8 <__udivmoddi4+0x2a0>
 8000530:	b15d      	cbz	r5, 800054a <__udivmoddi4+0x212>
 8000532:	ebb3 0208 	subs.w	r2, r3, r8
 8000536:	eb61 010e 	sbc.w	r1, r1, lr
 800053a:	fa01 f707 	lsl.w	r7, r1, r7
 800053e:	fa22 f306 	lsr.w	r3, r2, r6
 8000542:	40f1      	lsrs	r1, r6
 8000544:	431f      	orrs	r7, r3
 8000546:	e9c5 7100 	strd	r7, r1, [r5]
 800054a:	2600      	movs	r6, #0
 800054c:	4631      	mov	r1, r6
 800054e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000552:	f1c2 0320 	rsb	r3, r2, #32
 8000556:	40d8      	lsrs	r0, r3
 8000558:	fa0c fc02 	lsl.w	ip, ip, r2
 800055c:	fa21 f303 	lsr.w	r3, r1, r3
 8000560:	4091      	lsls	r1, r2
 8000562:	4301      	orrs	r1, r0
 8000564:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000568:	fa1f fe8c 	uxth.w	lr, ip
 800056c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000570:	fb07 3610 	mls	r6, r7, r0, r3
 8000574:	0c0b      	lsrs	r3, r1, #16
 8000576:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800057a:	fb00 f60e 	mul.w	r6, r0, lr
 800057e:	429e      	cmp	r6, r3
 8000580:	fa04 f402 	lsl.w	r4, r4, r2
 8000584:	d908      	bls.n	8000598 <__udivmoddi4+0x260>
 8000586:	eb1c 0303 	adds.w	r3, ip, r3
 800058a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800058e:	d22f      	bcs.n	80005f0 <__udivmoddi4+0x2b8>
 8000590:	429e      	cmp	r6, r3
 8000592:	d92d      	bls.n	80005f0 <__udivmoddi4+0x2b8>
 8000594:	3802      	subs	r0, #2
 8000596:	4463      	add	r3, ip
 8000598:	1b9b      	subs	r3, r3, r6
 800059a:	b289      	uxth	r1, r1
 800059c:	fbb3 f6f7 	udiv	r6, r3, r7
 80005a0:	fb07 3316 	mls	r3, r7, r6, r3
 80005a4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005a8:	fb06 f30e 	mul.w	r3, r6, lr
 80005ac:	428b      	cmp	r3, r1
 80005ae:	d908      	bls.n	80005c2 <__udivmoddi4+0x28a>
 80005b0:	eb1c 0101 	adds.w	r1, ip, r1
 80005b4:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80005b8:	d216      	bcs.n	80005e8 <__udivmoddi4+0x2b0>
 80005ba:	428b      	cmp	r3, r1
 80005bc:	d914      	bls.n	80005e8 <__udivmoddi4+0x2b0>
 80005be:	3e02      	subs	r6, #2
 80005c0:	4461      	add	r1, ip
 80005c2:	1ac9      	subs	r1, r1, r3
 80005c4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005c8:	e738      	b.n	800043c <__udivmoddi4+0x104>
 80005ca:	462e      	mov	r6, r5
 80005cc:	4628      	mov	r0, r5
 80005ce:	e705      	b.n	80003dc <__udivmoddi4+0xa4>
 80005d0:	4606      	mov	r6, r0
 80005d2:	e6e3      	b.n	800039c <__udivmoddi4+0x64>
 80005d4:	4618      	mov	r0, r3
 80005d6:	e6f8      	b.n	80003ca <__udivmoddi4+0x92>
 80005d8:	454b      	cmp	r3, r9
 80005da:	d2a9      	bcs.n	8000530 <__udivmoddi4+0x1f8>
 80005dc:	ebb9 0802 	subs.w	r8, r9, r2
 80005e0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005e4:	3801      	subs	r0, #1
 80005e6:	e7a3      	b.n	8000530 <__udivmoddi4+0x1f8>
 80005e8:	4646      	mov	r6, r8
 80005ea:	e7ea      	b.n	80005c2 <__udivmoddi4+0x28a>
 80005ec:	4620      	mov	r0, r4
 80005ee:	e794      	b.n	800051a <__udivmoddi4+0x1e2>
 80005f0:	4640      	mov	r0, r8
 80005f2:	e7d1      	b.n	8000598 <__udivmoddi4+0x260>
 80005f4:	46d0      	mov	r8, sl
 80005f6:	e77b      	b.n	80004f0 <__udivmoddi4+0x1b8>
 80005f8:	3b02      	subs	r3, #2
 80005fa:	4461      	add	r1, ip
 80005fc:	e732      	b.n	8000464 <__udivmoddi4+0x12c>
 80005fe:	4630      	mov	r0, r6
 8000600:	e709      	b.n	8000416 <__udivmoddi4+0xde>
 8000602:	4464      	add	r4, ip
 8000604:	3802      	subs	r0, #2
 8000606:	e742      	b.n	800048e <__udivmoddi4+0x156>

08000608 <__aeabi_idiv0>:
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop

0800060c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000610:	f000 f9f2 	bl	80009f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000614:	f000 f808 	bl	8000628 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000618:	f000 f8be 	bl	8000798 <MX_GPIO_Init>
  MX_TIM4_Init();
 800061c:	f000 f86e 	bl	80006fc <MX_TIM4_Init>
  MX_USB_DEVICE_Init();
 8000620:	f005 fea8 	bl	8006374 <MX_USB_DEVICE_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000624:	e7fe      	b.n	8000624 <main+0x18>
	...

08000628 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b094      	sub	sp, #80	; 0x50
 800062c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800062e:	f107 0320 	add.w	r3, r7, #32
 8000632:	2230      	movs	r2, #48	; 0x30
 8000634:	2100      	movs	r1, #0
 8000636:	4618      	mov	r0, r3
 8000638:	f7ff fe14 	bl	8000264 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800063c:	f107 030c 	add.w	r3, r7, #12
 8000640:	2200      	movs	r2, #0
 8000642:	601a      	str	r2, [r3, #0]
 8000644:	605a      	str	r2, [r3, #4]
 8000646:	609a      	str	r2, [r3, #8]
 8000648:	60da      	str	r2, [r3, #12]
 800064a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800064c:	2300      	movs	r3, #0
 800064e:	60bb      	str	r3, [r7, #8]
 8000650:	4b28      	ldr	r3, [pc, #160]	; (80006f4 <SystemClock_Config+0xcc>)
 8000652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000654:	4a27      	ldr	r2, [pc, #156]	; (80006f4 <SystemClock_Config+0xcc>)
 8000656:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800065a:	6413      	str	r3, [r2, #64]	; 0x40
 800065c:	4b25      	ldr	r3, [pc, #148]	; (80006f4 <SystemClock_Config+0xcc>)
 800065e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000660:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000664:	60bb      	str	r3, [r7, #8]
 8000666:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000668:	2300      	movs	r3, #0
 800066a:	607b      	str	r3, [r7, #4]
 800066c:	4b22      	ldr	r3, [pc, #136]	; (80006f8 <SystemClock_Config+0xd0>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000674:	4a20      	ldr	r2, [pc, #128]	; (80006f8 <SystemClock_Config+0xd0>)
 8000676:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800067a:	6013      	str	r3, [r2, #0]
 800067c:	4b1e      	ldr	r3, [pc, #120]	; (80006f8 <SystemClock_Config+0xd0>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000684:	607b      	str	r3, [r7, #4]
 8000686:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000688:	2301      	movs	r3, #1
 800068a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800068c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000690:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000692:	2302      	movs	r3, #2
 8000694:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000696:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800069a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 800069c:	230f      	movs	r3, #15
 800069e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 80006a0:	2390      	movs	r3, #144	; 0x90
 80006a2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006a4:	2304      	movs	r3, #4
 80006a6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 80006a8:	2305      	movs	r3, #5
 80006aa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ac:	f107 0320 	add.w	r3, r7, #32
 80006b0:	4618      	mov	r0, r3
 80006b2:	f001 fe69 	bl	8002388 <HAL_RCC_OscConfig>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80006bc:	f000 f8cc 	bl	8000858 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c0:	230f      	movs	r3, #15
 80006c2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006c4:	2302      	movs	r3, #2
 80006c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006c8:	2300      	movs	r3, #0
 80006ca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006d0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006d2:	2300      	movs	r3, #0
 80006d4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80006d6:	f107 030c 	add.w	r3, r7, #12
 80006da:	2101      	movs	r1, #1
 80006dc:	4618      	mov	r0, r3
 80006de:	f002 f8cb 	bl	8002878 <HAL_RCC_ClockConfig>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80006e8:	f000 f8b6 	bl	8000858 <Error_Handler>
  }
}
 80006ec:	bf00      	nop
 80006ee:	3750      	adds	r7, #80	; 0x50
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	40023800 	.word	0x40023800
 80006f8:	40007000 	.word	0x40007000

080006fc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b086      	sub	sp, #24
 8000700:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000702:	f107 0308 	add.w	r3, r7, #8
 8000706:	2200      	movs	r2, #0
 8000708:	601a      	str	r2, [r3, #0]
 800070a:	605a      	str	r2, [r3, #4]
 800070c:	609a      	str	r2, [r3, #8]
 800070e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000710:	463b      	mov	r3, r7
 8000712:	2200      	movs	r2, #0
 8000714:	601a      	str	r2, [r3, #0]
 8000716:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000718:	4b1d      	ldr	r3, [pc, #116]	; (8000790 <MX_TIM4_Init+0x94>)
 800071a:	4a1e      	ldr	r2, [pc, #120]	; (8000794 <MX_TIM4_Init+0x98>)
 800071c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 60;
 800071e:	4b1c      	ldr	r3, [pc, #112]	; (8000790 <MX_TIM4_Init+0x94>)
 8000720:	223c      	movs	r2, #60	; 0x3c
 8000722:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000724:	4b1a      	ldr	r3, [pc, #104]	; (8000790 <MX_TIM4_Init+0x94>)
 8000726:	2200      	movs	r2, #0
 8000728:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000;
 800072a:	4b19      	ldr	r3, [pc, #100]	; (8000790 <MX_TIM4_Init+0x94>)
 800072c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000730:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000732:	4b17      	ldr	r3, [pc, #92]	; (8000790 <MX_TIM4_Init+0x94>)
 8000734:	2200      	movs	r2, #0
 8000736:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000738:	4b15      	ldr	r3, [pc, #84]	; (8000790 <MX_TIM4_Init+0x94>)
 800073a:	2280      	movs	r2, #128	; 0x80
 800073c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800073e:	4814      	ldr	r0, [pc, #80]	; (8000790 <MX_TIM4_Init+0x94>)
 8000740:	f002 fa52 	bl	8002be8 <HAL_TIM_Base_Init>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800074a:	f000 f885 	bl	8000858 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800074e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000752:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000754:	f107 0308 	add.w	r3, r7, #8
 8000758:	4619      	mov	r1, r3
 800075a:	480d      	ldr	r0, [pc, #52]	; (8000790 <MX_TIM4_Init+0x94>)
 800075c:	f002 fb9b 	bl	8002e96 <HAL_TIM_ConfigClockSource>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8000766:	f000 f877 	bl	8000858 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800076a:	2300      	movs	r3, #0
 800076c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800076e:	2300      	movs	r3, #0
 8000770:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000772:	463b      	mov	r3, r7
 8000774:	4619      	mov	r1, r3
 8000776:	4806      	ldr	r0, [pc, #24]	; (8000790 <MX_TIM4_Init+0x94>)
 8000778:	f002 fda0 	bl	80032bc <HAL_TIMEx_MasterConfigSynchronization>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8000782:	f000 f869 	bl	8000858 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000786:	bf00      	nop
 8000788:	3718      	adds	r7, #24
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	2000019c 	.word	0x2000019c
 8000794:	40000800 	.word	0x40000800

08000798 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b088      	sub	sp, #32
 800079c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800079e:	f107 030c 	add.w	r3, r7, #12
 80007a2:	2200      	movs	r2, #0
 80007a4:	601a      	str	r2, [r3, #0]
 80007a6:	605a      	str	r2, [r3, #4]
 80007a8:	609a      	str	r2, [r3, #8]
 80007aa:	60da      	str	r2, [r3, #12]
 80007ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ae:	2300      	movs	r3, #0
 80007b0:	60bb      	str	r3, [r7, #8]
 80007b2:	4b26      	ldr	r3, [pc, #152]	; (800084c <MX_GPIO_Init+0xb4>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	4a25      	ldr	r2, [pc, #148]	; (800084c <MX_GPIO_Init+0xb4>)
 80007b8:	f043 0304 	orr.w	r3, r3, #4
 80007bc:	6313      	str	r3, [r2, #48]	; 0x30
 80007be:	4b23      	ldr	r3, [pc, #140]	; (800084c <MX_GPIO_Init+0xb4>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	f003 0304 	and.w	r3, r3, #4
 80007c6:	60bb      	str	r3, [r7, #8]
 80007c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007ca:	2300      	movs	r3, #0
 80007cc:	607b      	str	r3, [r7, #4]
 80007ce:	4b1f      	ldr	r3, [pc, #124]	; (800084c <MX_GPIO_Init+0xb4>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	4a1e      	ldr	r2, [pc, #120]	; (800084c <MX_GPIO_Init+0xb4>)
 80007d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007d8:	6313      	str	r3, [r2, #48]	; 0x30
 80007da:	4b1c      	ldr	r3, [pc, #112]	; (800084c <MX_GPIO_Init+0xb4>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007e2:	607b      	str	r3, [r7, #4]
 80007e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007e6:	2300      	movs	r3, #0
 80007e8:	603b      	str	r3, [r7, #0]
 80007ea:	4b18      	ldr	r3, [pc, #96]	; (800084c <MX_GPIO_Init+0xb4>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	4a17      	ldr	r2, [pc, #92]	; (800084c <MX_GPIO_Init+0xb4>)
 80007f0:	f043 0301 	orr.w	r3, r3, #1
 80007f4:	6313      	str	r3, [r2, #48]	; 0x30
 80007f6:	4b15      	ldr	r3, [pc, #84]	; (800084c <MX_GPIO_Init+0xb4>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	f003 0301 	and.w	r3, r3, #1
 80007fe:	603b      	str	r3, [r7, #0]
 8000800:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000802:	2201      	movs	r2, #1
 8000804:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000808:	4811      	ldr	r0, [pc, #68]	; (8000850 <MX_GPIO_Init+0xb8>)
 800080a:	f000 fc21 	bl	8001050 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800080e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000812:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000814:	2301      	movs	r3, #1
 8000816:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000818:	2300      	movs	r3, #0
 800081a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800081c:	2300      	movs	r3, #0
 800081e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000820:	f107 030c 	add.w	r3, r7, #12
 8000824:	4619      	mov	r1, r3
 8000826:	480a      	ldr	r0, [pc, #40]	; (8000850 <MX_GPIO_Init+0xb8>)
 8000828:	f000 fa8e 	bl	8000d48 <HAL_GPIO_Init>

  /*Configure GPIO pin : KEY_Pin */
  GPIO_InitStruct.Pin = KEY_Pin;
 800082c:	2301      	movs	r3, #1
 800082e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000830:	2300      	movs	r3, #0
 8000832:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000834:	2301      	movs	r3, #1
 8000836:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(KEY_GPIO_Port, &GPIO_InitStruct);
 8000838:	f107 030c 	add.w	r3, r7, #12
 800083c:	4619      	mov	r1, r3
 800083e:	4805      	ldr	r0, [pc, #20]	; (8000854 <MX_GPIO_Init+0xbc>)
 8000840:	f000 fa82 	bl	8000d48 <HAL_GPIO_Init>

}
 8000844:	bf00      	nop
 8000846:	3720      	adds	r7, #32
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	40023800 	.word	0x40023800
 8000850:	40020800 	.word	0x40020800
 8000854:	40020000 	.word	0x40020000

08000858 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800085c:	b672      	cpsid	i
}
 800085e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000860:	e7fe      	b.n	8000860 <Error_Handler+0x8>
	...

08000864 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000864:	b480      	push	{r7}
 8000866:	b083      	sub	sp, #12
 8000868:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800086a:	2300      	movs	r3, #0
 800086c:	607b      	str	r3, [r7, #4]
 800086e:	4b10      	ldr	r3, [pc, #64]	; (80008b0 <HAL_MspInit+0x4c>)
 8000870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000872:	4a0f      	ldr	r2, [pc, #60]	; (80008b0 <HAL_MspInit+0x4c>)
 8000874:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000878:	6453      	str	r3, [r2, #68]	; 0x44
 800087a:	4b0d      	ldr	r3, [pc, #52]	; (80008b0 <HAL_MspInit+0x4c>)
 800087c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800087e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000882:	607b      	str	r3, [r7, #4]
 8000884:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000886:	2300      	movs	r3, #0
 8000888:	603b      	str	r3, [r7, #0]
 800088a:	4b09      	ldr	r3, [pc, #36]	; (80008b0 <HAL_MspInit+0x4c>)
 800088c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800088e:	4a08      	ldr	r2, [pc, #32]	; (80008b0 <HAL_MspInit+0x4c>)
 8000890:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000894:	6413      	str	r3, [r2, #64]	; 0x40
 8000896:	4b06      	ldr	r3, [pc, #24]	; (80008b0 <HAL_MspInit+0x4c>)
 8000898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800089a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800089e:	603b      	str	r3, [r7, #0]
 80008a0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008a2:	bf00      	nop
 80008a4:	370c      	adds	r7, #12
 80008a6:	46bd      	mov	sp, r7
 80008a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ac:	4770      	bx	lr
 80008ae:	bf00      	nop
 80008b0:	40023800 	.word	0x40023800

080008b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b084      	sub	sp, #16
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	4a0e      	ldr	r2, [pc, #56]	; (80008fc <HAL_TIM_Base_MspInit+0x48>)
 80008c2:	4293      	cmp	r3, r2
 80008c4:	d115      	bne.n	80008f2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80008c6:	2300      	movs	r3, #0
 80008c8:	60fb      	str	r3, [r7, #12]
 80008ca:	4b0d      	ldr	r3, [pc, #52]	; (8000900 <HAL_TIM_Base_MspInit+0x4c>)
 80008cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ce:	4a0c      	ldr	r2, [pc, #48]	; (8000900 <HAL_TIM_Base_MspInit+0x4c>)
 80008d0:	f043 0304 	orr.w	r3, r3, #4
 80008d4:	6413      	str	r3, [r2, #64]	; 0x40
 80008d6:	4b0a      	ldr	r3, [pc, #40]	; (8000900 <HAL_TIM_Base_MspInit+0x4c>)
 80008d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008da:	f003 0304 	and.w	r3, r3, #4
 80008de:	60fb      	str	r3, [r7, #12]
 80008e0:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80008e2:	2200      	movs	r2, #0
 80008e4:	2100      	movs	r1, #0
 80008e6:	201e      	movs	r0, #30
 80008e8:	f000 f9f7 	bl	8000cda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80008ec:	201e      	movs	r0, #30
 80008ee:	f000 fa10 	bl	8000d12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80008f2:	bf00      	nop
 80008f4:	3710      	adds	r7, #16
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	40000800 	.word	0x40000800
 8000900:	40023800 	.word	0x40023800

08000904 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000908:	e7fe      	b.n	8000908 <NMI_Handler+0x4>

0800090a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800090a:	b480      	push	{r7}
 800090c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800090e:	e7fe      	b.n	800090e <HardFault_Handler+0x4>

08000910 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000914:	e7fe      	b.n	8000914 <MemManage_Handler+0x4>

08000916 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000916:	b480      	push	{r7}
 8000918:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800091a:	e7fe      	b.n	800091a <BusFault_Handler+0x4>

0800091c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000920:	e7fe      	b.n	8000920 <UsageFault_Handler+0x4>

08000922 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000922:	b480      	push	{r7}
 8000924:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000926:	bf00      	nop
 8000928:	46bd      	mov	sp, r7
 800092a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092e:	4770      	bx	lr

08000930 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000934:	bf00      	nop
 8000936:	46bd      	mov	sp, r7
 8000938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093c:	4770      	bx	lr

0800093e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800093e:	b480      	push	{r7}
 8000940:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000942:	bf00      	nop
 8000944:	46bd      	mov	sp, r7
 8000946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094a:	4770      	bx	lr

0800094c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000950:	f000 f8a4 	bl	8000a9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000954:	bf00      	nop
 8000956:	bd80      	pop	{r7, pc}

08000958 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800095c:	4802      	ldr	r0, [pc, #8]	; (8000968 <TIM4_IRQHandler+0x10>)
 800095e:	f002 f992 	bl	8002c86 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000962:	bf00      	nop
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	2000019c 	.word	0x2000019c

0800096c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000970:	4802      	ldr	r0, [pc, #8]	; (800097c <OTG_FS_IRQHandler+0x10>)
 8000972:	f000 fcd6 	bl	8001322 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000976:	bf00      	nop
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	20000e8c 	.word	0x20000e8c

08000980 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000984:	4b06      	ldr	r3, [pc, #24]	; (80009a0 <SystemInit+0x20>)
 8000986:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800098a:	4a05      	ldr	r2, [pc, #20]	; (80009a0 <SystemInit+0x20>)
 800098c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000990:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000994:	bf00      	nop
 8000996:	46bd      	mov	sp, r7
 8000998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099c:	4770      	bx	lr
 800099e:	bf00      	nop
 80009a0:	e000ed00 	.word	0xe000ed00

080009a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80009a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009dc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80009a8:	480d      	ldr	r0, [pc, #52]	; (80009e0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80009aa:	490e      	ldr	r1, [pc, #56]	; (80009e4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80009ac:	4a0e      	ldr	r2, [pc, #56]	; (80009e8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80009ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009b0:	e002      	b.n	80009b8 <LoopCopyDataInit>

080009b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009b6:	3304      	adds	r3, #4

080009b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009bc:	d3f9      	bcc.n	80009b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009be:	4a0b      	ldr	r2, [pc, #44]	; (80009ec <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80009c0:	4c0b      	ldr	r4, [pc, #44]	; (80009f0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80009c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009c4:	e001      	b.n	80009ca <LoopFillZerobss>

080009c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009c8:	3204      	adds	r2, #4

080009ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009cc:	d3fb      	bcc.n	80009c6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80009ce:	f7ff ffd7 	bl	8000980 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009d2:	f7ff fc23 	bl	800021c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009d6:	f7ff fe19 	bl	800060c <main>
  bx  lr    
 80009da:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80009dc:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80009e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009e4:	20000180 	.word	0x20000180
  ldr r2, =_sidata
 80009e8:	08006dc8 	.word	0x08006dc8
  ldr r2, =_sbss
 80009ec:	20000180 	.word	0x20000180
  ldr r4, =_ebss
 80009f0:	200014b4 	.word	0x200014b4

080009f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009f4:	e7fe      	b.n	80009f4 <ADC_IRQHandler>
	...

080009f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80009fc:	4b0e      	ldr	r3, [pc, #56]	; (8000a38 <HAL_Init+0x40>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	4a0d      	ldr	r2, [pc, #52]	; (8000a38 <HAL_Init+0x40>)
 8000a02:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a06:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a08:	4b0b      	ldr	r3, [pc, #44]	; (8000a38 <HAL_Init+0x40>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	4a0a      	ldr	r2, [pc, #40]	; (8000a38 <HAL_Init+0x40>)
 8000a0e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a12:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a14:	4b08      	ldr	r3, [pc, #32]	; (8000a38 <HAL_Init+0x40>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	4a07      	ldr	r2, [pc, #28]	; (8000a38 <HAL_Init+0x40>)
 8000a1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a1e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a20:	2003      	movs	r0, #3
 8000a22:	f000 f94f 	bl	8000cc4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a26:	200f      	movs	r0, #15
 8000a28:	f000 f808 	bl	8000a3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a2c:	f7ff ff1a 	bl	8000864 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a30:	2300      	movs	r3, #0
}
 8000a32:	4618      	mov	r0, r3
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	40023c00 	.word	0x40023c00

08000a3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b082      	sub	sp, #8
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a44:	4b12      	ldr	r3, [pc, #72]	; (8000a90 <HAL_InitTick+0x54>)
 8000a46:	681a      	ldr	r2, [r3, #0]
 8000a48:	4b12      	ldr	r3, [pc, #72]	; (8000a94 <HAL_InitTick+0x58>)
 8000a4a:	781b      	ldrb	r3, [r3, #0]
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a52:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a56:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f000 f967 	bl	8000d2e <HAL_SYSTICK_Config>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d001      	beq.n	8000a6a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a66:	2301      	movs	r3, #1
 8000a68:	e00e      	b.n	8000a88 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	2b0f      	cmp	r3, #15
 8000a6e:	d80a      	bhi.n	8000a86 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a70:	2200      	movs	r2, #0
 8000a72:	6879      	ldr	r1, [r7, #4]
 8000a74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a78:	f000 f92f 	bl	8000cda <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a7c:	4a06      	ldr	r2, [pc, #24]	; (8000a98 <HAL_InitTick+0x5c>)
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a82:	2300      	movs	r3, #0
 8000a84:	e000      	b.n	8000a88 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a86:	2301      	movs	r3, #1
}
 8000a88:	4618      	mov	r0, r3
 8000a8a:	3708      	adds	r7, #8
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	20000000 	.word	0x20000000
 8000a94:	20000008 	.word	0x20000008
 8000a98:	20000004 	.word	0x20000004

08000a9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000aa0:	4b06      	ldr	r3, [pc, #24]	; (8000abc <HAL_IncTick+0x20>)
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	461a      	mov	r2, r3
 8000aa6:	4b06      	ldr	r3, [pc, #24]	; (8000ac0 <HAL_IncTick+0x24>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	4413      	add	r3, r2
 8000aac:	4a04      	ldr	r2, [pc, #16]	; (8000ac0 <HAL_IncTick+0x24>)
 8000aae:	6013      	str	r3, [r2, #0]
}
 8000ab0:	bf00      	nop
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop
 8000abc:	20000008 	.word	0x20000008
 8000ac0:	200001e4 	.word	0x200001e4

08000ac4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ac8:	4b03      	ldr	r3, [pc, #12]	; (8000ad8 <HAL_GetTick+0x14>)
 8000aca:	681b      	ldr	r3, [r3, #0]
}
 8000acc:	4618      	mov	r0, r3
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop
 8000ad8:	200001e4 	.word	0x200001e4

08000adc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b084      	sub	sp, #16
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ae4:	f7ff ffee 	bl	8000ac4 <HAL_GetTick>
 8000ae8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000af4:	d005      	beq.n	8000b02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000af6:	4b0a      	ldr	r3, [pc, #40]	; (8000b20 <HAL_Delay+0x44>)
 8000af8:	781b      	ldrb	r3, [r3, #0]
 8000afa:	461a      	mov	r2, r3
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	4413      	add	r3, r2
 8000b00:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b02:	bf00      	nop
 8000b04:	f7ff ffde 	bl	8000ac4 <HAL_GetTick>
 8000b08:	4602      	mov	r2, r0
 8000b0a:	68bb      	ldr	r3, [r7, #8]
 8000b0c:	1ad3      	subs	r3, r2, r3
 8000b0e:	68fa      	ldr	r2, [r7, #12]
 8000b10:	429a      	cmp	r2, r3
 8000b12:	d8f7      	bhi.n	8000b04 <HAL_Delay+0x28>
  {
  }
}
 8000b14:	bf00      	nop
 8000b16:	bf00      	nop
 8000b18:	3710      	adds	r7, #16
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	20000008 	.word	0x20000008

08000b24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b085      	sub	sp, #20
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	f003 0307 	and.w	r3, r3, #7
 8000b32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b34:	4b0c      	ldr	r3, [pc, #48]	; (8000b68 <__NVIC_SetPriorityGrouping+0x44>)
 8000b36:	68db      	ldr	r3, [r3, #12]
 8000b38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b3a:	68ba      	ldr	r2, [r7, #8]
 8000b3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b40:	4013      	ands	r3, r2
 8000b42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b48:	68bb      	ldr	r3, [r7, #8]
 8000b4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b56:	4a04      	ldr	r2, [pc, #16]	; (8000b68 <__NVIC_SetPriorityGrouping+0x44>)
 8000b58:	68bb      	ldr	r3, [r7, #8]
 8000b5a:	60d3      	str	r3, [r2, #12]
}
 8000b5c:	bf00      	nop
 8000b5e:	3714      	adds	r7, #20
 8000b60:	46bd      	mov	sp, r7
 8000b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b66:	4770      	bx	lr
 8000b68:	e000ed00 	.word	0xe000ed00

08000b6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b70:	4b04      	ldr	r3, [pc, #16]	; (8000b84 <__NVIC_GetPriorityGrouping+0x18>)
 8000b72:	68db      	ldr	r3, [r3, #12]
 8000b74:	0a1b      	lsrs	r3, r3, #8
 8000b76:	f003 0307 	and.w	r3, r3, #7
}
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b82:	4770      	bx	lr
 8000b84:	e000ed00 	.word	0xe000ed00

08000b88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b083      	sub	sp, #12
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	4603      	mov	r3, r0
 8000b90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	db0b      	blt.n	8000bb2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b9a:	79fb      	ldrb	r3, [r7, #7]
 8000b9c:	f003 021f 	and.w	r2, r3, #31
 8000ba0:	4907      	ldr	r1, [pc, #28]	; (8000bc0 <__NVIC_EnableIRQ+0x38>)
 8000ba2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ba6:	095b      	lsrs	r3, r3, #5
 8000ba8:	2001      	movs	r0, #1
 8000baa:	fa00 f202 	lsl.w	r2, r0, r2
 8000bae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000bb2:	bf00      	nop
 8000bb4:	370c      	adds	r7, #12
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop
 8000bc0:	e000e100 	.word	0xe000e100

08000bc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b083      	sub	sp, #12
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	4603      	mov	r3, r0
 8000bcc:	6039      	str	r1, [r7, #0]
 8000bce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	db0a      	blt.n	8000bee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	b2da      	uxtb	r2, r3
 8000bdc:	490c      	ldr	r1, [pc, #48]	; (8000c10 <__NVIC_SetPriority+0x4c>)
 8000bde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000be2:	0112      	lsls	r2, r2, #4
 8000be4:	b2d2      	uxtb	r2, r2
 8000be6:	440b      	add	r3, r1
 8000be8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bec:	e00a      	b.n	8000c04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bee:	683b      	ldr	r3, [r7, #0]
 8000bf0:	b2da      	uxtb	r2, r3
 8000bf2:	4908      	ldr	r1, [pc, #32]	; (8000c14 <__NVIC_SetPriority+0x50>)
 8000bf4:	79fb      	ldrb	r3, [r7, #7]
 8000bf6:	f003 030f 	and.w	r3, r3, #15
 8000bfa:	3b04      	subs	r3, #4
 8000bfc:	0112      	lsls	r2, r2, #4
 8000bfe:	b2d2      	uxtb	r2, r2
 8000c00:	440b      	add	r3, r1
 8000c02:	761a      	strb	r2, [r3, #24]
}
 8000c04:	bf00      	nop
 8000c06:	370c      	adds	r7, #12
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0e:	4770      	bx	lr
 8000c10:	e000e100 	.word	0xe000e100
 8000c14:	e000ed00 	.word	0xe000ed00

08000c18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b089      	sub	sp, #36	; 0x24
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	60f8      	str	r0, [r7, #12]
 8000c20:	60b9      	str	r1, [r7, #8]
 8000c22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	f003 0307 	and.w	r3, r3, #7
 8000c2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c2c:	69fb      	ldr	r3, [r7, #28]
 8000c2e:	f1c3 0307 	rsb	r3, r3, #7
 8000c32:	2b04      	cmp	r3, #4
 8000c34:	bf28      	it	cs
 8000c36:	2304      	movcs	r3, #4
 8000c38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c3a:	69fb      	ldr	r3, [r7, #28]
 8000c3c:	3304      	adds	r3, #4
 8000c3e:	2b06      	cmp	r3, #6
 8000c40:	d902      	bls.n	8000c48 <NVIC_EncodePriority+0x30>
 8000c42:	69fb      	ldr	r3, [r7, #28]
 8000c44:	3b03      	subs	r3, #3
 8000c46:	e000      	b.n	8000c4a <NVIC_EncodePriority+0x32>
 8000c48:	2300      	movs	r3, #0
 8000c4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c4c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000c50:	69bb      	ldr	r3, [r7, #24]
 8000c52:	fa02 f303 	lsl.w	r3, r2, r3
 8000c56:	43da      	mvns	r2, r3
 8000c58:	68bb      	ldr	r3, [r7, #8]
 8000c5a:	401a      	ands	r2, r3
 8000c5c:	697b      	ldr	r3, [r7, #20]
 8000c5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c60:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000c64:	697b      	ldr	r3, [r7, #20]
 8000c66:	fa01 f303 	lsl.w	r3, r1, r3
 8000c6a:	43d9      	mvns	r1, r3
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c70:	4313      	orrs	r3, r2
         );
}
 8000c72:	4618      	mov	r0, r3
 8000c74:	3724      	adds	r7, #36	; 0x24
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr
	...

08000c80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	3b01      	subs	r3, #1
 8000c8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c90:	d301      	bcc.n	8000c96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c92:	2301      	movs	r3, #1
 8000c94:	e00f      	b.n	8000cb6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c96:	4a0a      	ldr	r2, [pc, #40]	; (8000cc0 <SysTick_Config+0x40>)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	3b01      	subs	r3, #1
 8000c9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c9e:	210f      	movs	r1, #15
 8000ca0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ca4:	f7ff ff8e 	bl	8000bc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ca8:	4b05      	ldr	r3, [pc, #20]	; (8000cc0 <SysTick_Config+0x40>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cae:	4b04      	ldr	r3, [pc, #16]	; (8000cc0 <SysTick_Config+0x40>)
 8000cb0:	2207      	movs	r2, #7
 8000cb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cb4:	2300      	movs	r3, #0
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	3708      	adds	r7, #8
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	e000e010 	.word	0xe000e010

08000cc4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ccc:	6878      	ldr	r0, [r7, #4]
 8000cce:	f7ff ff29 	bl	8000b24 <__NVIC_SetPriorityGrouping>
}
 8000cd2:	bf00      	nop
 8000cd4:	3708      	adds	r7, #8
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}

08000cda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cda:	b580      	push	{r7, lr}
 8000cdc:	b086      	sub	sp, #24
 8000cde:	af00      	add	r7, sp, #0
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	60b9      	str	r1, [r7, #8]
 8000ce4:	607a      	str	r2, [r7, #4]
 8000ce6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cec:	f7ff ff3e 	bl	8000b6c <__NVIC_GetPriorityGrouping>
 8000cf0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cf2:	687a      	ldr	r2, [r7, #4]
 8000cf4:	68b9      	ldr	r1, [r7, #8]
 8000cf6:	6978      	ldr	r0, [r7, #20]
 8000cf8:	f7ff ff8e 	bl	8000c18 <NVIC_EncodePriority>
 8000cfc:	4602      	mov	r2, r0
 8000cfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d02:	4611      	mov	r1, r2
 8000d04:	4618      	mov	r0, r3
 8000d06:	f7ff ff5d 	bl	8000bc4 <__NVIC_SetPriority>
}
 8000d0a:	bf00      	nop
 8000d0c:	3718      	adds	r7, #24
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}

08000d12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d12:	b580      	push	{r7, lr}
 8000d14:	b082      	sub	sp, #8
 8000d16:	af00      	add	r7, sp, #0
 8000d18:	4603      	mov	r3, r0
 8000d1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d20:	4618      	mov	r0, r3
 8000d22:	f7ff ff31 	bl	8000b88 <__NVIC_EnableIRQ>
}
 8000d26:	bf00      	nop
 8000d28:	3708      	adds	r7, #8
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}

08000d2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d2e:	b580      	push	{r7, lr}
 8000d30:	b082      	sub	sp, #8
 8000d32:	af00      	add	r7, sp, #0
 8000d34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d36:	6878      	ldr	r0, [r7, #4]
 8000d38:	f7ff ffa2 	bl	8000c80 <SysTick_Config>
 8000d3c:	4603      	mov	r3, r0
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	3708      	adds	r7, #8
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
	...

08000d48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b089      	sub	sp, #36	; 0x24
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
 8000d50:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d52:	2300      	movs	r3, #0
 8000d54:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d56:	2300      	movs	r3, #0
 8000d58:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d5e:	2300      	movs	r3, #0
 8000d60:	61fb      	str	r3, [r7, #28]
 8000d62:	e159      	b.n	8001018 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d64:	2201      	movs	r2, #1
 8000d66:	69fb      	ldr	r3, [r7, #28]
 8000d68:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	697a      	ldr	r2, [r7, #20]
 8000d74:	4013      	ands	r3, r2
 8000d76:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d78:	693a      	ldr	r2, [r7, #16]
 8000d7a:	697b      	ldr	r3, [r7, #20]
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	f040 8148 	bne.w	8001012 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	685b      	ldr	r3, [r3, #4]
 8000d86:	f003 0303 	and.w	r3, r3, #3
 8000d8a:	2b01      	cmp	r3, #1
 8000d8c:	d005      	beq.n	8000d9a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	685b      	ldr	r3, [r3, #4]
 8000d92:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d96:	2b02      	cmp	r3, #2
 8000d98:	d130      	bne.n	8000dfc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	689b      	ldr	r3, [r3, #8]
 8000d9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000da0:	69fb      	ldr	r3, [r7, #28]
 8000da2:	005b      	lsls	r3, r3, #1
 8000da4:	2203      	movs	r2, #3
 8000da6:	fa02 f303 	lsl.w	r3, r2, r3
 8000daa:	43db      	mvns	r3, r3
 8000dac:	69ba      	ldr	r2, [r7, #24]
 8000dae:	4013      	ands	r3, r2
 8000db0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	68da      	ldr	r2, [r3, #12]
 8000db6:	69fb      	ldr	r3, [r7, #28]
 8000db8:	005b      	lsls	r3, r3, #1
 8000dba:	fa02 f303 	lsl.w	r3, r2, r3
 8000dbe:	69ba      	ldr	r2, [r7, #24]
 8000dc0:	4313      	orrs	r3, r2
 8000dc2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	69ba      	ldr	r2, [r7, #24]
 8000dc8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	685b      	ldr	r3, [r3, #4]
 8000dce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	69fb      	ldr	r3, [r7, #28]
 8000dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd8:	43db      	mvns	r3, r3
 8000dda:	69ba      	ldr	r2, [r7, #24]
 8000ddc:	4013      	ands	r3, r2
 8000dde:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	685b      	ldr	r3, [r3, #4]
 8000de4:	091b      	lsrs	r3, r3, #4
 8000de6:	f003 0201 	and.w	r2, r3, #1
 8000dea:	69fb      	ldr	r3, [r7, #28]
 8000dec:	fa02 f303 	lsl.w	r3, r2, r3
 8000df0:	69ba      	ldr	r2, [r7, #24]
 8000df2:	4313      	orrs	r3, r2
 8000df4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	69ba      	ldr	r2, [r7, #24]
 8000dfa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	685b      	ldr	r3, [r3, #4]
 8000e00:	f003 0303 	and.w	r3, r3, #3
 8000e04:	2b03      	cmp	r3, #3
 8000e06:	d017      	beq.n	8000e38 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	68db      	ldr	r3, [r3, #12]
 8000e0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e0e:	69fb      	ldr	r3, [r7, #28]
 8000e10:	005b      	lsls	r3, r3, #1
 8000e12:	2203      	movs	r2, #3
 8000e14:	fa02 f303 	lsl.w	r3, r2, r3
 8000e18:	43db      	mvns	r3, r3
 8000e1a:	69ba      	ldr	r2, [r7, #24]
 8000e1c:	4013      	ands	r3, r2
 8000e1e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	689a      	ldr	r2, [r3, #8]
 8000e24:	69fb      	ldr	r3, [r7, #28]
 8000e26:	005b      	lsls	r3, r3, #1
 8000e28:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2c:	69ba      	ldr	r2, [r7, #24]
 8000e2e:	4313      	orrs	r3, r2
 8000e30:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	69ba      	ldr	r2, [r7, #24]
 8000e36:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	685b      	ldr	r3, [r3, #4]
 8000e3c:	f003 0303 	and.w	r3, r3, #3
 8000e40:	2b02      	cmp	r3, #2
 8000e42:	d123      	bne.n	8000e8c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e44:	69fb      	ldr	r3, [r7, #28]
 8000e46:	08da      	lsrs	r2, r3, #3
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	3208      	adds	r2, #8
 8000e4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e50:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e52:	69fb      	ldr	r3, [r7, #28]
 8000e54:	f003 0307 	and.w	r3, r3, #7
 8000e58:	009b      	lsls	r3, r3, #2
 8000e5a:	220f      	movs	r2, #15
 8000e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e60:	43db      	mvns	r3, r3
 8000e62:	69ba      	ldr	r2, [r7, #24]
 8000e64:	4013      	ands	r3, r2
 8000e66:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	691a      	ldr	r2, [r3, #16]
 8000e6c:	69fb      	ldr	r3, [r7, #28]
 8000e6e:	f003 0307 	and.w	r3, r3, #7
 8000e72:	009b      	lsls	r3, r3, #2
 8000e74:	fa02 f303 	lsl.w	r3, r2, r3
 8000e78:	69ba      	ldr	r2, [r7, #24]
 8000e7a:	4313      	orrs	r3, r2
 8000e7c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e7e:	69fb      	ldr	r3, [r7, #28]
 8000e80:	08da      	lsrs	r2, r3, #3
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	3208      	adds	r2, #8
 8000e86:	69b9      	ldr	r1, [r7, #24]
 8000e88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e92:	69fb      	ldr	r3, [r7, #28]
 8000e94:	005b      	lsls	r3, r3, #1
 8000e96:	2203      	movs	r2, #3
 8000e98:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9c:	43db      	mvns	r3, r3
 8000e9e:	69ba      	ldr	r2, [r7, #24]
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	f003 0203 	and.w	r2, r3, #3
 8000eac:	69fb      	ldr	r3, [r7, #28]
 8000eae:	005b      	lsls	r3, r3, #1
 8000eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb4:	69ba      	ldr	r2, [r7, #24]
 8000eb6:	4313      	orrs	r3, r2
 8000eb8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	69ba      	ldr	r2, [r7, #24]
 8000ebe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	685b      	ldr	r3, [r3, #4]
 8000ec4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	f000 80a2 	beq.w	8001012 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ece:	2300      	movs	r3, #0
 8000ed0:	60fb      	str	r3, [r7, #12]
 8000ed2:	4b57      	ldr	r3, [pc, #348]	; (8001030 <HAL_GPIO_Init+0x2e8>)
 8000ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ed6:	4a56      	ldr	r2, [pc, #344]	; (8001030 <HAL_GPIO_Init+0x2e8>)
 8000ed8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000edc:	6453      	str	r3, [r2, #68]	; 0x44
 8000ede:	4b54      	ldr	r3, [pc, #336]	; (8001030 <HAL_GPIO_Init+0x2e8>)
 8000ee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ee2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ee6:	60fb      	str	r3, [r7, #12]
 8000ee8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000eea:	4a52      	ldr	r2, [pc, #328]	; (8001034 <HAL_GPIO_Init+0x2ec>)
 8000eec:	69fb      	ldr	r3, [r7, #28]
 8000eee:	089b      	lsrs	r3, r3, #2
 8000ef0:	3302      	adds	r3, #2
 8000ef2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ef6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ef8:	69fb      	ldr	r3, [r7, #28]
 8000efa:	f003 0303 	and.w	r3, r3, #3
 8000efe:	009b      	lsls	r3, r3, #2
 8000f00:	220f      	movs	r2, #15
 8000f02:	fa02 f303 	lsl.w	r3, r2, r3
 8000f06:	43db      	mvns	r3, r3
 8000f08:	69ba      	ldr	r2, [r7, #24]
 8000f0a:	4013      	ands	r3, r2
 8000f0c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	4a49      	ldr	r2, [pc, #292]	; (8001038 <HAL_GPIO_Init+0x2f0>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d019      	beq.n	8000f4a <HAL_GPIO_Init+0x202>
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	4a48      	ldr	r2, [pc, #288]	; (800103c <HAL_GPIO_Init+0x2f4>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d013      	beq.n	8000f46 <HAL_GPIO_Init+0x1fe>
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	4a47      	ldr	r2, [pc, #284]	; (8001040 <HAL_GPIO_Init+0x2f8>)
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d00d      	beq.n	8000f42 <HAL_GPIO_Init+0x1fa>
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	4a46      	ldr	r2, [pc, #280]	; (8001044 <HAL_GPIO_Init+0x2fc>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d007      	beq.n	8000f3e <HAL_GPIO_Init+0x1f6>
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	4a45      	ldr	r2, [pc, #276]	; (8001048 <HAL_GPIO_Init+0x300>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d101      	bne.n	8000f3a <HAL_GPIO_Init+0x1f2>
 8000f36:	2304      	movs	r3, #4
 8000f38:	e008      	b.n	8000f4c <HAL_GPIO_Init+0x204>
 8000f3a:	2307      	movs	r3, #7
 8000f3c:	e006      	b.n	8000f4c <HAL_GPIO_Init+0x204>
 8000f3e:	2303      	movs	r3, #3
 8000f40:	e004      	b.n	8000f4c <HAL_GPIO_Init+0x204>
 8000f42:	2302      	movs	r3, #2
 8000f44:	e002      	b.n	8000f4c <HAL_GPIO_Init+0x204>
 8000f46:	2301      	movs	r3, #1
 8000f48:	e000      	b.n	8000f4c <HAL_GPIO_Init+0x204>
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	69fa      	ldr	r2, [r7, #28]
 8000f4e:	f002 0203 	and.w	r2, r2, #3
 8000f52:	0092      	lsls	r2, r2, #2
 8000f54:	4093      	lsls	r3, r2
 8000f56:	69ba      	ldr	r2, [r7, #24]
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f5c:	4935      	ldr	r1, [pc, #212]	; (8001034 <HAL_GPIO_Init+0x2ec>)
 8000f5e:	69fb      	ldr	r3, [r7, #28]
 8000f60:	089b      	lsrs	r3, r3, #2
 8000f62:	3302      	adds	r3, #2
 8000f64:	69ba      	ldr	r2, [r7, #24]
 8000f66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f6a:	4b38      	ldr	r3, [pc, #224]	; (800104c <HAL_GPIO_Init+0x304>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f70:	693b      	ldr	r3, [r7, #16]
 8000f72:	43db      	mvns	r3, r3
 8000f74:	69ba      	ldr	r2, [r7, #24]
 8000f76:	4013      	ands	r3, r2
 8000f78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d003      	beq.n	8000f8e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000f86:	69ba      	ldr	r2, [r7, #24]
 8000f88:	693b      	ldr	r3, [r7, #16]
 8000f8a:	4313      	orrs	r3, r2
 8000f8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f8e:	4a2f      	ldr	r2, [pc, #188]	; (800104c <HAL_GPIO_Init+0x304>)
 8000f90:	69bb      	ldr	r3, [r7, #24]
 8000f92:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000f94:	4b2d      	ldr	r3, [pc, #180]	; (800104c <HAL_GPIO_Init+0x304>)
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f9a:	693b      	ldr	r3, [r7, #16]
 8000f9c:	43db      	mvns	r3, r3
 8000f9e:	69ba      	ldr	r2, [r7, #24]
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d003      	beq.n	8000fb8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000fb0:	69ba      	ldr	r2, [r7, #24]
 8000fb2:	693b      	ldr	r3, [r7, #16]
 8000fb4:	4313      	orrs	r3, r2
 8000fb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000fb8:	4a24      	ldr	r2, [pc, #144]	; (800104c <HAL_GPIO_Init+0x304>)
 8000fba:	69bb      	ldr	r3, [r7, #24]
 8000fbc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fbe:	4b23      	ldr	r3, [pc, #140]	; (800104c <HAL_GPIO_Init+0x304>)
 8000fc0:	689b      	ldr	r3, [r3, #8]
 8000fc2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fc4:	693b      	ldr	r3, [r7, #16]
 8000fc6:	43db      	mvns	r3, r3
 8000fc8:	69ba      	ldr	r2, [r7, #24]
 8000fca:	4013      	ands	r3, r2
 8000fcc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d003      	beq.n	8000fe2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000fda:	69ba      	ldr	r2, [r7, #24]
 8000fdc:	693b      	ldr	r3, [r7, #16]
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000fe2:	4a1a      	ldr	r2, [pc, #104]	; (800104c <HAL_GPIO_Init+0x304>)
 8000fe4:	69bb      	ldr	r3, [r7, #24]
 8000fe6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000fe8:	4b18      	ldr	r3, [pc, #96]	; (800104c <HAL_GPIO_Init+0x304>)
 8000fea:	68db      	ldr	r3, [r3, #12]
 8000fec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fee:	693b      	ldr	r3, [r7, #16]
 8000ff0:	43db      	mvns	r3, r3
 8000ff2:	69ba      	ldr	r2, [r7, #24]
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001000:	2b00      	cmp	r3, #0
 8001002:	d003      	beq.n	800100c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001004:	69ba      	ldr	r2, [r7, #24]
 8001006:	693b      	ldr	r3, [r7, #16]
 8001008:	4313      	orrs	r3, r2
 800100a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800100c:	4a0f      	ldr	r2, [pc, #60]	; (800104c <HAL_GPIO_Init+0x304>)
 800100e:	69bb      	ldr	r3, [r7, #24]
 8001010:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001012:	69fb      	ldr	r3, [r7, #28]
 8001014:	3301      	adds	r3, #1
 8001016:	61fb      	str	r3, [r7, #28]
 8001018:	69fb      	ldr	r3, [r7, #28]
 800101a:	2b0f      	cmp	r3, #15
 800101c:	f67f aea2 	bls.w	8000d64 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001020:	bf00      	nop
 8001022:	bf00      	nop
 8001024:	3724      	adds	r7, #36	; 0x24
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop
 8001030:	40023800 	.word	0x40023800
 8001034:	40013800 	.word	0x40013800
 8001038:	40020000 	.word	0x40020000
 800103c:	40020400 	.word	0x40020400
 8001040:	40020800 	.word	0x40020800
 8001044:	40020c00 	.word	0x40020c00
 8001048:	40021000 	.word	0x40021000
 800104c:	40013c00 	.word	0x40013c00

08001050 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001050:	b480      	push	{r7}
 8001052:	b083      	sub	sp, #12
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
 8001058:	460b      	mov	r3, r1
 800105a:	807b      	strh	r3, [r7, #2]
 800105c:	4613      	mov	r3, r2
 800105e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001060:	787b      	ldrb	r3, [r7, #1]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d003      	beq.n	800106e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001066:	887a      	ldrh	r2, [r7, #2]
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800106c:	e003      	b.n	8001076 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800106e:	887b      	ldrh	r3, [r7, #2]
 8001070:	041a      	lsls	r2, r3, #16
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	619a      	str	r2, [r3, #24]
}
 8001076:	bf00      	nop
 8001078:	370c      	adds	r7, #12
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr

08001082 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001082:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001084:	b08f      	sub	sp, #60	; 0x3c
 8001086:	af0a      	add	r7, sp, #40	; 0x28
 8001088:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d101      	bne.n	8001094 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001090:	2301      	movs	r3, #1
 8001092:	e10f      	b.n	80012b4 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80010a0:	b2db      	uxtb	r3, r3
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d106      	bne.n	80010b4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	2200      	movs	r2, #0
 80010aa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80010ae:	6878      	ldr	r0, [r7, #4]
 80010b0:	f005 fb40 	bl	8006734 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	2203      	movs	r2, #3
 80010b8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80010bc:	68bb      	ldr	r3, [r7, #8]
 80010be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d102      	bne.n	80010ce <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	2200      	movs	r2, #0
 80010cc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4618      	mov	r0, r3
 80010d4:	f002 fa89 	bl	80035ea <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	603b      	str	r3, [r7, #0]
 80010de:	687e      	ldr	r6, [r7, #4]
 80010e0:	466d      	mov	r5, sp
 80010e2:	f106 0410 	add.w	r4, r6, #16
 80010e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010ee:	e894 0003 	ldmia.w	r4, {r0, r1}
 80010f2:	e885 0003 	stmia.w	r5, {r0, r1}
 80010f6:	1d33      	adds	r3, r6, #4
 80010f8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80010fa:	6838      	ldr	r0, [r7, #0]
 80010fc:	f002 f960 	bl	80033c0 <USB_CoreInit>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d005      	beq.n	8001112 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	2202      	movs	r2, #2
 800110a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800110e:	2301      	movs	r3, #1
 8001110:	e0d0      	b.n	80012b4 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	2100      	movs	r1, #0
 8001118:	4618      	mov	r0, r3
 800111a:	f002 fa77 	bl	800360c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800111e:	2300      	movs	r3, #0
 8001120:	73fb      	strb	r3, [r7, #15]
 8001122:	e04a      	b.n	80011ba <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001124:	7bfa      	ldrb	r2, [r7, #15]
 8001126:	6879      	ldr	r1, [r7, #4]
 8001128:	4613      	mov	r3, r2
 800112a:	00db      	lsls	r3, r3, #3
 800112c:	1a9b      	subs	r3, r3, r2
 800112e:	009b      	lsls	r3, r3, #2
 8001130:	440b      	add	r3, r1
 8001132:	333d      	adds	r3, #61	; 0x3d
 8001134:	2201      	movs	r2, #1
 8001136:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001138:	7bfa      	ldrb	r2, [r7, #15]
 800113a:	6879      	ldr	r1, [r7, #4]
 800113c:	4613      	mov	r3, r2
 800113e:	00db      	lsls	r3, r3, #3
 8001140:	1a9b      	subs	r3, r3, r2
 8001142:	009b      	lsls	r3, r3, #2
 8001144:	440b      	add	r3, r1
 8001146:	333c      	adds	r3, #60	; 0x3c
 8001148:	7bfa      	ldrb	r2, [r7, #15]
 800114a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800114c:	7bfa      	ldrb	r2, [r7, #15]
 800114e:	7bfb      	ldrb	r3, [r7, #15]
 8001150:	b298      	uxth	r0, r3
 8001152:	6879      	ldr	r1, [r7, #4]
 8001154:	4613      	mov	r3, r2
 8001156:	00db      	lsls	r3, r3, #3
 8001158:	1a9b      	subs	r3, r3, r2
 800115a:	009b      	lsls	r3, r3, #2
 800115c:	440b      	add	r3, r1
 800115e:	3342      	adds	r3, #66	; 0x42
 8001160:	4602      	mov	r2, r0
 8001162:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001164:	7bfa      	ldrb	r2, [r7, #15]
 8001166:	6879      	ldr	r1, [r7, #4]
 8001168:	4613      	mov	r3, r2
 800116a:	00db      	lsls	r3, r3, #3
 800116c:	1a9b      	subs	r3, r3, r2
 800116e:	009b      	lsls	r3, r3, #2
 8001170:	440b      	add	r3, r1
 8001172:	333f      	adds	r3, #63	; 0x3f
 8001174:	2200      	movs	r2, #0
 8001176:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001178:	7bfa      	ldrb	r2, [r7, #15]
 800117a:	6879      	ldr	r1, [r7, #4]
 800117c:	4613      	mov	r3, r2
 800117e:	00db      	lsls	r3, r3, #3
 8001180:	1a9b      	subs	r3, r3, r2
 8001182:	009b      	lsls	r3, r3, #2
 8001184:	440b      	add	r3, r1
 8001186:	3344      	adds	r3, #68	; 0x44
 8001188:	2200      	movs	r2, #0
 800118a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800118c:	7bfa      	ldrb	r2, [r7, #15]
 800118e:	6879      	ldr	r1, [r7, #4]
 8001190:	4613      	mov	r3, r2
 8001192:	00db      	lsls	r3, r3, #3
 8001194:	1a9b      	subs	r3, r3, r2
 8001196:	009b      	lsls	r3, r3, #2
 8001198:	440b      	add	r3, r1
 800119a:	3348      	adds	r3, #72	; 0x48
 800119c:	2200      	movs	r2, #0
 800119e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80011a0:	7bfa      	ldrb	r2, [r7, #15]
 80011a2:	6879      	ldr	r1, [r7, #4]
 80011a4:	4613      	mov	r3, r2
 80011a6:	00db      	lsls	r3, r3, #3
 80011a8:	1a9b      	subs	r3, r3, r2
 80011aa:	009b      	lsls	r3, r3, #2
 80011ac:	440b      	add	r3, r1
 80011ae:	3350      	adds	r3, #80	; 0x50
 80011b0:	2200      	movs	r2, #0
 80011b2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011b4:	7bfb      	ldrb	r3, [r7, #15]
 80011b6:	3301      	adds	r3, #1
 80011b8:	73fb      	strb	r3, [r7, #15]
 80011ba:	7bfa      	ldrb	r2, [r7, #15]
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	429a      	cmp	r2, r3
 80011c2:	d3af      	bcc.n	8001124 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011c4:	2300      	movs	r3, #0
 80011c6:	73fb      	strb	r3, [r7, #15]
 80011c8:	e044      	b.n	8001254 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80011ca:	7bfa      	ldrb	r2, [r7, #15]
 80011cc:	6879      	ldr	r1, [r7, #4]
 80011ce:	4613      	mov	r3, r2
 80011d0:	00db      	lsls	r3, r3, #3
 80011d2:	1a9b      	subs	r3, r3, r2
 80011d4:	009b      	lsls	r3, r3, #2
 80011d6:	440b      	add	r3, r1
 80011d8:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80011dc:	2200      	movs	r2, #0
 80011de:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80011e0:	7bfa      	ldrb	r2, [r7, #15]
 80011e2:	6879      	ldr	r1, [r7, #4]
 80011e4:	4613      	mov	r3, r2
 80011e6:	00db      	lsls	r3, r3, #3
 80011e8:	1a9b      	subs	r3, r3, r2
 80011ea:	009b      	lsls	r3, r3, #2
 80011ec:	440b      	add	r3, r1
 80011ee:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80011f2:	7bfa      	ldrb	r2, [r7, #15]
 80011f4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80011f6:	7bfa      	ldrb	r2, [r7, #15]
 80011f8:	6879      	ldr	r1, [r7, #4]
 80011fa:	4613      	mov	r3, r2
 80011fc:	00db      	lsls	r3, r3, #3
 80011fe:	1a9b      	subs	r3, r3, r2
 8001200:	009b      	lsls	r3, r3, #2
 8001202:	440b      	add	r3, r1
 8001204:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001208:	2200      	movs	r2, #0
 800120a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800120c:	7bfa      	ldrb	r2, [r7, #15]
 800120e:	6879      	ldr	r1, [r7, #4]
 8001210:	4613      	mov	r3, r2
 8001212:	00db      	lsls	r3, r3, #3
 8001214:	1a9b      	subs	r3, r3, r2
 8001216:	009b      	lsls	r3, r3, #2
 8001218:	440b      	add	r3, r1
 800121a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800121e:	2200      	movs	r2, #0
 8001220:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001222:	7bfa      	ldrb	r2, [r7, #15]
 8001224:	6879      	ldr	r1, [r7, #4]
 8001226:	4613      	mov	r3, r2
 8001228:	00db      	lsls	r3, r3, #3
 800122a:	1a9b      	subs	r3, r3, r2
 800122c:	009b      	lsls	r3, r3, #2
 800122e:	440b      	add	r3, r1
 8001230:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001234:	2200      	movs	r2, #0
 8001236:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001238:	7bfa      	ldrb	r2, [r7, #15]
 800123a:	6879      	ldr	r1, [r7, #4]
 800123c:	4613      	mov	r3, r2
 800123e:	00db      	lsls	r3, r3, #3
 8001240:	1a9b      	subs	r3, r3, r2
 8001242:	009b      	lsls	r3, r3, #2
 8001244:	440b      	add	r3, r1
 8001246:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800124a:	2200      	movs	r2, #0
 800124c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800124e:	7bfb      	ldrb	r3, [r7, #15]
 8001250:	3301      	adds	r3, #1
 8001252:	73fb      	strb	r3, [r7, #15]
 8001254:	7bfa      	ldrb	r2, [r7, #15]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	429a      	cmp	r2, r3
 800125c:	d3b5      	bcc.n	80011ca <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	603b      	str	r3, [r7, #0]
 8001264:	687e      	ldr	r6, [r7, #4]
 8001266:	466d      	mov	r5, sp
 8001268:	f106 0410 	add.w	r4, r6, #16
 800126c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800126e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001270:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001272:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001274:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001278:	e885 0003 	stmia.w	r5, {r0, r1}
 800127c:	1d33      	adds	r3, r6, #4
 800127e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001280:	6838      	ldr	r0, [r7, #0]
 8001282:	f002 fa0f 	bl	80036a4 <USB_DevInit>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d005      	beq.n	8001298 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	2202      	movs	r2, #2
 8001290:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001294:	2301      	movs	r3, #1
 8001296:	e00d      	b.n	80012b4 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2200      	movs	r2, #0
 800129c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	2201      	movs	r2, #1
 80012a4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4618      	mov	r0, r3
 80012ae:	f003 fa8b 	bl	80047c8 <USB_DevDisconnect>

  return HAL_OK;
 80012b2:	2300      	movs	r3, #0
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	3714      	adds	r7, #20
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bdf0      	pop	{r4, r5, r6, r7, pc}

080012bc <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b084      	sub	sp, #16
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80012d0:	2b01      	cmp	r3, #1
 80012d2:	d101      	bne.n	80012d8 <HAL_PCD_Start+0x1c>
 80012d4:	2302      	movs	r3, #2
 80012d6:	e020      	b.n	800131a <HAL_PCD_Start+0x5e>
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	2201      	movs	r2, #1
 80012dc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012e4:	2b01      	cmp	r3, #1
 80012e6:	d109      	bne.n	80012fc <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80012ec:	2b01      	cmp	r3, #1
 80012ee:	d005      	beq.n	80012fc <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012f4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4618      	mov	r0, r3
 8001302:	f002 f961 	bl	80035c8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4618      	mov	r0, r3
 800130c:	f003 fa3b 	bl	8004786 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	2200      	movs	r2, #0
 8001314:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001318:	2300      	movs	r3, #0
}
 800131a:	4618      	mov	r0, r3
 800131c:	3710      	adds	r7, #16
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}

08001322 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001322:	b590      	push	{r4, r7, lr}
 8001324:	b08d      	sub	sp, #52	; 0x34
 8001326:	af00      	add	r7, sp, #0
 8001328:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001330:	6a3b      	ldr	r3, [r7, #32]
 8001332:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4618      	mov	r0, r3
 800133a:	f003 faf9 	bl	8004930 <USB_GetMode>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	f040 839d 	bne.w	8001a80 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4618      	mov	r0, r3
 800134c:	f003 fa5d 	bl	800480a <USB_ReadInterrupts>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	f000 8393 	beq.w	8001a7e <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4618      	mov	r0, r3
 800135e:	f003 fa54 	bl	800480a <USB_ReadInterrupts>
 8001362:	4603      	mov	r3, r0
 8001364:	f003 0302 	and.w	r3, r3, #2
 8001368:	2b02      	cmp	r3, #2
 800136a:	d107      	bne.n	800137c <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	695a      	ldr	r2, [r3, #20]
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f002 0202 	and.w	r2, r2, #2
 800137a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4618      	mov	r0, r3
 8001382:	f003 fa42 	bl	800480a <USB_ReadInterrupts>
 8001386:	4603      	mov	r3, r0
 8001388:	f003 0310 	and.w	r3, r3, #16
 800138c:	2b10      	cmp	r3, #16
 800138e:	d161      	bne.n	8001454 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	699a      	ldr	r2, [r3, #24]
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f022 0210 	bic.w	r2, r2, #16
 800139e:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80013a0:	6a3b      	ldr	r3, [r7, #32]
 80013a2:	6a1b      	ldr	r3, [r3, #32]
 80013a4:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80013a6:	69bb      	ldr	r3, [r7, #24]
 80013a8:	f003 020f 	and.w	r2, r3, #15
 80013ac:	4613      	mov	r3, r2
 80013ae:	00db      	lsls	r3, r3, #3
 80013b0:	1a9b      	subs	r3, r3, r2
 80013b2:	009b      	lsls	r3, r3, #2
 80013b4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80013b8:	687a      	ldr	r2, [r7, #4]
 80013ba:	4413      	add	r3, r2
 80013bc:	3304      	adds	r3, #4
 80013be:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80013c0:	69bb      	ldr	r3, [r7, #24]
 80013c2:	0c5b      	lsrs	r3, r3, #17
 80013c4:	f003 030f 	and.w	r3, r3, #15
 80013c8:	2b02      	cmp	r3, #2
 80013ca:	d124      	bne.n	8001416 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80013cc:	69ba      	ldr	r2, [r7, #24]
 80013ce:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80013d2:	4013      	ands	r3, r2
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d035      	beq.n	8001444 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80013dc:	69bb      	ldr	r3, [r7, #24]
 80013de:	091b      	lsrs	r3, r3, #4
 80013e0:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80013e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80013e6:	b29b      	uxth	r3, r3
 80013e8:	461a      	mov	r2, r3
 80013ea:	6a38      	ldr	r0, [r7, #32]
 80013ec:	f003 f879 	bl	80044e2 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	68da      	ldr	r2, [r3, #12]
 80013f4:	69bb      	ldr	r3, [r7, #24]
 80013f6:	091b      	lsrs	r3, r3, #4
 80013f8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80013fc:	441a      	add	r2, r3
 80013fe:	697b      	ldr	r3, [r7, #20]
 8001400:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001402:	697b      	ldr	r3, [r7, #20]
 8001404:	699a      	ldr	r2, [r3, #24]
 8001406:	69bb      	ldr	r3, [r7, #24]
 8001408:	091b      	lsrs	r3, r3, #4
 800140a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800140e:	441a      	add	r2, r3
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	619a      	str	r2, [r3, #24]
 8001414:	e016      	b.n	8001444 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8001416:	69bb      	ldr	r3, [r7, #24]
 8001418:	0c5b      	lsrs	r3, r3, #17
 800141a:	f003 030f 	and.w	r3, r3, #15
 800141e:	2b06      	cmp	r3, #6
 8001420:	d110      	bne.n	8001444 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001428:	2208      	movs	r2, #8
 800142a:	4619      	mov	r1, r3
 800142c:	6a38      	ldr	r0, [r7, #32]
 800142e:	f003 f858 	bl	80044e2 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	699a      	ldr	r2, [r3, #24]
 8001436:	69bb      	ldr	r3, [r7, #24]
 8001438:	091b      	lsrs	r3, r3, #4
 800143a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800143e:	441a      	add	r2, r3
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	699a      	ldr	r2, [r3, #24]
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f042 0210 	orr.w	r2, r2, #16
 8001452:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4618      	mov	r0, r3
 800145a:	f003 f9d6 	bl	800480a <USB_ReadInterrupts>
 800145e:	4603      	mov	r3, r0
 8001460:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001464:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001468:	d16e      	bne.n	8001548 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800146a:	2300      	movs	r3, #0
 800146c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4618      	mov	r0, r3
 8001474:	f003 f9dc 	bl	8004830 <USB_ReadDevAllOutEpInterrupt>
 8001478:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800147a:	e062      	b.n	8001542 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800147c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800147e:	f003 0301 	and.w	r3, r3, #1
 8001482:	2b00      	cmp	r3, #0
 8001484:	d057      	beq.n	8001536 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800148c:	b2d2      	uxtb	r2, r2
 800148e:	4611      	mov	r1, r2
 8001490:	4618      	mov	r0, r3
 8001492:	f003 fa01 	bl	8004898 <USB_ReadDevOutEPInterrupt>
 8001496:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001498:	693b      	ldr	r3, [r7, #16]
 800149a:	f003 0301 	and.w	r3, r3, #1
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d00c      	beq.n	80014bc <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80014a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a4:	015a      	lsls	r2, r3, #5
 80014a6:	69fb      	ldr	r3, [r7, #28]
 80014a8:	4413      	add	r3, r2
 80014aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80014ae:	461a      	mov	r2, r3
 80014b0:	2301      	movs	r3, #1
 80014b2:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80014b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80014b6:	6878      	ldr	r0, [r7, #4]
 80014b8:	f000 fdb0 	bl	800201c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80014bc:	693b      	ldr	r3, [r7, #16]
 80014be:	f003 0308 	and.w	r3, r3, #8
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d00c      	beq.n	80014e0 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80014c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c8:	015a      	lsls	r2, r3, #5
 80014ca:	69fb      	ldr	r3, [r7, #28]
 80014cc:	4413      	add	r3, r2
 80014ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80014d2:	461a      	mov	r2, r3
 80014d4:	2308      	movs	r3, #8
 80014d6:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80014d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80014da:	6878      	ldr	r0, [r7, #4]
 80014dc:	f000 feaa 	bl	8002234 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80014e0:	693b      	ldr	r3, [r7, #16]
 80014e2:	f003 0310 	and.w	r3, r3, #16
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d008      	beq.n	80014fc <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80014ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ec:	015a      	lsls	r2, r3, #5
 80014ee:	69fb      	ldr	r3, [r7, #28]
 80014f0:	4413      	add	r3, r2
 80014f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80014f6:	461a      	mov	r2, r3
 80014f8:	2310      	movs	r3, #16
 80014fa:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80014fc:	693b      	ldr	r3, [r7, #16]
 80014fe:	f003 0320 	and.w	r3, r3, #32
 8001502:	2b00      	cmp	r3, #0
 8001504:	d008      	beq.n	8001518 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001508:	015a      	lsls	r2, r3, #5
 800150a:	69fb      	ldr	r3, [r7, #28]
 800150c:	4413      	add	r3, r2
 800150e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001512:	461a      	mov	r2, r3
 8001514:	2320      	movs	r3, #32
 8001516:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001518:	693b      	ldr	r3, [r7, #16]
 800151a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800151e:	2b00      	cmp	r3, #0
 8001520:	d009      	beq.n	8001536 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001524:	015a      	lsls	r2, r3, #5
 8001526:	69fb      	ldr	r3, [r7, #28]
 8001528:	4413      	add	r3, r2
 800152a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800152e:	461a      	mov	r2, r3
 8001530:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001534:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001538:	3301      	adds	r3, #1
 800153a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800153c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800153e:	085b      	lsrs	r3, r3, #1
 8001540:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001544:	2b00      	cmp	r3, #0
 8001546:	d199      	bne.n	800147c <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4618      	mov	r0, r3
 800154e:	f003 f95c 	bl	800480a <USB_ReadInterrupts>
 8001552:	4603      	mov	r3, r0
 8001554:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001558:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800155c:	f040 80c0 	bne.w	80016e0 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4618      	mov	r0, r3
 8001566:	f003 f97d 	bl	8004864 <USB_ReadDevAllInEpInterrupt>
 800156a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800156c:	2300      	movs	r3, #0
 800156e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001570:	e0b2      	b.n	80016d8 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001574:	f003 0301 	and.w	r3, r3, #1
 8001578:	2b00      	cmp	r3, #0
 800157a:	f000 80a7 	beq.w	80016cc <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001584:	b2d2      	uxtb	r2, r2
 8001586:	4611      	mov	r1, r2
 8001588:	4618      	mov	r0, r3
 800158a:	f003 f9a3 	bl	80048d4 <USB_ReadDevInEPInterrupt>
 800158e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001590:	693b      	ldr	r3, [r7, #16]
 8001592:	f003 0301 	and.w	r3, r3, #1
 8001596:	2b00      	cmp	r3, #0
 8001598:	d057      	beq.n	800164a <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800159a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800159c:	f003 030f 	and.w	r3, r3, #15
 80015a0:	2201      	movs	r2, #1
 80015a2:	fa02 f303 	lsl.w	r3, r2, r3
 80015a6:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80015a8:	69fb      	ldr	r3, [r7, #28]
 80015aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80015ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	43db      	mvns	r3, r3
 80015b4:	69f9      	ldr	r1, [r7, #28]
 80015b6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80015ba:	4013      	ands	r3, r2
 80015bc:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80015be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c0:	015a      	lsls	r2, r3, #5
 80015c2:	69fb      	ldr	r3, [r7, #28]
 80015c4:	4413      	add	r3, r2
 80015c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80015ca:	461a      	mov	r2, r3
 80015cc:	2301      	movs	r3, #1
 80015ce:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	691b      	ldr	r3, [r3, #16]
 80015d4:	2b01      	cmp	r3, #1
 80015d6:	d132      	bne.n	800163e <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80015d8:	6879      	ldr	r1, [r7, #4]
 80015da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015dc:	4613      	mov	r3, r2
 80015de:	00db      	lsls	r3, r3, #3
 80015e0:	1a9b      	subs	r3, r3, r2
 80015e2:	009b      	lsls	r3, r3, #2
 80015e4:	440b      	add	r3, r1
 80015e6:	3348      	adds	r3, #72	; 0x48
 80015e8:	6819      	ldr	r1, [r3, #0]
 80015ea:	6878      	ldr	r0, [r7, #4]
 80015ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015ee:	4613      	mov	r3, r2
 80015f0:	00db      	lsls	r3, r3, #3
 80015f2:	1a9b      	subs	r3, r3, r2
 80015f4:	009b      	lsls	r3, r3, #2
 80015f6:	4403      	add	r3, r0
 80015f8:	3344      	adds	r3, #68	; 0x44
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4419      	add	r1, r3
 80015fe:	6878      	ldr	r0, [r7, #4]
 8001600:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001602:	4613      	mov	r3, r2
 8001604:	00db      	lsls	r3, r3, #3
 8001606:	1a9b      	subs	r3, r3, r2
 8001608:	009b      	lsls	r3, r3, #2
 800160a:	4403      	add	r3, r0
 800160c:	3348      	adds	r3, #72	; 0x48
 800160e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001612:	2b00      	cmp	r3, #0
 8001614:	d113      	bne.n	800163e <HAL_PCD_IRQHandler+0x31c>
 8001616:	6879      	ldr	r1, [r7, #4]
 8001618:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800161a:	4613      	mov	r3, r2
 800161c:	00db      	lsls	r3, r3, #3
 800161e:	1a9b      	subs	r3, r3, r2
 8001620:	009b      	lsls	r3, r3, #2
 8001622:	440b      	add	r3, r1
 8001624:	3350      	adds	r3, #80	; 0x50
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d108      	bne.n	800163e <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6818      	ldr	r0, [r3, #0]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001636:	461a      	mov	r2, r3
 8001638:	2101      	movs	r1, #1
 800163a:	f003 f9ab 	bl	8004994 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800163e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001640:	b2db      	uxtb	r3, r3
 8001642:	4619      	mov	r1, r3
 8001644:	6878      	ldr	r0, [r7, #4]
 8001646:	f005 f8f6 	bl	8006836 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	f003 0308 	and.w	r3, r3, #8
 8001650:	2b00      	cmp	r3, #0
 8001652:	d008      	beq.n	8001666 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001656:	015a      	lsls	r2, r3, #5
 8001658:	69fb      	ldr	r3, [r7, #28]
 800165a:	4413      	add	r3, r2
 800165c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001660:	461a      	mov	r2, r3
 8001662:	2308      	movs	r3, #8
 8001664:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	f003 0310 	and.w	r3, r3, #16
 800166c:	2b00      	cmp	r3, #0
 800166e:	d008      	beq.n	8001682 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001672:	015a      	lsls	r2, r3, #5
 8001674:	69fb      	ldr	r3, [r7, #28]
 8001676:	4413      	add	r3, r2
 8001678:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800167c:	461a      	mov	r2, r3
 800167e:	2310      	movs	r3, #16
 8001680:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001688:	2b00      	cmp	r3, #0
 800168a:	d008      	beq.n	800169e <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800168c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800168e:	015a      	lsls	r2, r3, #5
 8001690:	69fb      	ldr	r3, [r7, #28]
 8001692:	4413      	add	r3, r2
 8001694:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001698:	461a      	mov	r2, r3
 800169a:	2340      	movs	r3, #64	; 0x40
 800169c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	f003 0302 	and.w	r3, r3, #2
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d008      	beq.n	80016ba <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80016a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016aa:	015a      	lsls	r2, r3, #5
 80016ac:	69fb      	ldr	r3, [r7, #28]
 80016ae:	4413      	add	r3, r2
 80016b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80016b4:	461a      	mov	r2, r3
 80016b6:	2302      	movs	r3, #2
 80016b8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80016ba:	693b      	ldr	r3, [r7, #16]
 80016bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d003      	beq.n	80016cc <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80016c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80016c6:	6878      	ldr	r0, [r7, #4]
 80016c8:	f000 fc1b 	bl	8001f02 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80016cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ce:	3301      	adds	r3, #1
 80016d0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80016d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016d4:	085b      	lsrs	r3, r3, #1
 80016d6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80016d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016da:	2b00      	cmp	r3, #0
 80016dc:	f47f af49 	bne.w	8001572 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4618      	mov	r0, r3
 80016e6:	f003 f890 	bl	800480a <USB_ReadInterrupts>
 80016ea:	4603      	mov	r3, r0
 80016ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80016f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80016f4:	d122      	bne.n	800173c <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80016f6:	69fb      	ldr	r3, [r7, #28]
 80016f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	69fa      	ldr	r2, [r7, #28]
 8001700:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001704:	f023 0301 	bic.w	r3, r3, #1
 8001708:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8001710:	2b01      	cmp	r3, #1
 8001712:	d108      	bne.n	8001726 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2200      	movs	r2, #0
 8001718:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800171c:	2100      	movs	r1, #0
 800171e:	6878      	ldr	r0, [r7, #4]
 8001720:	f000 fe26 	bl	8002370 <HAL_PCDEx_LPM_Callback>
 8001724:	e002      	b.n	800172c <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001726:	6878      	ldr	r0, [r7, #4]
 8001728:	f005 f8f2 	bl	8006910 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	695a      	ldr	r2, [r3, #20]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800173a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4618      	mov	r0, r3
 8001742:	f003 f862 	bl	800480a <USB_ReadInterrupts>
 8001746:	4603      	mov	r3, r0
 8001748:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800174c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001750:	d112      	bne.n	8001778 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001752:	69fb      	ldr	r3, [r7, #28]
 8001754:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001758:	689b      	ldr	r3, [r3, #8]
 800175a:	f003 0301 	and.w	r3, r3, #1
 800175e:	2b01      	cmp	r3, #1
 8001760:	d102      	bne.n	8001768 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001762:	6878      	ldr	r0, [r7, #4]
 8001764:	f005 f8ae 	bl	80068c4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	695a      	ldr	r2, [r3, #20]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001776:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4618      	mov	r0, r3
 800177e:	f003 f844 	bl	800480a <USB_ReadInterrupts>
 8001782:	4603      	mov	r3, r0
 8001784:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001788:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800178c:	f040 80c7 	bne.w	800191e <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001790:	69fb      	ldr	r3, [r7, #28]
 8001792:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	69fa      	ldr	r2, [r7, #28]
 800179a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800179e:	f023 0301 	bic.w	r3, r3, #1
 80017a2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	2110      	movs	r1, #16
 80017aa:	4618      	mov	r0, r3
 80017ac:	f002 f8de 	bl	800396c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017b0:	2300      	movs	r3, #0
 80017b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80017b4:	e056      	b.n	8001864 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80017b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017b8:	015a      	lsls	r2, r3, #5
 80017ba:	69fb      	ldr	r3, [r7, #28]
 80017bc:	4413      	add	r3, r2
 80017be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80017c2:	461a      	mov	r2, r3
 80017c4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80017c8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80017ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017cc:	015a      	lsls	r2, r3, #5
 80017ce:	69fb      	ldr	r3, [r7, #28]
 80017d0:	4413      	add	r3, r2
 80017d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80017da:	0151      	lsls	r1, r2, #5
 80017dc:	69fa      	ldr	r2, [r7, #28]
 80017de:	440a      	add	r2, r1
 80017e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80017e4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80017e8:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80017ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017ec:	015a      	lsls	r2, r3, #5
 80017ee:	69fb      	ldr	r3, [r7, #28]
 80017f0:	4413      	add	r3, r2
 80017f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80017fa:	0151      	lsls	r1, r2, #5
 80017fc:	69fa      	ldr	r2, [r7, #28]
 80017fe:	440a      	add	r2, r1
 8001800:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001804:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001808:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800180a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800180c:	015a      	lsls	r2, r3, #5
 800180e:	69fb      	ldr	r3, [r7, #28]
 8001810:	4413      	add	r3, r2
 8001812:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001816:	461a      	mov	r2, r3
 8001818:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800181c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800181e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001820:	015a      	lsls	r2, r3, #5
 8001822:	69fb      	ldr	r3, [r7, #28]
 8001824:	4413      	add	r3, r2
 8001826:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800182e:	0151      	lsls	r1, r2, #5
 8001830:	69fa      	ldr	r2, [r7, #28]
 8001832:	440a      	add	r2, r1
 8001834:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001838:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800183c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800183e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001840:	015a      	lsls	r2, r3, #5
 8001842:	69fb      	ldr	r3, [r7, #28]
 8001844:	4413      	add	r3, r2
 8001846:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800184e:	0151      	lsls	r1, r2, #5
 8001850:	69fa      	ldr	r2, [r7, #28]
 8001852:	440a      	add	r2, r1
 8001854:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001858:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800185c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800185e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001860:	3301      	adds	r3, #1
 8001862:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800186a:	429a      	cmp	r2, r3
 800186c:	d3a3      	bcc.n	80017b6 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800186e:	69fb      	ldr	r3, [r7, #28]
 8001870:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001874:	69db      	ldr	r3, [r3, #28]
 8001876:	69fa      	ldr	r2, [r7, #28]
 8001878:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800187c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001880:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001886:	2b00      	cmp	r3, #0
 8001888:	d016      	beq.n	80018b8 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800188a:	69fb      	ldr	r3, [r7, #28]
 800188c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001890:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001894:	69fa      	ldr	r2, [r7, #28]
 8001896:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800189a:	f043 030b 	orr.w	r3, r3, #11
 800189e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80018a2:	69fb      	ldr	r3, [r7, #28]
 80018a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018aa:	69fa      	ldr	r2, [r7, #28]
 80018ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80018b0:	f043 030b 	orr.w	r3, r3, #11
 80018b4:	6453      	str	r3, [r2, #68]	; 0x44
 80018b6:	e015      	b.n	80018e4 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80018b8:	69fb      	ldr	r3, [r7, #28]
 80018ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018be:	695b      	ldr	r3, [r3, #20]
 80018c0:	69fa      	ldr	r2, [r7, #28]
 80018c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80018c6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80018ca:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80018ce:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80018d0:	69fb      	ldr	r3, [r7, #28]
 80018d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018d6:	691b      	ldr	r3, [r3, #16]
 80018d8:	69fa      	ldr	r2, [r7, #28]
 80018da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80018de:	f043 030b 	orr.w	r3, r3, #11
 80018e2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80018e4:	69fb      	ldr	r3, [r7, #28]
 80018e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	69fa      	ldr	r2, [r7, #28]
 80018ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80018f2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80018f6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6818      	ldr	r0, [r3, #0]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	691b      	ldr	r3, [r3, #16]
 8001900:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001908:	461a      	mov	r2, r3
 800190a:	f003 f843 	bl	8004994 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	695a      	ldr	r2, [r3, #20]
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800191c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4618      	mov	r0, r3
 8001924:	f002 ff71 	bl	800480a <USB_ReadInterrupts>
 8001928:	4603      	mov	r3, r0
 800192a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800192e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001932:	d124      	bne.n	800197e <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4618      	mov	r0, r3
 800193a:	f003 f807 	bl	800494c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4618      	mov	r0, r3
 8001944:	f002 f86f 	bl	8003a26 <USB_GetDevSpeed>
 8001948:	4603      	mov	r3, r0
 800194a:	461a      	mov	r2, r3
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681c      	ldr	r4, [r3, #0]
 8001954:	f001 f93c 	bl	8002bd0 <HAL_RCC_GetHCLKFreq>
 8001958:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800195e:	b2db      	uxtb	r3, r3
 8001960:	461a      	mov	r2, r3
 8001962:	4620      	mov	r0, r4
 8001964:	f001 fd8e 	bl	8003484 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001968:	6878      	ldr	r0, [r7, #4]
 800196a:	f004 ff8c 	bl	8006886 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	695a      	ldr	r2, [r3, #20]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800197c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4618      	mov	r0, r3
 8001984:	f002 ff41 	bl	800480a <USB_ReadInterrupts>
 8001988:	4603      	mov	r3, r0
 800198a:	f003 0308 	and.w	r3, r3, #8
 800198e:	2b08      	cmp	r3, #8
 8001990:	d10a      	bne.n	80019a8 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001992:	6878      	ldr	r0, [r7, #4]
 8001994:	f004 ff69 	bl	800686a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	695a      	ldr	r2, [r3, #20]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f002 0208 	and.w	r2, r2, #8
 80019a6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4618      	mov	r0, r3
 80019ae:	f002 ff2c 	bl	800480a <USB_ReadInterrupts>
 80019b2:	4603      	mov	r3, r0
 80019b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80019bc:	d10f      	bne.n	80019de <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80019be:	2300      	movs	r3, #0
 80019c0:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80019c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c4:	b2db      	uxtb	r3, r3
 80019c6:	4619      	mov	r1, r3
 80019c8:	6878      	ldr	r0, [r7, #4]
 80019ca:	f004 ffc1 	bl	8006950 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	695a      	ldr	r2, [r3, #20]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80019dc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4618      	mov	r0, r3
 80019e4:	f002 ff11 	bl	800480a <USB_ReadInterrupts>
 80019e8:	4603      	mov	r3, r0
 80019ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019ee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80019f2:	d10f      	bne.n	8001a14 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80019f4:	2300      	movs	r3, #0
 80019f6:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80019f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019fa:	b2db      	uxtb	r3, r3
 80019fc:	4619      	mov	r1, r3
 80019fe:	6878      	ldr	r0, [r7, #4]
 8001a00:	f004 ff94 	bl	800692c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	695a      	ldr	r2, [r3, #20]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001a12:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f002 fef6 	bl	800480a <USB_ReadInterrupts>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001a24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a28:	d10a      	bne.n	8001a40 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001a2a:	6878      	ldr	r0, [r7, #4]
 8001a2c:	f004 ffa2 	bl	8006974 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	695a      	ldr	r2, [r3, #20]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001a3e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4618      	mov	r0, r3
 8001a46:	f002 fee0 	bl	800480a <USB_ReadInterrupts>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	f003 0304 	and.w	r3, r3, #4
 8001a50:	2b04      	cmp	r3, #4
 8001a52:	d115      	bne.n	8001a80 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001a5c:	69bb      	ldr	r3, [r7, #24]
 8001a5e:	f003 0304 	and.w	r3, r3, #4
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d002      	beq.n	8001a6c <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001a66:	6878      	ldr	r0, [r7, #4]
 8001a68:	f004 ff92 	bl	8006990 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	6859      	ldr	r1, [r3, #4]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	69ba      	ldr	r2, [r7, #24]
 8001a78:	430a      	orrs	r2, r1
 8001a7a:	605a      	str	r2, [r3, #4]
 8001a7c:	e000      	b.n	8001a80 <HAL_PCD_IRQHandler+0x75e>
      return;
 8001a7e:	bf00      	nop
    }
  }
}
 8001a80:	3734      	adds	r7, #52	; 0x34
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd90      	pop	{r4, r7, pc}

08001a86 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001a86:	b580      	push	{r7, lr}
 8001a88:	b082      	sub	sp, #8
 8001a8a:	af00      	add	r7, sp, #0
 8001a8c:	6078      	str	r0, [r7, #4]
 8001a8e:	460b      	mov	r3, r1
 8001a90:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001a98:	2b01      	cmp	r3, #1
 8001a9a:	d101      	bne.n	8001aa0 <HAL_PCD_SetAddress+0x1a>
 8001a9c:	2302      	movs	r3, #2
 8001a9e:	e013      	b.n	8001ac8 <HAL_PCD_SetAddress+0x42>
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	78fa      	ldrb	r2, [r7, #3]
 8001aac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	78fa      	ldrb	r2, [r7, #3]
 8001ab6:	4611      	mov	r1, r2
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f002 fe3e 	bl	800473a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001ac6:	2300      	movs	r3, #0
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	3708      	adds	r7, #8
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}

08001ad0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b084      	sub	sp, #16
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
 8001ad8:	4608      	mov	r0, r1
 8001ada:	4611      	mov	r1, r2
 8001adc:	461a      	mov	r2, r3
 8001ade:	4603      	mov	r3, r0
 8001ae0:	70fb      	strb	r3, [r7, #3]
 8001ae2:	460b      	mov	r3, r1
 8001ae4:	803b      	strh	r3, [r7, #0]
 8001ae6:	4613      	mov	r3, r2
 8001ae8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001aea:	2300      	movs	r3, #0
 8001aec:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001aee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	da0f      	bge.n	8001b16 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001af6:	78fb      	ldrb	r3, [r7, #3]
 8001af8:	f003 020f 	and.w	r2, r3, #15
 8001afc:	4613      	mov	r3, r2
 8001afe:	00db      	lsls	r3, r3, #3
 8001b00:	1a9b      	subs	r3, r3, r2
 8001b02:	009b      	lsls	r3, r3, #2
 8001b04:	3338      	adds	r3, #56	; 0x38
 8001b06:	687a      	ldr	r2, [r7, #4]
 8001b08:	4413      	add	r3, r2
 8001b0a:	3304      	adds	r3, #4
 8001b0c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	2201      	movs	r2, #1
 8001b12:	705a      	strb	r2, [r3, #1]
 8001b14:	e00f      	b.n	8001b36 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b16:	78fb      	ldrb	r3, [r7, #3]
 8001b18:	f003 020f 	and.w	r2, r3, #15
 8001b1c:	4613      	mov	r3, r2
 8001b1e:	00db      	lsls	r3, r3, #3
 8001b20:	1a9b      	subs	r3, r3, r2
 8001b22:	009b      	lsls	r3, r3, #2
 8001b24:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001b28:	687a      	ldr	r2, [r7, #4]
 8001b2a:	4413      	add	r3, r2
 8001b2c:	3304      	adds	r3, #4
 8001b2e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	2200      	movs	r2, #0
 8001b34:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001b36:	78fb      	ldrb	r3, [r7, #3]
 8001b38:	f003 030f 	and.w	r3, r3, #15
 8001b3c:	b2da      	uxtb	r2, r3
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001b42:	883a      	ldrh	r2, [r7, #0]
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	78ba      	ldrb	r2, [r7, #2]
 8001b4c:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	785b      	ldrb	r3, [r3, #1]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d004      	beq.n	8001b60 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	781b      	ldrb	r3, [r3, #0]
 8001b5a:	b29a      	uxth	r2, r3
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001b60:	78bb      	ldrb	r3, [r7, #2]
 8001b62:	2b02      	cmp	r3, #2
 8001b64:	d102      	bne.n	8001b6c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	2200      	movs	r2, #0
 8001b6a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001b72:	2b01      	cmp	r3, #1
 8001b74:	d101      	bne.n	8001b7a <HAL_PCD_EP_Open+0xaa>
 8001b76:	2302      	movs	r3, #2
 8001b78:	e00e      	b.n	8001b98 <HAL_PCD_EP_Open+0xc8>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	68f9      	ldr	r1, [r7, #12]
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f001 ff71 	bl	8003a70 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2200      	movs	r2, #0
 8001b92:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8001b96:	7afb      	ldrb	r3, [r7, #11]
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	3710      	adds	r7, #16
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}

08001ba0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b084      	sub	sp, #16
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
 8001ba8:	460b      	mov	r3, r1
 8001baa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001bac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	da0f      	bge.n	8001bd4 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001bb4:	78fb      	ldrb	r3, [r7, #3]
 8001bb6:	f003 020f 	and.w	r2, r3, #15
 8001bba:	4613      	mov	r3, r2
 8001bbc:	00db      	lsls	r3, r3, #3
 8001bbe:	1a9b      	subs	r3, r3, r2
 8001bc0:	009b      	lsls	r3, r3, #2
 8001bc2:	3338      	adds	r3, #56	; 0x38
 8001bc4:	687a      	ldr	r2, [r7, #4]
 8001bc6:	4413      	add	r3, r2
 8001bc8:	3304      	adds	r3, #4
 8001bca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	2201      	movs	r2, #1
 8001bd0:	705a      	strb	r2, [r3, #1]
 8001bd2:	e00f      	b.n	8001bf4 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001bd4:	78fb      	ldrb	r3, [r7, #3]
 8001bd6:	f003 020f 	and.w	r2, r3, #15
 8001bda:	4613      	mov	r3, r2
 8001bdc:	00db      	lsls	r3, r3, #3
 8001bde:	1a9b      	subs	r3, r3, r2
 8001be0:	009b      	lsls	r3, r3, #2
 8001be2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001be6:	687a      	ldr	r2, [r7, #4]
 8001be8:	4413      	add	r3, r2
 8001bea:	3304      	adds	r3, #4
 8001bec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001bf4:	78fb      	ldrb	r3, [r7, #3]
 8001bf6:	f003 030f 	and.w	r3, r3, #15
 8001bfa:	b2da      	uxtb	r2, r3
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001c06:	2b01      	cmp	r3, #1
 8001c08:	d101      	bne.n	8001c0e <HAL_PCD_EP_Close+0x6e>
 8001c0a:	2302      	movs	r3, #2
 8001c0c:	e00e      	b.n	8001c2c <HAL_PCD_EP_Close+0x8c>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2201      	movs	r2, #1
 8001c12:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	68f9      	ldr	r1, [r7, #12]
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f001 ffaf 	bl	8003b80 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2200      	movs	r2, #0
 8001c26:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001c2a:	2300      	movs	r3, #0
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	3710      	adds	r7, #16
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}

08001c34 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b086      	sub	sp, #24
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	60f8      	str	r0, [r7, #12]
 8001c3c:	607a      	str	r2, [r7, #4]
 8001c3e:	603b      	str	r3, [r7, #0]
 8001c40:	460b      	mov	r3, r1
 8001c42:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c44:	7afb      	ldrb	r3, [r7, #11]
 8001c46:	f003 020f 	and.w	r2, r3, #15
 8001c4a:	4613      	mov	r3, r2
 8001c4c:	00db      	lsls	r3, r3, #3
 8001c4e:	1a9b      	subs	r3, r3, r2
 8001c50:	009b      	lsls	r3, r3, #2
 8001c52:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001c56:	68fa      	ldr	r2, [r7, #12]
 8001c58:	4413      	add	r3, r2
 8001c5a:	3304      	adds	r3, #4
 8001c5c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	687a      	ldr	r2, [r7, #4]
 8001c62:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	683a      	ldr	r2, [r7, #0]
 8001c68:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	2200      	movs	r2, #0
 8001c74:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c76:	7afb      	ldrb	r3, [r7, #11]
 8001c78:	f003 030f 	and.w	r3, r3, #15
 8001c7c:	b2da      	uxtb	r2, r3
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	691b      	ldr	r3, [r3, #16]
 8001c86:	2b01      	cmp	r3, #1
 8001c88:	d102      	bne.n	8001c90 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001c8a:	687a      	ldr	r2, [r7, #4]
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001c90:	7afb      	ldrb	r3, [r7, #11]
 8001c92:	f003 030f 	and.w	r3, r3, #15
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d109      	bne.n	8001cae <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	6818      	ldr	r0, [r3, #0]
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	691b      	ldr	r3, [r3, #16]
 8001ca2:	b2db      	uxtb	r3, r3
 8001ca4:	461a      	mov	r2, r3
 8001ca6:	6979      	ldr	r1, [r7, #20]
 8001ca8:	f002 fa8a 	bl	80041c0 <USB_EP0StartXfer>
 8001cac:	e008      	b.n	8001cc0 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	6818      	ldr	r0, [r3, #0]
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	691b      	ldr	r3, [r3, #16]
 8001cb6:	b2db      	uxtb	r3, r3
 8001cb8:	461a      	mov	r2, r3
 8001cba:	6979      	ldr	r1, [r7, #20]
 8001cbc:	f002 f83c 	bl	8003d38 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001cc0:	2300      	movs	r3, #0
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	3718      	adds	r7, #24
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}

08001cca <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001cca:	b480      	push	{r7}
 8001ccc:	b083      	sub	sp, #12
 8001cce:	af00      	add	r7, sp, #0
 8001cd0:	6078      	str	r0, [r7, #4]
 8001cd2:	460b      	mov	r3, r1
 8001cd4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001cd6:	78fb      	ldrb	r3, [r7, #3]
 8001cd8:	f003 020f 	and.w	r2, r3, #15
 8001cdc:	6879      	ldr	r1, [r7, #4]
 8001cde:	4613      	mov	r3, r2
 8001ce0:	00db      	lsls	r3, r3, #3
 8001ce2:	1a9b      	subs	r3, r3, r2
 8001ce4:	009b      	lsls	r3, r3, #2
 8001ce6:	440b      	add	r3, r1
 8001ce8:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001cec:	681b      	ldr	r3, [r3, #0]
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	370c      	adds	r7, #12
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr

08001cfa <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001cfa:	b580      	push	{r7, lr}
 8001cfc:	b086      	sub	sp, #24
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	60f8      	str	r0, [r7, #12]
 8001d02:	607a      	str	r2, [r7, #4]
 8001d04:	603b      	str	r3, [r7, #0]
 8001d06:	460b      	mov	r3, r1
 8001d08:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d0a:	7afb      	ldrb	r3, [r7, #11]
 8001d0c:	f003 020f 	and.w	r2, r3, #15
 8001d10:	4613      	mov	r3, r2
 8001d12:	00db      	lsls	r3, r3, #3
 8001d14:	1a9b      	subs	r3, r3, r2
 8001d16:	009b      	lsls	r3, r3, #2
 8001d18:	3338      	adds	r3, #56	; 0x38
 8001d1a:	68fa      	ldr	r2, [r7, #12]
 8001d1c:	4413      	add	r3, r2
 8001d1e:	3304      	adds	r3, #4
 8001d20:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	687a      	ldr	r2, [r7, #4]
 8001d26:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	683a      	ldr	r2, [r7, #0]
 8001d2c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	2200      	movs	r2, #0
 8001d32:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	2201      	movs	r2, #1
 8001d38:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d3a:	7afb      	ldrb	r3, [r7, #11]
 8001d3c:	f003 030f 	and.w	r3, r3, #15
 8001d40:	b2da      	uxtb	r2, r3
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	691b      	ldr	r3, [r3, #16]
 8001d4a:	2b01      	cmp	r3, #1
 8001d4c:	d102      	bne.n	8001d54 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001d4e:	687a      	ldr	r2, [r7, #4]
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001d54:	7afb      	ldrb	r3, [r7, #11]
 8001d56:	f003 030f 	and.w	r3, r3, #15
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d109      	bne.n	8001d72 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	6818      	ldr	r0, [r3, #0]
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	691b      	ldr	r3, [r3, #16]
 8001d66:	b2db      	uxtb	r3, r3
 8001d68:	461a      	mov	r2, r3
 8001d6a:	6979      	ldr	r1, [r7, #20]
 8001d6c:	f002 fa28 	bl	80041c0 <USB_EP0StartXfer>
 8001d70:	e008      	b.n	8001d84 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	6818      	ldr	r0, [r3, #0]
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	691b      	ldr	r3, [r3, #16]
 8001d7a:	b2db      	uxtb	r3, r3
 8001d7c:	461a      	mov	r2, r3
 8001d7e:	6979      	ldr	r1, [r7, #20]
 8001d80:	f001 ffda 	bl	8003d38 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001d84:	2300      	movs	r3, #0
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	3718      	adds	r7, #24
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}

08001d8e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d8e:	b580      	push	{r7, lr}
 8001d90:	b084      	sub	sp, #16
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	6078      	str	r0, [r7, #4]
 8001d96:	460b      	mov	r3, r1
 8001d98:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001d9a:	78fb      	ldrb	r3, [r7, #3]
 8001d9c:	f003 020f 	and.w	r2, r3, #15
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	429a      	cmp	r2, r3
 8001da6:	d901      	bls.n	8001dac <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001da8:	2301      	movs	r3, #1
 8001daa:	e050      	b.n	8001e4e <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001dac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	da0f      	bge.n	8001dd4 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001db4:	78fb      	ldrb	r3, [r7, #3]
 8001db6:	f003 020f 	and.w	r2, r3, #15
 8001dba:	4613      	mov	r3, r2
 8001dbc:	00db      	lsls	r3, r3, #3
 8001dbe:	1a9b      	subs	r3, r3, r2
 8001dc0:	009b      	lsls	r3, r3, #2
 8001dc2:	3338      	adds	r3, #56	; 0x38
 8001dc4:	687a      	ldr	r2, [r7, #4]
 8001dc6:	4413      	add	r3, r2
 8001dc8:	3304      	adds	r3, #4
 8001dca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	2201      	movs	r2, #1
 8001dd0:	705a      	strb	r2, [r3, #1]
 8001dd2:	e00d      	b.n	8001df0 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001dd4:	78fa      	ldrb	r2, [r7, #3]
 8001dd6:	4613      	mov	r3, r2
 8001dd8:	00db      	lsls	r3, r3, #3
 8001dda:	1a9b      	subs	r3, r3, r2
 8001ddc:	009b      	lsls	r3, r3, #2
 8001dde:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001de2:	687a      	ldr	r2, [r7, #4]
 8001de4:	4413      	add	r3, r2
 8001de6:	3304      	adds	r3, #4
 8001de8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	2200      	movs	r2, #0
 8001dee:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	2201      	movs	r2, #1
 8001df4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001df6:	78fb      	ldrb	r3, [r7, #3]
 8001df8:	f003 030f 	and.w	r3, r3, #15
 8001dfc:	b2da      	uxtb	r2, r3
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001e08:	2b01      	cmp	r3, #1
 8001e0a:	d101      	bne.n	8001e10 <HAL_PCD_EP_SetStall+0x82>
 8001e0c:	2302      	movs	r3, #2
 8001e0e:	e01e      	b.n	8001e4e <HAL_PCD_EP_SetStall+0xc0>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2201      	movs	r2, #1
 8001e14:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	68f9      	ldr	r1, [r7, #12]
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f002 fbb7 	bl	8004592 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001e24:	78fb      	ldrb	r3, [r7, #3]
 8001e26:	f003 030f 	and.w	r3, r3, #15
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d10a      	bne.n	8001e44 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6818      	ldr	r0, [r3, #0]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	691b      	ldr	r3, [r3, #16]
 8001e36:	b2d9      	uxtb	r1, r3
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001e3e:	461a      	mov	r2, r3
 8001e40:	f002 fda8 	bl	8004994 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2200      	movs	r2, #0
 8001e48:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001e4c:	2300      	movs	r3, #0
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	3710      	adds	r7, #16
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}

08001e56 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e56:	b580      	push	{r7, lr}
 8001e58:	b084      	sub	sp, #16
 8001e5a:	af00      	add	r7, sp, #0
 8001e5c:	6078      	str	r0, [r7, #4]
 8001e5e:	460b      	mov	r3, r1
 8001e60:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001e62:	78fb      	ldrb	r3, [r7, #3]
 8001e64:	f003 020f 	and.w	r2, r3, #15
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	d901      	bls.n	8001e74 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001e70:	2301      	movs	r3, #1
 8001e72:	e042      	b.n	8001efa <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001e74:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	da0f      	bge.n	8001e9c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e7c:	78fb      	ldrb	r3, [r7, #3]
 8001e7e:	f003 020f 	and.w	r2, r3, #15
 8001e82:	4613      	mov	r3, r2
 8001e84:	00db      	lsls	r3, r3, #3
 8001e86:	1a9b      	subs	r3, r3, r2
 8001e88:	009b      	lsls	r3, r3, #2
 8001e8a:	3338      	adds	r3, #56	; 0x38
 8001e8c:	687a      	ldr	r2, [r7, #4]
 8001e8e:	4413      	add	r3, r2
 8001e90:	3304      	adds	r3, #4
 8001e92:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	2201      	movs	r2, #1
 8001e98:	705a      	strb	r2, [r3, #1]
 8001e9a:	e00f      	b.n	8001ebc <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e9c:	78fb      	ldrb	r3, [r7, #3]
 8001e9e:	f003 020f 	and.w	r2, r3, #15
 8001ea2:	4613      	mov	r3, r2
 8001ea4:	00db      	lsls	r3, r3, #3
 8001ea6:	1a9b      	subs	r3, r3, r2
 8001ea8:	009b      	lsls	r3, r3, #2
 8001eaa:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001eae:	687a      	ldr	r2, [r7, #4]
 8001eb0:	4413      	add	r3, r2
 8001eb2:	3304      	adds	r3, #4
 8001eb4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	2200      	movs	r2, #0
 8001eba:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ec2:	78fb      	ldrb	r3, [r7, #3]
 8001ec4:	f003 030f 	and.w	r3, r3, #15
 8001ec8:	b2da      	uxtb	r2, r3
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001ed4:	2b01      	cmp	r3, #1
 8001ed6:	d101      	bne.n	8001edc <HAL_PCD_EP_ClrStall+0x86>
 8001ed8:	2302      	movs	r3, #2
 8001eda:	e00e      	b.n	8001efa <HAL_PCD_EP_ClrStall+0xa4>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2201      	movs	r2, #1
 8001ee0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	68f9      	ldr	r1, [r7, #12]
 8001eea:	4618      	mov	r0, r3
 8001eec:	f002 fbbf 	bl	800466e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001ef8:	2300      	movs	r3, #0
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	3710      	adds	r7, #16
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}

08001f02 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001f02:	b580      	push	{r7, lr}
 8001f04:	b08a      	sub	sp, #40	; 0x28
 8001f06:	af02      	add	r7, sp, #8
 8001f08:	6078      	str	r0, [r7, #4]
 8001f0a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8001f16:	683a      	ldr	r2, [r7, #0]
 8001f18:	4613      	mov	r3, r2
 8001f1a:	00db      	lsls	r3, r3, #3
 8001f1c:	1a9b      	subs	r3, r3, r2
 8001f1e:	009b      	lsls	r3, r3, #2
 8001f20:	3338      	adds	r3, #56	; 0x38
 8001f22:	687a      	ldr	r2, [r7, #4]
 8001f24:	4413      	add	r3, r2
 8001f26:	3304      	adds	r3, #4
 8001f28:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	699a      	ldr	r2, [r3, #24]
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	695b      	ldr	r3, [r3, #20]
 8001f32:	429a      	cmp	r2, r3
 8001f34:	d901      	bls.n	8001f3a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	e06c      	b.n	8002014 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	695a      	ldr	r2, [r3, #20]
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	699b      	ldr	r3, [r3, #24]
 8001f42:	1ad3      	subs	r3, r2, r3
 8001f44:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	689b      	ldr	r3, [r3, #8]
 8001f4a:	69fa      	ldr	r2, [r7, #28]
 8001f4c:	429a      	cmp	r2, r3
 8001f4e:	d902      	bls.n	8001f56 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8001f56:	69fb      	ldr	r3, [r7, #28]
 8001f58:	3303      	adds	r3, #3
 8001f5a:	089b      	lsrs	r3, r3, #2
 8001f5c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001f5e:	e02b      	b.n	8001fb8 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	695a      	ldr	r2, [r3, #20]
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	699b      	ldr	r3, [r3, #24]
 8001f68:	1ad3      	subs	r3, r2, r3
 8001f6a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	69fa      	ldr	r2, [r7, #28]
 8001f72:	429a      	cmp	r2, r3
 8001f74:	d902      	bls.n	8001f7c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	689b      	ldr	r3, [r3, #8]
 8001f7a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8001f7c:	69fb      	ldr	r3, [r7, #28]
 8001f7e:	3303      	adds	r3, #3
 8001f80:	089b      	lsrs	r3, r3, #2
 8001f82:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	68d9      	ldr	r1, [r3, #12]
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	b2da      	uxtb	r2, r3
 8001f8c:	69fb      	ldr	r3, [r7, #28]
 8001f8e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001f94:	b2db      	uxtb	r3, r3
 8001f96:	9300      	str	r3, [sp, #0]
 8001f98:	4603      	mov	r3, r0
 8001f9a:	6978      	ldr	r0, [r7, #20]
 8001f9c:	f002 fa63 	bl	8004466 <USB_WritePacket>

    ep->xfer_buff  += len;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	68da      	ldr	r2, [r3, #12]
 8001fa4:	69fb      	ldr	r3, [r7, #28]
 8001fa6:	441a      	add	r2, r3
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	699a      	ldr	r2, [r3, #24]
 8001fb0:	69fb      	ldr	r3, [r7, #28]
 8001fb2:	441a      	add	r2, r3
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	015a      	lsls	r2, r3, #5
 8001fbc:	693b      	ldr	r3, [r7, #16]
 8001fbe:	4413      	add	r3, r2
 8001fc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001fc4:	699b      	ldr	r3, [r3, #24]
 8001fc6:	b29b      	uxth	r3, r3
 8001fc8:	69ba      	ldr	r2, [r7, #24]
 8001fca:	429a      	cmp	r2, r3
 8001fcc:	d809      	bhi.n	8001fe2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	699a      	ldr	r2, [r3, #24]
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001fd6:	429a      	cmp	r2, r3
 8001fd8:	d203      	bcs.n	8001fe2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	695b      	ldr	r3, [r3, #20]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d1be      	bne.n	8001f60 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	695a      	ldr	r2, [r3, #20]
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	699b      	ldr	r3, [r3, #24]
 8001fea:	429a      	cmp	r2, r3
 8001fec:	d811      	bhi.n	8002012 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	f003 030f 	and.w	r3, r3, #15
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffa:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001ffc:	693b      	ldr	r3, [r7, #16]
 8001ffe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002002:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	43db      	mvns	r3, r3
 8002008:	6939      	ldr	r1, [r7, #16]
 800200a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800200e:	4013      	ands	r3, r2
 8002010:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002012:	2300      	movs	r3, #0
}
 8002014:	4618      	mov	r0, r3
 8002016:	3720      	adds	r7, #32
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}

0800201c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b086      	sub	sp, #24
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
 8002024:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	333c      	adds	r3, #60	; 0x3c
 8002034:	3304      	adds	r3, #4
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	015a      	lsls	r2, r3, #5
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	4413      	add	r3, r2
 8002042:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	691b      	ldr	r3, [r3, #16]
 800204e:	2b01      	cmp	r3, #1
 8002050:	f040 80a0 	bne.w	8002194 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	f003 0308 	and.w	r3, r3, #8
 800205a:	2b00      	cmp	r3, #0
 800205c:	d015      	beq.n	800208a <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	4a72      	ldr	r2, [pc, #456]	; (800222c <PCD_EP_OutXfrComplete_int+0x210>)
 8002062:	4293      	cmp	r3, r2
 8002064:	f240 80dd 	bls.w	8002222 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800206e:	2b00      	cmp	r3, #0
 8002070:	f000 80d7 	beq.w	8002222 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	015a      	lsls	r2, r3, #5
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	4413      	add	r3, r2
 800207c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002080:	461a      	mov	r2, r3
 8002082:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002086:	6093      	str	r3, [r2, #8]
 8002088:	e0cb      	b.n	8002222 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800208a:	68bb      	ldr	r3, [r7, #8]
 800208c:	f003 0320 	and.w	r3, r3, #32
 8002090:	2b00      	cmp	r3, #0
 8002092:	d009      	beq.n	80020a8 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	015a      	lsls	r2, r3, #5
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	4413      	add	r3, r2
 800209c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020a0:	461a      	mov	r2, r3
 80020a2:	2320      	movs	r3, #32
 80020a4:	6093      	str	r3, [r2, #8]
 80020a6:	e0bc      	b.n	8002222 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80020a8:	68bb      	ldr	r3, [r7, #8]
 80020aa:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	f040 80b7 	bne.w	8002222 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	4a5d      	ldr	r2, [pc, #372]	; (800222c <PCD_EP_OutXfrComplete_int+0x210>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d90f      	bls.n	80020dc <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d00a      	beq.n	80020dc <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	015a      	lsls	r2, r3, #5
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	4413      	add	r3, r2
 80020ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020d2:	461a      	mov	r2, r3
 80020d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80020d8:	6093      	str	r3, [r2, #8]
 80020da:	e0a2      	b.n	8002222 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80020dc:	6879      	ldr	r1, [r7, #4]
 80020de:	683a      	ldr	r2, [r7, #0]
 80020e0:	4613      	mov	r3, r2
 80020e2:	00db      	lsls	r3, r3, #3
 80020e4:	1a9b      	subs	r3, r3, r2
 80020e6:	009b      	lsls	r3, r3, #2
 80020e8:	440b      	add	r3, r1
 80020ea:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80020ee:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	0159      	lsls	r1, r3, #5
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	440b      	add	r3, r1
 80020f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020fc:	691b      	ldr	r3, [r3, #16]
 80020fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8002102:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8002104:	6878      	ldr	r0, [r7, #4]
 8002106:	683a      	ldr	r2, [r7, #0]
 8002108:	4613      	mov	r3, r2
 800210a:	00db      	lsls	r3, r3, #3
 800210c:	1a9b      	subs	r3, r3, r2
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	4403      	add	r3, r0
 8002112:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002116:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8002118:	6879      	ldr	r1, [r7, #4]
 800211a:	683a      	ldr	r2, [r7, #0]
 800211c:	4613      	mov	r3, r2
 800211e:	00db      	lsls	r3, r3, #3
 8002120:	1a9b      	subs	r3, r3, r2
 8002122:	009b      	lsls	r3, r3, #2
 8002124:	440b      	add	r3, r1
 8002126:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800212a:	6819      	ldr	r1, [r3, #0]
 800212c:	6878      	ldr	r0, [r7, #4]
 800212e:	683a      	ldr	r2, [r7, #0]
 8002130:	4613      	mov	r3, r2
 8002132:	00db      	lsls	r3, r3, #3
 8002134:	1a9b      	subs	r3, r3, r2
 8002136:	009b      	lsls	r3, r3, #2
 8002138:	4403      	add	r3, r0
 800213a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4419      	add	r1, r3
 8002142:	6878      	ldr	r0, [r7, #4]
 8002144:	683a      	ldr	r2, [r7, #0]
 8002146:	4613      	mov	r3, r2
 8002148:	00db      	lsls	r3, r3, #3
 800214a:	1a9b      	subs	r3, r3, r2
 800214c:	009b      	lsls	r3, r3, #2
 800214e:	4403      	add	r3, r0
 8002150:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002154:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d114      	bne.n	8002186 <PCD_EP_OutXfrComplete_int+0x16a>
 800215c:	6879      	ldr	r1, [r7, #4]
 800215e:	683a      	ldr	r2, [r7, #0]
 8002160:	4613      	mov	r3, r2
 8002162:	00db      	lsls	r3, r3, #3
 8002164:	1a9b      	subs	r3, r3, r2
 8002166:	009b      	lsls	r3, r3, #2
 8002168:	440b      	add	r3, r1
 800216a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d108      	bne.n	8002186 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6818      	ldr	r0, [r3, #0]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800217e:	461a      	mov	r2, r3
 8002180:	2101      	movs	r1, #1
 8002182:	f002 fc07 	bl	8004994 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	b2db      	uxtb	r3, r3
 800218a:	4619      	mov	r1, r3
 800218c:	6878      	ldr	r0, [r7, #4]
 800218e:	f004 fb37 	bl	8006800 <HAL_PCD_DataOutStageCallback>
 8002192:	e046      	b.n	8002222 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	4a26      	ldr	r2, [pc, #152]	; (8002230 <PCD_EP_OutXfrComplete_int+0x214>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d124      	bne.n	80021e6 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d00a      	beq.n	80021bc <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	015a      	lsls	r2, r3, #5
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	4413      	add	r3, r2
 80021ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021b2:	461a      	mov	r2, r3
 80021b4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80021b8:	6093      	str	r3, [r2, #8]
 80021ba:	e032      	b.n	8002222 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	f003 0320 	and.w	r3, r3, #32
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d008      	beq.n	80021d8 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	015a      	lsls	r2, r3, #5
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	4413      	add	r3, r2
 80021ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021d2:	461a      	mov	r2, r3
 80021d4:	2320      	movs	r3, #32
 80021d6:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	b2db      	uxtb	r3, r3
 80021dc:	4619      	mov	r1, r3
 80021de:	6878      	ldr	r0, [r7, #4]
 80021e0:	f004 fb0e 	bl	8006800 <HAL_PCD_DataOutStageCallback>
 80021e4:	e01d      	b.n	8002222 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d114      	bne.n	8002216 <PCD_EP_OutXfrComplete_int+0x1fa>
 80021ec:	6879      	ldr	r1, [r7, #4]
 80021ee:	683a      	ldr	r2, [r7, #0]
 80021f0:	4613      	mov	r3, r2
 80021f2:	00db      	lsls	r3, r3, #3
 80021f4:	1a9b      	subs	r3, r3, r2
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	440b      	add	r3, r1
 80021fa:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d108      	bne.n	8002216 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6818      	ldr	r0, [r3, #0]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800220e:	461a      	mov	r2, r3
 8002210:	2100      	movs	r1, #0
 8002212:	f002 fbbf 	bl	8004994 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	b2db      	uxtb	r3, r3
 800221a:	4619      	mov	r1, r3
 800221c:	6878      	ldr	r0, [r7, #4]
 800221e:	f004 faef 	bl	8006800 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002222:	2300      	movs	r3, #0
}
 8002224:	4618      	mov	r0, r3
 8002226:	3718      	adds	r7, #24
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}
 800222c:	4f54300a 	.word	0x4f54300a
 8002230:	4f54310a 	.word	0x4f54310a

08002234 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b086      	sub	sp, #24
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
 800223c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	333c      	adds	r3, #60	; 0x3c
 800224c:	3304      	adds	r3, #4
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	015a      	lsls	r2, r3, #5
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	4413      	add	r3, r2
 800225a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	4a15      	ldr	r2, [pc, #84]	; (80022bc <PCD_EP_OutSetupPacket_int+0x88>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d90e      	bls.n	8002288 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002270:	2b00      	cmp	r3, #0
 8002272:	d009      	beq.n	8002288 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	015a      	lsls	r2, r3, #5
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	4413      	add	r3, r2
 800227c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002280:	461a      	mov	r2, r3
 8002282:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002286:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002288:	6878      	ldr	r0, [r7, #4]
 800228a:	f004 faa7 	bl	80067dc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	4a0a      	ldr	r2, [pc, #40]	; (80022bc <PCD_EP_OutSetupPacket_int+0x88>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d90c      	bls.n	80022b0 <PCD_EP_OutSetupPacket_int+0x7c>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	691b      	ldr	r3, [r3, #16]
 800229a:	2b01      	cmp	r3, #1
 800229c:	d108      	bne.n	80022b0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6818      	ldr	r0, [r3, #0]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80022a8:	461a      	mov	r2, r3
 80022aa:	2101      	movs	r1, #1
 80022ac:	f002 fb72 	bl	8004994 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80022b0:	2300      	movs	r3, #0
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	3718      	adds	r7, #24
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	4f54300a 	.word	0x4f54300a

080022c0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b085      	sub	sp, #20
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
 80022c8:	460b      	mov	r3, r1
 80022ca:	70fb      	strb	r3, [r7, #3]
 80022cc:	4613      	mov	r3, r2
 80022ce:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80022d8:	78fb      	ldrb	r3, [r7, #3]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d107      	bne.n	80022ee <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80022de:	883b      	ldrh	r3, [r7, #0]
 80022e0:	0419      	lsls	r1, r3, #16
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	68ba      	ldr	r2, [r7, #8]
 80022e8:	430a      	orrs	r2, r1
 80022ea:	629a      	str	r2, [r3, #40]	; 0x28
 80022ec:	e028      	b.n	8002340 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022f4:	0c1b      	lsrs	r3, r3, #16
 80022f6:	68ba      	ldr	r2, [r7, #8]
 80022f8:	4413      	add	r3, r2
 80022fa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80022fc:	2300      	movs	r3, #0
 80022fe:	73fb      	strb	r3, [r7, #15]
 8002300:	e00d      	b.n	800231e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	7bfb      	ldrb	r3, [r7, #15]
 8002308:	3340      	adds	r3, #64	; 0x40
 800230a:	009b      	lsls	r3, r3, #2
 800230c:	4413      	add	r3, r2
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	0c1b      	lsrs	r3, r3, #16
 8002312:	68ba      	ldr	r2, [r7, #8]
 8002314:	4413      	add	r3, r2
 8002316:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002318:	7bfb      	ldrb	r3, [r7, #15]
 800231a:	3301      	adds	r3, #1
 800231c:	73fb      	strb	r3, [r7, #15]
 800231e:	7bfa      	ldrb	r2, [r7, #15]
 8002320:	78fb      	ldrb	r3, [r7, #3]
 8002322:	3b01      	subs	r3, #1
 8002324:	429a      	cmp	r2, r3
 8002326:	d3ec      	bcc.n	8002302 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002328:	883b      	ldrh	r3, [r7, #0]
 800232a:	0418      	lsls	r0, r3, #16
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6819      	ldr	r1, [r3, #0]
 8002330:	78fb      	ldrb	r3, [r7, #3]
 8002332:	3b01      	subs	r3, #1
 8002334:	68ba      	ldr	r2, [r7, #8]
 8002336:	4302      	orrs	r2, r0
 8002338:	3340      	adds	r3, #64	; 0x40
 800233a:	009b      	lsls	r3, r3, #2
 800233c:	440b      	add	r3, r1
 800233e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002340:	2300      	movs	r3, #0
}
 8002342:	4618      	mov	r0, r3
 8002344:	3714      	adds	r7, #20
 8002346:	46bd      	mov	sp, r7
 8002348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234c:	4770      	bx	lr

0800234e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800234e:	b480      	push	{r7}
 8002350:	b083      	sub	sp, #12
 8002352:	af00      	add	r7, sp, #0
 8002354:	6078      	str	r0, [r7, #4]
 8002356:	460b      	mov	r3, r1
 8002358:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	887a      	ldrh	r2, [r7, #2]
 8002360:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002362:	2300      	movs	r3, #0
}
 8002364:	4618      	mov	r0, r3
 8002366:	370c      	adds	r7, #12
 8002368:	46bd      	mov	sp, r7
 800236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236e:	4770      	bx	lr

08002370 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002370:	b480      	push	{r7}
 8002372:	b083      	sub	sp, #12
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
 8002378:	460b      	mov	r3, r1
 800237a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800237c:	bf00      	nop
 800237e:	370c      	adds	r7, #12
 8002380:	46bd      	mov	sp, r7
 8002382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002386:	4770      	bx	lr

08002388 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b086      	sub	sp, #24
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d101      	bne.n	800239a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	e267      	b.n	800286a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f003 0301 	and.w	r3, r3, #1
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d075      	beq.n	8002492 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80023a6:	4b88      	ldr	r3, [pc, #544]	; (80025c8 <HAL_RCC_OscConfig+0x240>)
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	f003 030c 	and.w	r3, r3, #12
 80023ae:	2b04      	cmp	r3, #4
 80023b0:	d00c      	beq.n	80023cc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023b2:	4b85      	ldr	r3, [pc, #532]	; (80025c8 <HAL_RCC_OscConfig+0x240>)
 80023b4:	689b      	ldr	r3, [r3, #8]
 80023b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80023ba:	2b08      	cmp	r3, #8
 80023bc:	d112      	bne.n	80023e4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023be:	4b82      	ldr	r3, [pc, #520]	; (80025c8 <HAL_RCC_OscConfig+0x240>)
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80023ca:	d10b      	bne.n	80023e4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023cc:	4b7e      	ldr	r3, [pc, #504]	; (80025c8 <HAL_RCC_OscConfig+0x240>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d05b      	beq.n	8002490 <HAL_RCC_OscConfig+0x108>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d157      	bne.n	8002490 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80023e0:	2301      	movs	r3, #1
 80023e2:	e242      	b.n	800286a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023ec:	d106      	bne.n	80023fc <HAL_RCC_OscConfig+0x74>
 80023ee:	4b76      	ldr	r3, [pc, #472]	; (80025c8 <HAL_RCC_OscConfig+0x240>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a75      	ldr	r2, [pc, #468]	; (80025c8 <HAL_RCC_OscConfig+0x240>)
 80023f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023f8:	6013      	str	r3, [r2, #0]
 80023fa:	e01d      	b.n	8002438 <HAL_RCC_OscConfig+0xb0>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002404:	d10c      	bne.n	8002420 <HAL_RCC_OscConfig+0x98>
 8002406:	4b70      	ldr	r3, [pc, #448]	; (80025c8 <HAL_RCC_OscConfig+0x240>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a6f      	ldr	r2, [pc, #444]	; (80025c8 <HAL_RCC_OscConfig+0x240>)
 800240c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002410:	6013      	str	r3, [r2, #0]
 8002412:	4b6d      	ldr	r3, [pc, #436]	; (80025c8 <HAL_RCC_OscConfig+0x240>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a6c      	ldr	r2, [pc, #432]	; (80025c8 <HAL_RCC_OscConfig+0x240>)
 8002418:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800241c:	6013      	str	r3, [r2, #0]
 800241e:	e00b      	b.n	8002438 <HAL_RCC_OscConfig+0xb0>
 8002420:	4b69      	ldr	r3, [pc, #420]	; (80025c8 <HAL_RCC_OscConfig+0x240>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a68      	ldr	r2, [pc, #416]	; (80025c8 <HAL_RCC_OscConfig+0x240>)
 8002426:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800242a:	6013      	str	r3, [r2, #0]
 800242c:	4b66      	ldr	r3, [pc, #408]	; (80025c8 <HAL_RCC_OscConfig+0x240>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a65      	ldr	r2, [pc, #404]	; (80025c8 <HAL_RCC_OscConfig+0x240>)
 8002432:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002436:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d013      	beq.n	8002468 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002440:	f7fe fb40 	bl	8000ac4 <HAL_GetTick>
 8002444:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002446:	e008      	b.n	800245a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002448:	f7fe fb3c 	bl	8000ac4 <HAL_GetTick>
 800244c:	4602      	mov	r2, r0
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	1ad3      	subs	r3, r2, r3
 8002452:	2b64      	cmp	r3, #100	; 0x64
 8002454:	d901      	bls.n	800245a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002456:	2303      	movs	r3, #3
 8002458:	e207      	b.n	800286a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800245a:	4b5b      	ldr	r3, [pc, #364]	; (80025c8 <HAL_RCC_OscConfig+0x240>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002462:	2b00      	cmp	r3, #0
 8002464:	d0f0      	beq.n	8002448 <HAL_RCC_OscConfig+0xc0>
 8002466:	e014      	b.n	8002492 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002468:	f7fe fb2c 	bl	8000ac4 <HAL_GetTick>
 800246c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800246e:	e008      	b.n	8002482 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002470:	f7fe fb28 	bl	8000ac4 <HAL_GetTick>
 8002474:	4602      	mov	r2, r0
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	1ad3      	subs	r3, r2, r3
 800247a:	2b64      	cmp	r3, #100	; 0x64
 800247c:	d901      	bls.n	8002482 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800247e:	2303      	movs	r3, #3
 8002480:	e1f3      	b.n	800286a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002482:	4b51      	ldr	r3, [pc, #324]	; (80025c8 <HAL_RCC_OscConfig+0x240>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800248a:	2b00      	cmp	r3, #0
 800248c:	d1f0      	bne.n	8002470 <HAL_RCC_OscConfig+0xe8>
 800248e:	e000      	b.n	8002492 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002490:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f003 0302 	and.w	r3, r3, #2
 800249a:	2b00      	cmp	r3, #0
 800249c:	d063      	beq.n	8002566 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800249e:	4b4a      	ldr	r3, [pc, #296]	; (80025c8 <HAL_RCC_OscConfig+0x240>)
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	f003 030c 	and.w	r3, r3, #12
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d00b      	beq.n	80024c2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024aa:	4b47      	ldr	r3, [pc, #284]	; (80025c8 <HAL_RCC_OscConfig+0x240>)
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80024b2:	2b08      	cmp	r3, #8
 80024b4:	d11c      	bne.n	80024f0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024b6:	4b44      	ldr	r3, [pc, #272]	; (80025c8 <HAL_RCC_OscConfig+0x240>)
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d116      	bne.n	80024f0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024c2:	4b41      	ldr	r3, [pc, #260]	; (80025c8 <HAL_RCC_OscConfig+0x240>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f003 0302 	and.w	r3, r3, #2
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d005      	beq.n	80024da <HAL_RCC_OscConfig+0x152>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	68db      	ldr	r3, [r3, #12]
 80024d2:	2b01      	cmp	r3, #1
 80024d4:	d001      	beq.n	80024da <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	e1c7      	b.n	800286a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024da:	4b3b      	ldr	r3, [pc, #236]	; (80025c8 <HAL_RCC_OscConfig+0x240>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	691b      	ldr	r3, [r3, #16]
 80024e6:	00db      	lsls	r3, r3, #3
 80024e8:	4937      	ldr	r1, [pc, #220]	; (80025c8 <HAL_RCC_OscConfig+0x240>)
 80024ea:	4313      	orrs	r3, r2
 80024ec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024ee:	e03a      	b.n	8002566 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	68db      	ldr	r3, [r3, #12]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d020      	beq.n	800253a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024f8:	4b34      	ldr	r3, [pc, #208]	; (80025cc <HAL_RCC_OscConfig+0x244>)
 80024fa:	2201      	movs	r2, #1
 80024fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024fe:	f7fe fae1 	bl	8000ac4 <HAL_GetTick>
 8002502:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002504:	e008      	b.n	8002518 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002506:	f7fe fadd 	bl	8000ac4 <HAL_GetTick>
 800250a:	4602      	mov	r2, r0
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	1ad3      	subs	r3, r2, r3
 8002510:	2b02      	cmp	r3, #2
 8002512:	d901      	bls.n	8002518 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002514:	2303      	movs	r3, #3
 8002516:	e1a8      	b.n	800286a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002518:	4b2b      	ldr	r3, [pc, #172]	; (80025c8 <HAL_RCC_OscConfig+0x240>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f003 0302 	and.w	r3, r3, #2
 8002520:	2b00      	cmp	r3, #0
 8002522:	d0f0      	beq.n	8002506 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002524:	4b28      	ldr	r3, [pc, #160]	; (80025c8 <HAL_RCC_OscConfig+0x240>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	691b      	ldr	r3, [r3, #16]
 8002530:	00db      	lsls	r3, r3, #3
 8002532:	4925      	ldr	r1, [pc, #148]	; (80025c8 <HAL_RCC_OscConfig+0x240>)
 8002534:	4313      	orrs	r3, r2
 8002536:	600b      	str	r3, [r1, #0]
 8002538:	e015      	b.n	8002566 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800253a:	4b24      	ldr	r3, [pc, #144]	; (80025cc <HAL_RCC_OscConfig+0x244>)
 800253c:	2200      	movs	r2, #0
 800253e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002540:	f7fe fac0 	bl	8000ac4 <HAL_GetTick>
 8002544:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002546:	e008      	b.n	800255a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002548:	f7fe fabc 	bl	8000ac4 <HAL_GetTick>
 800254c:	4602      	mov	r2, r0
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	1ad3      	subs	r3, r2, r3
 8002552:	2b02      	cmp	r3, #2
 8002554:	d901      	bls.n	800255a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002556:	2303      	movs	r3, #3
 8002558:	e187      	b.n	800286a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800255a:	4b1b      	ldr	r3, [pc, #108]	; (80025c8 <HAL_RCC_OscConfig+0x240>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 0302 	and.w	r3, r3, #2
 8002562:	2b00      	cmp	r3, #0
 8002564:	d1f0      	bne.n	8002548 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f003 0308 	and.w	r3, r3, #8
 800256e:	2b00      	cmp	r3, #0
 8002570:	d036      	beq.n	80025e0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	695b      	ldr	r3, [r3, #20]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d016      	beq.n	80025a8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800257a:	4b15      	ldr	r3, [pc, #84]	; (80025d0 <HAL_RCC_OscConfig+0x248>)
 800257c:	2201      	movs	r2, #1
 800257e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002580:	f7fe faa0 	bl	8000ac4 <HAL_GetTick>
 8002584:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002586:	e008      	b.n	800259a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002588:	f7fe fa9c 	bl	8000ac4 <HAL_GetTick>
 800258c:	4602      	mov	r2, r0
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	1ad3      	subs	r3, r2, r3
 8002592:	2b02      	cmp	r3, #2
 8002594:	d901      	bls.n	800259a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002596:	2303      	movs	r3, #3
 8002598:	e167      	b.n	800286a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800259a:	4b0b      	ldr	r3, [pc, #44]	; (80025c8 <HAL_RCC_OscConfig+0x240>)
 800259c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800259e:	f003 0302 	and.w	r3, r3, #2
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d0f0      	beq.n	8002588 <HAL_RCC_OscConfig+0x200>
 80025a6:	e01b      	b.n	80025e0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025a8:	4b09      	ldr	r3, [pc, #36]	; (80025d0 <HAL_RCC_OscConfig+0x248>)
 80025aa:	2200      	movs	r2, #0
 80025ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025ae:	f7fe fa89 	bl	8000ac4 <HAL_GetTick>
 80025b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025b4:	e00e      	b.n	80025d4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025b6:	f7fe fa85 	bl	8000ac4 <HAL_GetTick>
 80025ba:	4602      	mov	r2, r0
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	1ad3      	subs	r3, r2, r3
 80025c0:	2b02      	cmp	r3, #2
 80025c2:	d907      	bls.n	80025d4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80025c4:	2303      	movs	r3, #3
 80025c6:	e150      	b.n	800286a <HAL_RCC_OscConfig+0x4e2>
 80025c8:	40023800 	.word	0x40023800
 80025cc:	42470000 	.word	0x42470000
 80025d0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025d4:	4b88      	ldr	r3, [pc, #544]	; (80027f8 <HAL_RCC_OscConfig+0x470>)
 80025d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025d8:	f003 0302 	and.w	r3, r3, #2
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d1ea      	bne.n	80025b6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f003 0304 	and.w	r3, r3, #4
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	f000 8097 	beq.w	800271c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025ee:	2300      	movs	r3, #0
 80025f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025f2:	4b81      	ldr	r3, [pc, #516]	; (80027f8 <HAL_RCC_OscConfig+0x470>)
 80025f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d10f      	bne.n	800261e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025fe:	2300      	movs	r3, #0
 8002600:	60bb      	str	r3, [r7, #8]
 8002602:	4b7d      	ldr	r3, [pc, #500]	; (80027f8 <HAL_RCC_OscConfig+0x470>)
 8002604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002606:	4a7c      	ldr	r2, [pc, #496]	; (80027f8 <HAL_RCC_OscConfig+0x470>)
 8002608:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800260c:	6413      	str	r3, [r2, #64]	; 0x40
 800260e:	4b7a      	ldr	r3, [pc, #488]	; (80027f8 <HAL_RCC_OscConfig+0x470>)
 8002610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002612:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002616:	60bb      	str	r3, [r7, #8]
 8002618:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800261a:	2301      	movs	r3, #1
 800261c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800261e:	4b77      	ldr	r3, [pc, #476]	; (80027fc <HAL_RCC_OscConfig+0x474>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002626:	2b00      	cmp	r3, #0
 8002628:	d118      	bne.n	800265c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800262a:	4b74      	ldr	r3, [pc, #464]	; (80027fc <HAL_RCC_OscConfig+0x474>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a73      	ldr	r2, [pc, #460]	; (80027fc <HAL_RCC_OscConfig+0x474>)
 8002630:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002634:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002636:	f7fe fa45 	bl	8000ac4 <HAL_GetTick>
 800263a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800263c:	e008      	b.n	8002650 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800263e:	f7fe fa41 	bl	8000ac4 <HAL_GetTick>
 8002642:	4602      	mov	r2, r0
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	1ad3      	subs	r3, r2, r3
 8002648:	2b02      	cmp	r3, #2
 800264a:	d901      	bls.n	8002650 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800264c:	2303      	movs	r3, #3
 800264e:	e10c      	b.n	800286a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002650:	4b6a      	ldr	r3, [pc, #424]	; (80027fc <HAL_RCC_OscConfig+0x474>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002658:	2b00      	cmp	r3, #0
 800265a:	d0f0      	beq.n	800263e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	2b01      	cmp	r3, #1
 8002662:	d106      	bne.n	8002672 <HAL_RCC_OscConfig+0x2ea>
 8002664:	4b64      	ldr	r3, [pc, #400]	; (80027f8 <HAL_RCC_OscConfig+0x470>)
 8002666:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002668:	4a63      	ldr	r2, [pc, #396]	; (80027f8 <HAL_RCC_OscConfig+0x470>)
 800266a:	f043 0301 	orr.w	r3, r3, #1
 800266e:	6713      	str	r3, [r2, #112]	; 0x70
 8002670:	e01c      	b.n	80026ac <HAL_RCC_OscConfig+0x324>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	689b      	ldr	r3, [r3, #8]
 8002676:	2b05      	cmp	r3, #5
 8002678:	d10c      	bne.n	8002694 <HAL_RCC_OscConfig+0x30c>
 800267a:	4b5f      	ldr	r3, [pc, #380]	; (80027f8 <HAL_RCC_OscConfig+0x470>)
 800267c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800267e:	4a5e      	ldr	r2, [pc, #376]	; (80027f8 <HAL_RCC_OscConfig+0x470>)
 8002680:	f043 0304 	orr.w	r3, r3, #4
 8002684:	6713      	str	r3, [r2, #112]	; 0x70
 8002686:	4b5c      	ldr	r3, [pc, #368]	; (80027f8 <HAL_RCC_OscConfig+0x470>)
 8002688:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800268a:	4a5b      	ldr	r2, [pc, #364]	; (80027f8 <HAL_RCC_OscConfig+0x470>)
 800268c:	f043 0301 	orr.w	r3, r3, #1
 8002690:	6713      	str	r3, [r2, #112]	; 0x70
 8002692:	e00b      	b.n	80026ac <HAL_RCC_OscConfig+0x324>
 8002694:	4b58      	ldr	r3, [pc, #352]	; (80027f8 <HAL_RCC_OscConfig+0x470>)
 8002696:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002698:	4a57      	ldr	r2, [pc, #348]	; (80027f8 <HAL_RCC_OscConfig+0x470>)
 800269a:	f023 0301 	bic.w	r3, r3, #1
 800269e:	6713      	str	r3, [r2, #112]	; 0x70
 80026a0:	4b55      	ldr	r3, [pc, #340]	; (80027f8 <HAL_RCC_OscConfig+0x470>)
 80026a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026a4:	4a54      	ldr	r2, [pc, #336]	; (80027f8 <HAL_RCC_OscConfig+0x470>)
 80026a6:	f023 0304 	bic.w	r3, r3, #4
 80026aa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d015      	beq.n	80026e0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026b4:	f7fe fa06 	bl	8000ac4 <HAL_GetTick>
 80026b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026ba:	e00a      	b.n	80026d2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026bc:	f7fe fa02 	bl	8000ac4 <HAL_GetTick>
 80026c0:	4602      	mov	r2, r0
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	1ad3      	subs	r3, r2, r3
 80026c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d901      	bls.n	80026d2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80026ce:	2303      	movs	r3, #3
 80026d0:	e0cb      	b.n	800286a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026d2:	4b49      	ldr	r3, [pc, #292]	; (80027f8 <HAL_RCC_OscConfig+0x470>)
 80026d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026d6:	f003 0302 	and.w	r3, r3, #2
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d0ee      	beq.n	80026bc <HAL_RCC_OscConfig+0x334>
 80026de:	e014      	b.n	800270a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026e0:	f7fe f9f0 	bl	8000ac4 <HAL_GetTick>
 80026e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026e6:	e00a      	b.n	80026fe <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026e8:	f7fe f9ec 	bl	8000ac4 <HAL_GetTick>
 80026ec:	4602      	mov	r2, r0
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	1ad3      	subs	r3, r2, r3
 80026f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d901      	bls.n	80026fe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80026fa:	2303      	movs	r3, #3
 80026fc:	e0b5      	b.n	800286a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026fe:	4b3e      	ldr	r3, [pc, #248]	; (80027f8 <HAL_RCC_OscConfig+0x470>)
 8002700:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002702:	f003 0302 	and.w	r3, r3, #2
 8002706:	2b00      	cmp	r3, #0
 8002708:	d1ee      	bne.n	80026e8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800270a:	7dfb      	ldrb	r3, [r7, #23]
 800270c:	2b01      	cmp	r3, #1
 800270e:	d105      	bne.n	800271c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002710:	4b39      	ldr	r3, [pc, #228]	; (80027f8 <HAL_RCC_OscConfig+0x470>)
 8002712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002714:	4a38      	ldr	r2, [pc, #224]	; (80027f8 <HAL_RCC_OscConfig+0x470>)
 8002716:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800271a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	699b      	ldr	r3, [r3, #24]
 8002720:	2b00      	cmp	r3, #0
 8002722:	f000 80a1 	beq.w	8002868 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002726:	4b34      	ldr	r3, [pc, #208]	; (80027f8 <HAL_RCC_OscConfig+0x470>)
 8002728:	689b      	ldr	r3, [r3, #8]
 800272a:	f003 030c 	and.w	r3, r3, #12
 800272e:	2b08      	cmp	r3, #8
 8002730:	d05c      	beq.n	80027ec <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	699b      	ldr	r3, [r3, #24]
 8002736:	2b02      	cmp	r3, #2
 8002738:	d141      	bne.n	80027be <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800273a:	4b31      	ldr	r3, [pc, #196]	; (8002800 <HAL_RCC_OscConfig+0x478>)
 800273c:	2200      	movs	r2, #0
 800273e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002740:	f7fe f9c0 	bl	8000ac4 <HAL_GetTick>
 8002744:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002746:	e008      	b.n	800275a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002748:	f7fe f9bc 	bl	8000ac4 <HAL_GetTick>
 800274c:	4602      	mov	r2, r0
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	1ad3      	subs	r3, r2, r3
 8002752:	2b02      	cmp	r3, #2
 8002754:	d901      	bls.n	800275a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002756:	2303      	movs	r3, #3
 8002758:	e087      	b.n	800286a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800275a:	4b27      	ldr	r3, [pc, #156]	; (80027f8 <HAL_RCC_OscConfig+0x470>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002762:	2b00      	cmp	r3, #0
 8002764:	d1f0      	bne.n	8002748 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	69da      	ldr	r2, [r3, #28]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6a1b      	ldr	r3, [r3, #32]
 800276e:	431a      	orrs	r2, r3
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002774:	019b      	lsls	r3, r3, #6
 8002776:	431a      	orrs	r2, r3
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800277c:	085b      	lsrs	r3, r3, #1
 800277e:	3b01      	subs	r3, #1
 8002780:	041b      	lsls	r3, r3, #16
 8002782:	431a      	orrs	r2, r3
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002788:	061b      	lsls	r3, r3, #24
 800278a:	491b      	ldr	r1, [pc, #108]	; (80027f8 <HAL_RCC_OscConfig+0x470>)
 800278c:	4313      	orrs	r3, r2
 800278e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002790:	4b1b      	ldr	r3, [pc, #108]	; (8002800 <HAL_RCC_OscConfig+0x478>)
 8002792:	2201      	movs	r2, #1
 8002794:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002796:	f7fe f995 	bl	8000ac4 <HAL_GetTick>
 800279a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800279c:	e008      	b.n	80027b0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800279e:	f7fe f991 	bl	8000ac4 <HAL_GetTick>
 80027a2:	4602      	mov	r2, r0
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	1ad3      	subs	r3, r2, r3
 80027a8:	2b02      	cmp	r3, #2
 80027aa:	d901      	bls.n	80027b0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80027ac:	2303      	movs	r3, #3
 80027ae:	e05c      	b.n	800286a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027b0:	4b11      	ldr	r3, [pc, #68]	; (80027f8 <HAL_RCC_OscConfig+0x470>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d0f0      	beq.n	800279e <HAL_RCC_OscConfig+0x416>
 80027bc:	e054      	b.n	8002868 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027be:	4b10      	ldr	r3, [pc, #64]	; (8002800 <HAL_RCC_OscConfig+0x478>)
 80027c0:	2200      	movs	r2, #0
 80027c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027c4:	f7fe f97e 	bl	8000ac4 <HAL_GetTick>
 80027c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027ca:	e008      	b.n	80027de <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027cc:	f7fe f97a 	bl	8000ac4 <HAL_GetTick>
 80027d0:	4602      	mov	r2, r0
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	1ad3      	subs	r3, r2, r3
 80027d6:	2b02      	cmp	r3, #2
 80027d8:	d901      	bls.n	80027de <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80027da:	2303      	movs	r3, #3
 80027dc:	e045      	b.n	800286a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027de:	4b06      	ldr	r3, [pc, #24]	; (80027f8 <HAL_RCC_OscConfig+0x470>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d1f0      	bne.n	80027cc <HAL_RCC_OscConfig+0x444>
 80027ea:	e03d      	b.n	8002868 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	699b      	ldr	r3, [r3, #24]
 80027f0:	2b01      	cmp	r3, #1
 80027f2:	d107      	bne.n	8002804 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	e038      	b.n	800286a <HAL_RCC_OscConfig+0x4e2>
 80027f8:	40023800 	.word	0x40023800
 80027fc:	40007000 	.word	0x40007000
 8002800:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002804:	4b1b      	ldr	r3, [pc, #108]	; (8002874 <HAL_RCC_OscConfig+0x4ec>)
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	699b      	ldr	r3, [r3, #24]
 800280e:	2b01      	cmp	r3, #1
 8002810:	d028      	beq.n	8002864 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800281c:	429a      	cmp	r2, r3
 800281e:	d121      	bne.n	8002864 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800282a:	429a      	cmp	r2, r3
 800282c:	d11a      	bne.n	8002864 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800282e:	68fa      	ldr	r2, [r7, #12]
 8002830:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002834:	4013      	ands	r3, r2
 8002836:	687a      	ldr	r2, [r7, #4]
 8002838:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800283a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800283c:	4293      	cmp	r3, r2
 800283e:	d111      	bne.n	8002864 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800284a:	085b      	lsrs	r3, r3, #1
 800284c:	3b01      	subs	r3, #1
 800284e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002850:	429a      	cmp	r2, r3
 8002852:	d107      	bne.n	8002864 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800285e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002860:	429a      	cmp	r2, r3
 8002862:	d001      	beq.n	8002868 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002864:	2301      	movs	r3, #1
 8002866:	e000      	b.n	800286a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002868:	2300      	movs	r3, #0
}
 800286a:	4618      	mov	r0, r3
 800286c:	3718      	adds	r7, #24
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}
 8002872:	bf00      	nop
 8002874:	40023800 	.word	0x40023800

08002878 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b084      	sub	sp, #16
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
 8002880:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d101      	bne.n	800288c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002888:	2301      	movs	r3, #1
 800288a:	e0cc      	b.n	8002a26 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800288c:	4b68      	ldr	r3, [pc, #416]	; (8002a30 <HAL_RCC_ClockConfig+0x1b8>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f003 0307 	and.w	r3, r3, #7
 8002894:	683a      	ldr	r2, [r7, #0]
 8002896:	429a      	cmp	r2, r3
 8002898:	d90c      	bls.n	80028b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800289a:	4b65      	ldr	r3, [pc, #404]	; (8002a30 <HAL_RCC_ClockConfig+0x1b8>)
 800289c:	683a      	ldr	r2, [r7, #0]
 800289e:	b2d2      	uxtb	r2, r2
 80028a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028a2:	4b63      	ldr	r3, [pc, #396]	; (8002a30 <HAL_RCC_ClockConfig+0x1b8>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f003 0307 	and.w	r3, r3, #7
 80028aa:	683a      	ldr	r2, [r7, #0]
 80028ac:	429a      	cmp	r2, r3
 80028ae:	d001      	beq.n	80028b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80028b0:	2301      	movs	r3, #1
 80028b2:	e0b8      	b.n	8002a26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f003 0302 	and.w	r3, r3, #2
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d020      	beq.n	8002902 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f003 0304 	and.w	r3, r3, #4
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d005      	beq.n	80028d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80028cc:	4b59      	ldr	r3, [pc, #356]	; (8002a34 <HAL_RCC_ClockConfig+0x1bc>)
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	4a58      	ldr	r2, [pc, #352]	; (8002a34 <HAL_RCC_ClockConfig+0x1bc>)
 80028d2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80028d6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f003 0308 	and.w	r3, r3, #8
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d005      	beq.n	80028f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80028e4:	4b53      	ldr	r3, [pc, #332]	; (8002a34 <HAL_RCC_ClockConfig+0x1bc>)
 80028e6:	689b      	ldr	r3, [r3, #8]
 80028e8:	4a52      	ldr	r2, [pc, #328]	; (8002a34 <HAL_RCC_ClockConfig+0x1bc>)
 80028ea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80028ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028f0:	4b50      	ldr	r3, [pc, #320]	; (8002a34 <HAL_RCC_ClockConfig+0x1bc>)
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	494d      	ldr	r1, [pc, #308]	; (8002a34 <HAL_RCC_ClockConfig+0x1bc>)
 80028fe:	4313      	orrs	r3, r2
 8002900:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f003 0301 	and.w	r3, r3, #1
 800290a:	2b00      	cmp	r3, #0
 800290c:	d044      	beq.n	8002998 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	2b01      	cmp	r3, #1
 8002914:	d107      	bne.n	8002926 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002916:	4b47      	ldr	r3, [pc, #284]	; (8002a34 <HAL_RCC_ClockConfig+0x1bc>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800291e:	2b00      	cmp	r3, #0
 8002920:	d119      	bne.n	8002956 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	e07f      	b.n	8002a26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	2b02      	cmp	r3, #2
 800292c:	d003      	beq.n	8002936 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002932:	2b03      	cmp	r3, #3
 8002934:	d107      	bne.n	8002946 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002936:	4b3f      	ldr	r3, [pc, #252]	; (8002a34 <HAL_RCC_ClockConfig+0x1bc>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800293e:	2b00      	cmp	r3, #0
 8002940:	d109      	bne.n	8002956 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	e06f      	b.n	8002a26 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002946:	4b3b      	ldr	r3, [pc, #236]	; (8002a34 <HAL_RCC_ClockConfig+0x1bc>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 0302 	and.w	r3, r3, #2
 800294e:	2b00      	cmp	r3, #0
 8002950:	d101      	bne.n	8002956 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002952:	2301      	movs	r3, #1
 8002954:	e067      	b.n	8002a26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002956:	4b37      	ldr	r3, [pc, #220]	; (8002a34 <HAL_RCC_ClockConfig+0x1bc>)
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	f023 0203 	bic.w	r2, r3, #3
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	4934      	ldr	r1, [pc, #208]	; (8002a34 <HAL_RCC_ClockConfig+0x1bc>)
 8002964:	4313      	orrs	r3, r2
 8002966:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002968:	f7fe f8ac 	bl	8000ac4 <HAL_GetTick>
 800296c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800296e:	e00a      	b.n	8002986 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002970:	f7fe f8a8 	bl	8000ac4 <HAL_GetTick>
 8002974:	4602      	mov	r2, r0
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	1ad3      	subs	r3, r2, r3
 800297a:	f241 3288 	movw	r2, #5000	; 0x1388
 800297e:	4293      	cmp	r3, r2
 8002980:	d901      	bls.n	8002986 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002982:	2303      	movs	r3, #3
 8002984:	e04f      	b.n	8002a26 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002986:	4b2b      	ldr	r3, [pc, #172]	; (8002a34 <HAL_RCC_ClockConfig+0x1bc>)
 8002988:	689b      	ldr	r3, [r3, #8]
 800298a:	f003 020c 	and.w	r2, r3, #12
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	009b      	lsls	r3, r3, #2
 8002994:	429a      	cmp	r2, r3
 8002996:	d1eb      	bne.n	8002970 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002998:	4b25      	ldr	r3, [pc, #148]	; (8002a30 <HAL_RCC_ClockConfig+0x1b8>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f003 0307 	and.w	r3, r3, #7
 80029a0:	683a      	ldr	r2, [r7, #0]
 80029a2:	429a      	cmp	r2, r3
 80029a4:	d20c      	bcs.n	80029c0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029a6:	4b22      	ldr	r3, [pc, #136]	; (8002a30 <HAL_RCC_ClockConfig+0x1b8>)
 80029a8:	683a      	ldr	r2, [r7, #0]
 80029aa:	b2d2      	uxtb	r2, r2
 80029ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029ae:	4b20      	ldr	r3, [pc, #128]	; (8002a30 <HAL_RCC_ClockConfig+0x1b8>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 0307 	and.w	r3, r3, #7
 80029b6:	683a      	ldr	r2, [r7, #0]
 80029b8:	429a      	cmp	r2, r3
 80029ba:	d001      	beq.n	80029c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80029bc:	2301      	movs	r3, #1
 80029be:	e032      	b.n	8002a26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f003 0304 	and.w	r3, r3, #4
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d008      	beq.n	80029de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029cc:	4b19      	ldr	r3, [pc, #100]	; (8002a34 <HAL_RCC_ClockConfig+0x1bc>)
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	68db      	ldr	r3, [r3, #12]
 80029d8:	4916      	ldr	r1, [pc, #88]	; (8002a34 <HAL_RCC_ClockConfig+0x1bc>)
 80029da:	4313      	orrs	r3, r2
 80029dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f003 0308 	and.w	r3, r3, #8
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d009      	beq.n	80029fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80029ea:	4b12      	ldr	r3, [pc, #72]	; (8002a34 <HAL_RCC_ClockConfig+0x1bc>)
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	691b      	ldr	r3, [r3, #16]
 80029f6:	00db      	lsls	r3, r3, #3
 80029f8:	490e      	ldr	r1, [pc, #56]	; (8002a34 <HAL_RCC_ClockConfig+0x1bc>)
 80029fa:	4313      	orrs	r3, r2
 80029fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80029fe:	f000 f821 	bl	8002a44 <HAL_RCC_GetSysClockFreq>
 8002a02:	4602      	mov	r2, r0
 8002a04:	4b0b      	ldr	r3, [pc, #44]	; (8002a34 <HAL_RCC_ClockConfig+0x1bc>)
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	091b      	lsrs	r3, r3, #4
 8002a0a:	f003 030f 	and.w	r3, r3, #15
 8002a0e:	490a      	ldr	r1, [pc, #40]	; (8002a38 <HAL_RCC_ClockConfig+0x1c0>)
 8002a10:	5ccb      	ldrb	r3, [r1, r3]
 8002a12:	fa22 f303 	lsr.w	r3, r2, r3
 8002a16:	4a09      	ldr	r2, [pc, #36]	; (8002a3c <HAL_RCC_ClockConfig+0x1c4>)
 8002a18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002a1a:	4b09      	ldr	r3, [pc, #36]	; (8002a40 <HAL_RCC_ClockConfig+0x1c8>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f7fe f80c 	bl	8000a3c <HAL_InitTick>

  return HAL_OK;
 8002a24:	2300      	movs	r3, #0
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	3710      	adds	r7, #16
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}
 8002a2e:	bf00      	nop
 8002a30:	40023c00 	.word	0x40023c00
 8002a34:	40023800 	.word	0x40023800
 8002a38:	08006da8 	.word	0x08006da8
 8002a3c:	20000000 	.word	0x20000000
 8002a40:	20000004 	.word	0x20000004

08002a44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a48:	b090      	sub	sp, #64	; 0x40
 8002a4a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	637b      	str	r3, [r7, #52]	; 0x34
 8002a50:	2300      	movs	r3, #0
 8002a52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a54:	2300      	movs	r3, #0
 8002a56:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a5c:	4b59      	ldr	r3, [pc, #356]	; (8002bc4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002a5e:	689b      	ldr	r3, [r3, #8]
 8002a60:	f003 030c 	and.w	r3, r3, #12
 8002a64:	2b08      	cmp	r3, #8
 8002a66:	d00d      	beq.n	8002a84 <HAL_RCC_GetSysClockFreq+0x40>
 8002a68:	2b08      	cmp	r3, #8
 8002a6a:	f200 80a1 	bhi.w	8002bb0 <HAL_RCC_GetSysClockFreq+0x16c>
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d002      	beq.n	8002a78 <HAL_RCC_GetSysClockFreq+0x34>
 8002a72:	2b04      	cmp	r3, #4
 8002a74:	d003      	beq.n	8002a7e <HAL_RCC_GetSysClockFreq+0x3a>
 8002a76:	e09b      	b.n	8002bb0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a78:	4b53      	ldr	r3, [pc, #332]	; (8002bc8 <HAL_RCC_GetSysClockFreq+0x184>)
 8002a7a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002a7c:	e09b      	b.n	8002bb6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a7e:	4b53      	ldr	r3, [pc, #332]	; (8002bcc <HAL_RCC_GetSysClockFreq+0x188>)
 8002a80:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002a82:	e098      	b.n	8002bb6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a84:	4b4f      	ldr	r3, [pc, #316]	; (8002bc4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a8c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a8e:	4b4d      	ldr	r3, [pc, #308]	; (8002bc4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d028      	beq.n	8002aec <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a9a:	4b4a      	ldr	r3, [pc, #296]	; (8002bc4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	099b      	lsrs	r3, r3, #6
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	623b      	str	r3, [r7, #32]
 8002aa4:	627a      	str	r2, [r7, #36]	; 0x24
 8002aa6:	6a3b      	ldr	r3, [r7, #32]
 8002aa8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002aac:	2100      	movs	r1, #0
 8002aae:	4b47      	ldr	r3, [pc, #284]	; (8002bcc <HAL_RCC_GetSysClockFreq+0x188>)
 8002ab0:	fb03 f201 	mul.w	r2, r3, r1
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	fb00 f303 	mul.w	r3, r0, r3
 8002aba:	4413      	add	r3, r2
 8002abc:	4a43      	ldr	r2, [pc, #268]	; (8002bcc <HAL_RCC_GetSysClockFreq+0x188>)
 8002abe:	fba0 1202 	umull	r1, r2, r0, r2
 8002ac2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002ac4:	460a      	mov	r2, r1
 8002ac6:	62ba      	str	r2, [r7, #40]	; 0x28
 8002ac8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002aca:	4413      	add	r3, r2
 8002acc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ace:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	61bb      	str	r3, [r7, #24]
 8002ad4:	61fa      	str	r2, [r7, #28]
 8002ad6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ada:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002ade:	f7fd fc13 	bl	8000308 <__aeabi_uldivmod>
 8002ae2:	4602      	mov	r2, r0
 8002ae4:	460b      	mov	r3, r1
 8002ae6:	4613      	mov	r3, r2
 8002ae8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002aea:	e053      	b.n	8002b94 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002aec:	4b35      	ldr	r3, [pc, #212]	; (8002bc4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	099b      	lsrs	r3, r3, #6
 8002af2:	2200      	movs	r2, #0
 8002af4:	613b      	str	r3, [r7, #16]
 8002af6:	617a      	str	r2, [r7, #20]
 8002af8:	693b      	ldr	r3, [r7, #16]
 8002afa:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002afe:	f04f 0b00 	mov.w	fp, #0
 8002b02:	4652      	mov	r2, sl
 8002b04:	465b      	mov	r3, fp
 8002b06:	f04f 0000 	mov.w	r0, #0
 8002b0a:	f04f 0100 	mov.w	r1, #0
 8002b0e:	0159      	lsls	r1, r3, #5
 8002b10:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b14:	0150      	lsls	r0, r2, #5
 8002b16:	4602      	mov	r2, r0
 8002b18:	460b      	mov	r3, r1
 8002b1a:	ebb2 080a 	subs.w	r8, r2, sl
 8002b1e:	eb63 090b 	sbc.w	r9, r3, fp
 8002b22:	f04f 0200 	mov.w	r2, #0
 8002b26:	f04f 0300 	mov.w	r3, #0
 8002b2a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002b2e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002b32:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002b36:	ebb2 0408 	subs.w	r4, r2, r8
 8002b3a:	eb63 0509 	sbc.w	r5, r3, r9
 8002b3e:	f04f 0200 	mov.w	r2, #0
 8002b42:	f04f 0300 	mov.w	r3, #0
 8002b46:	00eb      	lsls	r3, r5, #3
 8002b48:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b4c:	00e2      	lsls	r2, r4, #3
 8002b4e:	4614      	mov	r4, r2
 8002b50:	461d      	mov	r5, r3
 8002b52:	eb14 030a 	adds.w	r3, r4, sl
 8002b56:	603b      	str	r3, [r7, #0]
 8002b58:	eb45 030b 	adc.w	r3, r5, fp
 8002b5c:	607b      	str	r3, [r7, #4]
 8002b5e:	f04f 0200 	mov.w	r2, #0
 8002b62:	f04f 0300 	mov.w	r3, #0
 8002b66:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002b6a:	4629      	mov	r1, r5
 8002b6c:	028b      	lsls	r3, r1, #10
 8002b6e:	4621      	mov	r1, r4
 8002b70:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002b74:	4621      	mov	r1, r4
 8002b76:	028a      	lsls	r2, r1, #10
 8002b78:	4610      	mov	r0, r2
 8002b7a:	4619      	mov	r1, r3
 8002b7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b7e:	2200      	movs	r2, #0
 8002b80:	60bb      	str	r3, [r7, #8]
 8002b82:	60fa      	str	r2, [r7, #12]
 8002b84:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002b88:	f7fd fbbe 	bl	8000308 <__aeabi_uldivmod>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	460b      	mov	r3, r1
 8002b90:	4613      	mov	r3, r2
 8002b92:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002b94:	4b0b      	ldr	r3, [pc, #44]	; (8002bc4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	0c1b      	lsrs	r3, r3, #16
 8002b9a:	f003 0303 	and.w	r3, r3, #3
 8002b9e:	3301      	adds	r3, #1
 8002ba0:	005b      	lsls	r3, r3, #1
 8002ba2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002ba4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ba8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bac:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002bae:	e002      	b.n	8002bb6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002bb0:	4b05      	ldr	r3, [pc, #20]	; (8002bc8 <HAL_RCC_GetSysClockFreq+0x184>)
 8002bb2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002bb4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002bb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	3740      	adds	r7, #64	; 0x40
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002bc2:	bf00      	nop
 8002bc4:	40023800 	.word	0x40023800
 8002bc8:	00f42400 	.word	0x00f42400
 8002bcc:	017d7840 	.word	0x017d7840

08002bd0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002bd4:	4b03      	ldr	r3, [pc, #12]	; (8002be4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be0:	4770      	bx	lr
 8002be2:	bf00      	nop
 8002be4:	20000000 	.word	0x20000000

08002be8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b082      	sub	sp, #8
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d101      	bne.n	8002bfa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e041      	b.n	8002c7e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c00:	b2db      	uxtb	r3, r3
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d106      	bne.n	8002c14 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002c0e:	6878      	ldr	r0, [r7, #4]
 8002c10:	f7fd fe50 	bl	80008b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2202      	movs	r2, #2
 8002c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681a      	ldr	r2, [r3, #0]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	3304      	adds	r3, #4
 8002c24:	4619      	mov	r1, r3
 8002c26:	4610      	mov	r0, r2
 8002c28:	f000 fa2e 	bl	8003088 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2201      	movs	r2, #1
 8002c30:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2201      	movs	r2, #1
 8002c38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2201      	movs	r2, #1
 8002c40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2201      	movs	r2, #1
 8002c48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2201      	movs	r2, #1
 8002c50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2201      	movs	r2, #1
 8002c58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2201      	movs	r2, #1
 8002c60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2201      	movs	r2, #1
 8002c68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2201      	movs	r2, #1
 8002c70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2201      	movs	r2, #1
 8002c78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c7c:	2300      	movs	r3, #0
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	3708      	adds	r7, #8
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}

08002c86 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002c86:	b580      	push	{r7, lr}
 8002c88:	b082      	sub	sp, #8
 8002c8a:	af00      	add	r7, sp, #0
 8002c8c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	691b      	ldr	r3, [r3, #16]
 8002c94:	f003 0302 	and.w	r3, r3, #2
 8002c98:	2b02      	cmp	r3, #2
 8002c9a:	d122      	bne.n	8002ce2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	68db      	ldr	r3, [r3, #12]
 8002ca2:	f003 0302 	and.w	r3, r3, #2
 8002ca6:	2b02      	cmp	r3, #2
 8002ca8:	d11b      	bne.n	8002ce2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f06f 0202 	mvn.w	r2, #2
 8002cb2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	699b      	ldr	r3, [r3, #24]
 8002cc0:	f003 0303 	and.w	r3, r3, #3
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d003      	beq.n	8002cd0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002cc8:	6878      	ldr	r0, [r7, #4]
 8002cca:	f000 f9bf 	bl	800304c <HAL_TIM_IC_CaptureCallback>
 8002cce:	e005      	b.n	8002cdc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cd0:	6878      	ldr	r0, [r7, #4]
 8002cd2:	f000 f9b1 	bl	8003038 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cd6:	6878      	ldr	r0, [r7, #4]
 8002cd8:	f000 f9c2 	bl	8003060 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	691b      	ldr	r3, [r3, #16]
 8002ce8:	f003 0304 	and.w	r3, r3, #4
 8002cec:	2b04      	cmp	r3, #4
 8002cee:	d122      	bne.n	8002d36 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	68db      	ldr	r3, [r3, #12]
 8002cf6:	f003 0304 	and.w	r3, r3, #4
 8002cfa:	2b04      	cmp	r3, #4
 8002cfc:	d11b      	bne.n	8002d36 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f06f 0204 	mvn.w	r2, #4
 8002d06:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2202      	movs	r2, #2
 8002d0c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	699b      	ldr	r3, [r3, #24]
 8002d14:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d003      	beq.n	8002d24 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d1c:	6878      	ldr	r0, [r7, #4]
 8002d1e:	f000 f995 	bl	800304c <HAL_TIM_IC_CaptureCallback>
 8002d22:	e005      	b.n	8002d30 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d24:	6878      	ldr	r0, [r7, #4]
 8002d26:	f000 f987 	bl	8003038 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d2a:	6878      	ldr	r0, [r7, #4]
 8002d2c:	f000 f998 	bl	8003060 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2200      	movs	r2, #0
 8002d34:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	691b      	ldr	r3, [r3, #16]
 8002d3c:	f003 0308 	and.w	r3, r3, #8
 8002d40:	2b08      	cmp	r3, #8
 8002d42:	d122      	bne.n	8002d8a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	68db      	ldr	r3, [r3, #12]
 8002d4a:	f003 0308 	and.w	r3, r3, #8
 8002d4e:	2b08      	cmp	r3, #8
 8002d50:	d11b      	bne.n	8002d8a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f06f 0208 	mvn.w	r2, #8
 8002d5a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2204      	movs	r2, #4
 8002d60:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	69db      	ldr	r3, [r3, #28]
 8002d68:	f003 0303 	and.w	r3, r3, #3
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d003      	beq.n	8002d78 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d70:	6878      	ldr	r0, [r7, #4]
 8002d72:	f000 f96b 	bl	800304c <HAL_TIM_IC_CaptureCallback>
 8002d76:	e005      	b.n	8002d84 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d78:	6878      	ldr	r0, [r7, #4]
 8002d7a:	f000 f95d 	bl	8003038 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d7e:	6878      	ldr	r0, [r7, #4]
 8002d80:	f000 f96e 	bl	8003060 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2200      	movs	r2, #0
 8002d88:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	691b      	ldr	r3, [r3, #16]
 8002d90:	f003 0310 	and.w	r3, r3, #16
 8002d94:	2b10      	cmp	r3, #16
 8002d96:	d122      	bne.n	8002dde <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	68db      	ldr	r3, [r3, #12]
 8002d9e:	f003 0310 	and.w	r3, r3, #16
 8002da2:	2b10      	cmp	r3, #16
 8002da4:	d11b      	bne.n	8002dde <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f06f 0210 	mvn.w	r2, #16
 8002dae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2208      	movs	r2, #8
 8002db4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	69db      	ldr	r3, [r3, #28]
 8002dbc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d003      	beq.n	8002dcc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002dc4:	6878      	ldr	r0, [r7, #4]
 8002dc6:	f000 f941 	bl	800304c <HAL_TIM_IC_CaptureCallback>
 8002dca:	e005      	b.n	8002dd8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dcc:	6878      	ldr	r0, [r7, #4]
 8002dce:	f000 f933 	bl	8003038 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002dd2:	6878      	ldr	r0, [r7, #4]
 8002dd4:	f000 f944 	bl	8003060 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	691b      	ldr	r3, [r3, #16]
 8002de4:	f003 0301 	and.w	r3, r3, #1
 8002de8:	2b01      	cmp	r3, #1
 8002dea:	d10e      	bne.n	8002e0a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	68db      	ldr	r3, [r3, #12]
 8002df2:	f003 0301 	and.w	r3, r3, #1
 8002df6:	2b01      	cmp	r3, #1
 8002df8:	d107      	bne.n	8002e0a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f06f 0201 	mvn.w	r2, #1
 8002e02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002e04:	6878      	ldr	r0, [r7, #4]
 8002e06:	f000 f90d 	bl	8003024 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	691b      	ldr	r3, [r3, #16]
 8002e10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e14:	2b80      	cmp	r3, #128	; 0x80
 8002e16:	d10e      	bne.n	8002e36 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	68db      	ldr	r3, [r3, #12]
 8002e1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e22:	2b80      	cmp	r3, #128	; 0x80
 8002e24:	d107      	bne.n	8002e36 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002e2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002e30:	6878      	ldr	r0, [r7, #4]
 8002e32:	f000 fabb 	bl	80033ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	691b      	ldr	r3, [r3, #16]
 8002e3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e40:	2b40      	cmp	r3, #64	; 0x40
 8002e42:	d10e      	bne.n	8002e62 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	68db      	ldr	r3, [r3, #12]
 8002e4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e4e:	2b40      	cmp	r3, #64	; 0x40
 8002e50:	d107      	bne.n	8002e62 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002e5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002e5c:	6878      	ldr	r0, [r7, #4]
 8002e5e:	f000 f909 	bl	8003074 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	691b      	ldr	r3, [r3, #16]
 8002e68:	f003 0320 	and.w	r3, r3, #32
 8002e6c:	2b20      	cmp	r3, #32
 8002e6e:	d10e      	bne.n	8002e8e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	68db      	ldr	r3, [r3, #12]
 8002e76:	f003 0320 	and.w	r3, r3, #32
 8002e7a:	2b20      	cmp	r3, #32
 8002e7c:	d107      	bne.n	8002e8e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f06f 0220 	mvn.w	r2, #32
 8002e86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002e88:	6878      	ldr	r0, [r7, #4]
 8002e8a:	f000 fa85 	bl	8003398 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002e8e:	bf00      	nop
 8002e90:	3708      	adds	r7, #8
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}

08002e96 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002e96:	b580      	push	{r7, lr}
 8002e98:	b084      	sub	sp, #16
 8002e9a:	af00      	add	r7, sp, #0
 8002e9c:	6078      	str	r0, [r7, #4]
 8002e9e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002eaa:	2b01      	cmp	r3, #1
 8002eac:	d101      	bne.n	8002eb2 <HAL_TIM_ConfigClockSource+0x1c>
 8002eae:	2302      	movs	r3, #2
 8002eb0:	e0b4      	b.n	800301c <HAL_TIM_ConfigClockSource+0x186>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2201      	movs	r2, #1
 8002eb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2202      	movs	r2, #2
 8002ebe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002ed0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002ed8:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	68ba      	ldr	r2, [r7, #8]
 8002ee0:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002eea:	d03e      	beq.n	8002f6a <HAL_TIM_ConfigClockSource+0xd4>
 8002eec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ef0:	f200 8087 	bhi.w	8003002 <HAL_TIM_ConfigClockSource+0x16c>
 8002ef4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ef8:	f000 8086 	beq.w	8003008 <HAL_TIM_ConfigClockSource+0x172>
 8002efc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f00:	d87f      	bhi.n	8003002 <HAL_TIM_ConfigClockSource+0x16c>
 8002f02:	2b70      	cmp	r3, #112	; 0x70
 8002f04:	d01a      	beq.n	8002f3c <HAL_TIM_ConfigClockSource+0xa6>
 8002f06:	2b70      	cmp	r3, #112	; 0x70
 8002f08:	d87b      	bhi.n	8003002 <HAL_TIM_ConfigClockSource+0x16c>
 8002f0a:	2b60      	cmp	r3, #96	; 0x60
 8002f0c:	d050      	beq.n	8002fb0 <HAL_TIM_ConfigClockSource+0x11a>
 8002f0e:	2b60      	cmp	r3, #96	; 0x60
 8002f10:	d877      	bhi.n	8003002 <HAL_TIM_ConfigClockSource+0x16c>
 8002f12:	2b50      	cmp	r3, #80	; 0x50
 8002f14:	d03c      	beq.n	8002f90 <HAL_TIM_ConfigClockSource+0xfa>
 8002f16:	2b50      	cmp	r3, #80	; 0x50
 8002f18:	d873      	bhi.n	8003002 <HAL_TIM_ConfigClockSource+0x16c>
 8002f1a:	2b40      	cmp	r3, #64	; 0x40
 8002f1c:	d058      	beq.n	8002fd0 <HAL_TIM_ConfigClockSource+0x13a>
 8002f1e:	2b40      	cmp	r3, #64	; 0x40
 8002f20:	d86f      	bhi.n	8003002 <HAL_TIM_ConfigClockSource+0x16c>
 8002f22:	2b30      	cmp	r3, #48	; 0x30
 8002f24:	d064      	beq.n	8002ff0 <HAL_TIM_ConfigClockSource+0x15a>
 8002f26:	2b30      	cmp	r3, #48	; 0x30
 8002f28:	d86b      	bhi.n	8003002 <HAL_TIM_ConfigClockSource+0x16c>
 8002f2a:	2b20      	cmp	r3, #32
 8002f2c:	d060      	beq.n	8002ff0 <HAL_TIM_ConfigClockSource+0x15a>
 8002f2e:	2b20      	cmp	r3, #32
 8002f30:	d867      	bhi.n	8003002 <HAL_TIM_ConfigClockSource+0x16c>
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d05c      	beq.n	8002ff0 <HAL_TIM_ConfigClockSource+0x15a>
 8002f36:	2b10      	cmp	r3, #16
 8002f38:	d05a      	beq.n	8002ff0 <HAL_TIM_ConfigClockSource+0x15a>
 8002f3a:	e062      	b.n	8003002 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6818      	ldr	r0, [r3, #0]
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	6899      	ldr	r1, [r3, #8]
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	685a      	ldr	r2, [r3, #4]
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	68db      	ldr	r3, [r3, #12]
 8002f4c:	f000 f996 	bl	800327c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	689b      	ldr	r3, [r3, #8]
 8002f56:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002f5e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	68ba      	ldr	r2, [r7, #8]
 8002f66:	609a      	str	r2, [r3, #8]
      break;
 8002f68:	e04f      	b.n	800300a <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6818      	ldr	r0, [r3, #0]
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	6899      	ldr	r1, [r3, #8]
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	685a      	ldr	r2, [r3, #4]
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	68db      	ldr	r3, [r3, #12]
 8002f7a:	f000 f97f 	bl	800327c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	689a      	ldr	r2, [r3, #8]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f8c:	609a      	str	r2, [r3, #8]
      break;
 8002f8e:	e03c      	b.n	800300a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6818      	ldr	r0, [r3, #0]
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	6859      	ldr	r1, [r3, #4]
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	68db      	ldr	r3, [r3, #12]
 8002f9c:	461a      	mov	r2, r3
 8002f9e:	f000 f8f3 	bl	8003188 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	2150      	movs	r1, #80	; 0x50
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f000 f94c 	bl	8003246 <TIM_ITRx_SetConfig>
      break;
 8002fae:	e02c      	b.n	800300a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6818      	ldr	r0, [r3, #0]
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	6859      	ldr	r1, [r3, #4]
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	68db      	ldr	r3, [r3, #12]
 8002fbc:	461a      	mov	r2, r3
 8002fbe:	f000 f912 	bl	80031e6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	2160      	movs	r1, #96	; 0x60
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f000 f93c 	bl	8003246 <TIM_ITRx_SetConfig>
      break;
 8002fce:	e01c      	b.n	800300a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6818      	ldr	r0, [r3, #0]
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	6859      	ldr	r1, [r3, #4]
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	68db      	ldr	r3, [r3, #12]
 8002fdc:	461a      	mov	r2, r3
 8002fde:	f000 f8d3 	bl	8003188 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	2140      	movs	r1, #64	; 0x40
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f000 f92c 	bl	8003246 <TIM_ITRx_SetConfig>
      break;
 8002fee:	e00c      	b.n	800300a <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681a      	ldr	r2, [r3, #0]
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4619      	mov	r1, r3
 8002ffa:	4610      	mov	r0, r2
 8002ffc:	f000 f923 	bl	8003246 <TIM_ITRx_SetConfig>
      break;
 8003000:	e003      	b.n	800300a <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	73fb      	strb	r3, [r7, #15]
      break;
 8003006:	e000      	b.n	800300a <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003008:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2201      	movs	r2, #1
 800300e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2200      	movs	r2, #0
 8003016:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800301a:	7bfb      	ldrb	r3, [r7, #15]
}
 800301c:	4618      	mov	r0, r3
 800301e:	3710      	adds	r7, #16
 8003020:	46bd      	mov	sp, r7
 8003022:	bd80      	pop	{r7, pc}

08003024 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003024:	b480      	push	{r7}
 8003026:	b083      	sub	sp, #12
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800302c:	bf00      	nop
 800302e:	370c      	adds	r7, #12
 8003030:	46bd      	mov	sp, r7
 8003032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003036:	4770      	bx	lr

08003038 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003038:	b480      	push	{r7}
 800303a:	b083      	sub	sp, #12
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003040:	bf00      	nop
 8003042:	370c      	adds	r7, #12
 8003044:	46bd      	mov	sp, r7
 8003046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304a:	4770      	bx	lr

0800304c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800304c:	b480      	push	{r7}
 800304e:	b083      	sub	sp, #12
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003054:	bf00      	nop
 8003056:	370c      	adds	r7, #12
 8003058:	46bd      	mov	sp, r7
 800305a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305e:	4770      	bx	lr

08003060 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003060:	b480      	push	{r7}
 8003062:	b083      	sub	sp, #12
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003068:	bf00      	nop
 800306a:	370c      	adds	r7, #12
 800306c:	46bd      	mov	sp, r7
 800306e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003072:	4770      	bx	lr

08003074 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003074:	b480      	push	{r7}
 8003076:	b083      	sub	sp, #12
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800307c:	bf00      	nop
 800307e:	370c      	adds	r7, #12
 8003080:	46bd      	mov	sp, r7
 8003082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003086:	4770      	bx	lr

08003088 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003088:	b480      	push	{r7}
 800308a:	b085      	sub	sp, #20
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
 8003090:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	4a34      	ldr	r2, [pc, #208]	; (800316c <TIM_Base_SetConfig+0xe4>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d00f      	beq.n	80030c0 <TIM_Base_SetConfig+0x38>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030a6:	d00b      	beq.n	80030c0 <TIM_Base_SetConfig+0x38>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	4a31      	ldr	r2, [pc, #196]	; (8003170 <TIM_Base_SetConfig+0xe8>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d007      	beq.n	80030c0 <TIM_Base_SetConfig+0x38>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	4a30      	ldr	r2, [pc, #192]	; (8003174 <TIM_Base_SetConfig+0xec>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d003      	beq.n	80030c0 <TIM_Base_SetConfig+0x38>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	4a2f      	ldr	r2, [pc, #188]	; (8003178 <TIM_Base_SetConfig+0xf0>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d108      	bne.n	80030d2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	68fa      	ldr	r2, [r7, #12]
 80030ce:	4313      	orrs	r3, r2
 80030d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	4a25      	ldr	r2, [pc, #148]	; (800316c <TIM_Base_SetConfig+0xe4>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d01b      	beq.n	8003112 <TIM_Base_SetConfig+0x8a>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030e0:	d017      	beq.n	8003112 <TIM_Base_SetConfig+0x8a>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	4a22      	ldr	r2, [pc, #136]	; (8003170 <TIM_Base_SetConfig+0xe8>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d013      	beq.n	8003112 <TIM_Base_SetConfig+0x8a>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	4a21      	ldr	r2, [pc, #132]	; (8003174 <TIM_Base_SetConfig+0xec>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d00f      	beq.n	8003112 <TIM_Base_SetConfig+0x8a>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	4a20      	ldr	r2, [pc, #128]	; (8003178 <TIM_Base_SetConfig+0xf0>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d00b      	beq.n	8003112 <TIM_Base_SetConfig+0x8a>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	4a1f      	ldr	r2, [pc, #124]	; (800317c <TIM_Base_SetConfig+0xf4>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d007      	beq.n	8003112 <TIM_Base_SetConfig+0x8a>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	4a1e      	ldr	r2, [pc, #120]	; (8003180 <TIM_Base_SetConfig+0xf8>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d003      	beq.n	8003112 <TIM_Base_SetConfig+0x8a>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	4a1d      	ldr	r2, [pc, #116]	; (8003184 <TIM_Base_SetConfig+0xfc>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d108      	bne.n	8003124 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003118:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	68db      	ldr	r3, [r3, #12]
 800311e:	68fa      	ldr	r2, [r7, #12]
 8003120:	4313      	orrs	r3, r2
 8003122:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	695b      	ldr	r3, [r3, #20]
 800312e:	4313      	orrs	r3, r2
 8003130:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	68fa      	ldr	r2, [r7, #12]
 8003136:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	689a      	ldr	r2, [r3, #8]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	681a      	ldr	r2, [r3, #0]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	4a08      	ldr	r2, [pc, #32]	; (800316c <TIM_Base_SetConfig+0xe4>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d103      	bne.n	8003158 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	691a      	ldr	r2, [r3, #16]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2201      	movs	r2, #1
 800315c:	615a      	str	r2, [r3, #20]
}
 800315e:	bf00      	nop
 8003160:	3714      	adds	r7, #20
 8003162:	46bd      	mov	sp, r7
 8003164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003168:	4770      	bx	lr
 800316a:	bf00      	nop
 800316c:	40010000 	.word	0x40010000
 8003170:	40000400 	.word	0x40000400
 8003174:	40000800 	.word	0x40000800
 8003178:	40000c00 	.word	0x40000c00
 800317c:	40014000 	.word	0x40014000
 8003180:	40014400 	.word	0x40014400
 8003184:	40014800 	.word	0x40014800

08003188 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003188:	b480      	push	{r7}
 800318a:	b087      	sub	sp, #28
 800318c:	af00      	add	r7, sp, #0
 800318e:	60f8      	str	r0, [r7, #12]
 8003190:	60b9      	str	r1, [r7, #8]
 8003192:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	6a1b      	ldr	r3, [r3, #32]
 8003198:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	6a1b      	ldr	r3, [r3, #32]
 800319e:	f023 0201 	bic.w	r2, r3, #1
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	699b      	ldr	r3, [r3, #24]
 80031aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80031ac:	693b      	ldr	r3, [r7, #16]
 80031ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80031b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	011b      	lsls	r3, r3, #4
 80031b8:	693a      	ldr	r2, [r7, #16]
 80031ba:	4313      	orrs	r3, r2
 80031bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	f023 030a 	bic.w	r3, r3, #10
 80031c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80031c6:	697a      	ldr	r2, [r7, #20]
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	4313      	orrs	r3, r2
 80031cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	693a      	ldr	r2, [r7, #16]
 80031d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	697a      	ldr	r2, [r7, #20]
 80031d8:	621a      	str	r2, [r3, #32]
}
 80031da:	bf00      	nop
 80031dc:	371c      	adds	r7, #28
 80031de:	46bd      	mov	sp, r7
 80031e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e4:	4770      	bx	lr

080031e6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80031e6:	b480      	push	{r7}
 80031e8:	b087      	sub	sp, #28
 80031ea:	af00      	add	r7, sp, #0
 80031ec:	60f8      	str	r0, [r7, #12]
 80031ee:	60b9      	str	r1, [r7, #8]
 80031f0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	6a1b      	ldr	r3, [r3, #32]
 80031f6:	f023 0210 	bic.w	r2, r3, #16
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	699b      	ldr	r3, [r3, #24]
 8003202:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	6a1b      	ldr	r3, [r3, #32]
 8003208:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003210:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	031b      	lsls	r3, r3, #12
 8003216:	697a      	ldr	r2, [r7, #20]
 8003218:	4313      	orrs	r3, r2
 800321a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003222:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	011b      	lsls	r3, r3, #4
 8003228:	693a      	ldr	r2, [r7, #16]
 800322a:	4313      	orrs	r3, r2
 800322c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	697a      	ldr	r2, [r7, #20]
 8003232:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	693a      	ldr	r2, [r7, #16]
 8003238:	621a      	str	r2, [r3, #32]
}
 800323a:	bf00      	nop
 800323c:	371c      	adds	r7, #28
 800323e:	46bd      	mov	sp, r7
 8003240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003244:	4770      	bx	lr

08003246 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003246:	b480      	push	{r7}
 8003248:	b085      	sub	sp, #20
 800324a:	af00      	add	r7, sp, #0
 800324c:	6078      	str	r0, [r7, #4]
 800324e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800325c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800325e:	683a      	ldr	r2, [r7, #0]
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	4313      	orrs	r3, r2
 8003264:	f043 0307 	orr.w	r3, r3, #7
 8003268:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	68fa      	ldr	r2, [r7, #12]
 800326e:	609a      	str	r2, [r3, #8]
}
 8003270:	bf00      	nop
 8003272:	3714      	adds	r7, #20
 8003274:	46bd      	mov	sp, r7
 8003276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327a:	4770      	bx	lr

0800327c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800327c:	b480      	push	{r7}
 800327e:	b087      	sub	sp, #28
 8003280:	af00      	add	r7, sp, #0
 8003282:	60f8      	str	r0, [r7, #12]
 8003284:	60b9      	str	r1, [r7, #8]
 8003286:	607a      	str	r2, [r7, #4]
 8003288:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003296:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	021a      	lsls	r2, r3, #8
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	431a      	orrs	r2, r3
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	4313      	orrs	r3, r2
 80032a4:	697a      	ldr	r2, [r7, #20]
 80032a6:	4313      	orrs	r3, r2
 80032a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	697a      	ldr	r2, [r7, #20]
 80032ae:	609a      	str	r2, [r3, #8]
}
 80032b0:	bf00      	nop
 80032b2:	371c      	adds	r7, #28
 80032b4:	46bd      	mov	sp, r7
 80032b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ba:	4770      	bx	lr

080032bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80032bc:	b480      	push	{r7}
 80032be:	b085      	sub	sp, #20
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
 80032c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d101      	bne.n	80032d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80032d0:	2302      	movs	r3, #2
 80032d2:	e050      	b.n	8003376 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2201      	movs	r2, #1
 80032d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2202      	movs	r2, #2
 80032e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	68fa      	ldr	r2, [r7, #12]
 8003302:	4313      	orrs	r3, r2
 8003304:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	68fa      	ldr	r2, [r7, #12]
 800330c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a1c      	ldr	r2, [pc, #112]	; (8003384 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d018      	beq.n	800334a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003320:	d013      	beq.n	800334a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a18      	ldr	r2, [pc, #96]	; (8003388 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d00e      	beq.n	800334a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a16      	ldr	r2, [pc, #88]	; (800338c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d009      	beq.n	800334a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a15      	ldr	r2, [pc, #84]	; (8003390 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d004      	beq.n	800334a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a13      	ldr	r2, [pc, #76]	; (8003394 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d10c      	bne.n	8003364 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003350:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	68ba      	ldr	r2, [r7, #8]
 8003358:	4313      	orrs	r3, r2
 800335a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	68ba      	ldr	r2, [r7, #8]
 8003362:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2201      	movs	r2, #1
 8003368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2200      	movs	r2, #0
 8003370:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003374:	2300      	movs	r3, #0
}
 8003376:	4618      	mov	r0, r3
 8003378:	3714      	adds	r7, #20
 800337a:	46bd      	mov	sp, r7
 800337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003380:	4770      	bx	lr
 8003382:	bf00      	nop
 8003384:	40010000 	.word	0x40010000
 8003388:	40000400 	.word	0x40000400
 800338c:	40000800 	.word	0x40000800
 8003390:	40000c00 	.word	0x40000c00
 8003394:	40014000 	.word	0x40014000

08003398 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003398:	b480      	push	{r7}
 800339a:	b083      	sub	sp, #12
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80033a0:	bf00      	nop
 80033a2:	370c      	adds	r7, #12
 80033a4:	46bd      	mov	sp, r7
 80033a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033aa:	4770      	bx	lr

080033ac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80033ac:	b480      	push	{r7}
 80033ae:	b083      	sub	sp, #12
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80033b4:	bf00      	nop
 80033b6:	370c      	adds	r7, #12
 80033b8:	46bd      	mov	sp, r7
 80033ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033be:	4770      	bx	lr

080033c0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80033c0:	b084      	sub	sp, #16
 80033c2:	b580      	push	{r7, lr}
 80033c4:	b084      	sub	sp, #16
 80033c6:	af00      	add	r7, sp, #0
 80033c8:	6078      	str	r0, [r7, #4]
 80033ca:	f107 001c 	add.w	r0, r7, #28
 80033ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80033d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	d122      	bne.n	800341e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033dc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	68db      	ldr	r3, [r3, #12]
 80033e8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80033ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80033f0:	687a      	ldr	r2, [r7, #4]
 80033f2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	68db      	ldr	r3, [r3, #12]
 80033f8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003400:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003402:	2b01      	cmp	r3, #1
 8003404:	d105      	bne.n	8003412 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	68db      	ldr	r3, [r3, #12]
 800340a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	f001 fb1c 	bl	8004a50 <USB_CoreReset>
 8003418:	4603      	mov	r3, r0
 800341a:	73fb      	strb	r3, [r7, #15]
 800341c:	e01a      	b.n	8003454 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	68db      	ldr	r3, [r3, #12]
 8003422:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800342a:	6878      	ldr	r0, [r7, #4]
 800342c:	f001 fb10 	bl	8004a50 <USB_CoreReset>
 8003430:	4603      	mov	r3, r0
 8003432:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003434:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003436:	2b00      	cmp	r3, #0
 8003438:	d106      	bne.n	8003448 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800343e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	639a      	str	r2, [r3, #56]	; 0x38
 8003446:	e005      	b.n	8003454 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800344c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003456:	2b01      	cmp	r3, #1
 8003458:	d10b      	bne.n	8003472 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	f043 0206 	orr.w	r2, r3, #6
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	f043 0220 	orr.w	r2, r3, #32
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003472:	7bfb      	ldrb	r3, [r7, #15]
}
 8003474:	4618      	mov	r0, r3
 8003476:	3710      	adds	r7, #16
 8003478:	46bd      	mov	sp, r7
 800347a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800347e:	b004      	add	sp, #16
 8003480:	4770      	bx	lr
	...

08003484 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003484:	b480      	push	{r7}
 8003486:	b087      	sub	sp, #28
 8003488:	af00      	add	r7, sp, #0
 800348a:	60f8      	str	r0, [r7, #12]
 800348c:	60b9      	str	r1, [r7, #8]
 800348e:	4613      	mov	r3, r2
 8003490:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003492:	79fb      	ldrb	r3, [r7, #7]
 8003494:	2b02      	cmp	r3, #2
 8003496:	d165      	bne.n	8003564 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003498:	68bb      	ldr	r3, [r7, #8]
 800349a:	4a41      	ldr	r2, [pc, #260]	; (80035a0 <USB_SetTurnaroundTime+0x11c>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d906      	bls.n	80034ae <USB_SetTurnaroundTime+0x2a>
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	4a40      	ldr	r2, [pc, #256]	; (80035a4 <USB_SetTurnaroundTime+0x120>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d202      	bcs.n	80034ae <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80034a8:	230f      	movs	r3, #15
 80034aa:	617b      	str	r3, [r7, #20]
 80034ac:	e062      	b.n	8003574 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	4a3c      	ldr	r2, [pc, #240]	; (80035a4 <USB_SetTurnaroundTime+0x120>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d306      	bcc.n	80034c4 <USB_SetTurnaroundTime+0x40>
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	4a3b      	ldr	r2, [pc, #236]	; (80035a8 <USB_SetTurnaroundTime+0x124>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d202      	bcs.n	80034c4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80034be:	230e      	movs	r3, #14
 80034c0:	617b      	str	r3, [r7, #20]
 80034c2:	e057      	b.n	8003574 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	4a38      	ldr	r2, [pc, #224]	; (80035a8 <USB_SetTurnaroundTime+0x124>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d306      	bcc.n	80034da <USB_SetTurnaroundTime+0x56>
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	4a37      	ldr	r2, [pc, #220]	; (80035ac <USB_SetTurnaroundTime+0x128>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d202      	bcs.n	80034da <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80034d4:	230d      	movs	r3, #13
 80034d6:	617b      	str	r3, [r7, #20]
 80034d8:	e04c      	b.n	8003574 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	4a33      	ldr	r2, [pc, #204]	; (80035ac <USB_SetTurnaroundTime+0x128>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d306      	bcc.n	80034f0 <USB_SetTurnaroundTime+0x6c>
 80034e2:	68bb      	ldr	r3, [r7, #8]
 80034e4:	4a32      	ldr	r2, [pc, #200]	; (80035b0 <USB_SetTurnaroundTime+0x12c>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d802      	bhi.n	80034f0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80034ea:	230c      	movs	r3, #12
 80034ec:	617b      	str	r3, [r7, #20]
 80034ee:	e041      	b.n	8003574 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	4a2f      	ldr	r2, [pc, #188]	; (80035b0 <USB_SetTurnaroundTime+0x12c>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d906      	bls.n	8003506 <USB_SetTurnaroundTime+0x82>
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	4a2e      	ldr	r2, [pc, #184]	; (80035b4 <USB_SetTurnaroundTime+0x130>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d802      	bhi.n	8003506 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003500:	230b      	movs	r3, #11
 8003502:	617b      	str	r3, [r7, #20]
 8003504:	e036      	b.n	8003574 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	4a2a      	ldr	r2, [pc, #168]	; (80035b4 <USB_SetTurnaroundTime+0x130>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d906      	bls.n	800351c <USB_SetTurnaroundTime+0x98>
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	4a29      	ldr	r2, [pc, #164]	; (80035b8 <USB_SetTurnaroundTime+0x134>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d802      	bhi.n	800351c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003516:	230a      	movs	r3, #10
 8003518:	617b      	str	r3, [r7, #20]
 800351a:	e02b      	b.n	8003574 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	4a26      	ldr	r2, [pc, #152]	; (80035b8 <USB_SetTurnaroundTime+0x134>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d906      	bls.n	8003532 <USB_SetTurnaroundTime+0xae>
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	4a25      	ldr	r2, [pc, #148]	; (80035bc <USB_SetTurnaroundTime+0x138>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d202      	bcs.n	8003532 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800352c:	2309      	movs	r3, #9
 800352e:	617b      	str	r3, [r7, #20]
 8003530:	e020      	b.n	8003574 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	4a21      	ldr	r2, [pc, #132]	; (80035bc <USB_SetTurnaroundTime+0x138>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d306      	bcc.n	8003548 <USB_SetTurnaroundTime+0xc4>
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	4a20      	ldr	r2, [pc, #128]	; (80035c0 <USB_SetTurnaroundTime+0x13c>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d802      	bhi.n	8003548 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003542:	2308      	movs	r3, #8
 8003544:	617b      	str	r3, [r7, #20]
 8003546:	e015      	b.n	8003574 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	4a1d      	ldr	r2, [pc, #116]	; (80035c0 <USB_SetTurnaroundTime+0x13c>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d906      	bls.n	800355e <USB_SetTurnaroundTime+0xda>
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	4a1c      	ldr	r2, [pc, #112]	; (80035c4 <USB_SetTurnaroundTime+0x140>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d202      	bcs.n	800355e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003558:	2307      	movs	r3, #7
 800355a:	617b      	str	r3, [r7, #20]
 800355c:	e00a      	b.n	8003574 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800355e:	2306      	movs	r3, #6
 8003560:	617b      	str	r3, [r7, #20]
 8003562:	e007      	b.n	8003574 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003564:	79fb      	ldrb	r3, [r7, #7]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d102      	bne.n	8003570 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800356a:	2309      	movs	r3, #9
 800356c:	617b      	str	r3, [r7, #20]
 800356e:	e001      	b.n	8003574 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003570:	2309      	movs	r3, #9
 8003572:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	68db      	ldr	r3, [r3, #12]
 8003578:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	68da      	ldr	r2, [r3, #12]
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	029b      	lsls	r3, r3, #10
 8003588:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800358c:	431a      	orrs	r2, r3
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003592:	2300      	movs	r3, #0
}
 8003594:	4618      	mov	r0, r3
 8003596:	371c      	adds	r7, #28
 8003598:	46bd      	mov	sp, r7
 800359a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359e:	4770      	bx	lr
 80035a0:	00d8acbf 	.word	0x00d8acbf
 80035a4:	00e4e1c0 	.word	0x00e4e1c0
 80035a8:	00f42400 	.word	0x00f42400
 80035ac:	01067380 	.word	0x01067380
 80035b0:	011a499f 	.word	0x011a499f
 80035b4:	01312cff 	.word	0x01312cff
 80035b8:	014ca43f 	.word	0x014ca43f
 80035bc:	016e3600 	.word	0x016e3600
 80035c0:	01a6ab1f 	.word	0x01a6ab1f
 80035c4:	01e84800 	.word	0x01e84800

080035c8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80035c8:	b480      	push	{r7}
 80035ca:	b083      	sub	sp, #12
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	f043 0201 	orr.w	r2, r3, #1
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80035dc:	2300      	movs	r3, #0
}
 80035de:	4618      	mov	r0, r3
 80035e0:	370c      	adds	r7, #12
 80035e2:	46bd      	mov	sp, r7
 80035e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e8:	4770      	bx	lr

080035ea <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80035ea:	b480      	push	{r7}
 80035ec:	b083      	sub	sp, #12
 80035ee:	af00      	add	r7, sp, #0
 80035f0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	f023 0201 	bic.w	r2, r3, #1
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80035fe:	2300      	movs	r3, #0
}
 8003600:	4618      	mov	r0, r3
 8003602:	370c      	adds	r7, #12
 8003604:	46bd      	mov	sp, r7
 8003606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360a:	4770      	bx	lr

0800360c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b084      	sub	sp, #16
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
 8003614:	460b      	mov	r3, r1
 8003616:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003618:	2300      	movs	r3, #0
 800361a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	68db      	ldr	r3, [r3, #12]
 8003620:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003628:	78fb      	ldrb	r3, [r7, #3]
 800362a:	2b01      	cmp	r3, #1
 800362c:	d115      	bne.n	800365a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	68db      	ldr	r3, [r3, #12]
 8003632:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800363a:	2001      	movs	r0, #1
 800363c:	f7fd fa4e 	bl	8000adc <HAL_Delay>
      ms++;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	3301      	adds	r3, #1
 8003644:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003646:	6878      	ldr	r0, [r7, #4]
 8003648:	f001 f972 	bl	8004930 <USB_GetMode>
 800364c:	4603      	mov	r3, r0
 800364e:	2b01      	cmp	r3, #1
 8003650:	d01e      	beq.n	8003690 <USB_SetCurrentMode+0x84>
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	2b31      	cmp	r3, #49	; 0x31
 8003656:	d9f0      	bls.n	800363a <USB_SetCurrentMode+0x2e>
 8003658:	e01a      	b.n	8003690 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800365a:	78fb      	ldrb	r3, [r7, #3]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d115      	bne.n	800368c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	68db      	ldr	r3, [r3, #12]
 8003664:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800366c:	2001      	movs	r0, #1
 800366e:	f7fd fa35 	bl	8000adc <HAL_Delay>
      ms++;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	3301      	adds	r3, #1
 8003676:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003678:	6878      	ldr	r0, [r7, #4]
 800367a:	f001 f959 	bl	8004930 <USB_GetMode>
 800367e:	4603      	mov	r3, r0
 8003680:	2b00      	cmp	r3, #0
 8003682:	d005      	beq.n	8003690 <USB_SetCurrentMode+0x84>
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	2b31      	cmp	r3, #49	; 0x31
 8003688:	d9f0      	bls.n	800366c <USB_SetCurrentMode+0x60>
 800368a:	e001      	b.n	8003690 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	e005      	b.n	800369c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	2b32      	cmp	r3, #50	; 0x32
 8003694:	d101      	bne.n	800369a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	e000      	b.n	800369c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800369a:	2300      	movs	r3, #0
}
 800369c:	4618      	mov	r0, r3
 800369e:	3710      	adds	r7, #16
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bd80      	pop	{r7, pc}

080036a4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80036a4:	b084      	sub	sp, #16
 80036a6:	b580      	push	{r7, lr}
 80036a8:	b086      	sub	sp, #24
 80036aa:	af00      	add	r7, sp, #0
 80036ac:	6078      	str	r0, [r7, #4]
 80036ae:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80036b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80036b6:	2300      	movs	r3, #0
 80036b8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80036be:	2300      	movs	r3, #0
 80036c0:	613b      	str	r3, [r7, #16]
 80036c2:	e009      	b.n	80036d8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80036c4:	687a      	ldr	r2, [r7, #4]
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	3340      	adds	r3, #64	; 0x40
 80036ca:	009b      	lsls	r3, r3, #2
 80036cc:	4413      	add	r3, r2
 80036ce:	2200      	movs	r2, #0
 80036d0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	3301      	adds	r3, #1
 80036d6:	613b      	str	r3, [r7, #16]
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	2b0e      	cmp	r3, #14
 80036dc:	d9f2      	bls.n	80036c4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80036de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d11c      	bne.n	800371e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	68fa      	ldr	r2, [r7, #12]
 80036ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80036f2:	f043 0302 	orr.w	r3, r3, #2
 80036f6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036fc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003708:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003714:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	639a      	str	r2, [r3, #56]	; 0x38
 800371c:	e00b      	b.n	8003736 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003722:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800372e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800373c:	461a      	mov	r2, r3
 800373e:	2300      	movs	r3, #0
 8003740:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003748:	4619      	mov	r1, r3
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003750:	461a      	mov	r2, r3
 8003752:	680b      	ldr	r3, [r1, #0]
 8003754:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003756:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003758:	2b01      	cmp	r3, #1
 800375a:	d10c      	bne.n	8003776 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800375c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800375e:	2b00      	cmp	r3, #0
 8003760:	d104      	bne.n	800376c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003762:	2100      	movs	r1, #0
 8003764:	6878      	ldr	r0, [r7, #4]
 8003766:	f000 f945 	bl	80039f4 <USB_SetDevSpeed>
 800376a:	e008      	b.n	800377e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800376c:	2101      	movs	r1, #1
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	f000 f940 	bl	80039f4 <USB_SetDevSpeed>
 8003774:	e003      	b.n	800377e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003776:	2103      	movs	r1, #3
 8003778:	6878      	ldr	r0, [r7, #4]
 800377a:	f000 f93b 	bl	80039f4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800377e:	2110      	movs	r1, #16
 8003780:	6878      	ldr	r0, [r7, #4]
 8003782:	f000 f8f3 	bl	800396c <USB_FlushTxFifo>
 8003786:	4603      	mov	r3, r0
 8003788:	2b00      	cmp	r3, #0
 800378a:	d001      	beq.n	8003790 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800378c:	2301      	movs	r3, #1
 800378e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003790:	6878      	ldr	r0, [r7, #4]
 8003792:	f000 f90f 	bl	80039b4 <USB_FlushRxFifo>
 8003796:	4603      	mov	r3, r0
 8003798:	2b00      	cmp	r3, #0
 800379a:	d001      	beq.n	80037a0 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800379c:	2301      	movs	r3, #1
 800379e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037a6:	461a      	mov	r2, r3
 80037a8:	2300      	movs	r3, #0
 80037aa:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037b2:	461a      	mov	r2, r3
 80037b4:	2300      	movs	r3, #0
 80037b6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037be:	461a      	mov	r2, r3
 80037c0:	2300      	movs	r3, #0
 80037c2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80037c4:	2300      	movs	r3, #0
 80037c6:	613b      	str	r3, [r7, #16]
 80037c8:	e043      	b.n	8003852 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	015a      	lsls	r2, r3, #5
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	4413      	add	r3, r2
 80037d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80037dc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80037e0:	d118      	bne.n	8003814 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d10a      	bne.n	80037fe <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80037e8:	693b      	ldr	r3, [r7, #16]
 80037ea:	015a      	lsls	r2, r3, #5
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	4413      	add	r3, r2
 80037f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037f4:	461a      	mov	r2, r3
 80037f6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80037fa:	6013      	str	r3, [r2, #0]
 80037fc:	e013      	b.n	8003826 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	015a      	lsls	r2, r3, #5
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	4413      	add	r3, r2
 8003806:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800380a:	461a      	mov	r2, r3
 800380c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003810:	6013      	str	r3, [r2, #0]
 8003812:	e008      	b.n	8003826 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	015a      	lsls	r2, r3, #5
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	4413      	add	r3, r2
 800381c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003820:	461a      	mov	r2, r3
 8003822:	2300      	movs	r3, #0
 8003824:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	015a      	lsls	r2, r3, #5
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	4413      	add	r3, r2
 800382e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003832:	461a      	mov	r2, r3
 8003834:	2300      	movs	r3, #0
 8003836:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	015a      	lsls	r2, r3, #5
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	4413      	add	r3, r2
 8003840:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003844:	461a      	mov	r2, r3
 8003846:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800384a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800384c:	693b      	ldr	r3, [r7, #16]
 800384e:	3301      	adds	r3, #1
 8003850:	613b      	str	r3, [r7, #16]
 8003852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003854:	693a      	ldr	r2, [r7, #16]
 8003856:	429a      	cmp	r2, r3
 8003858:	d3b7      	bcc.n	80037ca <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800385a:	2300      	movs	r3, #0
 800385c:	613b      	str	r3, [r7, #16]
 800385e:	e043      	b.n	80038e8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003860:	693b      	ldr	r3, [r7, #16]
 8003862:	015a      	lsls	r2, r3, #5
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	4413      	add	r3, r2
 8003868:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003872:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003876:	d118      	bne.n	80038aa <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d10a      	bne.n	8003894 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	015a      	lsls	r2, r3, #5
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	4413      	add	r3, r2
 8003886:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800388a:	461a      	mov	r2, r3
 800388c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003890:	6013      	str	r3, [r2, #0]
 8003892:	e013      	b.n	80038bc <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003894:	693b      	ldr	r3, [r7, #16]
 8003896:	015a      	lsls	r2, r3, #5
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	4413      	add	r3, r2
 800389c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038a0:	461a      	mov	r2, r3
 80038a2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80038a6:	6013      	str	r3, [r2, #0]
 80038a8:	e008      	b.n	80038bc <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	015a      	lsls	r2, r3, #5
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	4413      	add	r3, r2
 80038b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038b6:	461a      	mov	r2, r3
 80038b8:	2300      	movs	r3, #0
 80038ba:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80038bc:	693b      	ldr	r3, [r7, #16]
 80038be:	015a      	lsls	r2, r3, #5
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	4413      	add	r3, r2
 80038c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038c8:	461a      	mov	r2, r3
 80038ca:	2300      	movs	r3, #0
 80038cc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80038ce:	693b      	ldr	r3, [r7, #16]
 80038d0:	015a      	lsls	r2, r3, #5
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	4413      	add	r3, r2
 80038d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038da:	461a      	mov	r2, r3
 80038dc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80038e0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	3301      	adds	r3, #1
 80038e6:	613b      	str	r3, [r7, #16]
 80038e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ea:	693a      	ldr	r2, [r7, #16]
 80038ec:	429a      	cmp	r2, r3
 80038ee:	d3b7      	bcc.n	8003860 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038f6:	691b      	ldr	r3, [r3, #16]
 80038f8:	68fa      	ldr	r2, [r7, #12]
 80038fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80038fe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003902:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2200      	movs	r2, #0
 8003908:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003910:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003914:	2b00      	cmp	r3, #0
 8003916:	d105      	bne.n	8003924 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	699b      	ldr	r3, [r3, #24]
 800391c:	f043 0210 	orr.w	r2, r3, #16
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	699a      	ldr	r2, [r3, #24]
 8003928:	4b0f      	ldr	r3, [pc, #60]	; (8003968 <USB_DevInit+0x2c4>)
 800392a:	4313      	orrs	r3, r2
 800392c:	687a      	ldr	r2, [r7, #4]
 800392e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003930:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003932:	2b00      	cmp	r3, #0
 8003934:	d005      	beq.n	8003942 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	699b      	ldr	r3, [r3, #24]
 800393a:	f043 0208 	orr.w	r2, r3, #8
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003942:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003944:	2b01      	cmp	r3, #1
 8003946:	d107      	bne.n	8003958 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	699b      	ldr	r3, [r3, #24]
 800394c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003950:	f043 0304 	orr.w	r3, r3, #4
 8003954:	687a      	ldr	r2, [r7, #4]
 8003956:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003958:	7dfb      	ldrb	r3, [r7, #23]
}
 800395a:	4618      	mov	r0, r3
 800395c:	3718      	adds	r7, #24
 800395e:	46bd      	mov	sp, r7
 8003960:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003964:	b004      	add	sp, #16
 8003966:	4770      	bx	lr
 8003968:	803c3800 	.word	0x803c3800

0800396c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800396c:	b480      	push	{r7}
 800396e:	b085      	sub	sp, #20
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
 8003974:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003976:	2300      	movs	r3, #0
 8003978:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	019b      	lsls	r3, r3, #6
 800397e:	f043 0220 	orr.w	r2, r3, #32
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	3301      	adds	r3, #1
 800398a:	60fb      	str	r3, [r7, #12]
 800398c:	4a08      	ldr	r2, [pc, #32]	; (80039b0 <USB_FlushTxFifo+0x44>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d901      	bls.n	8003996 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8003992:	2303      	movs	r3, #3
 8003994:	e006      	b.n	80039a4 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	691b      	ldr	r3, [r3, #16]
 800399a:	f003 0320 	and.w	r3, r3, #32
 800399e:	2b20      	cmp	r3, #32
 80039a0:	d0f1      	beq.n	8003986 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80039a2:	2300      	movs	r3, #0
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	3714      	adds	r7, #20
 80039a8:	46bd      	mov	sp, r7
 80039aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ae:	4770      	bx	lr
 80039b0:	00030d40 	.word	0x00030d40

080039b4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80039b4:	b480      	push	{r7}
 80039b6:	b085      	sub	sp, #20
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80039bc:	2300      	movs	r3, #0
 80039be:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2210      	movs	r2, #16
 80039c4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	3301      	adds	r3, #1
 80039ca:	60fb      	str	r3, [r7, #12]
 80039cc:	4a08      	ldr	r2, [pc, #32]	; (80039f0 <USB_FlushRxFifo+0x3c>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d901      	bls.n	80039d6 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 80039d2:	2303      	movs	r3, #3
 80039d4:	e006      	b.n	80039e4 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	691b      	ldr	r3, [r3, #16]
 80039da:	f003 0310 	and.w	r3, r3, #16
 80039de:	2b10      	cmp	r3, #16
 80039e0:	d0f1      	beq.n	80039c6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80039e2:	2300      	movs	r3, #0
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	3714      	adds	r7, #20
 80039e8:	46bd      	mov	sp, r7
 80039ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ee:	4770      	bx	lr
 80039f0:	00030d40 	.word	0x00030d40

080039f4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b085      	sub	sp, #20
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
 80039fc:	460b      	mov	r3, r1
 80039fe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a0a:	681a      	ldr	r2, [r3, #0]
 8003a0c:	78fb      	ldrb	r3, [r7, #3]
 8003a0e:	68f9      	ldr	r1, [r7, #12]
 8003a10:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003a14:	4313      	orrs	r3, r2
 8003a16:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003a18:	2300      	movs	r3, #0
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	3714      	adds	r7, #20
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a24:	4770      	bx	lr

08003a26 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8003a26:	b480      	push	{r7}
 8003a28:	b087      	sub	sp, #28
 8003a2a:	af00      	add	r7, sp, #0
 8003a2c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a38:	689b      	ldr	r3, [r3, #8]
 8003a3a:	f003 0306 	and.w	r3, r3, #6
 8003a3e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d102      	bne.n	8003a4c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003a46:	2300      	movs	r3, #0
 8003a48:	75fb      	strb	r3, [r7, #23]
 8003a4a:	e00a      	b.n	8003a62 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	2b02      	cmp	r3, #2
 8003a50:	d002      	beq.n	8003a58 <USB_GetDevSpeed+0x32>
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	2b06      	cmp	r3, #6
 8003a56:	d102      	bne.n	8003a5e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003a58:	2302      	movs	r3, #2
 8003a5a:	75fb      	strb	r3, [r7, #23]
 8003a5c:	e001      	b.n	8003a62 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003a5e:	230f      	movs	r3, #15
 8003a60:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003a62:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	371c      	adds	r7, #28
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6e:	4770      	bx	lr

08003a70 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b085      	sub	sp, #20
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
 8003a78:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	781b      	ldrb	r3, [r3, #0]
 8003a82:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	785b      	ldrb	r3, [r3, #1]
 8003a88:	2b01      	cmp	r3, #1
 8003a8a:	d13a      	bne.n	8003b02 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a92:	69da      	ldr	r2, [r3, #28]
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	781b      	ldrb	r3, [r3, #0]
 8003a98:	f003 030f 	and.w	r3, r3, #15
 8003a9c:	2101      	movs	r1, #1
 8003a9e:	fa01 f303 	lsl.w	r3, r1, r3
 8003aa2:	b29b      	uxth	r3, r3
 8003aa4:	68f9      	ldr	r1, [r7, #12]
 8003aa6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003aae:	68bb      	ldr	r3, [r7, #8]
 8003ab0:	015a      	lsls	r2, r3, #5
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	4413      	add	r3, r2
 8003ab6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d155      	bne.n	8003b70 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	015a      	lsls	r2, r3, #5
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	4413      	add	r3, r2
 8003acc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ad0:	681a      	ldr	r2, [r3, #0]
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	689b      	ldr	r3, [r3, #8]
 8003ad6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	78db      	ldrb	r3, [r3, #3]
 8003ade:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003ae0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003ae2:	68bb      	ldr	r3, [r7, #8]
 8003ae4:	059b      	lsls	r3, r3, #22
 8003ae6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	68ba      	ldr	r2, [r7, #8]
 8003aec:	0151      	lsls	r1, r2, #5
 8003aee:	68fa      	ldr	r2, [r7, #12]
 8003af0:	440a      	add	r2, r1
 8003af2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003af6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003afa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003afe:	6013      	str	r3, [r2, #0]
 8003b00:	e036      	b.n	8003b70 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b08:	69da      	ldr	r2, [r3, #28]
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	781b      	ldrb	r3, [r3, #0]
 8003b0e:	f003 030f 	and.w	r3, r3, #15
 8003b12:	2101      	movs	r1, #1
 8003b14:	fa01 f303 	lsl.w	r3, r1, r3
 8003b18:	041b      	lsls	r3, r3, #16
 8003b1a:	68f9      	ldr	r1, [r7, #12]
 8003b1c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003b20:	4313      	orrs	r3, r2
 8003b22:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	015a      	lsls	r2, r3, #5
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	4413      	add	r3, r2
 8003b2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d11a      	bne.n	8003b70 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	015a      	lsls	r2, r3, #5
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	4413      	add	r3, r2
 8003b42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b46:	681a      	ldr	r2, [r3, #0]
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	689b      	ldr	r3, [r3, #8]
 8003b4c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	78db      	ldrb	r3, [r3, #3]
 8003b54:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003b56:	430b      	orrs	r3, r1
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	68ba      	ldr	r2, [r7, #8]
 8003b5c:	0151      	lsls	r1, r2, #5
 8003b5e:	68fa      	ldr	r2, [r7, #12]
 8003b60:	440a      	add	r2, r1
 8003b62:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003b66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b6e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003b70:	2300      	movs	r3, #0
}
 8003b72:	4618      	mov	r0, r3
 8003b74:	3714      	adds	r7, #20
 8003b76:	46bd      	mov	sp, r7
 8003b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7c:	4770      	bx	lr
	...

08003b80 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b085      	sub	sp, #20
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
 8003b88:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	781b      	ldrb	r3, [r3, #0]
 8003b92:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	785b      	ldrb	r3, [r3, #1]
 8003b98:	2b01      	cmp	r3, #1
 8003b9a:	d161      	bne.n	8003c60 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	015a      	lsls	r2, r3, #5
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	4413      	add	r3, r2
 8003ba4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003bae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003bb2:	d11f      	bne.n	8003bf4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	015a      	lsls	r2, r3, #5
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	4413      	add	r3, r2
 8003bbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	68ba      	ldr	r2, [r7, #8]
 8003bc4:	0151      	lsls	r1, r2, #5
 8003bc6:	68fa      	ldr	r2, [r7, #12]
 8003bc8:	440a      	add	r2, r1
 8003bca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003bce:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003bd2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	015a      	lsls	r2, r3, #5
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	4413      	add	r3, r2
 8003bdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	68ba      	ldr	r2, [r7, #8]
 8003be4:	0151      	lsls	r1, r2, #5
 8003be6:	68fa      	ldr	r2, [r7, #12]
 8003be8:	440a      	add	r2, r1
 8003bea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003bee:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003bf2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bfa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	781b      	ldrb	r3, [r3, #0]
 8003c00:	f003 030f 	and.w	r3, r3, #15
 8003c04:	2101      	movs	r1, #1
 8003c06:	fa01 f303 	lsl.w	r3, r1, r3
 8003c0a:	b29b      	uxth	r3, r3
 8003c0c:	43db      	mvns	r3, r3
 8003c0e:	68f9      	ldr	r1, [r7, #12]
 8003c10:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003c14:	4013      	ands	r3, r2
 8003c16:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c1e:	69da      	ldr	r2, [r3, #28]
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	781b      	ldrb	r3, [r3, #0]
 8003c24:	f003 030f 	and.w	r3, r3, #15
 8003c28:	2101      	movs	r1, #1
 8003c2a:	fa01 f303 	lsl.w	r3, r1, r3
 8003c2e:	b29b      	uxth	r3, r3
 8003c30:	43db      	mvns	r3, r3
 8003c32:	68f9      	ldr	r1, [r7, #12]
 8003c34:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003c38:	4013      	ands	r3, r2
 8003c3a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	015a      	lsls	r2, r3, #5
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	4413      	add	r3, r2
 8003c44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c48:	681a      	ldr	r2, [r3, #0]
 8003c4a:	68bb      	ldr	r3, [r7, #8]
 8003c4c:	0159      	lsls	r1, r3, #5
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	440b      	add	r3, r1
 8003c52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c56:	4619      	mov	r1, r3
 8003c58:	4b35      	ldr	r3, [pc, #212]	; (8003d30 <USB_DeactivateEndpoint+0x1b0>)
 8003c5a:	4013      	ands	r3, r2
 8003c5c:	600b      	str	r3, [r1, #0]
 8003c5e:	e060      	b.n	8003d22 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	015a      	lsls	r2, r3, #5
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	4413      	add	r3, r2
 8003c68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003c72:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003c76:	d11f      	bne.n	8003cb8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	015a      	lsls	r2, r3, #5
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	4413      	add	r3, r2
 8003c80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	68ba      	ldr	r2, [r7, #8]
 8003c88:	0151      	lsls	r1, r2, #5
 8003c8a:	68fa      	ldr	r2, [r7, #12]
 8003c8c:	440a      	add	r2, r1
 8003c8e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c92:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003c96:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	015a      	lsls	r2, r3, #5
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	4413      	add	r3, r2
 8003ca0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	68ba      	ldr	r2, [r7, #8]
 8003ca8:	0151      	lsls	r1, r2, #5
 8003caa:	68fa      	ldr	r2, [r7, #12]
 8003cac:	440a      	add	r2, r1
 8003cae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003cb2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003cb6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cbe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	781b      	ldrb	r3, [r3, #0]
 8003cc4:	f003 030f 	and.w	r3, r3, #15
 8003cc8:	2101      	movs	r1, #1
 8003cca:	fa01 f303 	lsl.w	r3, r1, r3
 8003cce:	041b      	lsls	r3, r3, #16
 8003cd0:	43db      	mvns	r3, r3
 8003cd2:	68f9      	ldr	r1, [r7, #12]
 8003cd4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003cd8:	4013      	ands	r3, r2
 8003cda:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ce2:	69da      	ldr	r2, [r3, #28]
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	781b      	ldrb	r3, [r3, #0]
 8003ce8:	f003 030f 	and.w	r3, r3, #15
 8003cec:	2101      	movs	r1, #1
 8003cee:	fa01 f303 	lsl.w	r3, r1, r3
 8003cf2:	041b      	lsls	r3, r3, #16
 8003cf4:	43db      	mvns	r3, r3
 8003cf6:	68f9      	ldr	r1, [r7, #12]
 8003cf8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003cfc:	4013      	ands	r3, r2
 8003cfe:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	015a      	lsls	r2, r3, #5
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	4413      	add	r3, r2
 8003d08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d0c:	681a      	ldr	r2, [r3, #0]
 8003d0e:	68bb      	ldr	r3, [r7, #8]
 8003d10:	0159      	lsls	r1, r3, #5
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	440b      	add	r3, r1
 8003d16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d1a:	4619      	mov	r1, r3
 8003d1c:	4b05      	ldr	r3, [pc, #20]	; (8003d34 <USB_DeactivateEndpoint+0x1b4>)
 8003d1e:	4013      	ands	r3, r2
 8003d20:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8003d22:	2300      	movs	r3, #0
}
 8003d24:	4618      	mov	r0, r3
 8003d26:	3714      	adds	r7, #20
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2e:	4770      	bx	lr
 8003d30:	ec337800 	.word	0xec337800
 8003d34:	eff37800 	.word	0xeff37800

08003d38 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b08a      	sub	sp, #40	; 0x28
 8003d3c:	af02      	add	r7, sp, #8
 8003d3e:	60f8      	str	r0, [r7, #12]
 8003d40:	60b9      	str	r1, [r7, #8]
 8003d42:	4613      	mov	r3, r2
 8003d44:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	781b      	ldrb	r3, [r3, #0]
 8003d4e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	785b      	ldrb	r3, [r3, #1]
 8003d54:	2b01      	cmp	r3, #1
 8003d56:	f040 815c 	bne.w	8004012 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	695b      	ldr	r3, [r3, #20]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d132      	bne.n	8003dc8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003d62:	69bb      	ldr	r3, [r7, #24]
 8003d64:	015a      	lsls	r2, r3, #5
 8003d66:	69fb      	ldr	r3, [r7, #28]
 8003d68:	4413      	add	r3, r2
 8003d6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d6e:	691b      	ldr	r3, [r3, #16]
 8003d70:	69ba      	ldr	r2, [r7, #24]
 8003d72:	0151      	lsls	r1, r2, #5
 8003d74:	69fa      	ldr	r2, [r7, #28]
 8003d76:	440a      	add	r2, r1
 8003d78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d7c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003d80:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003d84:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003d86:	69bb      	ldr	r3, [r7, #24]
 8003d88:	015a      	lsls	r2, r3, #5
 8003d8a:	69fb      	ldr	r3, [r7, #28]
 8003d8c:	4413      	add	r3, r2
 8003d8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d92:	691b      	ldr	r3, [r3, #16]
 8003d94:	69ba      	ldr	r2, [r7, #24]
 8003d96:	0151      	lsls	r1, r2, #5
 8003d98:	69fa      	ldr	r2, [r7, #28]
 8003d9a:	440a      	add	r2, r1
 8003d9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003da0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003da4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003da6:	69bb      	ldr	r3, [r7, #24]
 8003da8:	015a      	lsls	r2, r3, #5
 8003daa:	69fb      	ldr	r3, [r7, #28]
 8003dac:	4413      	add	r3, r2
 8003dae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003db2:	691b      	ldr	r3, [r3, #16]
 8003db4:	69ba      	ldr	r2, [r7, #24]
 8003db6:	0151      	lsls	r1, r2, #5
 8003db8:	69fa      	ldr	r2, [r7, #28]
 8003dba:	440a      	add	r2, r1
 8003dbc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003dc0:	0cdb      	lsrs	r3, r3, #19
 8003dc2:	04db      	lsls	r3, r3, #19
 8003dc4:	6113      	str	r3, [r2, #16]
 8003dc6:	e074      	b.n	8003eb2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003dc8:	69bb      	ldr	r3, [r7, #24]
 8003dca:	015a      	lsls	r2, r3, #5
 8003dcc:	69fb      	ldr	r3, [r7, #28]
 8003dce:	4413      	add	r3, r2
 8003dd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dd4:	691b      	ldr	r3, [r3, #16]
 8003dd6:	69ba      	ldr	r2, [r7, #24]
 8003dd8:	0151      	lsls	r1, r2, #5
 8003dda:	69fa      	ldr	r2, [r7, #28]
 8003ddc:	440a      	add	r2, r1
 8003dde:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003de2:	0cdb      	lsrs	r3, r3, #19
 8003de4:	04db      	lsls	r3, r3, #19
 8003de6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003de8:	69bb      	ldr	r3, [r7, #24]
 8003dea:	015a      	lsls	r2, r3, #5
 8003dec:	69fb      	ldr	r3, [r7, #28]
 8003dee:	4413      	add	r3, r2
 8003df0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003df4:	691b      	ldr	r3, [r3, #16]
 8003df6:	69ba      	ldr	r2, [r7, #24]
 8003df8:	0151      	lsls	r1, r2, #5
 8003dfa:	69fa      	ldr	r2, [r7, #28]
 8003dfc:	440a      	add	r2, r1
 8003dfe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e02:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003e06:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003e0a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003e0c:	69bb      	ldr	r3, [r7, #24]
 8003e0e:	015a      	lsls	r2, r3, #5
 8003e10:	69fb      	ldr	r3, [r7, #28]
 8003e12:	4413      	add	r3, r2
 8003e14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e18:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	6959      	ldr	r1, [r3, #20]
 8003e1e:	68bb      	ldr	r3, [r7, #8]
 8003e20:	689b      	ldr	r3, [r3, #8]
 8003e22:	440b      	add	r3, r1
 8003e24:	1e59      	subs	r1, r3, #1
 8003e26:	68bb      	ldr	r3, [r7, #8]
 8003e28:	689b      	ldr	r3, [r3, #8]
 8003e2a:	fbb1 f3f3 	udiv	r3, r1, r3
 8003e2e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003e30:	4b9d      	ldr	r3, [pc, #628]	; (80040a8 <USB_EPStartXfer+0x370>)
 8003e32:	400b      	ands	r3, r1
 8003e34:	69b9      	ldr	r1, [r7, #24]
 8003e36:	0148      	lsls	r0, r1, #5
 8003e38:	69f9      	ldr	r1, [r7, #28]
 8003e3a:	4401      	add	r1, r0
 8003e3c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003e40:	4313      	orrs	r3, r2
 8003e42:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003e44:	69bb      	ldr	r3, [r7, #24]
 8003e46:	015a      	lsls	r2, r3, #5
 8003e48:	69fb      	ldr	r3, [r7, #28]
 8003e4a:	4413      	add	r3, r2
 8003e4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e50:	691a      	ldr	r2, [r3, #16]
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	695b      	ldr	r3, [r3, #20]
 8003e56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e5a:	69b9      	ldr	r1, [r7, #24]
 8003e5c:	0148      	lsls	r0, r1, #5
 8003e5e:	69f9      	ldr	r1, [r7, #28]
 8003e60:	4401      	add	r1, r0
 8003e62:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003e66:	4313      	orrs	r3, r2
 8003e68:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	78db      	ldrb	r3, [r3, #3]
 8003e6e:	2b01      	cmp	r3, #1
 8003e70:	d11f      	bne.n	8003eb2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8003e72:	69bb      	ldr	r3, [r7, #24]
 8003e74:	015a      	lsls	r2, r3, #5
 8003e76:	69fb      	ldr	r3, [r7, #28]
 8003e78:	4413      	add	r3, r2
 8003e7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e7e:	691b      	ldr	r3, [r3, #16]
 8003e80:	69ba      	ldr	r2, [r7, #24]
 8003e82:	0151      	lsls	r1, r2, #5
 8003e84:	69fa      	ldr	r2, [r7, #28]
 8003e86:	440a      	add	r2, r1
 8003e88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e8c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8003e90:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8003e92:	69bb      	ldr	r3, [r7, #24]
 8003e94:	015a      	lsls	r2, r3, #5
 8003e96:	69fb      	ldr	r3, [r7, #28]
 8003e98:	4413      	add	r3, r2
 8003e9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e9e:	691b      	ldr	r3, [r3, #16]
 8003ea0:	69ba      	ldr	r2, [r7, #24]
 8003ea2:	0151      	lsls	r1, r2, #5
 8003ea4:	69fa      	ldr	r2, [r7, #28]
 8003ea6:	440a      	add	r2, r1
 8003ea8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003eac:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003eb0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8003eb2:	79fb      	ldrb	r3, [r7, #7]
 8003eb4:	2b01      	cmp	r3, #1
 8003eb6:	d14b      	bne.n	8003f50 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	691b      	ldr	r3, [r3, #16]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d009      	beq.n	8003ed4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003ec0:	69bb      	ldr	r3, [r7, #24]
 8003ec2:	015a      	lsls	r2, r3, #5
 8003ec4:	69fb      	ldr	r3, [r7, #28]
 8003ec6:	4413      	add	r3, r2
 8003ec8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ecc:	461a      	mov	r2, r3
 8003ece:	68bb      	ldr	r3, [r7, #8]
 8003ed0:	691b      	ldr	r3, [r3, #16]
 8003ed2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	78db      	ldrb	r3, [r3, #3]
 8003ed8:	2b01      	cmp	r3, #1
 8003eda:	d128      	bne.n	8003f2e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003edc:	69fb      	ldr	r3, [r7, #28]
 8003ede:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ee2:	689b      	ldr	r3, [r3, #8]
 8003ee4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d110      	bne.n	8003f0e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003eec:	69bb      	ldr	r3, [r7, #24]
 8003eee:	015a      	lsls	r2, r3, #5
 8003ef0:	69fb      	ldr	r3, [r7, #28]
 8003ef2:	4413      	add	r3, r2
 8003ef4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	69ba      	ldr	r2, [r7, #24]
 8003efc:	0151      	lsls	r1, r2, #5
 8003efe:	69fa      	ldr	r2, [r7, #28]
 8003f00:	440a      	add	r2, r1
 8003f02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f06:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003f0a:	6013      	str	r3, [r2, #0]
 8003f0c:	e00f      	b.n	8003f2e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003f0e:	69bb      	ldr	r3, [r7, #24]
 8003f10:	015a      	lsls	r2, r3, #5
 8003f12:	69fb      	ldr	r3, [r7, #28]
 8003f14:	4413      	add	r3, r2
 8003f16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	69ba      	ldr	r2, [r7, #24]
 8003f1e:	0151      	lsls	r1, r2, #5
 8003f20:	69fa      	ldr	r2, [r7, #28]
 8003f22:	440a      	add	r2, r1
 8003f24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f2c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003f2e:	69bb      	ldr	r3, [r7, #24]
 8003f30:	015a      	lsls	r2, r3, #5
 8003f32:	69fb      	ldr	r3, [r7, #28]
 8003f34:	4413      	add	r3, r2
 8003f36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	69ba      	ldr	r2, [r7, #24]
 8003f3e:	0151      	lsls	r1, r2, #5
 8003f40:	69fa      	ldr	r2, [r7, #28]
 8003f42:	440a      	add	r2, r1
 8003f44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f48:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003f4c:	6013      	str	r3, [r2, #0]
 8003f4e:	e12f      	b.n	80041b0 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003f50:	69bb      	ldr	r3, [r7, #24]
 8003f52:	015a      	lsls	r2, r3, #5
 8003f54:	69fb      	ldr	r3, [r7, #28]
 8003f56:	4413      	add	r3, r2
 8003f58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	69ba      	ldr	r2, [r7, #24]
 8003f60:	0151      	lsls	r1, r2, #5
 8003f62:	69fa      	ldr	r2, [r7, #28]
 8003f64:	440a      	add	r2, r1
 8003f66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f6a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003f6e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	78db      	ldrb	r3, [r3, #3]
 8003f74:	2b01      	cmp	r3, #1
 8003f76:	d015      	beq.n	8003fa4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	695b      	ldr	r3, [r3, #20]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	f000 8117 	beq.w	80041b0 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003f82:	69fb      	ldr	r3, [r7, #28]
 8003f84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f8a:	68bb      	ldr	r3, [r7, #8]
 8003f8c:	781b      	ldrb	r3, [r3, #0]
 8003f8e:	f003 030f 	and.w	r3, r3, #15
 8003f92:	2101      	movs	r1, #1
 8003f94:	fa01 f303 	lsl.w	r3, r1, r3
 8003f98:	69f9      	ldr	r1, [r7, #28]
 8003f9a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	634b      	str	r3, [r1, #52]	; 0x34
 8003fa2:	e105      	b.n	80041b0 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003fa4:	69fb      	ldr	r3, [r7, #28]
 8003fa6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003faa:	689b      	ldr	r3, [r3, #8]
 8003fac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d110      	bne.n	8003fd6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003fb4:	69bb      	ldr	r3, [r7, #24]
 8003fb6:	015a      	lsls	r2, r3, #5
 8003fb8:	69fb      	ldr	r3, [r7, #28]
 8003fba:	4413      	add	r3, r2
 8003fbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	69ba      	ldr	r2, [r7, #24]
 8003fc4:	0151      	lsls	r1, r2, #5
 8003fc6:	69fa      	ldr	r2, [r7, #28]
 8003fc8:	440a      	add	r2, r1
 8003fca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003fce:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003fd2:	6013      	str	r3, [r2, #0]
 8003fd4:	e00f      	b.n	8003ff6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003fd6:	69bb      	ldr	r3, [r7, #24]
 8003fd8:	015a      	lsls	r2, r3, #5
 8003fda:	69fb      	ldr	r3, [r7, #28]
 8003fdc:	4413      	add	r3, r2
 8003fde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	69ba      	ldr	r2, [r7, #24]
 8003fe6:	0151      	lsls	r1, r2, #5
 8003fe8:	69fa      	ldr	r2, [r7, #28]
 8003fea:	440a      	add	r2, r1
 8003fec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ff0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ff4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	68d9      	ldr	r1, [r3, #12]
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	781a      	ldrb	r2, [r3, #0]
 8003ffe:	68bb      	ldr	r3, [r7, #8]
 8004000:	695b      	ldr	r3, [r3, #20]
 8004002:	b298      	uxth	r0, r3
 8004004:	79fb      	ldrb	r3, [r7, #7]
 8004006:	9300      	str	r3, [sp, #0]
 8004008:	4603      	mov	r3, r0
 800400a:	68f8      	ldr	r0, [r7, #12]
 800400c:	f000 fa2b 	bl	8004466 <USB_WritePacket>
 8004010:	e0ce      	b.n	80041b0 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004012:	69bb      	ldr	r3, [r7, #24]
 8004014:	015a      	lsls	r2, r3, #5
 8004016:	69fb      	ldr	r3, [r7, #28]
 8004018:	4413      	add	r3, r2
 800401a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800401e:	691b      	ldr	r3, [r3, #16]
 8004020:	69ba      	ldr	r2, [r7, #24]
 8004022:	0151      	lsls	r1, r2, #5
 8004024:	69fa      	ldr	r2, [r7, #28]
 8004026:	440a      	add	r2, r1
 8004028:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800402c:	0cdb      	lsrs	r3, r3, #19
 800402e:	04db      	lsls	r3, r3, #19
 8004030:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004032:	69bb      	ldr	r3, [r7, #24]
 8004034:	015a      	lsls	r2, r3, #5
 8004036:	69fb      	ldr	r3, [r7, #28]
 8004038:	4413      	add	r3, r2
 800403a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800403e:	691b      	ldr	r3, [r3, #16]
 8004040:	69ba      	ldr	r2, [r7, #24]
 8004042:	0151      	lsls	r1, r2, #5
 8004044:	69fa      	ldr	r2, [r7, #28]
 8004046:	440a      	add	r2, r1
 8004048:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800404c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004050:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004054:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	695b      	ldr	r3, [r3, #20]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d126      	bne.n	80040ac <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800405e:	69bb      	ldr	r3, [r7, #24]
 8004060:	015a      	lsls	r2, r3, #5
 8004062:	69fb      	ldr	r3, [r7, #28]
 8004064:	4413      	add	r3, r2
 8004066:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800406a:	691a      	ldr	r2, [r3, #16]
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	689b      	ldr	r3, [r3, #8]
 8004070:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004074:	69b9      	ldr	r1, [r7, #24]
 8004076:	0148      	lsls	r0, r1, #5
 8004078:	69f9      	ldr	r1, [r7, #28]
 800407a:	4401      	add	r1, r0
 800407c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004080:	4313      	orrs	r3, r2
 8004082:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004084:	69bb      	ldr	r3, [r7, #24]
 8004086:	015a      	lsls	r2, r3, #5
 8004088:	69fb      	ldr	r3, [r7, #28]
 800408a:	4413      	add	r3, r2
 800408c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004090:	691b      	ldr	r3, [r3, #16]
 8004092:	69ba      	ldr	r2, [r7, #24]
 8004094:	0151      	lsls	r1, r2, #5
 8004096:	69fa      	ldr	r2, [r7, #28]
 8004098:	440a      	add	r2, r1
 800409a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800409e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80040a2:	6113      	str	r3, [r2, #16]
 80040a4:	e036      	b.n	8004114 <USB_EPStartXfer+0x3dc>
 80040a6:	bf00      	nop
 80040a8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	695a      	ldr	r2, [r3, #20]
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	4413      	add	r3, r2
 80040b6:	1e5a      	subs	r2, r3, #1
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	689b      	ldr	r3, [r3, #8]
 80040bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80040c0:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80040c2:	69bb      	ldr	r3, [r7, #24]
 80040c4:	015a      	lsls	r2, r3, #5
 80040c6:	69fb      	ldr	r3, [r7, #28]
 80040c8:	4413      	add	r3, r2
 80040ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040ce:	691a      	ldr	r2, [r3, #16]
 80040d0:	8afb      	ldrh	r3, [r7, #22]
 80040d2:	04d9      	lsls	r1, r3, #19
 80040d4:	4b39      	ldr	r3, [pc, #228]	; (80041bc <USB_EPStartXfer+0x484>)
 80040d6:	400b      	ands	r3, r1
 80040d8:	69b9      	ldr	r1, [r7, #24]
 80040da:	0148      	lsls	r0, r1, #5
 80040dc:	69f9      	ldr	r1, [r7, #28]
 80040de:	4401      	add	r1, r0
 80040e0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80040e4:	4313      	orrs	r3, r2
 80040e6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80040e8:	69bb      	ldr	r3, [r7, #24]
 80040ea:	015a      	lsls	r2, r3, #5
 80040ec:	69fb      	ldr	r3, [r7, #28]
 80040ee:	4413      	add	r3, r2
 80040f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040f4:	691a      	ldr	r2, [r3, #16]
 80040f6:	68bb      	ldr	r3, [r7, #8]
 80040f8:	689b      	ldr	r3, [r3, #8]
 80040fa:	8af9      	ldrh	r1, [r7, #22]
 80040fc:	fb01 f303 	mul.w	r3, r1, r3
 8004100:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004104:	69b9      	ldr	r1, [r7, #24]
 8004106:	0148      	lsls	r0, r1, #5
 8004108:	69f9      	ldr	r1, [r7, #28]
 800410a:	4401      	add	r1, r0
 800410c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004110:	4313      	orrs	r3, r2
 8004112:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004114:	79fb      	ldrb	r3, [r7, #7]
 8004116:	2b01      	cmp	r3, #1
 8004118:	d10d      	bne.n	8004136 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800411a:	68bb      	ldr	r3, [r7, #8]
 800411c:	68db      	ldr	r3, [r3, #12]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d009      	beq.n	8004136 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	68d9      	ldr	r1, [r3, #12]
 8004126:	69bb      	ldr	r3, [r7, #24]
 8004128:	015a      	lsls	r2, r3, #5
 800412a:	69fb      	ldr	r3, [r7, #28]
 800412c:	4413      	add	r3, r2
 800412e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004132:	460a      	mov	r2, r1
 8004134:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	78db      	ldrb	r3, [r3, #3]
 800413a:	2b01      	cmp	r3, #1
 800413c:	d128      	bne.n	8004190 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800413e:	69fb      	ldr	r3, [r7, #28]
 8004140:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004144:	689b      	ldr	r3, [r3, #8]
 8004146:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800414a:	2b00      	cmp	r3, #0
 800414c:	d110      	bne.n	8004170 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800414e:	69bb      	ldr	r3, [r7, #24]
 8004150:	015a      	lsls	r2, r3, #5
 8004152:	69fb      	ldr	r3, [r7, #28]
 8004154:	4413      	add	r3, r2
 8004156:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	69ba      	ldr	r2, [r7, #24]
 800415e:	0151      	lsls	r1, r2, #5
 8004160:	69fa      	ldr	r2, [r7, #28]
 8004162:	440a      	add	r2, r1
 8004164:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004168:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800416c:	6013      	str	r3, [r2, #0]
 800416e:	e00f      	b.n	8004190 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004170:	69bb      	ldr	r3, [r7, #24]
 8004172:	015a      	lsls	r2, r3, #5
 8004174:	69fb      	ldr	r3, [r7, #28]
 8004176:	4413      	add	r3, r2
 8004178:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	69ba      	ldr	r2, [r7, #24]
 8004180:	0151      	lsls	r1, r2, #5
 8004182:	69fa      	ldr	r2, [r7, #28]
 8004184:	440a      	add	r2, r1
 8004186:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800418a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800418e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004190:	69bb      	ldr	r3, [r7, #24]
 8004192:	015a      	lsls	r2, r3, #5
 8004194:	69fb      	ldr	r3, [r7, #28]
 8004196:	4413      	add	r3, r2
 8004198:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	69ba      	ldr	r2, [r7, #24]
 80041a0:	0151      	lsls	r1, r2, #5
 80041a2:	69fa      	ldr	r2, [r7, #28]
 80041a4:	440a      	add	r2, r1
 80041a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80041aa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80041ae:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80041b0:	2300      	movs	r3, #0
}
 80041b2:	4618      	mov	r0, r3
 80041b4:	3720      	adds	r7, #32
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd80      	pop	{r7, pc}
 80041ba:	bf00      	nop
 80041bc:	1ff80000 	.word	0x1ff80000

080041c0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b087      	sub	sp, #28
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	60f8      	str	r0, [r7, #12]
 80041c8:	60b9      	str	r1, [r7, #8]
 80041ca:	4613      	mov	r3, r2
 80041cc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	781b      	ldrb	r3, [r3, #0]
 80041d6:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	785b      	ldrb	r3, [r3, #1]
 80041dc:	2b01      	cmp	r3, #1
 80041de:	f040 80cd 	bne.w	800437c <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80041e2:	68bb      	ldr	r3, [r7, #8]
 80041e4:	695b      	ldr	r3, [r3, #20]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d132      	bne.n	8004250 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80041ea:	693b      	ldr	r3, [r7, #16]
 80041ec:	015a      	lsls	r2, r3, #5
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	4413      	add	r3, r2
 80041f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041f6:	691b      	ldr	r3, [r3, #16]
 80041f8:	693a      	ldr	r2, [r7, #16]
 80041fa:	0151      	lsls	r1, r2, #5
 80041fc:	697a      	ldr	r2, [r7, #20]
 80041fe:	440a      	add	r2, r1
 8004200:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004204:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004208:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800420c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	015a      	lsls	r2, r3, #5
 8004212:	697b      	ldr	r3, [r7, #20]
 8004214:	4413      	add	r3, r2
 8004216:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800421a:	691b      	ldr	r3, [r3, #16]
 800421c:	693a      	ldr	r2, [r7, #16]
 800421e:	0151      	lsls	r1, r2, #5
 8004220:	697a      	ldr	r2, [r7, #20]
 8004222:	440a      	add	r2, r1
 8004224:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004228:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800422c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800422e:	693b      	ldr	r3, [r7, #16]
 8004230:	015a      	lsls	r2, r3, #5
 8004232:	697b      	ldr	r3, [r7, #20]
 8004234:	4413      	add	r3, r2
 8004236:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800423a:	691b      	ldr	r3, [r3, #16]
 800423c:	693a      	ldr	r2, [r7, #16]
 800423e:	0151      	lsls	r1, r2, #5
 8004240:	697a      	ldr	r2, [r7, #20]
 8004242:	440a      	add	r2, r1
 8004244:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004248:	0cdb      	lsrs	r3, r3, #19
 800424a:	04db      	lsls	r3, r3, #19
 800424c:	6113      	str	r3, [r2, #16]
 800424e:	e04e      	b.n	80042ee <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004250:	693b      	ldr	r3, [r7, #16]
 8004252:	015a      	lsls	r2, r3, #5
 8004254:	697b      	ldr	r3, [r7, #20]
 8004256:	4413      	add	r3, r2
 8004258:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800425c:	691b      	ldr	r3, [r3, #16]
 800425e:	693a      	ldr	r2, [r7, #16]
 8004260:	0151      	lsls	r1, r2, #5
 8004262:	697a      	ldr	r2, [r7, #20]
 8004264:	440a      	add	r2, r1
 8004266:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800426a:	0cdb      	lsrs	r3, r3, #19
 800426c:	04db      	lsls	r3, r3, #19
 800426e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	015a      	lsls	r2, r3, #5
 8004274:	697b      	ldr	r3, [r7, #20]
 8004276:	4413      	add	r3, r2
 8004278:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800427c:	691b      	ldr	r3, [r3, #16]
 800427e:	693a      	ldr	r2, [r7, #16]
 8004280:	0151      	lsls	r1, r2, #5
 8004282:	697a      	ldr	r2, [r7, #20]
 8004284:	440a      	add	r2, r1
 8004286:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800428a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800428e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004292:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	695a      	ldr	r2, [r3, #20]
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	689b      	ldr	r3, [r3, #8]
 800429c:	429a      	cmp	r2, r3
 800429e:	d903      	bls.n	80042a8 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	689a      	ldr	r2, [r3, #8]
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80042a8:	693b      	ldr	r3, [r7, #16]
 80042aa:	015a      	lsls	r2, r3, #5
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	4413      	add	r3, r2
 80042b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042b4:	691b      	ldr	r3, [r3, #16]
 80042b6:	693a      	ldr	r2, [r7, #16]
 80042b8:	0151      	lsls	r1, r2, #5
 80042ba:	697a      	ldr	r2, [r7, #20]
 80042bc:	440a      	add	r2, r1
 80042be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042c2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80042c6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80042c8:	693b      	ldr	r3, [r7, #16]
 80042ca:	015a      	lsls	r2, r3, #5
 80042cc:	697b      	ldr	r3, [r7, #20]
 80042ce:	4413      	add	r3, r2
 80042d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042d4:	691a      	ldr	r2, [r3, #16]
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	695b      	ldr	r3, [r3, #20]
 80042da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042de:	6939      	ldr	r1, [r7, #16]
 80042e0:	0148      	lsls	r0, r1, #5
 80042e2:	6979      	ldr	r1, [r7, #20]
 80042e4:	4401      	add	r1, r0
 80042e6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80042ea:	4313      	orrs	r3, r2
 80042ec:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80042ee:	79fb      	ldrb	r3, [r7, #7]
 80042f0:	2b01      	cmp	r3, #1
 80042f2:	d11e      	bne.n	8004332 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	691b      	ldr	r3, [r3, #16]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d009      	beq.n	8004310 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80042fc:	693b      	ldr	r3, [r7, #16]
 80042fe:	015a      	lsls	r2, r3, #5
 8004300:	697b      	ldr	r3, [r7, #20]
 8004302:	4413      	add	r3, r2
 8004304:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004308:	461a      	mov	r2, r3
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	691b      	ldr	r3, [r3, #16]
 800430e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	015a      	lsls	r2, r3, #5
 8004314:	697b      	ldr	r3, [r7, #20]
 8004316:	4413      	add	r3, r2
 8004318:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	693a      	ldr	r2, [r7, #16]
 8004320:	0151      	lsls	r1, r2, #5
 8004322:	697a      	ldr	r2, [r7, #20]
 8004324:	440a      	add	r2, r1
 8004326:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800432a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800432e:	6013      	str	r3, [r2, #0]
 8004330:	e092      	b.n	8004458 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	015a      	lsls	r2, r3, #5
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	4413      	add	r3, r2
 800433a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	693a      	ldr	r2, [r7, #16]
 8004342:	0151      	lsls	r1, r2, #5
 8004344:	697a      	ldr	r2, [r7, #20]
 8004346:	440a      	add	r2, r1
 8004348:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800434c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004350:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	695b      	ldr	r3, [r3, #20]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d07e      	beq.n	8004458 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004360:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004362:	68bb      	ldr	r3, [r7, #8]
 8004364:	781b      	ldrb	r3, [r3, #0]
 8004366:	f003 030f 	and.w	r3, r3, #15
 800436a:	2101      	movs	r1, #1
 800436c:	fa01 f303 	lsl.w	r3, r1, r3
 8004370:	6979      	ldr	r1, [r7, #20]
 8004372:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004376:	4313      	orrs	r3, r2
 8004378:	634b      	str	r3, [r1, #52]	; 0x34
 800437a:	e06d      	b.n	8004458 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800437c:	693b      	ldr	r3, [r7, #16]
 800437e:	015a      	lsls	r2, r3, #5
 8004380:	697b      	ldr	r3, [r7, #20]
 8004382:	4413      	add	r3, r2
 8004384:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004388:	691b      	ldr	r3, [r3, #16]
 800438a:	693a      	ldr	r2, [r7, #16]
 800438c:	0151      	lsls	r1, r2, #5
 800438e:	697a      	ldr	r2, [r7, #20]
 8004390:	440a      	add	r2, r1
 8004392:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004396:	0cdb      	lsrs	r3, r3, #19
 8004398:	04db      	lsls	r3, r3, #19
 800439a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800439c:	693b      	ldr	r3, [r7, #16]
 800439e:	015a      	lsls	r2, r3, #5
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	4413      	add	r3, r2
 80043a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043a8:	691b      	ldr	r3, [r3, #16]
 80043aa:	693a      	ldr	r2, [r7, #16]
 80043ac:	0151      	lsls	r1, r2, #5
 80043ae:	697a      	ldr	r2, [r7, #20]
 80043b0:	440a      	add	r2, r1
 80043b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80043b6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80043ba:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80043be:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	695b      	ldr	r3, [r3, #20]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d003      	beq.n	80043d0 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	689a      	ldr	r2, [r3, #8]
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	015a      	lsls	r2, r3, #5
 80043d4:	697b      	ldr	r3, [r7, #20]
 80043d6:	4413      	add	r3, r2
 80043d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043dc:	691b      	ldr	r3, [r3, #16]
 80043de:	693a      	ldr	r2, [r7, #16]
 80043e0:	0151      	lsls	r1, r2, #5
 80043e2:	697a      	ldr	r2, [r7, #20]
 80043e4:	440a      	add	r2, r1
 80043e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80043ea:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80043ee:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80043f0:	693b      	ldr	r3, [r7, #16]
 80043f2:	015a      	lsls	r2, r3, #5
 80043f4:	697b      	ldr	r3, [r7, #20]
 80043f6:	4413      	add	r3, r2
 80043f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043fc:	691a      	ldr	r2, [r3, #16]
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	689b      	ldr	r3, [r3, #8]
 8004402:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004406:	6939      	ldr	r1, [r7, #16]
 8004408:	0148      	lsls	r0, r1, #5
 800440a:	6979      	ldr	r1, [r7, #20]
 800440c:	4401      	add	r1, r0
 800440e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004412:	4313      	orrs	r3, r2
 8004414:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8004416:	79fb      	ldrb	r3, [r7, #7]
 8004418:	2b01      	cmp	r3, #1
 800441a:	d10d      	bne.n	8004438 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	68db      	ldr	r3, [r3, #12]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d009      	beq.n	8004438 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	68d9      	ldr	r1, [r3, #12]
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	015a      	lsls	r2, r3, #5
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	4413      	add	r3, r2
 8004430:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004434:	460a      	mov	r2, r1
 8004436:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004438:	693b      	ldr	r3, [r7, #16]
 800443a:	015a      	lsls	r2, r3, #5
 800443c:	697b      	ldr	r3, [r7, #20]
 800443e:	4413      	add	r3, r2
 8004440:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	693a      	ldr	r2, [r7, #16]
 8004448:	0151      	lsls	r1, r2, #5
 800444a:	697a      	ldr	r2, [r7, #20]
 800444c:	440a      	add	r2, r1
 800444e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004452:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004456:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004458:	2300      	movs	r3, #0
}
 800445a:	4618      	mov	r0, r3
 800445c:	371c      	adds	r7, #28
 800445e:	46bd      	mov	sp, r7
 8004460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004464:	4770      	bx	lr

08004466 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004466:	b480      	push	{r7}
 8004468:	b089      	sub	sp, #36	; 0x24
 800446a:	af00      	add	r7, sp, #0
 800446c:	60f8      	str	r0, [r7, #12]
 800446e:	60b9      	str	r1, [r7, #8]
 8004470:	4611      	mov	r1, r2
 8004472:	461a      	mov	r2, r3
 8004474:	460b      	mov	r3, r1
 8004476:	71fb      	strb	r3, [r7, #7]
 8004478:	4613      	mov	r3, r2
 800447a:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004484:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004488:	2b00      	cmp	r3, #0
 800448a:	d123      	bne.n	80044d4 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800448c:	88bb      	ldrh	r3, [r7, #4]
 800448e:	3303      	adds	r3, #3
 8004490:	089b      	lsrs	r3, r3, #2
 8004492:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004494:	2300      	movs	r3, #0
 8004496:	61bb      	str	r3, [r7, #24]
 8004498:	e018      	b.n	80044cc <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800449a:	79fb      	ldrb	r3, [r7, #7]
 800449c:	031a      	lsls	r2, r3, #12
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	4413      	add	r3, r2
 80044a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044a6:	461a      	mov	r2, r3
 80044a8:	69fb      	ldr	r3, [r7, #28]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	6013      	str	r3, [r2, #0]
      pSrc++;
 80044ae:	69fb      	ldr	r3, [r7, #28]
 80044b0:	3301      	adds	r3, #1
 80044b2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80044b4:	69fb      	ldr	r3, [r7, #28]
 80044b6:	3301      	adds	r3, #1
 80044b8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80044ba:	69fb      	ldr	r3, [r7, #28]
 80044bc:	3301      	adds	r3, #1
 80044be:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80044c0:	69fb      	ldr	r3, [r7, #28]
 80044c2:	3301      	adds	r3, #1
 80044c4:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80044c6:	69bb      	ldr	r3, [r7, #24]
 80044c8:	3301      	adds	r3, #1
 80044ca:	61bb      	str	r3, [r7, #24]
 80044cc:	69ba      	ldr	r2, [r7, #24]
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	429a      	cmp	r2, r3
 80044d2:	d3e2      	bcc.n	800449a <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80044d4:	2300      	movs	r3, #0
}
 80044d6:	4618      	mov	r0, r3
 80044d8:	3724      	adds	r7, #36	; 0x24
 80044da:	46bd      	mov	sp, r7
 80044dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e0:	4770      	bx	lr

080044e2 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80044e2:	b480      	push	{r7}
 80044e4:	b08b      	sub	sp, #44	; 0x2c
 80044e6:	af00      	add	r7, sp, #0
 80044e8:	60f8      	str	r0, [r7, #12]
 80044ea:	60b9      	str	r1, [r7, #8]
 80044ec:	4613      	mov	r3, r2
 80044ee:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80044f8:	88fb      	ldrh	r3, [r7, #6]
 80044fa:	089b      	lsrs	r3, r3, #2
 80044fc:	b29b      	uxth	r3, r3
 80044fe:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004500:	88fb      	ldrh	r3, [r7, #6]
 8004502:	f003 0303 	and.w	r3, r3, #3
 8004506:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004508:	2300      	movs	r3, #0
 800450a:	623b      	str	r3, [r7, #32]
 800450c:	e014      	b.n	8004538 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800450e:	69bb      	ldr	r3, [r7, #24]
 8004510:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004514:	681a      	ldr	r2, [r3, #0]
 8004516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004518:	601a      	str	r2, [r3, #0]
    pDest++;
 800451a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800451c:	3301      	adds	r3, #1
 800451e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004522:	3301      	adds	r3, #1
 8004524:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004528:	3301      	adds	r3, #1
 800452a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800452c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800452e:	3301      	adds	r3, #1
 8004530:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004532:	6a3b      	ldr	r3, [r7, #32]
 8004534:	3301      	adds	r3, #1
 8004536:	623b      	str	r3, [r7, #32]
 8004538:	6a3a      	ldr	r2, [r7, #32]
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	429a      	cmp	r2, r3
 800453e:	d3e6      	bcc.n	800450e <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004540:	8bfb      	ldrh	r3, [r7, #30]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d01e      	beq.n	8004584 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004546:	2300      	movs	r3, #0
 8004548:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800454a:	69bb      	ldr	r3, [r7, #24]
 800454c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004550:	461a      	mov	r2, r3
 8004552:	f107 0310 	add.w	r3, r7, #16
 8004556:	6812      	ldr	r2, [r2, #0]
 8004558:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800455a:	693a      	ldr	r2, [r7, #16]
 800455c:	6a3b      	ldr	r3, [r7, #32]
 800455e:	b2db      	uxtb	r3, r3
 8004560:	00db      	lsls	r3, r3, #3
 8004562:	fa22 f303 	lsr.w	r3, r2, r3
 8004566:	b2da      	uxtb	r2, r3
 8004568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800456a:	701a      	strb	r2, [r3, #0]
      i++;
 800456c:	6a3b      	ldr	r3, [r7, #32]
 800456e:	3301      	adds	r3, #1
 8004570:	623b      	str	r3, [r7, #32]
      pDest++;
 8004572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004574:	3301      	adds	r3, #1
 8004576:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004578:	8bfb      	ldrh	r3, [r7, #30]
 800457a:	3b01      	subs	r3, #1
 800457c:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800457e:	8bfb      	ldrh	r3, [r7, #30]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d1ea      	bne.n	800455a <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004586:	4618      	mov	r0, r3
 8004588:	372c      	adds	r7, #44	; 0x2c
 800458a:	46bd      	mov	sp, r7
 800458c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004590:	4770      	bx	lr

08004592 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004592:	b480      	push	{r7}
 8004594:	b085      	sub	sp, #20
 8004596:	af00      	add	r7, sp, #0
 8004598:	6078      	str	r0, [r7, #4]
 800459a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	781b      	ldrb	r3, [r3, #0]
 80045a4:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	785b      	ldrb	r3, [r3, #1]
 80045aa:	2b01      	cmp	r3, #1
 80045ac:	d12c      	bne.n	8004608 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	015a      	lsls	r2, r3, #5
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	4413      	add	r3, r2
 80045b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	db12      	blt.n	80045e6 <USB_EPSetStall+0x54>
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d00f      	beq.n	80045e6 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	015a      	lsls	r2, r3, #5
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	4413      	add	r3, r2
 80045ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	68ba      	ldr	r2, [r7, #8]
 80045d6:	0151      	lsls	r1, r2, #5
 80045d8:	68fa      	ldr	r2, [r7, #12]
 80045da:	440a      	add	r2, r1
 80045dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045e0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80045e4:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	015a      	lsls	r2, r3, #5
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	4413      	add	r3, r2
 80045ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	68ba      	ldr	r2, [r7, #8]
 80045f6:	0151      	lsls	r1, r2, #5
 80045f8:	68fa      	ldr	r2, [r7, #12]
 80045fa:	440a      	add	r2, r1
 80045fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004600:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004604:	6013      	str	r3, [r2, #0]
 8004606:	e02b      	b.n	8004660 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	015a      	lsls	r2, r3, #5
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	4413      	add	r3, r2
 8004610:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	2b00      	cmp	r3, #0
 8004618:	db12      	blt.n	8004640 <USB_EPSetStall+0xae>
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d00f      	beq.n	8004640 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	015a      	lsls	r2, r3, #5
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	4413      	add	r3, r2
 8004628:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	68ba      	ldr	r2, [r7, #8]
 8004630:	0151      	lsls	r1, r2, #5
 8004632:	68fa      	ldr	r2, [r7, #12]
 8004634:	440a      	add	r2, r1
 8004636:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800463a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800463e:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	015a      	lsls	r2, r3, #5
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	4413      	add	r3, r2
 8004648:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	68ba      	ldr	r2, [r7, #8]
 8004650:	0151      	lsls	r1, r2, #5
 8004652:	68fa      	ldr	r2, [r7, #12]
 8004654:	440a      	add	r2, r1
 8004656:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800465a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800465e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004660:	2300      	movs	r3, #0
}
 8004662:	4618      	mov	r0, r3
 8004664:	3714      	adds	r7, #20
 8004666:	46bd      	mov	sp, r7
 8004668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466c:	4770      	bx	lr

0800466e <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800466e:	b480      	push	{r7}
 8004670:	b085      	sub	sp, #20
 8004672:	af00      	add	r7, sp, #0
 8004674:	6078      	str	r0, [r7, #4]
 8004676:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	781b      	ldrb	r3, [r3, #0]
 8004680:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	785b      	ldrb	r3, [r3, #1]
 8004686:	2b01      	cmp	r3, #1
 8004688:	d128      	bne.n	80046dc <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	015a      	lsls	r2, r3, #5
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	4413      	add	r3, r2
 8004692:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	68ba      	ldr	r2, [r7, #8]
 800469a:	0151      	lsls	r1, r2, #5
 800469c:	68fa      	ldr	r2, [r7, #12]
 800469e:	440a      	add	r2, r1
 80046a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046a4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80046a8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	78db      	ldrb	r3, [r3, #3]
 80046ae:	2b03      	cmp	r3, #3
 80046b0:	d003      	beq.n	80046ba <USB_EPClearStall+0x4c>
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	78db      	ldrb	r3, [r3, #3]
 80046b6:	2b02      	cmp	r3, #2
 80046b8:	d138      	bne.n	800472c <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80046ba:	68bb      	ldr	r3, [r7, #8]
 80046bc:	015a      	lsls	r2, r3, #5
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	4413      	add	r3, r2
 80046c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	68ba      	ldr	r2, [r7, #8]
 80046ca:	0151      	lsls	r1, r2, #5
 80046cc:	68fa      	ldr	r2, [r7, #12]
 80046ce:	440a      	add	r2, r1
 80046d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046d8:	6013      	str	r3, [r2, #0]
 80046da:	e027      	b.n	800472c <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	015a      	lsls	r2, r3, #5
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	4413      	add	r3, r2
 80046e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	68ba      	ldr	r2, [r7, #8]
 80046ec:	0151      	lsls	r1, r2, #5
 80046ee:	68fa      	ldr	r2, [r7, #12]
 80046f0:	440a      	add	r2, r1
 80046f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80046f6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80046fa:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	78db      	ldrb	r3, [r3, #3]
 8004700:	2b03      	cmp	r3, #3
 8004702:	d003      	beq.n	800470c <USB_EPClearStall+0x9e>
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	78db      	ldrb	r3, [r3, #3]
 8004708:	2b02      	cmp	r3, #2
 800470a:	d10f      	bne.n	800472c <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	015a      	lsls	r2, r3, #5
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	4413      	add	r3, r2
 8004714:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	68ba      	ldr	r2, [r7, #8]
 800471c:	0151      	lsls	r1, r2, #5
 800471e:	68fa      	ldr	r2, [r7, #12]
 8004720:	440a      	add	r2, r1
 8004722:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004726:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800472a:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800472c:	2300      	movs	r3, #0
}
 800472e:	4618      	mov	r0, r3
 8004730:	3714      	adds	r7, #20
 8004732:	46bd      	mov	sp, r7
 8004734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004738:	4770      	bx	lr

0800473a <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800473a:	b480      	push	{r7}
 800473c:	b085      	sub	sp, #20
 800473e:	af00      	add	r7, sp, #0
 8004740:	6078      	str	r0, [r7, #4]
 8004742:	460b      	mov	r3, r1
 8004744:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	68fa      	ldr	r2, [r7, #12]
 8004754:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004758:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800475c:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004764:	681a      	ldr	r2, [r3, #0]
 8004766:	78fb      	ldrb	r3, [r7, #3]
 8004768:	011b      	lsls	r3, r3, #4
 800476a:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800476e:	68f9      	ldr	r1, [r7, #12]
 8004770:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004774:	4313      	orrs	r3, r2
 8004776:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004778:	2300      	movs	r3, #0
}
 800477a:	4618      	mov	r0, r3
 800477c:	3714      	adds	r7, #20
 800477e:	46bd      	mov	sp, r7
 8004780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004784:	4770      	bx	lr

08004786 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004786:	b480      	push	{r7}
 8004788:	b085      	sub	sp, #20
 800478a:	af00      	add	r7, sp, #0
 800478c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	68fa      	ldr	r2, [r7, #12]
 800479c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80047a0:	f023 0303 	bic.w	r3, r3, #3
 80047a4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	68fa      	ldr	r2, [r7, #12]
 80047b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80047b4:	f023 0302 	bic.w	r3, r3, #2
 80047b8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80047ba:	2300      	movs	r3, #0
}
 80047bc:	4618      	mov	r0, r3
 80047be:	3714      	adds	r7, #20
 80047c0:	46bd      	mov	sp, r7
 80047c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c6:	4770      	bx	lr

080047c8 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80047c8:	b480      	push	{r7}
 80047ca:	b085      	sub	sp, #20
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	68fa      	ldr	r2, [r7, #12]
 80047de:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80047e2:	f023 0303 	bic.w	r3, r3, #3
 80047e6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	68fa      	ldr	r2, [r7, #12]
 80047f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80047f6:	f043 0302 	orr.w	r3, r3, #2
 80047fa:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80047fc:	2300      	movs	r3, #0
}
 80047fe:	4618      	mov	r0, r3
 8004800:	3714      	adds	r7, #20
 8004802:	46bd      	mov	sp, r7
 8004804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004808:	4770      	bx	lr

0800480a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800480a:	b480      	push	{r7}
 800480c:	b085      	sub	sp, #20
 800480e:	af00      	add	r7, sp, #0
 8004810:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	695b      	ldr	r3, [r3, #20]
 8004816:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	699b      	ldr	r3, [r3, #24]
 800481c:	68fa      	ldr	r2, [r7, #12]
 800481e:	4013      	ands	r3, r2
 8004820:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004822:	68fb      	ldr	r3, [r7, #12]
}
 8004824:	4618      	mov	r0, r3
 8004826:	3714      	adds	r7, #20
 8004828:	46bd      	mov	sp, r7
 800482a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482e:	4770      	bx	lr

08004830 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004830:	b480      	push	{r7}
 8004832:	b085      	sub	sp, #20
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004842:	699b      	ldr	r3, [r3, #24]
 8004844:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800484c:	69db      	ldr	r3, [r3, #28]
 800484e:	68ba      	ldr	r2, [r7, #8]
 8004850:	4013      	ands	r3, r2
 8004852:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	0c1b      	lsrs	r3, r3, #16
}
 8004858:	4618      	mov	r0, r3
 800485a:	3714      	adds	r7, #20
 800485c:	46bd      	mov	sp, r7
 800485e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004862:	4770      	bx	lr

08004864 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004864:	b480      	push	{r7}
 8004866:	b085      	sub	sp, #20
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004876:	699b      	ldr	r3, [r3, #24]
 8004878:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004880:	69db      	ldr	r3, [r3, #28]
 8004882:	68ba      	ldr	r2, [r7, #8]
 8004884:	4013      	ands	r3, r2
 8004886:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	b29b      	uxth	r3, r3
}
 800488c:	4618      	mov	r0, r3
 800488e:	3714      	adds	r7, #20
 8004890:	46bd      	mov	sp, r7
 8004892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004896:	4770      	bx	lr

08004898 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004898:	b480      	push	{r7}
 800489a:	b085      	sub	sp, #20
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
 80048a0:	460b      	mov	r3, r1
 80048a2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80048a8:	78fb      	ldrb	r3, [r7, #3]
 80048aa:	015a      	lsls	r2, r3, #5
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	4413      	add	r3, r2
 80048b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048b4:	689b      	ldr	r3, [r3, #8]
 80048b6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048be:	695b      	ldr	r3, [r3, #20]
 80048c0:	68ba      	ldr	r2, [r7, #8]
 80048c2:	4013      	ands	r3, r2
 80048c4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80048c6:	68bb      	ldr	r3, [r7, #8]
}
 80048c8:	4618      	mov	r0, r3
 80048ca:	3714      	adds	r7, #20
 80048cc:	46bd      	mov	sp, r7
 80048ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d2:	4770      	bx	lr

080048d4 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80048d4:	b480      	push	{r7}
 80048d6:	b087      	sub	sp, #28
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
 80048dc:	460b      	mov	r3, r1
 80048de:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80048e4:	697b      	ldr	r3, [r7, #20]
 80048e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048ea:	691b      	ldr	r3, [r3, #16]
 80048ec:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80048ee:	697b      	ldr	r3, [r7, #20]
 80048f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048f6:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80048f8:	78fb      	ldrb	r3, [r7, #3]
 80048fa:	f003 030f 	and.w	r3, r3, #15
 80048fe:	68fa      	ldr	r2, [r7, #12]
 8004900:	fa22 f303 	lsr.w	r3, r2, r3
 8004904:	01db      	lsls	r3, r3, #7
 8004906:	b2db      	uxtb	r3, r3
 8004908:	693a      	ldr	r2, [r7, #16]
 800490a:	4313      	orrs	r3, r2
 800490c:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800490e:	78fb      	ldrb	r3, [r7, #3]
 8004910:	015a      	lsls	r2, r3, #5
 8004912:	697b      	ldr	r3, [r7, #20]
 8004914:	4413      	add	r3, r2
 8004916:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800491a:	689b      	ldr	r3, [r3, #8]
 800491c:	693a      	ldr	r2, [r7, #16]
 800491e:	4013      	ands	r3, r2
 8004920:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004922:	68bb      	ldr	r3, [r7, #8]
}
 8004924:	4618      	mov	r0, r3
 8004926:	371c      	adds	r7, #28
 8004928:	46bd      	mov	sp, r7
 800492a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492e:	4770      	bx	lr

08004930 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004930:	b480      	push	{r7}
 8004932:	b083      	sub	sp, #12
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	695b      	ldr	r3, [r3, #20]
 800493c:	f003 0301 	and.w	r3, r3, #1
}
 8004940:	4618      	mov	r0, r3
 8004942:	370c      	adds	r7, #12
 8004944:	46bd      	mov	sp, r7
 8004946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494a:	4770      	bx	lr

0800494c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800494c:	b480      	push	{r7}
 800494e:	b085      	sub	sp, #20
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	68fa      	ldr	r2, [r7, #12]
 8004962:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004966:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800496a:	f023 0307 	bic.w	r3, r3, #7
 800496e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	68fa      	ldr	r2, [r7, #12]
 800497a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800497e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004982:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004984:	2300      	movs	r3, #0
}
 8004986:	4618      	mov	r0, r3
 8004988:	3714      	adds	r7, #20
 800498a:	46bd      	mov	sp, r7
 800498c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004990:	4770      	bx	lr
	...

08004994 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8004994:	b480      	push	{r7}
 8004996:	b087      	sub	sp, #28
 8004998:	af00      	add	r7, sp, #0
 800499a:	60f8      	str	r0, [r7, #12]
 800499c:	460b      	mov	r3, r1
 800499e:	607a      	str	r2, [r7, #4]
 80049a0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	333c      	adds	r3, #60	; 0x3c
 80049aa:	3304      	adds	r3, #4
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80049b0:	693b      	ldr	r3, [r7, #16]
 80049b2:	4a26      	ldr	r2, [pc, #152]	; (8004a4c <USB_EP0_OutStart+0xb8>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d90a      	bls.n	80049ce <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80049b8:	697b      	ldr	r3, [r7, #20]
 80049ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80049c4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80049c8:	d101      	bne.n	80049ce <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80049ca:	2300      	movs	r3, #0
 80049cc:	e037      	b.n	8004a3e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80049ce:	697b      	ldr	r3, [r7, #20]
 80049d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049d4:	461a      	mov	r2, r3
 80049d6:	2300      	movs	r3, #0
 80049d8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80049da:	697b      	ldr	r3, [r7, #20]
 80049dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049e0:	691b      	ldr	r3, [r3, #16]
 80049e2:	697a      	ldr	r2, [r7, #20]
 80049e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049e8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80049ec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049f4:	691b      	ldr	r3, [r3, #16]
 80049f6:	697a      	ldr	r2, [r7, #20]
 80049f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049fc:	f043 0318 	orr.w	r3, r3, #24
 8004a00:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a08:	691b      	ldr	r3, [r3, #16]
 8004a0a:	697a      	ldr	r2, [r7, #20]
 8004a0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a10:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004a14:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004a16:	7afb      	ldrb	r3, [r7, #11]
 8004a18:	2b01      	cmp	r3, #1
 8004a1a:	d10f      	bne.n	8004a3c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004a1c:	697b      	ldr	r3, [r7, #20]
 8004a1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a22:	461a      	mov	r2, r3
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004a28:	697b      	ldr	r3, [r7, #20]
 8004a2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	697a      	ldr	r2, [r7, #20]
 8004a32:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a36:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8004a3a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004a3c:	2300      	movs	r3, #0
}
 8004a3e:	4618      	mov	r0, r3
 8004a40:	371c      	adds	r7, #28
 8004a42:	46bd      	mov	sp, r7
 8004a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a48:	4770      	bx	lr
 8004a4a:	bf00      	nop
 8004a4c:	4f54300a 	.word	0x4f54300a

08004a50 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004a50:	b480      	push	{r7}
 8004a52:	b085      	sub	sp, #20
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004a58:	2300      	movs	r3, #0
 8004a5a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	3301      	adds	r3, #1
 8004a60:	60fb      	str	r3, [r7, #12]
 8004a62:	4a13      	ldr	r2, [pc, #76]	; (8004ab0 <USB_CoreReset+0x60>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d901      	bls.n	8004a6c <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8004a68:	2303      	movs	r3, #3
 8004a6a:	e01a      	b.n	8004aa2 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	691b      	ldr	r3, [r3, #16]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	daf3      	bge.n	8004a5c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004a74:	2300      	movs	r3, #0
 8004a76:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	691b      	ldr	r3, [r3, #16]
 8004a7c:	f043 0201 	orr.w	r2, r3, #1
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	3301      	adds	r3, #1
 8004a88:	60fb      	str	r3, [r7, #12]
 8004a8a:	4a09      	ldr	r2, [pc, #36]	; (8004ab0 <USB_CoreReset+0x60>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d901      	bls.n	8004a94 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8004a90:	2303      	movs	r3, #3
 8004a92:	e006      	b.n	8004aa2 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	691b      	ldr	r3, [r3, #16]
 8004a98:	f003 0301 	and.w	r3, r3, #1
 8004a9c:	2b01      	cmp	r3, #1
 8004a9e:	d0f1      	beq.n	8004a84 <USB_CoreReset+0x34>

  return HAL_OK;
 8004aa0:	2300      	movs	r3, #0
}
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	3714      	adds	r7, #20
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aac:	4770      	bx	lr
 8004aae:	bf00      	nop
 8004ab0:	00030d40 	.word	0x00030d40

08004ab4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b084      	sub	sp, #16
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
 8004abc:	460b      	mov	r3, r1
 8004abe:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004ac0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004ac4:	f002 f8fc 	bl	8006cc0 <USBD_static_malloc>
 8004ac8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d105      	bne.n	8004adc <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8004ad8:	2302      	movs	r3, #2
 8004ada:	e066      	b.n	8004baa <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	68fa      	ldr	r2, [r7, #12]
 8004ae0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	7c1b      	ldrb	r3, [r3, #16]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d119      	bne.n	8004b20 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004aec:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004af0:	2202      	movs	r2, #2
 8004af2:	2181      	movs	r1, #129	; 0x81
 8004af4:	6878      	ldr	r0, [r7, #4]
 8004af6:	f001 ffc0 	bl	8006a7a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2201      	movs	r2, #1
 8004afe:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004b00:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004b04:	2202      	movs	r2, #2
 8004b06:	2101      	movs	r1, #1
 8004b08:	6878      	ldr	r0, [r7, #4]
 8004b0a:	f001 ffb6 	bl	8006a7a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2201      	movs	r2, #1
 8004b12:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2210      	movs	r2, #16
 8004b1a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8004b1e:	e016      	b.n	8004b4e <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004b20:	2340      	movs	r3, #64	; 0x40
 8004b22:	2202      	movs	r2, #2
 8004b24:	2181      	movs	r1, #129	; 0x81
 8004b26:	6878      	ldr	r0, [r7, #4]
 8004b28:	f001 ffa7 	bl	8006a7a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2201      	movs	r2, #1
 8004b30:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004b32:	2340      	movs	r3, #64	; 0x40
 8004b34:	2202      	movs	r2, #2
 8004b36:	2101      	movs	r1, #1
 8004b38:	6878      	ldr	r0, [r7, #4]
 8004b3a:	f001 ff9e 	bl	8006a7a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2201      	movs	r2, #1
 8004b42:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2210      	movs	r2, #16
 8004b4a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004b4e:	2308      	movs	r3, #8
 8004b50:	2203      	movs	r2, #3
 8004b52:	2182      	movs	r1, #130	; 0x82
 8004b54:	6878      	ldr	r0, [r7, #4]
 8004b56:	f001 ff90 	bl	8006a7a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2201      	movs	r2, #1
 8004b5e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	2200      	movs	r2, #0
 8004b70:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	2200      	movs	r2, #0
 8004b78:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	7c1b      	ldrb	r3, [r3, #16]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d109      	bne.n	8004b98 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004b8a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004b8e:	2101      	movs	r1, #1
 8004b90:	6878      	ldr	r0, [r7, #4]
 8004b92:	f002 f861 	bl	8006c58 <USBD_LL_PrepareReceive>
 8004b96:	e007      	b.n	8004ba8 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004b9e:	2340      	movs	r3, #64	; 0x40
 8004ba0:	2101      	movs	r1, #1
 8004ba2:	6878      	ldr	r0, [r7, #4]
 8004ba4:	f002 f858 	bl	8006c58 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8004ba8:	2300      	movs	r3, #0
}
 8004baa:	4618      	mov	r0, r3
 8004bac:	3710      	adds	r7, #16
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bd80      	pop	{r7, pc}

08004bb2 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004bb2:	b580      	push	{r7, lr}
 8004bb4:	b082      	sub	sp, #8
 8004bb6:	af00      	add	r7, sp, #0
 8004bb8:	6078      	str	r0, [r7, #4]
 8004bba:	460b      	mov	r3, r1
 8004bbc:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8004bbe:	2181      	movs	r1, #129	; 0x81
 8004bc0:	6878      	ldr	r0, [r7, #4]
 8004bc2:	f001 ff80 	bl	8006ac6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2200      	movs	r2, #0
 8004bca:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8004bcc:	2101      	movs	r1, #1
 8004bce:	6878      	ldr	r0, [r7, #4]
 8004bd0:	f001 ff79 	bl	8006ac6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8004bdc:	2182      	movs	r1, #130	; 0x82
 8004bde:	6878      	ldr	r0, [r7, #4]
 8004be0:	f001 ff71 	bl	8006ac6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2200      	movs	r2, #0
 8004be8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d00e      	beq.n	8004c1c <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004c0e:	4618      	mov	r0, r3
 8004c10:	f002 f864 	bl	8006cdc <USBD_static_free>
    pdev->pClassData = NULL;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2200      	movs	r2, #0
 8004c18:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8004c1c:	2300      	movs	r3, #0
}
 8004c1e:	4618      	mov	r0, r3
 8004c20:	3708      	adds	r7, #8
 8004c22:	46bd      	mov	sp, r7
 8004c24:	bd80      	pop	{r7, pc}
	...

08004c28 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b086      	sub	sp, #24
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
 8004c30:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004c38:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8004c3e:	2300      	movs	r3, #0
 8004c40:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8004c42:	2300      	movs	r3, #0
 8004c44:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8004c46:	693b      	ldr	r3, [r7, #16]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d101      	bne.n	8004c50 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8004c4c:	2303      	movs	r3, #3
 8004c4e:	e0af      	b.n	8004db0 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	781b      	ldrb	r3, [r3, #0]
 8004c54:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d03f      	beq.n	8004cdc <USBD_CDC_Setup+0xb4>
 8004c5c:	2b20      	cmp	r3, #32
 8004c5e:	f040 809f 	bne.w	8004da0 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	88db      	ldrh	r3, [r3, #6]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d02e      	beq.n	8004cc8 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	781b      	ldrb	r3, [r3, #0]
 8004c6e:	b25b      	sxtb	r3, r3
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	da16      	bge.n	8004ca2 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004c7a:	689b      	ldr	r3, [r3, #8]
 8004c7c:	683a      	ldr	r2, [r7, #0]
 8004c7e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8004c80:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004c82:	683a      	ldr	r2, [r7, #0]
 8004c84:	88d2      	ldrh	r2, [r2, #6]
 8004c86:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	88db      	ldrh	r3, [r3, #6]
 8004c8c:	2b07      	cmp	r3, #7
 8004c8e:	bf28      	it	cs
 8004c90:	2307      	movcs	r3, #7
 8004c92:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8004c94:	693b      	ldr	r3, [r7, #16]
 8004c96:	89fa      	ldrh	r2, [r7, #14]
 8004c98:	4619      	mov	r1, r3
 8004c9a:	6878      	ldr	r0, [r7, #4]
 8004c9c:	f001 fae9 	bl	8006272 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8004ca0:	e085      	b.n	8004dae <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	785a      	ldrb	r2, [r3, #1]
 8004ca6:	693b      	ldr	r3, [r7, #16]
 8004ca8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	88db      	ldrh	r3, [r3, #6]
 8004cb0:	b2da      	uxtb	r2, r3
 8004cb2:	693b      	ldr	r3, [r7, #16]
 8004cb4:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8004cb8:	6939      	ldr	r1, [r7, #16]
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	88db      	ldrh	r3, [r3, #6]
 8004cbe:	461a      	mov	r2, r3
 8004cc0:	6878      	ldr	r0, [r7, #4]
 8004cc2:	f001 fb02 	bl	80062ca <USBD_CtlPrepareRx>
      break;
 8004cc6:	e072      	b.n	8004dae <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004cce:	689b      	ldr	r3, [r3, #8]
 8004cd0:	683a      	ldr	r2, [r7, #0]
 8004cd2:	7850      	ldrb	r0, [r2, #1]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	6839      	ldr	r1, [r7, #0]
 8004cd8:	4798      	blx	r3
      break;
 8004cda:	e068      	b.n	8004dae <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	785b      	ldrb	r3, [r3, #1]
 8004ce0:	2b0b      	cmp	r3, #11
 8004ce2:	d852      	bhi.n	8004d8a <USBD_CDC_Setup+0x162>
 8004ce4:	a201      	add	r2, pc, #4	; (adr r2, 8004cec <USBD_CDC_Setup+0xc4>)
 8004ce6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cea:	bf00      	nop
 8004cec:	08004d1d 	.word	0x08004d1d
 8004cf0:	08004d99 	.word	0x08004d99
 8004cf4:	08004d8b 	.word	0x08004d8b
 8004cf8:	08004d8b 	.word	0x08004d8b
 8004cfc:	08004d8b 	.word	0x08004d8b
 8004d00:	08004d8b 	.word	0x08004d8b
 8004d04:	08004d8b 	.word	0x08004d8b
 8004d08:	08004d8b 	.word	0x08004d8b
 8004d0c:	08004d8b 	.word	0x08004d8b
 8004d10:	08004d8b 	.word	0x08004d8b
 8004d14:	08004d47 	.word	0x08004d47
 8004d18:	08004d71 	.word	0x08004d71
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004d22:	b2db      	uxtb	r3, r3
 8004d24:	2b03      	cmp	r3, #3
 8004d26:	d107      	bne.n	8004d38 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8004d28:	f107 030a 	add.w	r3, r7, #10
 8004d2c:	2202      	movs	r2, #2
 8004d2e:	4619      	mov	r1, r3
 8004d30:	6878      	ldr	r0, [r7, #4]
 8004d32:	f001 fa9e 	bl	8006272 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004d36:	e032      	b.n	8004d9e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8004d38:	6839      	ldr	r1, [r7, #0]
 8004d3a:	6878      	ldr	r0, [r7, #4]
 8004d3c:	f001 fa28 	bl	8006190 <USBD_CtlError>
            ret = USBD_FAIL;
 8004d40:	2303      	movs	r3, #3
 8004d42:	75fb      	strb	r3, [r7, #23]
          break;
 8004d44:	e02b      	b.n	8004d9e <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004d4c:	b2db      	uxtb	r3, r3
 8004d4e:	2b03      	cmp	r3, #3
 8004d50:	d107      	bne.n	8004d62 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8004d52:	f107 030d 	add.w	r3, r7, #13
 8004d56:	2201      	movs	r2, #1
 8004d58:	4619      	mov	r1, r3
 8004d5a:	6878      	ldr	r0, [r7, #4]
 8004d5c:	f001 fa89 	bl	8006272 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004d60:	e01d      	b.n	8004d9e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8004d62:	6839      	ldr	r1, [r7, #0]
 8004d64:	6878      	ldr	r0, [r7, #4]
 8004d66:	f001 fa13 	bl	8006190 <USBD_CtlError>
            ret = USBD_FAIL;
 8004d6a:	2303      	movs	r3, #3
 8004d6c:	75fb      	strb	r3, [r7, #23]
          break;
 8004d6e:	e016      	b.n	8004d9e <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004d76:	b2db      	uxtb	r3, r3
 8004d78:	2b03      	cmp	r3, #3
 8004d7a:	d00f      	beq.n	8004d9c <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8004d7c:	6839      	ldr	r1, [r7, #0]
 8004d7e:	6878      	ldr	r0, [r7, #4]
 8004d80:	f001 fa06 	bl	8006190 <USBD_CtlError>
            ret = USBD_FAIL;
 8004d84:	2303      	movs	r3, #3
 8004d86:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8004d88:	e008      	b.n	8004d9c <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8004d8a:	6839      	ldr	r1, [r7, #0]
 8004d8c:	6878      	ldr	r0, [r7, #4]
 8004d8e:	f001 f9ff 	bl	8006190 <USBD_CtlError>
          ret = USBD_FAIL;
 8004d92:	2303      	movs	r3, #3
 8004d94:	75fb      	strb	r3, [r7, #23]
          break;
 8004d96:	e002      	b.n	8004d9e <USBD_CDC_Setup+0x176>
          break;
 8004d98:	bf00      	nop
 8004d9a:	e008      	b.n	8004dae <USBD_CDC_Setup+0x186>
          break;
 8004d9c:	bf00      	nop
      }
      break;
 8004d9e:	e006      	b.n	8004dae <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8004da0:	6839      	ldr	r1, [r7, #0]
 8004da2:	6878      	ldr	r0, [r7, #4]
 8004da4:	f001 f9f4 	bl	8006190 <USBD_CtlError>
      ret = USBD_FAIL;
 8004da8:	2303      	movs	r3, #3
 8004daa:	75fb      	strb	r3, [r7, #23]
      break;
 8004dac:	bf00      	nop
  }

  return (uint8_t)ret;
 8004dae:	7dfb      	ldrb	r3, [r7, #23]
}
 8004db0:	4618      	mov	r0, r3
 8004db2:	3718      	adds	r7, #24
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bd80      	pop	{r7, pc}

08004db8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b084      	sub	sp, #16
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
 8004dc0:	460b      	mov	r3, r1
 8004dc2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8004dca:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d101      	bne.n	8004dda <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8004dd6:	2303      	movs	r3, #3
 8004dd8:	e04f      	b.n	8004e7a <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004de0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8004de2:	78fa      	ldrb	r2, [r7, #3]
 8004de4:	6879      	ldr	r1, [r7, #4]
 8004de6:	4613      	mov	r3, r2
 8004de8:	009b      	lsls	r3, r3, #2
 8004dea:	4413      	add	r3, r2
 8004dec:	009b      	lsls	r3, r3, #2
 8004dee:	440b      	add	r3, r1
 8004df0:	3318      	adds	r3, #24
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d029      	beq.n	8004e4c <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8004df8:	78fa      	ldrb	r2, [r7, #3]
 8004dfa:	6879      	ldr	r1, [r7, #4]
 8004dfc:	4613      	mov	r3, r2
 8004dfe:	009b      	lsls	r3, r3, #2
 8004e00:	4413      	add	r3, r2
 8004e02:	009b      	lsls	r3, r3, #2
 8004e04:	440b      	add	r3, r1
 8004e06:	3318      	adds	r3, #24
 8004e08:	681a      	ldr	r2, [r3, #0]
 8004e0a:	78f9      	ldrb	r1, [r7, #3]
 8004e0c:	68f8      	ldr	r0, [r7, #12]
 8004e0e:	460b      	mov	r3, r1
 8004e10:	00db      	lsls	r3, r3, #3
 8004e12:	1a5b      	subs	r3, r3, r1
 8004e14:	009b      	lsls	r3, r3, #2
 8004e16:	4403      	add	r3, r0
 8004e18:	3344      	adds	r3, #68	; 0x44
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	fbb2 f1f3 	udiv	r1, r2, r3
 8004e20:	fb01 f303 	mul.w	r3, r1, r3
 8004e24:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d110      	bne.n	8004e4c <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8004e2a:	78fa      	ldrb	r2, [r7, #3]
 8004e2c:	6879      	ldr	r1, [r7, #4]
 8004e2e:	4613      	mov	r3, r2
 8004e30:	009b      	lsls	r3, r3, #2
 8004e32:	4413      	add	r3, r2
 8004e34:	009b      	lsls	r3, r3, #2
 8004e36:	440b      	add	r3, r1
 8004e38:	3318      	adds	r3, #24
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8004e3e:	78f9      	ldrb	r1, [r7, #3]
 8004e40:	2300      	movs	r3, #0
 8004e42:	2200      	movs	r2, #0
 8004e44:	6878      	ldr	r0, [r7, #4]
 8004e46:	f001 fee6 	bl	8006c16 <USBD_LL_Transmit>
 8004e4a:	e015      	b.n	8004e78 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004e5a:	691b      	ldr	r3, [r3, #16]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d00b      	beq.n	8004e78 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004e66:	691b      	ldr	r3, [r3, #16]
 8004e68:	68ba      	ldr	r2, [r7, #8]
 8004e6a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8004e6e:	68ba      	ldr	r2, [r7, #8]
 8004e70:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8004e74:	78fa      	ldrb	r2, [r7, #3]
 8004e76:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8004e78:	2300      	movs	r3, #0
}
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	3710      	adds	r7, #16
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bd80      	pop	{r7, pc}

08004e82 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004e82:	b580      	push	{r7, lr}
 8004e84:	b084      	sub	sp, #16
 8004e86:	af00      	add	r7, sp, #0
 8004e88:	6078      	str	r0, [r7, #4]
 8004e8a:	460b      	mov	r3, r1
 8004e8c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004e94:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d101      	bne.n	8004ea4 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8004ea0:	2303      	movs	r3, #3
 8004ea2:	e015      	b.n	8004ed0 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8004ea4:	78fb      	ldrb	r3, [r7, #3]
 8004ea6:	4619      	mov	r1, r3
 8004ea8:	6878      	ldr	r0, [r7, #4]
 8004eaa:	f001 fef6 	bl	8006c9a <USBD_LL_GetRxDataSize>
 8004eae:	4602      	mov	r2, r0
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004ebc:	68db      	ldr	r3, [r3, #12]
 8004ebe:	68fa      	ldr	r2, [r7, #12]
 8004ec0:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8004ec4:	68fa      	ldr	r2, [r7, #12]
 8004ec6:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8004eca:	4611      	mov	r1, r2
 8004ecc:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8004ece:	2300      	movs	r3, #0
}
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	3710      	adds	r7, #16
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	bd80      	pop	{r7, pc}

08004ed8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b084      	sub	sp, #16
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004ee6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d101      	bne.n	8004ef2 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8004eee:	2303      	movs	r3, #3
 8004ef0:	e01b      	b.n	8004f2a <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d015      	beq.n	8004f28 <USBD_CDC_EP0_RxReady+0x50>
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8004f02:	2bff      	cmp	r3, #255	; 0xff
 8004f04:	d010      	beq.n	8004f28 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004f0c:	689b      	ldr	r3, [r3, #8]
 8004f0e:	68fa      	ldr	r2, [r7, #12]
 8004f10:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8004f14:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8004f16:	68fa      	ldr	r2, [r7, #12]
 8004f18:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8004f1c:	b292      	uxth	r2, r2
 8004f1e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	22ff      	movs	r2, #255	; 0xff
 8004f24:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8004f28:	2300      	movs	r3, #0
}
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	3710      	adds	r7, #16
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	bd80      	pop	{r7, pc}
	...

08004f34 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8004f34:	b480      	push	{r7}
 8004f36:	b083      	sub	sp, #12
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2243      	movs	r2, #67	; 0x43
 8004f40:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8004f42:	4b03      	ldr	r3, [pc, #12]	; (8004f50 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8004f44:	4618      	mov	r0, r3
 8004f46:	370c      	adds	r7, #12
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4e:	4770      	bx	lr
 8004f50:	20000094 	.word	0x20000094

08004f54 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8004f54:	b480      	push	{r7}
 8004f56:	b083      	sub	sp, #12
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2243      	movs	r2, #67	; 0x43
 8004f60:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8004f62:	4b03      	ldr	r3, [pc, #12]	; (8004f70 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8004f64:	4618      	mov	r0, r3
 8004f66:	370c      	adds	r7, #12
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6e:	4770      	bx	lr
 8004f70:	20000050 	.word	0x20000050

08004f74 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8004f74:	b480      	push	{r7}
 8004f76:	b083      	sub	sp, #12
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2243      	movs	r2, #67	; 0x43
 8004f80:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8004f82:	4b03      	ldr	r3, [pc, #12]	; (8004f90 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8004f84:	4618      	mov	r0, r3
 8004f86:	370c      	adds	r7, #12
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8e:	4770      	bx	lr
 8004f90:	200000d8 	.word	0x200000d8

08004f94 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8004f94:	b480      	push	{r7}
 8004f96:	b083      	sub	sp, #12
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	220a      	movs	r2, #10
 8004fa0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8004fa2:	4b03      	ldr	r3, [pc, #12]	; (8004fb0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	370c      	adds	r7, #12
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fae:	4770      	bx	lr
 8004fb0:	2000000c 	.word	0x2000000c

08004fb4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	b083      	sub	sp, #12
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
 8004fbc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d101      	bne.n	8004fc8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8004fc4:	2303      	movs	r3, #3
 8004fc6:	e004      	b.n	8004fd2 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	683a      	ldr	r2, [r7, #0]
 8004fcc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8004fd0:	2300      	movs	r3, #0
}
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	370c      	adds	r7, #12
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fdc:	4770      	bx	lr

08004fde <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8004fde:	b480      	push	{r7}
 8004fe0:	b087      	sub	sp, #28
 8004fe2:	af00      	add	r7, sp, #0
 8004fe4:	60f8      	str	r0, [r7, #12]
 8004fe6:	60b9      	str	r1, [r7, #8]
 8004fe8:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004ff0:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8004ff2:	697b      	ldr	r3, [r7, #20]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d101      	bne.n	8004ffc <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8004ff8:	2303      	movs	r3, #3
 8004ffa:	e008      	b.n	800500e <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8004ffc:	697b      	ldr	r3, [r7, #20]
 8004ffe:	68ba      	ldr	r2, [r7, #8]
 8005000:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005004:	697b      	ldr	r3, [r7, #20]
 8005006:	687a      	ldr	r2, [r7, #4]
 8005008:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800500c:	2300      	movs	r3, #0
}
 800500e:	4618      	mov	r0, r3
 8005010:	371c      	adds	r7, #28
 8005012:	46bd      	mov	sp, r7
 8005014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005018:	4770      	bx	lr

0800501a <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800501a:	b480      	push	{r7}
 800501c:	b085      	sub	sp, #20
 800501e:	af00      	add	r7, sp, #0
 8005020:	6078      	str	r0, [r7, #4]
 8005022:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800502a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d101      	bne.n	8005036 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8005032:	2303      	movs	r3, #3
 8005034:	e004      	b.n	8005040 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	683a      	ldr	r2, [r7, #0]
 800503a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800503e:	2300      	movs	r3, #0
}
 8005040:	4618      	mov	r0, r3
 8005042:	3714      	adds	r7, #20
 8005044:	46bd      	mov	sp, r7
 8005046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504a:	4770      	bx	lr

0800504c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b084      	sub	sp, #16
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800505a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005062:	2b00      	cmp	r3, #0
 8005064:	d101      	bne.n	800506a <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8005066:	2303      	movs	r3, #3
 8005068:	e016      	b.n	8005098 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	7c1b      	ldrb	r3, [r3, #16]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d109      	bne.n	8005086 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005078:	f44f 7300 	mov.w	r3, #512	; 0x200
 800507c:	2101      	movs	r1, #1
 800507e:	6878      	ldr	r0, [r7, #4]
 8005080:	f001 fdea 	bl	8006c58 <USBD_LL_PrepareReceive>
 8005084:	e007      	b.n	8005096 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800508c:	2340      	movs	r3, #64	; 0x40
 800508e:	2101      	movs	r1, #1
 8005090:	6878      	ldr	r0, [r7, #4]
 8005092:	f001 fde1 	bl	8006c58 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005096:	2300      	movs	r3, #0
}
 8005098:	4618      	mov	r0, r3
 800509a:	3710      	adds	r7, #16
 800509c:	46bd      	mov	sp, r7
 800509e:	bd80      	pop	{r7, pc}

080050a0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b086      	sub	sp, #24
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	60f8      	str	r0, [r7, #12]
 80050a8:	60b9      	str	r1, [r7, #8]
 80050aa:	4613      	mov	r3, r2
 80050ac:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d101      	bne.n	80050b8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80050b4:	2303      	movs	r3, #3
 80050b6:	e01f      	b.n	80050f8 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	2200      	movs	r2, #0
 80050bc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	2200      	movs	r2, #0
 80050c4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	2200      	movs	r2, #0
 80050cc:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80050d0:	68bb      	ldr	r3, [r7, #8]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d003      	beq.n	80050de <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	68ba      	ldr	r2, [r7, #8]
 80050da:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	2201      	movs	r2, #1
 80050e2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	79fa      	ldrb	r2, [r7, #7]
 80050ea:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80050ec:	68f8      	ldr	r0, [r7, #12]
 80050ee:	f001 fc5d 	bl	80069ac <USBD_LL_Init>
 80050f2:	4603      	mov	r3, r0
 80050f4:	75fb      	strb	r3, [r7, #23]

  return ret;
 80050f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80050f8:	4618      	mov	r0, r3
 80050fa:	3718      	adds	r7, #24
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bd80      	pop	{r7, pc}

08005100 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b084      	sub	sp, #16
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
 8005108:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800510a:	2300      	movs	r3, #0
 800510c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d101      	bne.n	8005118 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8005114:	2303      	movs	r3, #3
 8005116:	e016      	b.n	8005146 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	683a      	ldr	r2, [r7, #0]
 800511c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005128:	2b00      	cmp	r3, #0
 800512a:	d00b      	beq.n	8005144 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005134:	f107 020e 	add.w	r2, r7, #14
 8005138:	4610      	mov	r0, r2
 800513a:	4798      	blx	r3
 800513c:	4602      	mov	r2, r0
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8005144:	2300      	movs	r3, #0
}
 8005146:	4618      	mov	r0, r3
 8005148:	3710      	adds	r7, #16
 800514a:	46bd      	mov	sp, r7
 800514c:	bd80      	pop	{r7, pc}

0800514e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800514e:	b580      	push	{r7, lr}
 8005150:	b082      	sub	sp, #8
 8005152:	af00      	add	r7, sp, #0
 8005154:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005156:	6878      	ldr	r0, [r7, #4]
 8005158:	f001 fc74 	bl	8006a44 <USBD_LL_Start>
 800515c:	4603      	mov	r3, r0
}
 800515e:	4618      	mov	r0, r3
 8005160:	3708      	adds	r7, #8
 8005162:	46bd      	mov	sp, r7
 8005164:	bd80      	pop	{r7, pc}

08005166 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005166:	b480      	push	{r7}
 8005168:	b083      	sub	sp, #12
 800516a:	af00      	add	r7, sp, #0
 800516c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800516e:	2300      	movs	r3, #0
}
 8005170:	4618      	mov	r0, r3
 8005172:	370c      	adds	r7, #12
 8005174:	46bd      	mov	sp, r7
 8005176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517a:	4770      	bx	lr

0800517c <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b084      	sub	sp, #16
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
 8005184:	460b      	mov	r3, r1
 8005186:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005188:	2303      	movs	r3, #3
 800518a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005192:	2b00      	cmp	r3, #0
 8005194:	d009      	beq.n	80051aa <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	78fa      	ldrb	r2, [r7, #3]
 80051a0:	4611      	mov	r1, r2
 80051a2:	6878      	ldr	r0, [r7, #4]
 80051a4:	4798      	blx	r3
 80051a6:	4603      	mov	r3, r0
 80051a8:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80051aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80051ac:	4618      	mov	r0, r3
 80051ae:	3710      	adds	r7, #16
 80051b0:	46bd      	mov	sp, r7
 80051b2:	bd80      	pop	{r7, pc}

080051b4 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b082      	sub	sp, #8
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
 80051bc:	460b      	mov	r3, r1
 80051be:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d007      	beq.n	80051da <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	78fa      	ldrb	r2, [r7, #3]
 80051d4:	4611      	mov	r1, r2
 80051d6:	6878      	ldr	r0, [r7, #4]
 80051d8:	4798      	blx	r3
  }

  return USBD_OK;
 80051da:	2300      	movs	r3, #0
}
 80051dc:	4618      	mov	r0, r3
 80051de:	3708      	adds	r7, #8
 80051e0:	46bd      	mov	sp, r7
 80051e2:	bd80      	pop	{r7, pc}

080051e4 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b084      	sub	sp, #16
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
 80051ec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80051f4:	6839      	ldr	r1, [r7, #0]
 80051f6:	4618      	mov	r0, r3
 80051f8:	f000 ff90 	bl	800611c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2201      	movs	r2, #1
 8005200:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800520a:	461a      	mov	r2, r3
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005218:	f003 031f 	and.w	r3, r3, #31
 800521c:	2b02      	cmp	r3, #2
 800521e:	d01a      	beq.n	8005256 <USBD_LL_SetupStage+0x72>
 8005220:	2b02      	cmp	r3, #2
 8005222:	d822      	bhi.n	800526a <USBD_LL_SetupStage+0x86>
 8005224:	2b00      	cmp	r3, #0
 8005226:	d002      	beq.n	800522e <USBD_LL_SetupStage+0x4a>
 8005228:	2b01      	cmp	r3, #1
 800522a:	d00a      	beq.n	8005242 <USBD_LL_SetupStage+0x5e>
 800522c:	e01d      	b.n	800526a <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005234:	4619      	mov	r1, r3
 8005236:	6878      	ldr	r0, [r7, #4]
 8005238:	f000 fa62 	bl	8005700 <USBD_StdDevReq>
 800523c:	4603      	mov	r3, r0
 800523e:	73fb      	strb	r3, [r7, #15]
      break;
 8005240:	e020      	b.n	8005284 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005248:	4619      	mov	r1, r3
 800524a:	6878      	ldr	r0, [r7, #4]
 800524c:	f000 fac6 	bl	80057dc <USBD_StdItfReq>
 8005250:	4603      	mov	r3, r0
 8005252:	73fb      	strb	r3, [r7, #15]
      break;
 8005254:	e016      	b.n	8005284 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800525c:	4619      	mov	r1, r3
 800525e:	6878      	ldr	r0, [r7, #4]
 8005260:	f000 fb05 	bl	800586e <USBD_StdEPReq>
 8005264:	4603      	mov	r3, r0
 8005266:	73fb      	strb	r3, [r7, #15]
      break;
 8005268:	e00c      	b.n	8005284 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005270:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005274:	b2db      	uxtb	r3, r3
 8005276:	4619      	mov	r1, r3
 8005278:	6878      	ldr	r0, [r7, #4]
 800527a:	f001 fc43 	bl	8006b04 <USBD_LL_StallEP>
 800527e:	4603      	mov	r3, r0
 8005280:	73fb      	strb	r3, [r7, #15]
      break;
 8005282:	bf00      	nop
  }

  return ret;
 8005284:	7bfb      	ldrb	r3, [r7, #15]
}
 8005286:	4618      	mov	r0, r3
 8005288:	3710      	adds	r7, #16
 800528a:	46bd      	mov	sp, r7
 800528c:	bd80      	pop	{r7, pc}

0800528e <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800528e:	b580      	push	{r7, lr}
 8005290:	b086      	sub	sp, #24
 8005292:	af00      	add	r7, sp, #0
 8005294:	60f8      	str	r0, [r7, #12]
 8005296:	460b      	mov	r3, r1
 8005298:	607a      	str	r2, [r7, #4]
 800529a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800529c:	7afb      	ldrb	r3, [r7, #11]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d138      	bne.n	8005314 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80052a8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80052b0:	2b03      	cmp	r3, #3
 80052b2:	d14a      	bne.n	800534a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80052b4:	693b      	ldr	r3, [r7, #16]
 80052b6:	689a      	ldr	r2, [r3, #8]
 80052b8:	693b      	ldr	r3, [r7, #16]
 80052ba:	68db      	ldr	r3, [r3, #12]
 80052bc:	429a      	cmp	r2, r3
 80052be:	d913      	bls.n	80052e8 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80052c0:	693b      	ldr	r3, [r7, #16]
 80052c2:	689a      	ldr	r2, [r3, #8]
 80052c4:	693b      	ldr	r3, [r7, #16]
 80052c6:	68db      	ldr	r3, [r3, #12]
 80052c8:	1ad2      	subs	r2, r2, r3
 80052ca:	693b      	ldr	r3, [r7, #16]
 80052cc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80052ce:	693b      	ldr	r3, [r7, #16]
 80052d0:	68da      	ldr	r2, [r3, #12]
 80052d2:	693b      	ldr	r3, [r7, #16]
 80052d4:	689b      	ldr	r3, [r3, #8]
 80052d6:	4293      	cmp	r3, r2
 80052d8:	bf28      	it	cs
 80052da:	4613      	movcs	r3, r2
 80052dc:	461a      	mov	r2, r3
 80052de:	6879      	ldr	r1, [r7, #4]
 80052e0:	68f8      	ldr	r0, [r7, #12]
 80052e2:	f001 f80f 	bl	8006304 <USBD_CtlContinueRx>
 80052e6:	e030      	b.n	800534a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80052ee:	b2db      	uxtb	r3, r3
 80052f0:	2b03      	cmp	r3, #3
 80052f2:	d10b      	bne.n	800530c <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80052fa:	691b      	ldr	r3, [r3, #16]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d005      	beq.n	800530c <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005306:	691b      	ldr	r3, [r3, #16]
 8005308:	68f8      	ldr	r0, [r7, #12]
 800530a:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800530c:	68f8      	ldr	r0, [r7, #12]
 800530e:	f001 f80a 	bl	8006326 <USBD_CtlSendStatus>
 8005312:	e01a      	b.n	800534a <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800531a:	b2db      	uxtb	r3, r3
 800531c:	2b03      	cmp	r3, #3
 800531e:	d114      	bne.n	800534a <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005326:	699b      	ldr	r3, [r3, #24]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d00e      	beq.n	800534a <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005332:	699b      	ldr	r3, [r3, #24]
 8005334:	7afa      	ldrb	r2, [r7, #11]
 8005336:	4611      	mov	r1, r2
 8005338:	68f8      	ldr	r0, [r7, #12]
 800533a:	4798      	blx	r3
 800533c:	4603      	mov	r3, r0
 800533e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8005340:	7dfb      	ldrb	r3, [r7, #23]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d001      	beq.n	800534a <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8005346:	7dfb      	ldrb	r3, [r7, #23]
 8005348:	e000      	b.n	800534c <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800534a:	2300      	movs	r3, #0
}
 800534c:	4618      	mov	r0, r3
 800534e:	3718      	adds	r7, #24
 8005350:	46bd      	mov	sp, r7
 8005352:	bd80      	pop	{r7, pc}

08005354 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b086      	sub	sp, #24
 8005358:	af00      	add	r7, sp, #0
 800535a:	60f8      	str	r0, [r7, #12]
 800535c:	460b      	mov	r3, r1
 800535e:	607a      	str	r2, [r7, #4]
 8005360:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005362:	7afb      	ldrb	r3, [r7, #11]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d16b      	bne.n	8005440 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	3314      	adds	r3, #20
 800536c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005374:	2b02      	cmp	r3, #2
 8005376:	d156      	bne.n	8005426 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8005378:	693b      	ldr	r3, [r7, #16]
 800537a:	689a      	ldr	r2, [r3, #8]
 800537c:	693b      	ldr	r3, [r7, #16]
 800537e:	68db      	ldr	r3, [r3, #12]
 8005380:	429a      	cmp	r2, r3
 8005382:	d914      	bls.n	80053ae <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005384:	693b      	ldr	r3, [r7, #16]
 8005386:	689a      	ldr	r2, [r3, #8]
 8005388:	693b      	ldr	r3, [r7, #16]
 800538a:	68db      	ldr	r3, [r3, #12]
 800538c:	1ad2      	subs	r2, r2, r3
 800538e:	693b      	ldr	r3, [r7, #16]
 8005390:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005392:	693b      	ldr	r3, [r7, #16]
 8005394:	689b      	ldr	r3, [r3, #8]
 8005396:	461a      	mov	r2, r3
 8005398:	6879      	ldr	r1, [r7, #4]
 800539a:	68f8      	ldr	r0, [r7, #12]
 800539c:	f000 ff84 	bl	80062a8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80053a0:	2300      	movs	r3, #0
 80053a2:	2200      	movs	r2, #0
 80053a4:	2100      	movs	r1, #0
 80053a6:	68f8      	ldr	r0, [r7, #12]
 80053a8:	f001 fc56 	bl	8006c58 <USBD_LL_PrepareReceive>
 80053ac:	e03b      	b.n	8005426 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80053ae:	693b      	ldr	r3, [r7, #16]
 80053b0:	68da      	ldr	r2, [r3, #12]
 80053b2:	693b      	ldr	r3, [r7, #16]
 80053b4:	689b      	ldr	r3, [r3, #8]
 80053b6:	429a      	cmp	r2, r3
 80053b8:	d11c      	bne.n	80053f4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80053ba:	693b      	ldr	r3, [r7, #16]
 80053bc:	685a      	ldr	r2, [r3, #4]
 80053be:	693b      	ldr	r3, [r7, #16]
 80053c0:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80053c2:	429a      	cmp	r2, r3
 80053c4:	d316      	bcc.n	80053f4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80053c6:	693b      	ldr	r3, [r7, #16]
 80053c8:	685a      	ldr	r2, [r3, #4]
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80053d0:	429a      	cmp	r2, r3
 80053d2:	d20f      	bcs.n	80053f4 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80053d4:	2200      	movs	r2, #0
 80053d6:	2100      	movs	r1, #0
 80053d8:	68f8      	ldr	r0, [r7, #12]
 80053da:	f000 ff65 	bl	80062a8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	2200      	movs	r2, #0
 80053e2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80053e6:	2300      	movs	r3, #0
 80053e8:	2200      	movs	r2, #0
 80053ea:	2100      	movs	r1, #0
 80053ec:	68f8      	ldr	r0, [r7, #12]
 80053ee:	f001 fc33 	bl	8006c58 <USBD_LL_PrepareReceive>
 80053f2:	e018      	b.n	8005426 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80053fa:	b2db      	uxtb	r3, r3
 80053fc:	2b03      	cmp	r3, #3
 80053fe:	d10b      	bne.n	8005418 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005406:	68db      	ldr	r3, [r3, #12]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d005      	beq.n	8005418 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005412:	68db      	ldr	r3, [r3, #12]
 8005414:	68f8      	ldr	r0, [r7, #12]
 8005416:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005418:	2180      	movs	r1, #128	; 0x80
 800541a:	68f8      	ldr	r0, [r7, #12]
 800541c:	f001 fb72 	bl	8006b04 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005420:	68f8      	ldr	r0, [r7, #12]
 8005422:	f000 ff93 	bl	800634c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800542c:	2b01      	cmp	r3, #1
 800542e:	d122      	bne.n	8005476 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8005430:	68f8      	ldr	r0, [r7, #12]
 8005432:	f7ff fe98 	bl	8005166 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	2200      	movs	r2, #0
 800543a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800543e:	e01a      	b.n	8005476 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005446:	b2db      	uxtb	r3, r3
 8005448:	2b03      	cmp	r3, #3
 800544a:	d114      	bne.n	8005476 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005452:	695b      	ldr	r3, [r3, #20]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d00e      	beq.n	8005476 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800545e:	695b      	ldr	r3, [r3, #20]
 8005460:	7afa      	ldrb	r2, [r7, #11]
 8005462:	4611      	mov	r1, r2
 8005464:	68f8      	ldr	r0, [r7, #12]
 8005466:	4798      	blx	r3
 8005468:	4603      	mov	r3, r0
 800546a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800546c:	7dfb      	ldrb	r3, [r7, #23]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d001      	beq.n	8005476 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8005472:	7dfb      	ldrb	r3, [r7, #23]
 8005474:	e000      	b.n	8005478 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8005476:	2300      	movs	r3, #0
}
 8005478:	4618      	mov	r0, r3
 800547a:	3718      	adds	r7, #24
 800547c:	46bd      	mov	sp, r7
 800547e:	bd80      	pop	{r7, pc}

08005480 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b082      	sub	sp, #8
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2201      	movs	r2, #1
 800548c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2200      	movs	r2, #0
 8005494:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2200      	movs	r2, #0
 800549c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2200      	movs	r2, #0
 80054a2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d101      	bne.n	80054b4 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 80054b0:	2303      	movs	r3, #3
 80054b2:	e02f      	b.n	8005514 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d00f      	beq.n	80054de <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80054c4:	685b      	ldr	r3, [r3, #4]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d009      	beq.n	80054de <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80054d0:	685b      	ldr	r3, [r3, #4]
 80054d2:	687a      	ldr	r2, [r7, #4]
 80054d4:	6852      	ldr	r2, [r2, #4]
 80054d6:	b2d2      	uxtb	r2, r2
 80054d8:	4611      	mov	r1, r2
 80054da:	6878      	ldr	r0, [r7, #4]
 80054dc:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80054de:	2340      	movs	r3, #64	; 0x40
 80054e0:	2200      	movs	r2, #0
 80054e2:	2100      	movs	r1, #0
 80054e4:	6878      	ldr	r0, [r7, #4]
 80054e6:	f001 fac8 	bl	8006a7a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2201      	movs	r2, #1
 80054ee:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2240      	movs	r2, #64	; 0x40
 80054f6:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80054fa:	2340      	movs	r3, #64	; 0x40
 80054fc:	2200      	movs	r2, #0
 80054fe:	2180      	movs	r1, #128	; 0x80
 8005500:	6878      	ldr	r0, [r7, #4]
 8005502:	f001 faba 	bl	8006a7a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2201      	movs	r2, #1
 800550a:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2240      	movs	r2, #64	; 0x40
 8005510:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8005512:	2300      	movs	r3, #0
}
 8005514:	4618      	mov	r0, r3
 8005516:	3708      	adds	r7, #8
 8005518:	46bd      	mov	sp, r7
 800551a:	bd80      	pop	{r7, pc}

0800551c <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800551c:	b480      	push	{r7}
 800551e:	b083      	sub	sp, #12
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
 8005524:	460b      	mov	r3, r1
 8005526:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	78fa      	ldrb	r2, [r7, #3]
 800552c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800552e:	2300      	movs	r3, #0
}
 8005530:	4618      	mov	r0, r3
 8005532:	370c      	adds	r7, #12
 8005534:	46bd      	mov	sp, r7
 8005536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553a:	4770      	bx	lr

0800553c <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800553c:	b480      	push	{r7}
 800553e:	b083      	sub	sp, #12
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800554a:	b2da      	uxtb	r2, r3
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2204      	movs	r2, #4
 8005556:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800555a:	2300      	movs	r3, #0
}
 800555c:	4618      	mov	r0, r3
 800555e:	370c      	adds	r7, #12
 8005560:	46bd      	mov	sp, r7
 8005562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005566:	4770      	bx	lr

08005568 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005568:	b480      	push	{r7}
 800556a:	b083      	sub	sp, #12
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005576:	b2db      	uxtb	r3, r3
 8005578:	2b04      	cmp	r3, #4
 800557a:	d106      	bne.n	800558a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8005582:	b2da      	uxtb	r2, r3
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800558a:	2300      	movs	r3, #0
}
 800558c:	4618      	mov	r0, r3
 800558e:	370c      	adds	r7, #12
 8005590:	46bd      	mov	sp, r7
 8005592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005596:	4770      	bx	lr

08005598 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b082      	sub	sp, #8
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d101      	bne.n	80055ae <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 80055aa:	2303      	movs	r3, #3
 80055ac:	e012      	b.n	80055d4 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80055b4:	b2db      	uxtb	r3, r3
 80055b6:	2b03      	cmp	r3, #3
 80055b8:	d10b      	bne.n	80055d2 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80055c0:	69db      	ldr	r3, [r3, #28]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d005      	beq.n	80055d2 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80055cc:	69db      	ldr	r3, [r3, #28]
 80055ce:	6878      	ldr	r0, [r7, #4]
 80055d0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80055d2:	2300      	movs	r3, #0
}
 80055d4:	4618      	mov	r0, r3
 80055d6:	3708      	adds	r7, #8
 80055d8:	46bd      	mov	sp, r7
 80055da:	bd80      	pop	{r7, pc}

080055dc <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b082      	sub	sp, #8
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
 80055e4:	460b      	mov	r3, r1
 80055e6:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d101      	bne.n	80055f6 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 80055f2:	2303      	movs	r3, #3
 80055f4:	e014      	b.n	8005620 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80055fc:	b2db      	uxtb	r3, r3
 80055fe:	2b03      	cmp	r3, #3
 8005600:	d10d      	bne.n	800561e <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005608:	6a1b      	ldr	r3, [r3, #32]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d007      	beq.n	800561e <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005614:	6a1b      	ldr	r3, [r3, #32]
 8005616:	78fa      	ldrb	r2, [r7, #3]
 8005618:	4611      	mov	r1, r2
 800561a:	6878      	ldr	r0, [r7, #4]
 800561c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800561e:	2300      	movs	r3, #0
}
 8005620:	4618      	mov	r0, r3
 8005622:	3708      	adds	r7, #8
 8005624:	46bd      	mov	sp, r7
 8005626:	bd80      	pop	{r7, pc}

08005628 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b082      	sub	sp, #8
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
 8005630:	460b      	mov	r3, r1
 8005632:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800563a:	2b00      	cmp	r3, #0
 800563c:	d101      	bne.n	8005642 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800563e:	2303      	movs	r3, #3
 8005640:	e014      	b.n	800566c <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005648:	b2db      	uxtb	r3, r3
 800564a:	2b03      	cmp	r3, #3
 800564c:	d10d      	bne.n	800566a <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005656:	2b00      	cmp	r3, #0
 8005658:	d007      	beq.n	800566a <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005662:	78fa      	ldrb	r2, [r7, #3]
 8005664:	4611      	mov	r1, r2
 8005666:	6878      	ldr	r0, [r7, #4]
 8005668:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800566a:	2300      	movs	r3, #0
}
 800566c:	4618      	mov	r0, r3
 800566e:	3708      	adds	r7, #8
 8005670:	46bd      	mov	sp, r7
 8005672:	bd80      	pop	{r7, pc}

08005674 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005674:	b480      	push	{r7}
 8005676:	b083      	sub	sp, #12
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800567c:	2300      	movs	r3, #0
}
 800567e:	4618      	mov	r0, r3
 8005680:	370c      	adds	r7, #12
 8005682:	46bd      	mov	sp, r7
 8005684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005688:	4770      	bx	lr

0800568a <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800568a:	b580      	push	{r7, lr}
 800568c:	b082      	sub	sp, #8
 800568e:	af00      	add	r7, sp, #0
 8005690:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2201      	movs	r2, #1
 8005696:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d009      	beq.n	80056b8 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80056aa:	685b      	ldr	r3, [r3, #4]
 80056ac:	687a      	ldr	r2, [r7, #4]
 80056ae:	6852      	ldr	r2, [r2, #4]
 80056b0:	b2d2      	uxtb	r2, r2
 80056b2:	4611      	mov	r1, r2
 80056b4:	6878      	ldr	r0, [r7, #4]
 80056b6:	4798      	blx	r3
  }

  return USBD_OK;
 80056b8:	2300      	movs	r3, #0
}
 80056ba:	4618      	mov	r0, r3
 80056bc:	3708      	adds	r7, #8
 80056be:	46bd      	mov	sp, r7
 80056c0:	bd80      	pop	{r7, pc}

080056c2 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80056c2:	b480      	push	{r7}
 80056c4:	b087      	sub	sp, #28
 80056c6:	af00      	add	r7, sp, #0
 80056c8:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	781b      	ldrb	r3, [r3, #0]
 80056d2:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80056d4:	697b      	ldr	r3, [r7, #20]
 80056d6:	3301      	adds	r3, #1
 80056d8:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80056da:	697b      	ldr	r3, [r7, #20]
 80056dc:	781b      	ldrb	r3, [r3, #0]
 80056de:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80056e0:	8a3b      	ldrh	r3, [r7, #16]
 80056e2:	021b      	lsls	r3, r3, #8
 80056e4:	b21a      	sxth	r2, r3
 80056e6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80056ea:	4313      	orrs	r3, r2
 80056ec:	b21b      	sxth	r3, r3
 80056ee:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80056f0:	89fb      	ldrh	r3, [r7, #14]
}
 80056f2:	4618      	mov	r0, r3
 80056f4:	371c      	adds	r7, #28
 80056f6:	46bd      	mov	sp, r7
 80056f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fc:	4770      	bx	lr
	...

08005700 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b084      	sub	sp, #16
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
 8005708:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800570a:	2300      	movs	r3, #0
 800570c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	781b      	ldrb	r3, [r3, #0]
 8005712:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005716:	2b40      	cmp	r3, #64	; 0x40
 8005718:	d005      	beq.n	8005726 <USBD_StdDevReq+0x26>
 800571a:	2b40      	cmp	r3, #64	; 0x40
 800571c:	d853      	bhi.n	80057c6 <USBD_StdDevReq+0xc6>
 800571e:	2b00      	cmp	r3, #0
 8005720:	d00b      	beq.n	800573a <USBD_StdDevReq+0x3a>
 8005722:	2b20      	cmp	r3, #32
 8005724:	d14f      	bne.n	80057c6 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800572c:	689b      	ldr	r3, [r3, #8]
 800572e:	6839      	ldr	r1, [r7, #0]
 8005730:	6878      	ldr	r0, [r7, #4]
 8005732:	4798      	blx	r3
 8005734:	4603      	mov	r3, r0
 8005736:	73fb      	strb	r3, [r7, #15]
      break;
 8005738:	e04a      	b.n	80057d0 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	785b      	ldrb	r3, [r3, #1]
 800573e:	2b09      	cmp	r3, #9
 8005740:	d83b      	bhi.n	80057ba <USBD_StdDevReq+0xba>
 8005742:	a201      	add	r2, pc, #4	; (adr r2, 8005748 <USBD_StdDevReq+0x48>)
 8005744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005748:	0800579d 	.word	0x0800579d
 800574c:	080057b1 	.word	0x080057b1
 8005750:	080057bb 	.word	0x080057bb
 8005754:	080057a7 	.word	0x080057a7
 8005758:	080057bb 	.word	0x080057bb
 800575c:	0800577b 	.word	0x0800577b
 8005760:	08005771 	.word	0x08005771
 8005764:	080057bb 	.word	0x080057bb
 8005768:	08005793 	.word	0x08005793
 800576c:	08005785 	.word	0x08005785
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005770:	6839      	ldr	r1, [r7, #0]
 8005772:	6878      	ldr	r0, [r7, #4]
 8005774:	f000 f9de 	bl	8005b34 <USBD_GetDescriptor>
          break;
 8005778:	e024      	b.n	80057c4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800577a:	6839      	ldr	r1, [r7, #0]
 800577c:	6878      	ldr	r0, [r7, #4]
 800577e:	f000 fb43 	bl	8005e08 <USBD_SetAddress>
          break;
 8005782:	e01f      	b.n	80057c4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8005784:	6839      	ldr	r1, [r7, #0]
 8005786:	6878      	ldr	r0, [r7, #4]
 8005788:	f000 fb82 	bl	8005e90 <USBD_SetConfig>
 800578c:	4603      	mov	r3, r0
 800578e:	73fb      	strb	r3, [r7, #15]
          break;
 8005790:	e018      	b.n	80057c4 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005792:	6839      	ldr	r1, [r7, #0]
 8005794:	6878      	ldr	r0, [r7, #4]
 8005796:	f000 fc21 	bl	8005fdc <USBD_GetConfig>
          break;
 800579a:	e013      	b.n	80057c4 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800579c:	6839      	ldr	r1, [r7, #0]
 800579e:	6878      	ldr	r0, [r7, #4]
 80057a0:	f000 fc52 	bl	8006048 <USBD_GetStatus>
          break;
 80057a4:	e00e      	b.n	80057c4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80057a6:	6839      	ldr	r1, [r7, #0]
 80057a8:	6878      	ldr	r0, [r7, #4]
 80057aa:	f000 fc81 	bl	80060b0 <USBD_SetFeature>
          break;
 80057ae:	e009      	b.n	80057c4 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80057b0:	6839      	ldr	r1, [r7, #0]
 80057b2:	6878      	ldr	r0, [r7, #4]
 80057b4:	f000 fc90 	bl	80060d8 <USBD_ClrFeature>
          break;
 80057b8:	e004      	b.n	80057c4 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80057ba:	6839      	ldr	r1, [r7, #0]
 80057bc:	6878      	ldr	r0, [r7, #4]
 80057be:	f000 fce7 	bl	8006190 <USBD_CtlError>
          break;
 80057c2:	bf00      	nop
      }
      break;
 80057c4:	e004      	b.n	80057d0 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80057c6:	6839      	ldr	r1, [r7, #0]
 80057c8:	6878      	ldr	r0, [r7, #4]
 80057ca:	f000 fce1 	bl	8006190 <USBD_CtlError>
      break;
 80057ce:	bf00      	nop
  }

  return ret;
 80057d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80057d2:	4618      	mov	r0, r3
 80057d4:	3710      	adds	r7, #16
 80057d6:	46bd      	mov	sp, r7
 80057d8:	bd80      	pop	{r7, pc}
 80057da:	bf00      	nop

080057dc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b084      	sub	sp, #16
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
 80057e4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80057e6:	2300      	movs	r3, #0
 80057e8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	781b      	ldrb	r3, [r3, #0]
 80057ee:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80057f2:	2b40      	cmp	r3, #64	; 0x40
 80057f4:	d005      	beq.n	8005802 <USBD_StdItfReq+0x26>
 80057f6:	2b40      	cmp	r3, #64	; 0x40
 80057f8:	d82f      	bhi.n	800585a <USBD_StdItfReq+0x7e>
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d001      	beq.n	8005802 <USBD_StdItfReq+0x26>
 80057fe:	2b20      	cmp	r3, #32
 8005800:	d12b      	bne.n	800585a <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005808:	b2db      	uxtb	r3, r3
 800580a:	3b01      	subs	r3, #1
 800580c:	2b02      	cmp	r3, #2
 800580e:	d81d      	bhi.n	800584c <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	889b      	ldrh	r3, [r3, #4]
 8005814:	b2db      	uxtb	r3, r3
 8005816:	2b01      	cmp	r3, #1
 8005818:	d813      	bhi.n	8005842 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005820:	689b      	ldr	r3, [r3, #8]
 8005822:	6839      	ldr	r1, [r7, #0]
 8005824:	6878      	ldr	r0, [r7, #4]
 8005826:	4798      	blx	r3
 8005828:	4603      	mov	r3, r0
 800582a:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	88db      	ldrh	r3, [r3, #6]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d110      	bne.n	8005856 <USBD_StdItfReq+0x7a>
 8005834:	7bfb      	ldrb	r3, [r7, #15]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d10d      	bne.n	8005856 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800583a:	6878      	ldr	r0, [r7, #4]
 800583c:	f000 fd73 	bl	8006326 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005840:	e009      	b.n	8005856 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8005842:	6839      	ldr	r1, [r7, #0]
 8005844:	6878      	ldr	r0, [r7, #4]
 8005846:	f000 fca3 	bl	8006190 <USBD_CtlError>
          break;
 800584a:	e004      	b.n	8005856 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800584c:	6839      	ldr	r1, [r7, #0]
 800584e:	6878      	ldr	r0, [r7, #4]
 8005850:	f000 fc9e 	bl	8006190 <USBD_CtlError>
          break;
 8005854:	e000      	b.n	8005858 <USBD_StdItfReq+0x7c>
          break;
 8005856:	bf00      	nop
      }
      break;
 8005858:	e004      	b.n	8005864 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800585a:	6839      	ldr	r1, [r7, #0]
 800585c:	6878      	ldr	r0, [r7, #4]
 800585e:	f000 fc97 	bl	8006190 <USBD_CtlError>
      break;
 8005862:	bf00      	nop
  }

  return ret;
 8005864:	7bfb      	ldrb	r3, [r7, #15]
}
 8005866:	4618      	mov	r0, r3
 8005868:	3710      	adds	r7, #16
 800586a:	46bd      	mov	sp, r7
 800586c:	bd80      	pop	{r7, pc}

0800586e <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800586e:	b580      	push	{r7, lr}
 8005870:	b084      	sub	sp, #16
 8005872:	af00      	add	r7, sp, #0
 8005874:	6078      	str	r0, [r7, #4]
 8005876:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8005878:	2300      	movs	r3, #0
 800587a:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	889b      	ldrh	r3, [r3, #4]
 8005880:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	781b      	ldrb	r3, [r3, #0]
 8005886:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800588a:	2b40      	cmp	r3, #64	; 0x40
 800588c:	d007      	beq.n	800589e <USBD_StdEPReq+0x30>
 800588e:	2b40      	cmp	r3, #64	; 0x40
 8005890:	f200 8145 	bhi.w	8005b1e <USBD_StdEPReq+0x2b0>
 8005894:	2b00      	cmp	r3, #0
 8005896:	d00c      	beq.n	80058b2 <USBD_StdEPReq+0x44>
 8005898:	2b20      	cmp	r3, #32
 800589a:	f040 8140 	bne.w	8005b1e <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80058a4:	689b      	ldr	r3, [r3, #8]
 80058a6:	6839      	ldr	r1, [r7, #0]
 80058a8:	6878      	ldr	r0, [r7, #4]
 80058aa:	4798      	blx	r3
 80058ac:	4603      	mov	r3, r0
 80058ae:	73fb      	strb	r3, [r7, #15]
      break;
 80058b0:	e13a      	b.n	8005b28 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	785b      	ldrb	r3, [r3, #1]
 80058b6:	2b03      	cmp	r3, #3
 80058b8:	d007      	beq.n	80058ca <USBD_StdEPReq+0x5c>
 80058ba:	2b03      	cmp	r3, #3
 80058bc:	f300 8129 	bgt.w	8005b12 <USBD_StdEPReq+0x2a4>
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d07f      	beq.n	80059c4 <USBD_StdEPReq+0x156>
 80058c4:	2b01      	cmp	r3, #1
 80058c6:	d03c      	beq.n	8005942 <USBD_StdEPReq+0xd4>
 80058c8:	e123      	b.n	8005b12 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80058d0:	b2db      	uxtb	r3, r3
 80058d2:	2b02      	cmp	r3, #2
 80058d4:	d002      	beq.n	80058dc <USBD_StdEPReq+0x6e>
 80058d6:	2b03      	cmp	r3, #3
 80058d8:	d016      	beq.n	8005908 <USBD_StdEPReq+0x9a>
 80058da:	e02c      	b.n	8005936 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80058dc:	7bbb      	ldrb	r3, [r7, #14]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d00d      	beq.n	80058fe <USBD_StdEPReq+0x90>
 80058e2:	7bbb      	ldrb	r3, [r7, #14]
 80058e4:	2b80      	cmp	r3, #128	; 0x80
 80058e6:	d00a      	beq.n	80058fe <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80058e8:	7bbb      	ldrb	r3, [r7, #14]
 80058ea:	4619      	mov	r1, r3
 80058ec:	6878      	ldr	r0, [r7, #4]
 80058ee:	f001 f909 	bl	8006b04 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80058f2:	2180      	movs	r1, #128	; 0x80
 80058f4:	6878      	ldr	r0, [r7, #4]
 80058f6:	f001 f905 	bl	8006b04 <USBD_LL_StallEP>
 80058fa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80058fc:	e020      	b.n	8005940 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 80058fe:	6839      	ldr	r1, [r7, #0]
 8005900:	6878      	ldr	r0, [r7, #4]
 8005902:	f000 fc45 	bl	8006190 <USBD_CtlError>
              break;
 8005906:	e01b      	b.n	8005940 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	885b      	ldrh	r3, [r3, #2]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d10e      	bne.n	800592e <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005910:	7bbb      	ldrb	r3, [r7, #14]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d00b      	beq.n	800592e <USBD_StdEPReq+0xc0>
 8005916:	7bbb      	ldrb	r3, [r7, #14]
 8005918:	2b80      	cmp	r3, #128	; 0x80
 800591a:	d008      	beq.n	800592e <USBD_StdEPReq+0xc0>
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	88db      	ldrh	r3, [r3, #6]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d104      	bne.n	800592e <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8005924:	7bbb      	ldrb	r3, [r7, #14]
 8005926:	4619      	mov	r1, r3
 8005928:	6878      	ldr	r0, [r7, #4]
 800592a:	f001 f8eb 	bl	8006b04 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800592e:	6878      	ldr	r0, [r7, #4]
 8005930:	f000 fcf9 	bl	8006326 <USBD_CtlSendStatus>

              break;
 8005934:	e004      	b.n	8005940 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8005936:	6839      	ldr	r1, [r7, #0]
 8005938:	6878      	ldr	r0, [r7, #4]
 800593a:	f000 fc29 	bl	8006190 <USBD_CtlError>
              break;
 800593e:	bf00      	nop
          }
          break;
 8005940:	e0ec      	b.n	8005b1c <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005948:	b2db      	uxtb	r3, r3
 800594a:	2b02      	cmp	r3, #2
 800594c:	d002      	beq.n	8005954 <USBD_StdEPReq+0xe6>
 800594e:	2b03      	cmp	r3, #3
 8005950:	d016      	beq.n	8005980 <USBD_StdEPReq+0x112>
 8005952:	e030      	b.n	80059b6 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005954:	7bbb      	ldrb	r3, [r7, #14]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d00d      	beq.n	8005976 <USBD_StdEPReq+0x108>
 800595a:	7bbb      	ldrb	r3, [r7, #14]
 800595c:	2b80      	cmp	r3, #128	; 0x80
 800595e:	d00a      	beq.n	8005976 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005960:	7bbb      	ldrb	r3, [r7, #14]
 8005962:	4619      	mov	r1, r3
 8005964:	6878      	ldr	r0, [r7, #4]
 8005966:	f001 f8cd 	bl	8006b04 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800596a:	2180      	movs	r1, #128	; 0x80
 800596c:	6878      	ldr	r0, [r7, #4]
 800596e:	f001 f8c9 	bl	8006b04 <USBD_LL_StallEP>
 8005972:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005974:	e025      	b.n	80059c2 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8005976:	6839      	ldr	r1, [r7, #0]
 8005978:	6878      	ldr	r0, [r7, #4]
 800597a:	f000 fc09 	bl	8006190 <USBD_CtlError>
              break;
 800597e:	e020      	b.n	80059c2 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	885b      	ldrh	r3, [r3, #2]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d11b      	bne.n	80059c0 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005988:	7bbb      	ldrb	r3, [r7, #14]
 800598a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800598e:	2b00      	cmp	r3, #0
 8005990:	d004      	beq.n	800599c <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8005992:	7bbb      	ldrb	r3, [r7, #14]
 8005994:	4619      	mov	r1, r3
 8005996:	6878      	ldr	r0, [r7, #4]
 8005998:	f001 f8d3 	bl	8006b42 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800599c:	6878      	ldr	r0, [r7, #4]
 800599e:	f000 fcc2 	bl	8006326 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80059a8:	689b      	ldr	r3, [r3, #8]
 80059aa:	6839      	ldr	r1, [r7, #0]
 80059ac:	6878      	ldr	r0, [r7, #4]
 80059ae:	4798      	blx	r3
 80059b0:	4603      	mov	r3, r0
 80059b2:	73fb      	strb	r3, [r7, #15]
              }
              break;
 80059b4:	e004      	b.n	80059c0 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 80059b6:	6839      	ldr	r1, [r7, #0]
 80059b8:	6878      	ldr	r0, [r7, #4]
 80059ba:	f000 fbe9 	bl	8006190 <USBD_CtlError>
              break;
 80059be:	e000      	b.n	80059c2 <USBD_StdEPReq+0x154>
              break;
 80059c0:	bf00      	nop
          }
          break;
 80059c2:	e0ab      	b.n	8005b1c <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80059ca:	b2db      	uxtb	r3, r3
 80059cc:	2b02      	cmp	r3, #2
 80059ce:	d002      	beq.n	80059d6 <USBD_StdEPReq+0x168>
 80059d0:	2b03      	cmp	r3, #3
 80059d2:	d032      	beq.n	8005a3a <USBD_StdEPReq+0x1cc>
 80059d4:	e097      	b.n	8005b06 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80059d6:	7bbb      	ldrb	r3, [r7, #14]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d007      	beq.n	80059ec <USBD_StdEPReq+0x17e>
 80059dc:	7bbb      	ldrb	r3, [r7, #14]
 80059de:	2b80      	cmp	r3, #128	; 0x80
 80059e0:	d004      	beq.n	80059ec <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 80059e2:	6839      	ldr	r1, [r7, #0]
 80059e4:	6878      	ldr	r0, [r7, #4]
 80059e6:	f000 fbd3 	bl	8006190 <USBD_CtlError>
                break;
 80059ea:	e091      	b.n	8005b10 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80059ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	da0b      	bge.n	8005a0c <USBD_StdEPReq+0x19e>
 80059f4:	7bbb      	ldrb	r3, [r7, #14]
 80059f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80059fa:	4613      	mov	r3, r2
 80059fc:	009b      	lsls	r3, r3, #2
 80059fe:	4413      	add	r3, r2
 8005a00:	009b      	lsls	r3, r3, #2
 8005a02:	3310      	adds	r3, #16
 8005a04:	687a      	ldr	r2, [r7, #4]
 8005a06:	4413      	add	r3, r2
 8005a08:	3304      	adds	r3, #4
 8005a0a:	e00b      	b.n	8005a24 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005a0c:	7bbb      	ldrb	r3, [r7, #14]
 8005a0e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005a12:	4613      	mov	r3, r2
 8005a14:	009b      	lsls	r3, r3, #2
 8005a16:	4413      	add	r3, r2
 8005a18:	009b      	lsls	r3, r3, #2
 8005a1a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005a1e:	687a      	ldr	r2, [r7, #4]
 8005a20:	4413      	add	r3, r2
 8005a22:	3304      	adds	r3, #4
 8005a24:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8005a26:	68bb      	ldr	r3, [r7, #8]
 8005a28:	2200      	movs	r2, #0
 8005a2a:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005a2c:	68bb      	ldr	r3, [r7, #8]
 8005a2e:	2202      	movs	r2, #2
 8005a30:	4619      	mov	r1, r3
 8005a32:	6878      	ldr	r0, [r7, #4]
 8005a34:	f000 fc1d 	bl	8006272 <USBD_CtlSendData>
              break;
 8005a38:	e06a      	b.n	8005b10 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8005a3a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	da11      	bge.n	8005a66 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005a42:	7bbb      	ldrb	r3, [r7, #14]
 8005a44:	f003 020f 	and.w	r2, r3, #15
 8005a48:	6879      	ldr	r1, [r7, #4]
 8005a4a:	4613      	mov	r3, r2
 8005a4c:	009b      	lsls	r3, r3, #2
 8005a4e:	4413      	add	r3, r2
 8005a50:	009b      	lsls	r3, r3, #2
 8005a52:	440b      	add	r3, r1
 8005a54:	3324      	adds	r3, #36	; 0x24
 8005a56:	881b      	ldrh	r3, [r3, #0]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d117      	bne.n	8005a8c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8005a5c:	6839      	ldr	r1, [r7, #0]
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	f000 fb96 	bl	8006190 <USBD_CtlError>
                  break;
 8005a64:	e054      	b.n	8005b10 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005a66:	7bbb      	ldrb	r3, [r7, #14]
 8005a68:	f003 020f 	and.w	r2, r3, #15
 8005a6c:	6879      	ldr	r1, [r7, #4]
 8005a6e:	4613      	mov	r3, r2
 8005a70:	009b      	lsls	r3, r3, #2
 8005a72:	4413      	add	r3, r2
 8005a74:	009b      	lsls	r3, r3, #2
 8005a76:	440b      	add	r3, r1
 8005a78:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005a7c:	881b      	ldrh	r3, [r3, #0]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d104      	bne.n	8005a8c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8005a82:	6839      	ldr	r1, [r7, #0]
 8005a84:	6878      	ldr	r0, [r7, #4]
 8005a86:	f000 fb83 	bl	8006190 <USBD_CtlError>
                  break;
 8005a8a:	e041      	b.n	8005b10 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005a8c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	da0b      	bge.n	8005aac <USBD_StdEPReq+0x23e>
 8005a94:	7bbb      	ldrb	r3, [r7, #14]
 8005a96:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005a9a:	4613      	mov	r3, r2
 8005a9c:	009b      	lsls	r3, r3, #2
 8005a9e:	4413      	add	r3, r2
 8005aa0:	009b      	lsls	r3, r3, #2
 8005aa2:	3310      	adds	r3, #16
 8005aa4:	687a      	ldr	r2, [r7, #4]
 8005aa6:	4413      	add	r3, r2
 8005aa8:	3304      	adds	r3, #4
 8005aaa:	e00b      	b.n	8005ac4 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005aac:	7bbb      	ldrb	r3, [r7, #14]
 8005aae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005ab2:	4613      	mov	r3, r2
 8005ab4:	009b      	lsls	r3, r3, #2
 8005ab6:	4413      	add	r3, r2
 8005ab8:	009b      	lsls	r3, r3, #2
 8005aba:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005abe:	687a      	ldr	r2, [r7, #4]
 8005ac0:	4413      	add	r3, r2
 8005ac2:	3304      	adds	r3, #4
 8005ac4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005ac6:	7bbb      	ldrb	r3, [r7, #14]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d002      	beq.n	8005ad2 <USBD_StdEPReq+0x264>
 8005acc:	7bbb      	ldrb	r3, [r7, #14]
 8005ace:	2b80      	cmp	r3, #128	; 0x80
 8005ad0:	d103      	bne.n	8005ada <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8005ad2:	68bb      	ldr	r3, [r7, #8]
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	601a      	str	r2, [r3, #0]
 8005ad8:	e00e      	b.n	8005af8 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8005ada:	7bbb      	ldrb	r3, [r7, #14]
 8005adc:	4619      	mov	r1, r3
 8005ade:	6878      	ldr	r0, [r7, #4]
 8005ae0:	f001 f84e 	bl	8006b80 <USBD_LL_IsStallEP>
 8005ae4:	4603      	mov	r3, r0
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d003      	beq.n	8005af2 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8005aea:	68bb      	ldr	r3, [r7, #8]
 8005aec:	2201      	movs	r2, #1
 8005aee:	601a      	str	r2, [r3, #0]
 8005af0:	e002      	b.n	8005af8 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8005af2:	68bb      	ldr	r3, [r7, #8]
 8005af4:	2200      	movs	r2, #0
 8005af6:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	2202      	movs	r2, #2
 8005afc:	4619      	mov	r1, r3
 8005afe:	6878      	ldr	r0, [r7, #4]
 8005b00:	f000 fbb7 	bl	8006272 <USBD_CtlSendData>
              break;
 8005b04:	e004      	b.n	8005b10 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8005b06:	6839      	ldr	r1, [r7, #0]
 8005b08:	6878      	ldr	r0, [r7, #4]
 8005b0a:	f000 fb41 	bl	8006190 <USBD_CtlError>
              break;
 8005b0e:	bf00      	nop
          }
          break;
 8005b10:	e004      	b.n	8005b1c <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8005b12:	6839      	ldr	r1, [r7, #0]
 8005b14:	6878      	ldr	r0, [r7, #4]
 8005b16:	f000 fb3b 	bl	8006190 <USBD_CtlError>
          break;
 8005b1a:	bf00      	nop
      }
      break;
 8005b1c:	e004      	b.n	8005b28 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8005b1e:	6839      	ldr	r1, [r7, #0]
 8005b20:	6878      	ldr	r0, [r7, #4]
 8005b22:	f000 fb35 	bl	8006190 <USBD_CtlError>
      break;
 8005b26:	bf00      	nop
  }

  return ret;
 8005b28:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	3710      	adds	r7, #16
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	bd80      	pop	{r7, pc}
	...

08005b34 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b084      	sub	sp, #16
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
 8005b3c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005b3e:	2300      	movs	r3, #0
 8005b40:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8005b42:	2300      	movs	r3, #0
 8005b44:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8005b46:	2300      	movs	r3, #0
 8005b48:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	885b      	ldrh	r3, [r3, #2]
 8005b4e:	0a1b      	lsrs	r3, r3, #8
 8005b50:	b29b      	uxth	r3, r3
 8005b52:	3b01      	subs	r3, #1
 8005b54:	2b06      	cmp	r3, #6
 8005b56:	f200 8128 	bhi.w	8005daa <USBD_GetDescriptor+0x276>
 8005b5a:	a201      	add	r2, pc, #4	; (adr r2, 8005b60 <USBD_GetDescriptor+0x2c>)
 8005b5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b60:	08005b7d 	.word	0x08005b7d
 8005b64:	08005b95 	.word	0x08005b95
 8005b68:	08005bd5 	.word	0x08005bd5
 8005b6c:	08005dab 	.word	0x08005dab
 8005b70:	08005dab 	.word	0x08005dab
 8005b74:	08005d4b 	.word	0x08005d4b
 8005b78:	08005d77 	.word	0x08005d77
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	687a      	ldr	r2, [r7, #4]
 8005b86:	7c12      	ldrb	r2, [r2, #16]
 8005b88:	f107 0108 	add.w	r1, r7, #8
 8005b8c:	4610      	mov	r0, r2
 8005b8e:	4798      	blx	r3
 8005b90:	60f8      	str	r0, [r7, #12]
      break;
 8005b92:	e112      	b.n	8005dba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	7c1b      	ldrb	r3, [r3, #16]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d10d      	bne.n	8005bb8 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ba4:	f107 0208 	add.w	r2, r7, #8
 8005ba8:	4610      	mov	r0, r2
 8005baa:	4798      	blx	r3
 8005bac:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	3301      	adds	r3, #1
 8005bb2:	2202      	movs	r2, #2
 8005bb4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8005bb6:	e100      	b.n	8005dba <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bc0:	f107 0208 	add.w	r2, r7, #8
 8005bc4:	4610      	mov	r0, r2
 8005bc6:	4798      	blx	r3
 8005bc8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	3301      	adds	r3, #1
 8005bce:	2202      	movs	r2, #2
 8005bd0:	701a      	strb	r2, [r3, #0]
      break;
 8005bd2:	e0f2      	b.n	8005dba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	885b      	ldrh	r3, [r3, #2]
 8005bd8:	b2db      	uxtb	r3, r3
 8005bda:	2b05      	cmp	r3, #5
 8005bdc:	f200 80ac 	bhi.w	8005d38 <USBD_GetDescriptor+0x204>
 8005be0:	a201      	add	r2, pc, #4	; (adr r2, 8005be8 <USBD_GetDescriptor+0xb4>)
 8005be2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005be6:	bf00      	nop
 8005be8:	08005c01 	.word	0x08005c01
 8005bec:	08005c35 	.word	0x08005c35
 8005bf0:	08005c69 	.word	0x08005c69
 8005bf4:	08005c9d 	.word	0x08005c9d
 8005bf8:	08005cd1 	.word	0x08005cd1
 8005bfc:	08005d05 	.word	0x08005d05
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c06:	685b      	ldr	r3, [r3, #4]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d00b      	beq.n	8005c24 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c12:	685b      	ldr	r3, [r3, #4]
 8005c14:	687a      	ldr	r2, [r7, #4]
 8005c16:	7c12      	ldrb	r2, [r2, #16]
 8005c18:	f107 0108 	add.w	r1, r7, #8
 8005c1c:	4610      	mov	r0, r2
 8005c1e:	4798      	blx	r3
 8005c20:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005c22:	e091      	b.n	8005d48 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005c24:	6839      	ldr	r1, [r7, #0]
 8005c26:	6878      	ldr	r0, [r7, #4]
 8005c28:	f000 fab2 	bl	8006190 <USBD_CtlError>
            err++;
 8005c2c:	7afb      	ldrb	r3, [r7, #11]
 8005c2e:	3301      	adds	r3, #1
 8005c30:	72fb      	strb	r3, [r7, #11]
          break;
 8005c32:	e089      	b.n	8005d48 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c3a:	689b      	ldr	r3, [r3, #8]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d00b      	beq.n	8005c58 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c46:	689b      	ldr	r3, [r3, #8]
 8005c48:	687a      	ldr	r2, [r7, #4]
 8005c4a:	7c12      	ldrb	r2, [r2, #16]
 8005c4c:	f107 0108 	add.w	r1, r7, #8
 8005c50:	4610      	mov	r0, r2
 8005c52:	4798      	blx	r3
 8005c54:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005c56:	e077      	b.n	8005d48 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005c58:	6839      	ldr	r1, [r7, #0]
 8005c5a:	6878      	ldr	r0, [r7, #4]
 8005c5c:	f000 fa98 	bl	8006190 <USBD_CtlError>
            err++;
 8005c60:	7afb      	ldrb	r3, [r7, #11]
 8005c62:	3301      	adds	r3, #1
 8005c64:	72fb      	strb	r3, [r7, #11]
          break;
 8005c66:	e06f      	b.n	8005d48 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c6e:	68db      	ldr	r3, [r3, #12]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d00b      	beq.n	8005c8c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c7a:	68db      	ldr	r3, [r3, #12]
 8005c7c:	687a      	ldr	r2, [r7, #4]
 8005c7e:	7c12      	ldrb	r2, [r2, #16]
 8005c80:	f107 0108 	add.w	r1, r7, #8
 8005c84:	4610      	mov	r0, r2
 8005c86:	4798      	blx	r3
 8005c88:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005c8a:	e05d      	b.n	8005d48 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005c8c:	6839      	ldr	r1, [r7, #0]
 8005c8e:	6878      	ldr	r0, [r7, #4]
 8005c90:	f000 fa7e 	bl	8006190 <USBD_CtlError>
            err++;
 8005c94:	7afb      	ldrb	r3, [r7, #11]
 8005c96:	3301      	adds	r3, #1
 8005c98:	72fb      	strb	r3, [r7, #11]
          break;
 8005c9a:	e055      	b.n	8005d48 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005ca2:	691b      	ldr	r3, [r3, #16]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d00b      	beq.n	8005cc0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005cae:	691b      	ldr	r3, [r3, #16]
 8005cb0:	687a      	ldr	r2, [r7, #4]
 8005cb2:	7c12      	ldrb	r2, [r2, #16]
 8005cb4:	f107 0108 	add.w	r1, r7, #8
 8005cb8:	4610      	mov	r0, r2
 8005cba:	4798      	blx	r3
 8005cbc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005cbe:	e043      	b.n	8005d48 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005cc0:	6839      	ldr	r1, [r7, #0]
 8005cc2:	6878      	ldr	r0, [r7, #4]
 8005cc4:	f000 fa64 	bl	8006190 <USBD_CtlError>
            err++;
 8005cc8:	7afb      	ldrb	r3, [r7, #11]
 8005cca:	3301      	adds	r3, #1
 8005ccc:	72fb      	strb	r3, [r7, #11]
          break;
 8005cce:	e03b      	b.n	8005d48 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005cd6:	695b      	ldr	r3, [r3, #20]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d00b      	beq.n	8005cf4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005ce2:	695b      	ldr	r3, [r3, #20]
 8005ce4:	687a      	ldr	r2, [r7, #4]
 8005ce6:	7c12      	ldrb	r2, [r2, #16]
 8005ce8:	f107 0108 	add.w	r1, r7, #8
 8005cec:	4610      	mov	r0, r2
 8005cee:	4798      	blx	r3
 8005cf0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005cf2:	e029      	b.n	8005d48 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005cf4:	6839      	ldr	r1, [r7, #0]
 8005cf6:	6878      	ldr	r0, [r7, #4]
 8005cf8:	f000 fa4a 	bl	8006190 <USBD_CtlError>
            err++;
 8005cfc:	7afb      	ldrb	r3, [r7, #11]
 8005cfe:	3301      	adds	r3, #1
 8005d00:	72fb      	strb	r3, [r7, #11]
          break;
 8005d02:	e021      	b.n	8005d48 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d0a:	699b      	ldr	r3, [r3, #24]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d00b      	beq.n	8005d28 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d16:	699b      	ldr	r3, [r3, #24]
 8005d18:	687a      	ldr	r2, [r7, #4]
 8005d1a:	7c12      	ldrb	r2, [r2, #16]
 8005d1c:	f107 0108 	add.w	r1, r7, #8
 8005d20:	4610      	mov	r0, r2
 8005d22:	4798      	blx	r3
 8005d24:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005d26:	e00f      	b.n	8005d48 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005d28:	6839      	ldr	r1, [r7, #0]
 8005d2a:	6878      	ldr	r0, [r7, #4]
 8005d2c:	f000 fa30 	bl	8006190 <USBD_CtlError>
            err++;
 8005d30:	7afb      	ldrb	r3, [r7, #11]
 8005d32:	3301      	adds	r3, #1
 8005d34:	72fb      	strb	r3, [r7, #11]
          break;
 8005d36:	e007      	b.n	8005d48 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8005d38:	6839      	ldr	r1, [r7, #0]
 8005d3a:	6878      	ldr	r0, [r7, #4]
 8005d3c:	f000 fa28 	bl	8006190 <USBD_CtlError>
          err++;
 8005d40:	7afb      	ldrb	r3, [r7, #11]
 8005d42:	3301      	adds	r3, #1
 8005d44:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8005d46:	bf00      	nop
      }
      break;
 8005d48:	e037      	b.n	8005dba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	7c1b      	ldrb	r3, [r3, #16]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d109      	bne.n	8005d66 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d5a:	f107 0208 	add.w	r2, r7, #8
 8005d5e:	4610      	mov	r0, r2
 8005d60:	4798      	blx	r3
 8005d62:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005d64:	e029      	b.n	8005dba <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005d66:	6839      	ldr	r1, [r7, #0]
 8005d68:	6878      	ldr	r0, [r7, #4]
 8005d6a:	f000 fa11 	bl	8006190 <USBD_CtlError>
        err++;
 8005d6e:	7afb      	ldrb	r3, [r7, #11]
 8005d70:	3301      	adds	r3, #1
 8005d72:	72fb      	strb	r3, [r7, #11]
      break;
 8005d74:	e021      	b.n	8005dba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	7c1b      	ldrb	r3, [r3, #16]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d10d      	bne.n	8005d9a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d86:	f107 0208 	add.w	r2, r7, #8
 8005d8a:	4610      	mov	r0, r2
 8005d8c:	4798      	blx	r3
 8005d8e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	3301      	adds	r3, #1
 8005d94:	2207      	movs	r2, #7
 8005d96:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005d98:	e00f      	b.n	8005dba <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005d9a:	6839      	ldr	r1, [r7, #0]
 8005d9c:	6878      	ldr	r0, [r7, #4]
 8005d9e:	f000 f9f7 	bl	8006190 <USBD_CtlError>
        err++;
 8005da2:	7afb      	ldrb	r3, [r7, #11]
 8005da4:	3301      	adds	r3, #1
 8005da6:	72fb      	strb	r3, [r7, #11]
      break;
 8005da8:	e007      	b.n	8005dba <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8005daa:	6839      	ldr	r1, [r7, #0]
 8005dac:	6878      	ldr	r0, [r7, #4]
 8005dae:	f000 f9ef 	bl	8006190 <USBD_CtlError>
      err++;
 8005db2:	7afb      	ldrb	r3, [r7, #11]
 8005db4:	3301      	adds	r3, #1
 8005db6:	72fb      	strb	r3, [r7, #11]
      break;
 8005db8:	bf00      	nop
  }

  if (err != 0U)
 8005dba:	7afb      	ldrb	r3, [r7, #11]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d11e      	bne.n	8005dfe <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	88db      	ldrh	r3, [r3, #6]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d016      	beq.n	8005df6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8005dc8:	893b      	ldrh	r3, [r7, #8]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d00e      	beq.n	8005dec <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	88da      	ldrh	r2, [r3, #6]
 8005dd2:	893b      	ldrh	r3, [r7, #8]
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	bf28      	it	cs
 8005dd8:	4613      	movcs	r3, r2
 8005dda:	b29b      	uxth	r3, r3
 8005ddc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005dde:	893b      	ldrh	r3, [r7, #8]
 8005de0:	461a      	mov	r2, r3
 8005de2:	68f9      	ldr	r1, [r7, #12]
 8005de4:	6878      	ldr	r0, [r7, #4]
 8005de6:	f000 fa44 	bl	8006272 <USBD_CtlSendData>
 8005dea:	e009      	b.n	8005e00 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8005dec:	6839      	ldr	r1, [r7, #0]
 8005dee:	6878      	ldr	r0, [r7, #4]
 8005df0:	f000 f9ce 	bl	8006190 <USBD_CtlError>
 8005df4:	e004      	b.n	8005e00 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8005df6:	6878      	ldr	r0, [r7, #4]
 8005df8:	f000 fa95 	bl	8006326 <USBD_CtlSendStatus>
 8005dfc:	e000      	b.n	8005e00 <USBD_GetDescriptor+0x2cc>
    return;
 8005dfe:	bf00      	nop
  }
}
 8005e00:	3710      	adds	r7, #16
 8005e02:	46bd      	mov	sp, r7
 8005e04:	bd80      	pop	{r7, pc}
 8005e06:	bf00      	nop

08005e08 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b084      	sub	sp, #16
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
 8005e10:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	889b      	ldrh	r3, [r3, #4]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d131      	bne.n	8005e7e <USBD_SetAddress+0x76>
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	88db      	ldrh	r3, [r3, #6]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d12d      	bne.n	8005e7e <USBD_SetAddress+0x76>
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	885b      	ldrh	r3, [r3, #2]
 8005e26:	2b7f      	cmp	r3, #127	; 0x7f
 8005e28:	d829      	bhi.n	8005e7e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	885b      	ldrh	r3, [r3, #2]
 8005e2e:	b2db      	uxtb	r3, r3
 8005e30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e34:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e3c:	b2db      	uxtb	r3, r3
 8005e3e:	2b03      	cmp	r3, #3
 8005e40:	d104      	bne.n	8005e4c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8005e42:	6839      	ldr	r1, [r7, #0]
 8005e44:	6878      	ldr	r0, [r7, #4]
 8005e46:	f000 f9a3 	bl	8006190 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e4a:	e01d      	b.n	8005e88 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	7bfa      	ldrb	r2, [r7, #15]
 8005e50:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005e54:	7bfb      	ldrb	r3, [r7, #15]
 8005e56:	4619      	mov	r1, r3
 8005e58:	6878      	ldr	r0, [r7, #4]
 8005e5a:	f000 febd 	bl	8006bd8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8005e5e:	6878      	ldr	r0, [r7, #4]
 8005e60:	f000 fa61 	bl	8006326 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8005e64:	7bfb      	ldrb	r3, [r7, #15]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d004      	beq.n	8005e74 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2202      	movs	r2, #2
 8005e6e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e72:	e009      	b.n	8005e88 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2201      	movs	r2, #1
 8005e78:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e7c:	e004      	b.n	8005e88 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8005e7e:	6839      	ldr	r1, [r7, #0]
 8005e80:	6878      	ldr	r0, [r7, #4]
 8005e82:	f000 f985 	bl	8006190 <USBD_CtlError>
  }
}
 8005e86:	bf00      	nop
 8005e88:	bf00      	nop
 8005e8a:	3710      	adds	r7, #16
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	bd80      	pop	{r7, pc}

08005e90 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b084      	sub	sp, #16
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
 8005e98:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	885b      	ldrh	r3, [r3, #2]
 8005ea2:	b2da      	uxtb	r2, r3
 8005ea4:	4b4c      	ldr	r3, [pc, #304]	; (8005fd8 <USBD_SetConfig+0x148>)
 8005ea6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005ea8:	4b4b      	ldr	r3, [pc, #300]	; (8005fd8 <USBD_SetConfig+0x148>)
 8005eaa:	781b      	ldrb	r3, [r3, #0]
 8005eac:	2b01      	cmp	r3, #1
 8005eae:	d905      	bls.n	8005ebc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8005eb0:	6839      	ldr	r1, [r7, #0]
 8005eb2:	6878      	ldr	r0, [r7, #4]
 8005eb4:	f000 f96c 	bl	8006190 <USBD_CtlError>
    return USBD_FAIL;
 8005eb8:	2303      	movs	r3, #3
 8005eba:	e088      	b.n	8005fce <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ec2:	b2db      	uxtb	r3, r3
 8005ec4:	2b02      	cmp	r3, #2
 8005ec6:	d002      	beq.n	8005ece <USBD_SetConfig+0x3e>
 8005ec8:	2b03      	cmp	r3, #3
 8005eca:	d025      	beq.n	8005f18 <USBD_SetConfig+0x88>
 8005ecc:	e071      	b.n	8005fb2 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8005ece:	4b42      	ldr	r3, [pc, #264]	; (8005fd8 <USBD_SetConfig+0x148>)
 8005ed0:	781b      	ldrb	r3, [r3, #0]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d01c      	beq.n	8005f10 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8005ed6:	4b40      	ldr	r3, [pc, #256]	; (8005fd8 <USBD_SetConfig+0x148>)
 8005ed8:	781b      	ldrb	r3, [r3, #0]
 8005eda:	461a      	mov	r2, r3
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8005ee0:	4b3d      	ldr	r3, [pc, #244]	; (8005fd8 <USBD_SetConfig+0x148>)
 8005ee2:	781b      	ldrb	r3, [r3, #0]
 8005ee4:	4619      	mov	r1, r3
 8005ee6:	6878      	ldr	r0, [r7, #4]
 8005ee8:	f7ff f948 	bl	800517c <USBD_SetClassConfig>
 8005eec:	4603      	mov	r3, r0
 8005eee:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8005ef0:	7bfb      	ldrb	r3, [r7, #15]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d004      	beq.n	8005f00 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8005ef6:	6839      	ldr	r1, [r7, #0]
 8005ef8:	6878      	ldr	r0, [r7, #4]
 8005efa:	f000 f949 	bl	8006190 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8005efe:	e065      	b.n	8005fcc <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8005f00:	6878      	ldr	r0, [r7, #4]
 8005f02:	f000 fa10 	bl	8006326 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2203      	movs	r2, #3
 8005f0a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8005f0e:	e05d      	b.n	8005fcc <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8005f10:	6878      	ldr	r0, [r7, #4]
 8005f12:	f000 fa08 	bl	8006326 <USBD_CtlSendStatus>
      break;
 8005f16:	e059      	b.n	8005fcc <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8005f18:	4b2f      	ldr	r3, [pc, #188]	; (8005fd8 <USBD_SetConfig+0x148>)
 8005f1a:	781b      	ldrb	r3, [r3, #0]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d112      	bne.n	8005f46 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2202      	movs	r2, #2
 8005f24:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8005f28:	4b2b      	ldr	r3, [pc, #172]	; (8005fd8 <USBD_SetConfig+0x148>)
 8005f2a:	781b      	ldrb	r3, [r3, #0]
 8005f2c:	461a      	mov	r2, r3
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005f32:	4b29      	ldr	r3, [pc, #164]	; (8005fd8 <USBD_SetConfig+0x148>)
 8005f34:	781b      	ldrb	r3, [r3, #0]
 8005f36:	4619      	mov	r1, r3
 8005f38:	6878      	ldr	r0, [r7, #4]
 8005f3a:	f7ff f93b 	bl	80051b4 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8005f3e:	6878      	ldr	r0, [r7, #4]
 8005f40:	f000 f9f1 	bl	8006326 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8005f44:	e042      	b.n	8005fcc <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8005f46:	4b24      	ldr	r3, [pc, #144]	; (8005fd8 <USBD_SetConfig+0x148>)
 8005f48:	781b      	ldrb	r3, [r3, #0]
 8005f4a:	461a      	mov	r2, r3
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	685b      	ldr	r3, [r3, #4]
 8005f50:	429a      	cmp	r2, r3
 8005f52:	d02a      	beq.n	8005faa <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	685b      	ldr	r3, [r3, #4]
 8005f58:	b2db      	uxtb	r3, r3
 8005f5a:	4619      	mov	r1, r3
 8005f5c:	6878      	ldr	r0, [r7, #4]
 8005f5e:	f7ff f929 	bl	80051b4 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8005f62:	4b1d      	ldr	r3, [pc, #116]	; (8005fd8 <USBD_SetConfig+0x148>)
 8005f64:	781b      	ldrb	r3, [r3, #0]
 8005f66:	461a      	mov	r2, r3
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8005f6c:	4b1a      	ldr	r3, [pc, #104]	; (8005fd8 <USBD_SetConfig+0x148>)
 8005f6e:	781b      	ldrb	r3, [r3, #0]
 8005f70:	4619      	mov	r1, r3
 8005f72:	6878      	ldr	r0, [r7, #4]
 8005f74:	f7ff f902 	bl	800517c <USBD_SetClassConfig>
 8005f78:	4603      	mov	r3, r0
 8005f7a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8005f7c:	7bfb      	ldrb	r3, [r7, #15]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d00f      	beq.n	8005fa2 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8005f82:	6839      	ldr	r1, [r7, #0]
 8005f84:	6878      	ldr	r0, [r7, #4]
 8005f86:	f000 f903 	bl	8006190 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	685b      	ldr	r3, [r3, #4]
 8005f8e:	b2db      	uxtb	r3, r3
 8005f90:	4619      	mov	r1, r3
 8005f92:	6878      	ldr	r0, [r7, #4]
 8005f94:	f7ff f90e 	bl	80051b4 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2202      	movs	r2, #2
 8005f9c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8005fa0:	e014      	b.n	8005fcc <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8005fa2:	6878      	ldr	r0, [r7, #4]
 8005fa4:	f000 f9bf 	bl	8006326 <USBD_CtlSendStatus>
      break;
 8005fa8:	e010      	b.n	8005fcc <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8005faa:	6878      	ldr	r0, [r7, #4]
 8005fac:	f000 f9bb 	bl	8006326 <USBD_CtlSendStatus>
      break;
 8005fb0:	e00c      	b.n	8005fcc <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8005fb2:	6839      	ldr	r1, [r7, #0]
 8005fb4:	6878      	ldr	r0, [r7, #4]
 8005fb6:	f000 f8eb 	bl	8006190 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005fba:	4b07      	ldr	r3, [pc, #28]	; (8005fd8 <USBD_SetConfig+0x148>)
 8005fbc:	781b      	ldrb	r3, [r3, #0]
 8005fbe:	4619      	mov	r1, r3
 8005fc0:	6878      	ldr	r0, [r7, #4]
 8005fc2:	f7ff f8f7 	bl	80051b4 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8005fc6:	2303      	movs	r3, #3
 8005fc8:	73fb      	strb	r3, [r7, #15]
      break;
 8005fca:	bf00      	nop
  }

  return ret;
 8005fcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fce:	4618      	mov	r0, r3
 8005fd0:	3710      	adds	r7, #16
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	bd80      	pop	{r7, pc}
 8005fd6:	bf00      	nop
 8005fd8:	200001e8 	.word	0x200001e8

08005fdc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b082      	sub	sp, #8
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
 8005fe4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	88db      	ldrh	r3, [r3, #6]
 8005fea:	2b01      	cmp	r3, #1
 8005fec:	d004      	beq.n	8005ff8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8005fee:	6839      	ldr	r1, [r7, #0]
 8005ff0:	6878      	ldr	r0, [r7, #4]
 8005ff2:	f000 f8cd 	bl	8006190 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8005ff6:	e023      	b.n	8006040 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ffe:	b2db      	uxtb	r3, r3
 8006000:	2b02      	cmp	r3, #2
 8006002:	dc02      	bgt.n	800600a <USBD_GetConfig+0x2e>
 8006004:	2b00      	cmp	r3, #0
 8006006:	dc03      	bgt.n	8006010 <USBD_GetConfig+0x34>
 8006008:	e015      	b.n	8006036 <USBD_GetConfig+0x5a>
 800600a:	2b03      	cmp	r3, #3
 800600c:	d00b      	beq.n	8006026 <USBD_GetConfig+0x4a>
 800600e:	e012      	b.n	8006036 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2200      	movs	r2, #0
 8006014:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	3308      	adds	r3, #8
 800601a:	2201      	movs	r2, #1
 800601c:	4619      	mov	r1, r3
 800601e:	6878      	ldr	r0, [r7, #4]
 8006020:	f000 f927 	bl	8006272 <USBD_CtlSendData>
        break;
 8006024:	e00c      	b.n	8006040 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	3304      	adds	r3, #4
 800602a:	2201      	movs	r2, #1
 800602c:	4619      	mov	r1, r3
 800602e:	6878      	ldr	r0, [r7, #4]
 8006030:	f000 f91f 	bl	8006272 <USBD_CtlSendData>
        break;
 8006034:	e004      	b.n	8006040 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006036:	6839      	ldr	r1, [r7, #0]
 8006038:	6878      	ldr	r0, [r7, #4]
 800603a:	f000 f8a9 	bl	8006190 <USBD_CtlError>
        break;
 800603e:	bf00      	nop
}
 8006040:	bf00      	nop
 8006042:	3708      	adds	r7, #8
 8006044:	46bd      	mov	sp, r7
 8006046:	bd80      	pop	{r7, pc}

08006048 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b082      	sub	sp, #8
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
 8006050:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006058:	b2db      	uxtb	r3, r3
 800605a:	3b01      	subs	r3, #1
 800605c:	2b02      	cmp	r3, #2
 800605e:	d81e      	bhi.n	800609e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	88db      	ldrh	r3, [r3, #6]
 8006064:	2b02      	cmp	r3, #2
 8006066:	d004      	beq.n	8006072 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006068:	6839      	ldr	r1, [r7, #0]
 800606a:	6878      	ldr	r0, [r7, #4]
 800606c:	f000 f890 	bl	8006190 <USBD_CtlError>
        break;
 8006070:	e01a      	b.n	80060a8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2201      	movs	r2, #1
 8006076:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800607e:	2b00      	cmp	r3, #0
 8006080:	d005      	beq.n	800608e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	68db      	ldr	r3, [r3, #12]
 8006086:	f043 0202 	orr.w	r2, r3, #2
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	330c      	adds	r3, #12
 8006092:	2202      	movs	r2, #2
 8006094:	4619      	mov	r1, r3
 8006096:	6878      	ldr	r0, [r7, #4]
 8006098:	f000 f8eb 	bl	8006272 <USBD_CtlSendData>
      break;
 800609c:	e004      	b.n	80060a8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800609e:	6839      	ldr	r1, [r7, #0]
 80060a0:	6878      	ldr	r0, [r7, #4]
 80060a2:	f000 f875 	bl	8006190 <USBD_CtlError>
      break;
 80060a6:	bf00      	nop
  }
}
 80060a8:	bf00      	nop
 80060aa:	3708      	adds	r7, #8
 80060ac:	46bd      	mov	sp, r7
 80060ae:	bd80      	pop	{r7, pc}

080060b0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b082      	sub	sp, #8
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
 80060b8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	885b      	ldrh	r3, [r3, #2]
 80060be:	2b01      	cmp	r3, #1
 80060c0:	d106      	bne.n	80060d0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2201      	movs	r2, #1
 80060c6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80060ca:	6878      	ldr	r0, [r7, #4]
 80060cc:	f000 f92b 	bl	8006326 <USBD_CtlSendStatus>
  }
}
 80060d0:	bf00      	nop
 80060d2:	3708      	adds	r7, #8
 80060d4:	46bd      	mov	sp, r7
 80060d6:	bd80      	pop	{r7, pc}

080060d8 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b082      	sub	sp, #8
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
 80060e0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060e8:	b2db      	uxtb	r3, r3
 80060ea:	3b01      	subs	r3, #1
 80060ec:	2b02      	cmp	r3, #2
 80060ee:	d80b      	bhi.n	8006108 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	885b      	ldrh	r3, [r3, #2]
 80060f4:	2b01      	cmp	r3, #1
 80060f6:	d10c      	bne.n	8006112 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2200      	movs	r2, #0
 80060fc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006100:	6878      	ldr	r0, [r7, #4]
 8006102:	f000 f910 	bl	8006326 <USBD_CtlSendStatus>
      }
      break;
 8006106:	e004      	b.n	8006112 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006108:	6839      	ldr	r1, [r7, #0]
 800610a:	6878      	ldr	r0, [r7, #4]
 800610c:	f000 f840 	bl	8006190 <USBD_CtlError>
      break;
 8006110:	e000      	b.n	8006114 <USBD_ClrFeature+0x3c>
      break;
 8006112:	bf00      	nop
  }
}
 8006114:	bf00      	nop
 8006116:	3708      	adds	r7, #8
 8006118:	46bd      	mov	sp, r7
 800611a:	bd80      	pop	{r7, pc}

0800611c <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b084      	sub	sp, #16
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
 8006124:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	781a      	ldrb	r2, [r3, #0]
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	3301      	adds	r3, #1
 8006136:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	781a      	ldrb	r2, [r3, #0]
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	3301      	adds	r3, #1
 8006144:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006146:	68f8      	ldr	r0, [r7, #12]
 8006148:	f7ff fabb 	bl	80056c2 <SWAPBYTE>
 800614c:	4603      	mov	r3, r0
 800614e:	461a      	mov	r2, r3
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	3301      	adds	r3, #1
 8006158:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	3301      	adds	r3, #1
 800615e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006160:	68f8      	ldr	r0, [r7, #12]
 8006162:	f7ff faae 	bl	80056c2 <SWAPBYTE>
 8006166:	4603      	mov	r3, r0
 8006168:	461a      	mov	r2, r3
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	3301      	adds	r3, #1
 8006172:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	3301      	adds	r3, #1
 8006178:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800617a:	68f8      	ldr	r0, [r7, #12]
 800617c:	f7ff faa1 	bl	80056c2 <SWAPBYTE>
 8006180:	4603      	mov	r3, r0
 8006182:	461a      	mov	r2, r3
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	80da      	strh	r2, [r3, #6]
}
 8006188:	bf00      	nop
 800618a:	3710      	adds	r7, #16
 800618c:	46bd      	mov	sp, r7
 800618e:	bd80      	pop	{r7, pc}

08006190 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b082      	sub	sp, #8
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
 8006198:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800619a:	2180      	movs	r1, #128	; 0x80
 800619c:	6878      	ldr	r0, [r7, #4]
 800619e:	f000 fcb1 	bl	8006b04 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80061a2:	2100      	movs	r1, #0
 80061a4:	6878      	ldr	r0, [r7, #4]
 80061a6:	f000 fcad 	bl	8006b04 <USBD_LL_StallEP>
}
 80061aa:	bf00      	nop
 80061ac:	3708      	adds	r7, #8
 80061ae:	46bd      	mov	sp, r7
 80061b0:	bd80      	pop	{r7, pc}

080061b2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80061b2:	b580      	push	{r7, lr}
 80061b4:	b086      	sub	sp, #24
 80061b6:	af00      	add	r7, sp, #0
 80061b8:	60f8      	str	r0, [r7, #12]
 80061ba:	60b9      	str	r1, [r7, #8]
 80061bc:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80061be:	2300      	movs	r3, #0
 80061c0:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d036      	beq.n	8006236 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80061cc:	6938      	ldr	r0, [r7, #16]
 80061ce:	f000 f836 	bl	800623e <USBD_GetLen>
 80061d2:	4603      	mov	r3, r0
 80061d4:	3301      	adds	r3, #1
 80061d6:	b29b      	uxth	r3, r3
 80061d8:	005b      	lsls	r3, r3, #1
 80061da:	b29a      	uxth	r2, r3
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80061e0:	7dfb      	ldrb	r3, [r7, #23]
 80061e2:	68ba      	ldr	r2, [r7, #8]
 80061e4:	4413      	add	r3, r2
 80061e6:	687a      	ldr	r2, [r7, #4]
 80061e8:	7812      	ldrb	r2, [r2, #0]
 80061ea:	701a      	strb	r2, [r3, #0]
  idx++;
 80061ec:	7dfb      	ldrb	r3, [r7, #23]
 80061ee:	3301      	adds	r3, #1
 80061f0:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80061f2:	7dfb      	ldrb	r3, [r7, #23]
 80061f4:	68ba      	ldr	r2, [r7, #8]
 80061f6:	4413      	add	r3, r2
 80061f8:	2203      	movs	r2, #3
 80061fa:	701a      	strb	r2, [r3, #0]
  idx++;
 80061fc:	7dfb      	ldrb	r3, [r7, #23]
 80061fe:	3301      	adds	r3, #1
 8006200:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006202:	e013      	b.n	800622c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006204:	7dfb      	ldrb	r3, [r7, #23]
 8006206:	68ba      	ldr	r2, [r7, #8]
 8006208:	4413      	add	r3, r2
 800620a:	693a      	ldr	r2, [r7, #16]
 800620c:	7812      	ldrb	r2, [r2, #0]
 800620e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006210:	693b      	ldr	r3, [r7, #16]
 8006212:	3301      	adds	r3, #1
 8006214:	613b      	str	r3, [r7, #16]
    idx++;
 8006216:	7dfb      	ldrb	r3, [r7, #23]
 8006218:	3301      	adds	r3, #1
 800621a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800621c:	7dfb      	ldrb	r3, [r7, #23]
 800621e:	68ba      	ldr	r2, [r7, #8]
 8006220:	4413      	add	r3, r2
 8006222:	2200      	movs	r2, #0
 8006224:	701a      	strb	r2, [r3, #0]
    idx++;
 8006226:	7dfb      	ldrb	r3, [r7, #23]
 8006228:	3301      	adds	r3, #1
 800622a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800622c:	693b      	ldr	r3, [r7, #16]
 800622e:	781b      	ldrb	r3, [r3, #0]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d1e7      	bne.n	8006204 <USBD_GetString+0x52>
 8006234:	e000      	b.n	8006238 <USBD_GetString+0x86>
    return;
 8006236:	bf00      	nop
  }
}
 8006238:	3718      	adds	r7, #24
 800623a:	46bd      	mov	sp, r7
 800623c:	bd80      	pop	{r7, pc}

0800623e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800623e:	b480      	push	{r7}
 8006240:	b085      	sub	sp, #20
 8006242:	af00      	add	r7, sp, #0
 8006244:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006246:	2300      	movs	r3, #0
 8006248:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800624e:	e005      	b.n	800625c <USBD_GetLen+0x1e>
  {
    len++;
 8006250:	7bfb      	ldrb	r3, [r7, #15]
 8006252:	3301      	adds	r3, #1
 8006254:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006256:	68bb      	ldr	r3, [r7, #8]
 8006258:	3301      	adds	r3, #1
 800625a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800625c:	68bb      	ldr	r3, [r7, #8]
 800625e:	781b      	ldrb	r3, [r3, #0]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d1f5      	bne.n	8006250 <USBD_GetLen+0x12>
  }

  return len;
 8006264:	7bfb      	ldrb	r3, [r7, #15]
}
 8006266:	4618      	mov	r0, r3
 8006268:	3714      	adds	r7, #20
 800626a:	46bd      	mov	sp, r7
 800626c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006270:	4770      	bx	lr

08006272 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006272:	b580      	push	{r7, lr}
 8006274:	b084      	sub	sp, #16
 8006276:	af00      	add	r7, sp, #0
 8006278:	60f8      	str	r0, [r7, #12]
 800627a:	60b9      	str	r1, [r7, #8]
 800627c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	2202      	movs	r2, #2
 8006282:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	687a      	ldr	r2, [r7, #4]
 800628a:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	687a      	ldr	r2, [r7, #4]
 8006290:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	68ba      	ldr	r2, [r7, #8]
 8006296:	2100      	movs	r1, #0
 8006298:	68f8      	ldr	r0, [r7, #12]
 800629a:	f000 fcbc 	bl	8006c16 <USBD_LL_Transmit>

  return USBD_OK;
 800629e:	2300      	movs	r3, #0
}
 80062a0:	4618      	mov	r0, r3
 80062a2:	3710      	adds	r7, #16
 80062a4:	46bd      	mov	sp, r7
 80062a6:	bd80      	pop	{r7, pc}

080062a8 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b084      	sub	sp, #16
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	60f8      	str	r0, [r7, #12]
 80062b0:	60b9      	str	r1, [r7, #8]
 80062b2:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	68ba      	ldr	r2, [r7, #8]
 80062b8:	2100      	movs	r1, #0
 80062ba:	68f8      	ldr	r0, [r7, #12]
 80062bc:	f000 fcab 	bl	8006c16 <USBD_LL_Transmit>

  return USBD_OK;
 80062c0:	2300      	movs	r3, #0
}
 80062c2:	4618      	mov	r0, r3
 80062c4:	3710      	adds	r7, #16
 80062c6:	46bd      	mov	sp, r7
 80062c8:	bd80      	pop	{r7, pc}

080062ca <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80062ca:	b580      	push	{r7, lr}
 80062cc:	b084      	sub	sp, #16
 80062ce:	af00      	add	r7, sp, #0
 80062d0:	60f8      	str	r0, [r7, #12]
 80062d2:	60b9      	str	r1, [r7, #8]
 80062d4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	2203      	movs	r2, #3
 80062da:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	687a      	ldr	r2, [r7, #4]
 80062e2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	687a      	ldr	r2, [r7, #4]
 80062ea:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	68ba      	ldr	r2, [r7, #8]
 80062f2:	2100      	movs	r1, #0
 80062f4:	68f8      	ldr	r0, [r7, #12]
 80062f6:	f000 fcaf 	bl	8006c58 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80062fa:	2300      	movs	r3, #0
}
 80062fc:	4618      	mov	r0, r3
 80062fe:	3710      	adds	r7, #16
 8006300:	46bd      	mov	sp, r7
 8006302:	bd80      	pop	{r7, pc}

08006304 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b084      	sub	sp, #16
 8006308:	af00      	add	r7, sp, #0
 800630a:	60f8      	str	r0, [r7, #12]
 800630c:	60b9      	str	r1, [r7, #8]
 800630e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	68ba      	ldr	r2, [r7, #8]
 8006314:	2100      	movs	r1, #0
 8006316:	68f8      	ldr	r0, [r7, #12]
 8006318:	f000 fc9e 	bl	8006c58 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800631c:	2300      	movs	r3, #0
}
 800631e:	4618      	mov	r0, r3
 8006320:	3710      	adds	r7, #16
 8006322:	46bd      	mov	sp, r7
 8006324:	bd80      	pop	{r7, pc}

08006326 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006326:	b580      	push	{r7, lr}
 8006328:	b082      	sub	sp, #8
 800632a:	af00      	add	r7, sp, #0
 800632c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	2204      	movs	r2, #4
 8006332:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006336:	2300      	movs	r3, #0
 8006338:	2200      	movs	r2, #0
 800633a:	2100      	movs	r1, #0
 800633c:	6878      	ldr	r0, [r7, #4]
 800633e:	f000 fc6a 	bl	8006c16 <USBD_LL_Transmit>

  return USBD_OK;
 8006342:	2300      	movs	r3, #0
}
 8006344:	4618      	mov	r0, r3
 8006346:	3708      	adds	r7, #8
 8006348:	46bd      	mov	sp, r7
 800634a:	bd80      	pop	{r7, pc}

0800634c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800634c:	b580      	push	{r7, lr}
 800634e:	b082      	sub	sp, #8
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2205      	movs	r2, #5
 8006358:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800635c:	2300      	movs	r3, #0
 800635e:	2200      	movs	r2, #0
 8006360:	2100      	movs	r1, #0
 8006362:	6878      	ldr	r0, [r7, #4]
 8006364:	f000 fc78 	bl	8006c58 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006368:	2300      	movs	r3, #0
}
 800636a:	4618      	mov	r0, r3
 800636c:	3708      	adds	r7, #8
 800636e:	46bd      	mov	sp, r7
 8006370:	bd80      	pop	{r7, pc}
	...

08006374 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006374:	b580      	push	{r7, lr}
 8006376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006378:	2200      	movs	r2, #0
 800637a:	4912      	ldr	r1, [pc, #72]	; (80063c4 <MX_USB_DEVICE_Init+0x50>)
 800637c:	4812      	ldr	r0, [pc, #72]	; (80063c8 <MX_USB_DEVICE_Init+0x54>)
 800637e:	f7fe fe8f 	bl	80050a0 <USBD_Init>
 8006382:	4603      	mov	r3, r0
 8006384:	2b00      	cmp	r3, #0
 8006386:	d001      	beq.n	800638c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006388:	f7fa fa66 	bl	8000858 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800638c:	490f      	ldr	r1, [pc, #60]	; (80063cc <MX_USB_DEVICE_Init+0x58>)
 800638e:	480e      	ldr	r0, [pc, #56]	; (80063c8 <MX_USB_DEVICE_Init+0x54>)
 8006390:	f7fe feb6 	bl	8005100 <USBD_RegisterClass>
 8006394:	4603      	mov	r3, r0
 8006396:	2b00      	cmp	r3, #0
 8006398:	d001      	beq.n	800639e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800639a:	f7fa fa5d 	bl	8000858 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800639e:	490c      	ldr	r1, [pc, #48]	; (80063d0 <MX_USB_DEVICE_Init+0x5c>)
 80063a0:	4809      	ldr	r0, [pc, #36]	; (80063c8 <MX_USB_DEVICE_Init+0x54>)
 80063a2:	f7fe fe07 	bl	8004fb4 <USBD_CDC_RegisterInterface>
 80063a6:	4603      	mov	r3, r0
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d001      	beq.n	80063b0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80063ac:	f7fa fa54 	bl	8000858 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80063b0:	4805      	ldr	r0, [pc, #20]	; (80063c8 <MX_USB_DEVICE_Init+0x54>)
 80063b2:	f7fe fecc 	bl	800514e <USBD_Start>
 80063b6:	4603      	mov	r3, r0
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d001      	beq.n	80063c0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80063bc:	f7fa fa4c 	bl	8000858 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80063c0:	bf00      	nop
 80063c2:	bd80      	pop	{r7, pc}
 80063c4:	20000130 	.word	0x20000130
 80063c8:	200001ec 	.word	0x200001ec
 80063cc:	20000018 	.word	0x20000018
 80063d0:	2000011c 	.word	0x2000011c

080063d4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80063d8:	2200      	movs	r2, #0
 80063da:	4905      	ldr	r1, [pc, #20]	; (80063f0 <CDC_Init_FS+0x1c>)
 80063dc:	4805      	ldr	r0, [pc, #20]	; (80063f4 <CDC_Init_FS+0x20>)
 80063de:	f7fe fdfe 	bl	8004fde <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80063e2:	4905      	ldr	r1, [pc, #20]	; (80063f8 <CDC_Init_FS+0x24>)
 80063e4:	4803      	ldr	r0, [pc, #12]	; (80063f4 <CDC_Init_FS+0x20>)
 80063e6:	f7fe fe18 	bl	800501a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80063ea:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80063ec:	4618      	mov	r0, r3
 80063ee:	bd80      	pop	{r7, pc}
 80063f0:	200008a4 	.word	0x200008a4
 80063f4:	200001ec 	.word	0x200001ec
 80063f8:	200004bc 	.word	0x200004bc

080063fc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80063fc:	b480      	push	{r7}
 80063fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006400:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8006402:	4618      	mov	r0, r3
 8006404:	46bd      	mov	sp, r7
 8006406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640a:	4770      	bx	lr

0800640c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800640c:	b480      	push	{r7}
 800640e:	b083      	sub	sp, #12
 8006410:	af00      	add	r7, sp, #0
 8006412:	4603      	mov	r3, r0
 8006414:	6039      	str	r1, [r7, #0]
 8006416:	71fb      	strb	r3, [r7, #7]
 8006418:	4613      	mov	r3, r2
 800641a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800641c:	79fb      	ldrb	r3, [r7, #7]
 800641e:	2b23      	cmp	r3, #35	; 0x23
 8006420:	d84a      	bhi.n	80064b8 <CDC_Control_FS+0xac>
 8006422:	a201      	add	r2, pc, #4	; (adr r2, 8006428 <CDC_Control_FS+0x1c>)
 8006424:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006428:	080064b9 	.word	0x080064b9
 800642c:	080064b9 	.word	0x080064b9
 8006430:	080064b9 	.word	0x080064b9
 8006434:	080064b9 	.word	0x080064b9
 8006438:	080064b9 	.word	0x080064b9
 800643c:	080064b9 	.word	0x080064b9
 8006440:	080064b9 	.word	0x080064b9
 8006444:	080064b9 	.word	0x080064b9
 8006448:	080064b9 	.word	0x080064b9
 800644c:	080064b9 	.word	0x080064b9
 8006450:	080064b9 	.word	0x080064b9
 8006454:	080064b9 	.word	0x080064b9
 8006458:	080064b9 	.word	0x080064b9
 800645c:	080064b9 	.word	0x080064b9
 8006460:	080064b9 	.word	0x080064b9
 8006464:	080064b9 	.word	0x080064b9
 8006468:	080064b9 	.word	0x080064b9
 800646c:	080064b9 	.word	0x080064b9
 8006470:	080064b9 	.word	0x080064b9
 8006474:	080064b9 	.word	0x080064b9
 8006478:	080064b9 	.word	0x080064b9
 800647c:	080064b9 	.word	0x080064b9
 8006480:	080064b9 	.word	0x080064b9
 8006484:	080064b9 	.word	0x080064b9
 8006488:	080064b9 	.word	0x080064b9
 800648c:	080064b9 	.word	0x080064b9
 8006490:	080064b9 	.word	0x080064b9
 8006494:	080064b9 	.word	0x080064b9
 8006498:	080064b9 	.word	0x080064b9
 800649c:	080064b9 	.word	0x080064b9
 80064a0:	080064b9 	.word	0x080064b9
 80064a4:	080064b9 	.word	0x080064b9
 80064a8:	080064b9 	.word	0x080064b9
 80064ac:	080064b9 	.word	0x080064b9
 80064b0:	080064b9 	.word	0x080064b9
 80064b4:	080064b9 	.word	0x080064b9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80064b8:	bf00      	nop
  }

  return (USBD_OK);
 80064ba:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80064bc:	4618      	mov	r0, r3
 80064be:	370c      	adds	r7, #12
 80064c0:	46bd      	mov	sp, r7
 80064c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c6:	4770      	bx	lr

080064c8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b082      	sub	sp, #8
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
 80064d0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80064d2:	6879      	ldr	r1, [r7, #4]
 80064d4:	4805      	ldr	r0, [pc, #20]	; (80064ec <CDC_Receive_FS+0x24>)
 80064d6:	f7fe fda0 	bl	800501a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80064da:	4804      	ldr	r0, [pc, #16]	; (80064ec <CDC_Receive_FS+0x24>)
 80064dc:	f7fe fdb6 	bl	800504c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80064e0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80064e2:	4618      	mov	r0, r3
 80064e4:	3708      	adds	r7, #8
 80064e6:	46bd      	mov	sp, r7
 80064e8:	bd80      	pop	{r7, pc}
 80064ea:	bf00      	nop
 80064ec:	200001ec 	.word	0x200001ec

080064f0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80064f0:	b480      	push	{r7}
 80064f2:	b087      	sub	sp, #28
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	60f8      	str	r0, [r7, #12]
 80064f8:	60b9      	str	r1, [r7, #8]
 80064fa:	4613      	mov	r3, r2
 80064fc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80064fe:	2300      	movs	r3, #0
 8006500:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8006502:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006506:	4618      	mov	r0, r3
 8006508:	371c      	adds	r7, #28
 800650a:	46bd      	mov	sp, r7
 800650c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006510:	4770      	bx	lr
	...

08006514 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006514:	b480      	push	{r7}
 8006516:	b083      	sub	sp, #12
 8006518:	af00      	add	r7, sp, #0
 800651a:	4603      	mov	r3, r0
 800651c:	6039      	str	r1, [r7, #0]
 800651e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	2212      	movs	r2, #18
 8006524:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006526:	4b03      	ldr	r3, [pc, #12]	; (8006534 <USBD_FS_DeviceDescriptor+0x20>)
}
 8006528:	4618      	mov	r0, r3
 800652a:	370c      	adds	r7, #12
 800652c:	46bd      	mov	sp, r7
 800652e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006532:	4770      	bx	lr
 8006534:	2000014c 	.word	0x2000014c

08006538 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006538:	b480      	push	{r7}
 800653a:	b083      	sub	sp, #12
 800653c:	af00      	add	r7, sp, #0
 800653e:	4603      	mov	r3, r0
 8006540:	6039      	str	r1, [r7, #0]
 8006542:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	2204      	movs	r2, #4
 8006548:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800654a:	4b03      	ldr	r3, [pc, #12]	; (8006558 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800654c:	4618      	mov	r0, r3
 800654e:	370c      	adds	r7, #12
 8006550:	46bd      	mov	sp, r7
 8006552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006556:	4770      	bx	lr
 8006558:	20000160 	.word	0x20000160

0800655c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800655c:	b580      	push	{r7, lr}
 800655e:	b082      	sub	sp, #8
 8006560:	af00      	add	r7, sp, #0
 8006562:	4603      	mov	r3, r0
 8006564:	6039      	str	r1, [r7, #0]
 8006566:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006568:	79fb      	ldrb	r3, [r7, #7]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d105      	bne.n	800657a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800656e:	683a      	ldr	r2, [r7, #0]
 8006570:	4907      	ldr	r1, [pc, #28]	; (8006590 <USBD_FS_ProductStrDescriptor+0x34>)
 8006572:	4808      	ldr	r0, [pc, #32]	; (8006594 <USBD_FS_ProductStrDescriptor+0x38>)
 8006574:	f7ff fe1d 	bl	80061b2 <USBD_GetString>
 8006578:	e004      	b.n	8006584 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800657a:	683a      	ldr	r2, [r7, #0]
 800657c:	4904      	ldr	r1, [pc, #16]	; (8006590 <USBD_FS_ProductStrDescriptor+0x34>)
 800657e:	4805      	ldr	r0, [pc, #20]	; (8006594 <USBD_FS_ProductStrDescriptor+0x38>)
 8006580:	f7ff fe17 	bl	80061b2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006584:	4b02      	ldr	r3, [pc, #8]	; (8006590 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006586:	4618      	mov	r0, r3
 8006588:	3708      	adds	r7, #8
 800658a:	46bd      	mov	sp, r7
 800658c:	bd80      	pop	{r7, pc}
 800658e:	bf00      	nop
 8006590:	20000c8c 	.word	0x20000c8c
 8006594:	08006d60 	.word	0x08006d60

08006598 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b082      	sub	sp, #8
 800659c:	af00      	add	r7, sp, #0
 800659e:	4603      	mov	r3, r0
 80065a0:	6039      	str	r1, [r7, #0]
 80065a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80065a4:	683a      	ldr	r2, [r7, #0]
 80065a6:	4904      	ldr	r1, [pc, #16]	; (80065b8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80065a8:	4804      	ldr	r0, [pc, #16]	; (80065bc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80065aa:	f7ff fe02 	bl	80061b2 <USBD_GetString>
  return USBD_StrDesc;
 80065ae:	4b02      	ldr	r3, [pc, #8]	; (80065b8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80065b0:	4618      	mov	r0, r3
 80065b2:	3708      	adds	r7, #8
 80065b4:	46bd      	mov	sp, r7
 80065b6:	bd80      	pop	{r7, pc}
 80065b8:	20000c8c 	.word	0x20000c8c
 80065bc:	08006d78 	.word	0x08006d78

080065c0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b082      	sub	sp, #8
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	4603      	mov	r3, r0
 80065c8:	6039      	str	r1, [r7, #0]
 80065ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	221a      	movs	r2, #26
 80065d0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80065d2:	f000 f843 	bl	800665c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80065d6:	4b02      	ldr	r3, [pc, #8]	; (80065e0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80065d8:	4618      	mov	r0, r3
 80065da:	3708      	adds	r7, #8
 80065dc:	46bd      	mov	sp, r7
 80065de:	bd80      	pop	{r7, pc}
 80065e0:	20000164 	.word	0x20000164

080065e4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b082      	sub	sp, #8
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	4603      	mov	r3, r0
 80065ec:	6039      	str	r1, [r7, #0]
 80065ee:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80065f0:	79fb      	ldrb	r3, [r7, #7]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d105      	bne.n	8006602 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80065f6:	683a      	ldr	r2, [r7, #0]
 80065f8:	4907      	ldr	r1, [pc, #28]	; (8006618 <USBD_FS_ConfigStrDescriptor+0x34>)
 80065fa:	4808      	ldr	r0, [pc, #32]	; (800661c <USBD_FS_ConfigStrDescriptor+0x38>)
 80065fc:	f7ff fdd9 	bl	80061b2 <USBD_GetString>
 8006600:	e004      	b.n	800660c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006602:	683a      	ldr	r2, [r7, #0]
 8006604:	4904      	ldr	r1, [pc, #16]	; (8006618 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006606:	4805      	ldr	r0, [pc, #20]	; (800661c <USBD_FS_ConfigStrDescriptor+0x38>)
 8006608:	f7ff fdd3 	bl	80061b2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800660c:	4b02      	ldr	r3, [pc, #8]	; (8006618 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800660e:	4618      	mov	r0, r3
 8006610:	3708      	adds	r7, #8
 8006612:	46bd      	mov	sp, r7
 8006614:	bd80      	pop	{r7, pc}
 8006616:	bf00      	nop
 8006618:	20000c8c 	.word	0x20000c8c
 800661c:	08006d8c 	.word	0x08006d8c

08006620 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006620:	b580      	push	{r7, lr}
 8006622:	b082      	sub	sp, #8
 8006624:	af00      	add	r7, sp, #0
 8006626:	4603      	mov	r3, r0
 8006628:	6039      	str	r1, [r7, #0]
 800662a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800662c:	79fb      	ldrb	r3, [r7, #7]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d105      	bne.n	800663e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006632:	683a      	ldr	r2, [r7, #0]
 8006634:	4907      	ldr	r1, [pc, #28]	; (8006654 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006636:	4808      	ldr	r0, [pc, #32]	; (8006658 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006638:	f7ff fdbb 	bl	80061b2 <USBD_GetString>
 800663c:	e004      	b.n	8006648 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800663e:	683a      	ldr	r2, [r7, #0]
 8006640:	4904      	ldr	r1, [pc, #16]	; (8006654 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006642:	4805      	ldr	r0, [pc, #20]	; (8006658 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006644:	f7ff fdb5 	bl	80061b2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006648:	4b02      	ldr	r3, [pc, #8]	; (8006654 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800664a:	4618      	mov	r0, r3
 800664c:	3708      	adds	r7, #8
 800664e:	46bd      	mov	sp, r7
 8006650:	bd80      	pop	{r7, pc}
 8006652:	bf00      	nop
 8006654:	20000c8c 	.word	0x20000c8c
 8006658:	08006d98 	.word	0x08006d98

0800665c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800665c:	b580      	push	{r7, lr}
 800665e:	b084      	sub	sp, #16
 8006660:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006662:	4b0f      	ldr	r3, [pc, #60]	; (80066a0 <Get_SerialNum+0x44>)
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006668:	4b0e      	ldr	r3, [pc, #56]	; (80066a4 <Get_SerialNum+0x48>)
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800666e:	4b0e      	ldr	r3, [pc, #56]	; (80066a8 <Get_SerialNum+0x4c>)
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006674:	68fa      	ldr	r2, [r7, #12]
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	4413      	add	r3, r2
 800667a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d009      	beq.n	8006696 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006682:	2208      	movs	r2, #8
 8006684:	4909      	ldr	r1, [pc, #36]	; (80066ac <Get_SerialNum+0x50>)
 8006686:	68f8      	ldr	r0, [r7, #12]
 8006688:	f000 f814 	bl	80066b4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800668c:	2204      	movs	r2, #4
 800668e:	4908      	ldr	r1, [pc, #32]	; (80066b0 <Get_SerialNum+0x54>)
 8006690:	68b8      	ldr	r0, [r7, #8]
 8006692:	f000 f80f 	bl	80066b4 <IntToUnicode>
  }
}
 8006696:	bf00      	nop
 8006698:	3710      	adds	r7, #16
 800669a:	46bd      	mov	sp, r7
 800669c:	bd80      	pop	{r7, pc}
 800669e:	bf00      	nop
 80066a0:	1fff7a10 	.word	0x1fff7a10
 80066a4:	1fff7a14 	.word	0x1fff7a14
 80066a8:	1fff7a18 	.word	0x1fff7a18
 80066ac:	20000166 	.word	0x20000166
 80066b0:	20000176 	.word	0x20000176

080066b4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80066b4:	b480      	push	{r7}
 80066b6:	b087      	sub	sp, #28
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	60f8      	str	r0, [r7, #12]
 80066bc:	60b9      	str	r1, [r7, #8]
 80066be:	4613      	mov	r3, r2
 80066c0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80066c2:	2300      	movs	r3, #0
 80066c4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80066c6:	2300      	movs	r3, #0
 80066c8:	75fb      	strb	r3, [r7, #23]
 80066ca:	e027      	b.n	800671c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	0f1b      	lsrs	r3, r3, #28
 80066d0:	2b09      	cmp	r3, #9
 80066d2:	d80b      	bhi.n	80066ec <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	0f1b      	lsrs	r3, r3, #28
 80066d8:	b2da      	uxtb	r2, r3
 80066da:	7dfb      	ldrb	r3, [r7, #23]
 80066dc:	005b      	lsls	r3, r3, #1
 80066de:	4619      	mov	r1, r3
 80066e0:	68bb      	ldr	r3, [r7, #8]
 80066e2:	440b      	add	r3, r1
 80066e4:	3230      	adds	r2, #48	; 0x30
 80066e6:	b2d2      	uxtb	r2, r2
 80066e8:	701a      	strb	r2, [r3, #0]
 80066ea:	e00a      	b.n	8006702 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	0f1b      	lsrs	r3, r3, #28
 80066f0:	b2da      	uxtb	r2, r3
 80066f2:	7dfb      	ldrb	r3, [r7, #23]
 80066f4:	005b      	lsls	r3, r3, #1
 80066f6:	4619      	mov	r1, r3
 80066f8:	68bb      	ldr	r3, [r7, #8]
 80066fa:	440b      	add	r3, r1
 80066fc:	3237      	adds	r2, #55	; 0x37
 80066fe:	b2d2      	uxtb	r2, r2
 8006700:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	011b      	lsls	r3, r3, #4
 8006706:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006708:	7dfb      	ldrb	r3, [r7, #23]
 800670a:	005b      	lsls	r3, r3, #1
 800670c:	3301      	adds	r3, #1
 800670e:	68ba      	ldr	r2, [r7, #8]
 8006710:	4413      	add	r3, r2
 8006712:	2200      	movs	r2, #0
 8006714:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006716:	7dfb      	ldrb	r3, [r7, #23]
 8006718:	3301      	adds	r3, #1
 800671a:	75fb      	strb	r3, [r7, #23]
 800671c:	7dfa      	ldrb	r2, [r7, #23]
 800671e:	79fb      	ldrb	r3, [r7, #7]
 8006720:	429a      	cmp	r2, r3
 8006722:	d3d3      	bcc.n	80066cc <IntToUnicode+0x18>
  }
}
 8006724:	bf00      	nop
 8006726:	bf00      	nop
 8006728:	371c      	adds	r7, #28
 800672a:	46bd      	mov	sp, r7
 800672c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006730:	4770      	bx	lr
	...

08006734 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006734:	b580      	push	{r7, lr}
 8006736:	b08a      	sub	sp, #40	; 0x28
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800673c:	f107 0314 	add.w	r3, r7, #20
 8006740:	2200      	movs	r2, #0
 8006742:	601a      	str	r2, [r3, #0]
 8006744:	605a      	str	r2, [r3, #4]
 8006746:	609a      	str	r2, [r3, #8]
 8006748:	60da      	str	r2, [r3, #12]
 800674a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006754:	d13a      	bne.n	80067cc <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006756:	2300      	movs	r3, #0
 8006758:	613b      	str	r3, [r7, #16]
 800675a:	4b1e      	ldr	r3, [pc, #120]	; (80067d4 <HAL_PCD_MspInit+0xa0>)
 800675c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800675e:	4a1d      	ldr	r2, [pc, #116]	; (80067d4 <HAL_PCD_MspInit+0xa0>)
 8006760:	f043 0301 	orr.w	r3, r3, #1
 8006764:	6313      	str	r3, [r2, #48]	; 0x30
 8006766:	4b1b      	ldr	r3, [pc, #108]	; (80067d4 <HAL_PCD_MspInit+0xa0>)
 8006768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800676a:	f003 0301 	and.w	r3, r3, #1
 800676e:	613b      	str	r3, [r7, #16]
 8006770:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8006772:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8006776:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006778:	2302      	movs	r3, #2
 800677a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800677c:	2300      	movs	r3, #0
 800677e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006780:	2303      	movs	r3, #3
 8006782:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006784:	230a      	movs	r3, #10
 8006786:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006788:	f107 0314 	add.w	r3, r7, #20
 800678c:	4619      	mov	r1, r3
 800678e:	4812      	ldr	r0, [pc, #72]	; (80067d8 <HAL_PCD_MspInit+0xa4>)
 8006790:	f7fa fada 	bl	8000d48 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006794:	4b0f      	ldr	r3, [pc, #60]	; (80067d4 <HAL_PCD_MspInit+0xa0>)
 8006796:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006798:	4a0e      	ldr	r2, [pc, #56]	; (80067d4 <HAL_PCD_MspInit+0xa0>)
 800679a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800679e:	6353      	str	r3, [r2, #52]	; 0x34
 80067a0:	2300      	movs	r3, #0
 80067a2:	60fb      	str	r3, [r7, #12]
 80067a4:	4b0b      	ldr	r3, [pc, #44]	; (80067d4 <HAL_PCD_MspInit+0xa0>)
 80067a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067a8:	4a0a      	ldr	r2, [pc, #40]	; (80067d4 <HAL_PCD_MspInit+0xa0>)
 80067aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80067ae:	6453      	str	r3, [r2, #68]	; 0x44
 80067b0:	4b08      	ldr	r3, [pc, #32]	; (80067d4 <HAL_PCD_MspInit+0xa0>)
 80067b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80067b8:	60fb      	str	r3, [r7, #12]
 80067ba:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80067bc:	2200      	movs	r2, #0
 80067be:	2100      	movs	r1, #0
 80067c0:	2043      	movs	r0, #67	; 0x43
 80067c2:	f7fa fa8a 	bl	8000cda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80067c6:	2043      	movs	r0, #67	; 0x43
 80067c8:	f7fa faa3 	bl	8000d12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80067cc:	bf00      	nop
 80067ce:	3728      	adds	r7, #40	; 0x28
 80067d0:	46bd      	mov	sp, r7
 80067d2:	bd80      	pop	{r7, pc}
 80067d4:	40023800 	.word	0x40023800
 80067d8:	40020000 	.word	0x40020000

080067dc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b082      	sub	sp, #8
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80067f0:	4619      	mov	r1, r3
 80067f2:	4610      	mov	r0, r2
 80067f4:	f7fe fcf6 	bl	80051e4 <USBD_LL_SetupStage>
}
 80067f8:	bf00      	nop
 80067fa:	3708      	adds	r7, #8
 80067fc:	46bd      	mov	sp, r7
 80067fe:	bd80      	pop	{r7, pc}

08006800 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b082      	sub	sp, #8
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
 8006808:	460b      	mov	r3, r1
 800680a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8006812:	78fa      	ldrb	r2, [r7, #3]
 8006814:	6879      	ldr	r1, [r7, #4]
 8006816:	4613      	mov	r3, r2
 8006818:	00db      	lsls	r3, r3, #3
 800681a:	1a9b      	subs	r3, r3, r2
 800681c:	009b      	lsls	r3, r3, #2
 800681e:	440b      	add	r3, r1
 8006820:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006824:	681a      	ldr	r2, [r3, #0]
 8006826:	78fb      	ldrb	r3, [r7, #3]
 8006828:	4619      	mov	r1, r3
 800682a:	f7fe fd30 	bl	800528e <USBD_LL_DataOutStage>
}
 800682e:	bf00      	nop
 8006830:	3708      	adds	r7, #8
 8006832:	46bd      	mov	sp, r7
 8006834:	bd80      	pop	{r7, pc}

08006836 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006836:	b580      	push	{r7, lr}
 8006838:	b082      	sub	sp, #8
 800683a:	af00      	add	r7, sp, #0
 800683c:	6078      	str	r0, [r7, #4]
 800683e:	460b      	mov	r3, r1
 8006840:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8006848:	78fa      	ldrb	r2, [r7, #3]
 800684a:	6879      	ldr	r1, [r7, #4]
 800684c:	4613      	mov	r3, r2
 800684e:	00db      	lsls	r3, r3, #3
 8006850:	1a9b      	subs	r3, r3, r2
 8006852:	009b      	lsls	r3, r3, #2
 8006854:	440b      	add	r3, r1
 8006856:	3348      	adds	r3, #72	; 0x48
 8006858:	681a      	ldr	r2, [r3, #0]
 800685a:	78fb      	ldrb	r3, [r7, #3]
 800685c:	4619      	mov	r1, r3
 800685e:	f7fe fd79 	bl	8005354 <USBD_LL_DataInStage>
}
 8006862:	bf00      	nop
 8006864:	3708      	adds	r7, #8
 8006866:	46bd      	mov	sp, r7
 8006868:	bd80      	pop	{r7, pc}

0800686a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800686a:	b580      	push	{r7, lr}
 800686c:	b082      	sub	sp, #8
 800686e:	af00      	add	r7, sp, #0
 8006870:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006878:	4618      	mov	r0, r3
 800687a:	f7fe fe8d 	bl	8005598 <USBD_LL_SOF>
}
 800687e:	bf00      	nop
 8006880:	3708      	adds	r7, #8
 8006882:	46bd      	mov	sp, r7
 8006884:	bd80      	pop	{r7, pc}

08006886 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006886:	b580      	push	{r7, lr}
 8006888:	b084      	sub	sp, #16
 800688a:	af00      	add	r7, sp, #0
 800688c:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800688e:	2301      	movs	r3, #1
 8006890:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	68db      	ldr	r3, [r3, #12]
 8006896:	2b02      	cmp	r3, #2
 8006898:	d001      	beq.n	800689e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800689a:	f7f9 ffdd 	bl	8000858 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80068a4:	7bfa      	ldrb	r2, [r7, #15]
 80068a6:	4611      	mov	r1, r2
 80068a8:	4618      	mov	r0, r3
 80068aa:	f7fe fe37 	bl	800551c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80068b4:	4618      	mov	r0, r3
 80068b6:	f7fe fde3 	bl	8005480 <USBD_LL_Reset>
}
 80068ba:	bf00      	nop
 80068bc:	3710      	adds	r7, #16
 80068be:	46bd      	mov	sp, r7
 80068c0:	bd80      	pop	{r7, pc}
	...

080068c4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b082      	sub	sp, #8
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80068d2:	4618      	mov	r0, r3
 80068d4:	f7fe fe32 	bl	800553c <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	687a      	ldr	r2, [r7, #4]
 80068e4:	6812      	ldr	r2, [r2, #0]
 80068e6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80068ea:	f043 0301 	orr.w	r3, r3, #1
 80068ee:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	6a1b      	ldr	r3, [r3, #32]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d005      	beq.n	8006904 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80068f8:	4b04      	ldr	r3, [pc, #16]	; (800690c <HAL_PCD_SuspendCallback+0x48>)
 80068fa:	691b      	ldr	r3, [r3, #16]
 80068fc:	4a03      	ldr	r2, [pc, #12]	; (800690c <HAL_PCD_SuspendCallback+0x48>)
 80068fe:	f043 0306 	orr.w	r3, r3, #6
 8006902:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006904:	bf00      	nop
 8006906:	3708      	adds	r7, #8
 8006908:	46bd      	mov	sp, r7
 800690a:	bd80      	pop	{r7, pc}
 800690c:	e000ed00 	.word	0xe000ed00

08006910 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006910:	b580      	push	{r7, lr}
 8006912:	b082      	sub	sp, #8
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800691e:	4618      	mov	r0, r3
 8006920:	f7fe fe22 	bl	8005568 <USBD_LL_Resume>
}
 8006924:	bf00      	nop
 8006926:	3708      	adds	r7, #8
 8006928:	46bd      	mov	sp, r7
 800692a:	bd80      	pop	{r7, pc}

0800692c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800692c:	b580      	push	{r7, lr}
 800692e:	b082      	sub	sp, #8
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
 8006934:	460b      	mov	r3, r1
 8006936:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800693e:	78fa      	ldrb	r2, [r7, #3]
 8006940:	4611      	mov	r1, r2
 8006942:	4618      	mov	r0, r3
 8006944:	f7fe fe70 	bl	8005628 <USBD_LL_IsoOUTIncomplete>
}
 8006948:	bf00      	nop
 800694a:	3708      	adds	r7, #8
 800694c:	46bd      	mov	sp, r7
 800694e:	bd80      	pop	{r7, pc}

08006950 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b082      	sub	sp, #8
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
 8006958:	460b      	mov	r3, r1
 800695a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006962:	78fa      	ldrb	r2, [r7, #3]
 8006964:	4611      	mov	r1, r2
 8006966:	4618      	mov	r0, r3
 8006968:	f7fe fe38 	bl	80055dc <USBD_LL_IsoINIncomplete>
}
 800696c:	bf00      	nop
 800696e:	3708      	adds	r7, #8
 8006970:	46bd      	mov	sp, r7
 8006972:	bd80      	pop	{r7, pc}

08006974 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b082      	sub	sp, #8
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006982:	4618      	mov	r0, r3
 8006984:	f7fe fe76 	bl	8005674 <USBD_LL_DevConnected>
}
 8006988:	bf00      	nop
 800698a:	3708      	adds	r7, #8
 800698c:	46bd      	mov	sp, r7
 800698e:	bd80      	pop	{r7, pc}

08006990 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b082      	sub	sp, #8
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800699e:	4618      	mov	r0, r3
 80069a0:	f7fe fe73 	bl	800568a <USBD_LL_DevDisconnected>
}
 80069a4:	bf00      	nop
 80069a6:	3708      	adds	r7, #8
 80069a8:	46bd      	mov	sp, r7
 80069aa:	bd80      	pop	{r7, pc}

080069ac <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b082      	sub	sp, #8
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	781b      	ldrb	r3, [r3, #0]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d13c      	bne.n	8006a36 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80069bc:	4a20      	ldr	r2, [pc, #128]	; (8006a40 <USBD_LL_Init+0x94>)
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	4a1e      	ldr	r2, [pc, #120]	; (8006a40 <USBD_LL_Init+0x94>)
 80069c8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80069cc:	4b1c      	ldr	r3, [pc, #112]	; (8006a40 <USBD_LL_Init+0x94>)
 80069ce:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80069d2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80069d4:	4b1a      	ldr	r3, [pc, #104]	; (8006a40 <USBD_LL_Init+0x94>)
 80069d6:	2204      	movs	r2, #4
 80069d8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80069da:	4b19      	ldr	r3, [pc, #100]	; (8006a40 <USBD_LL_Init+0x94>)
 80069dc:	2202      	movs	r2, #2
 80069de:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80069e0:	4b17      	ldr	r3, [pc, #92]	; (8006a40 <USBD_LL_Init+0x94>)
 80069e2:	2200      	movs	r2, #0
 80069e4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80069e6:	4b16      	ldr	r3, [pc, #88]	; (8006a40 <USBD_LL_Init+0x94>)
 80069e8:	2202      	movs	r2, #2
 80069ea:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80069ec:	4b14      	ldr	r3, [pc, #80]	; (8006a40 <USBD_LL_Init+0x94>)
 80069ee:	2200      	movs	r2, #0
 80069f0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80069f2:	4b13      	ldr	r3, [pc, #76]	; (8006a40 <USBD_LL_Init+0x94>)
 80069f4:	2200      	movs	r2, #0
 80069f6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80069f8:	4b11      	ldr	r3, [pc, #68]	; (8006a40 <USBD_LL_Init+0x94>)
 80069fa:	2200      	movs	r2, #0
 80069fc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80069fe:	4b10      	ldr	r3, [pc, #64]	; (8006a40 <USBD_LL_Init+0x94>)
 8006a00:	2200      	movs	r2, #0
 8006a02:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8006a04:	4b0e      	ldr	r3, [pc, #56]	; (8006a40 <USBD_LL_Init+0x94>)
 8006a06:	2200      	movs	r2, #0
 8006a08:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8006a0a:	480d      	ldr	r0, [pc, #52]	; (8006a40 <USBD_LL_Init+0x94>)
 8006a0c:	f7fa fb39 	bl	8001082 <HAL_PCD_Init>
 8006a10:	4603      	mov	r3, r0
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d001      	beq.n	8006a1a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8006a16:	f7f9 ff1f 	bl	8000858 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8006a1a:	2180      	movs	r1, #128	; 0x80
 8006a1c:	4808      	ldr	r0, [pc, #32]	; (8006a40 <USBD_LL_Init+0x94>)
 8006a1e:	f7fb fc96 	bl	800234e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8006a22:	2240      	movs	r2, #64	; 0x40
 8006a24:	2100      	movs	r1, #0
 8006a26:	4806      	ldr	r0, [pc, #24]	; (8006a40 <USBD_LL_Init+0x94>)
 8006a28:	f7fb fc4a 	bl	80022c0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8006a2c:	2280      	movs	r2, #128	; 0x80
 8006a2e:	2101      	movs	r1, #1
 8006a30:	4803      	ldr	r0, [pc, #12]	; (8006a40 <USBD_LL_Init+0x94>)
 8006a32:	f7fb fc45 	bl	80022c0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8006a36:	2300      	movs	r3, #0
}
 8006a38:	4618      	mov	r0, r3
 8006a3a:	3708      	adds	r7, #8
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	bd80      	pop	{r7, pc}
 8006a40:	20000e8c 	.word	0x20000e8c

08006a44 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b084      	sub	sp, #16
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006a50:	2300      	movs	r3, #0
 8006a52:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	f7fa fc2e 	bl	80012bc <HAL_PCD_Start>
 8006a60:	4603      	mov	r3, r0
 8006a62:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006a64:	7bfb      	ldrb	r3, [r7, #15]
 8006a66:	4618      	mov	r0, r3
 8006a68:	f000 f942 	bl	8006cf0 <USBD_Get_USB_Status>
 8006a6c:	4603      	mov	r3, r0
 8006a6e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006a70:	7bbb      	ldrb	r3, [r7, #14]
}
 8006a72:	4618      	mov	r0, r3
 8006a74:	3710      	adds	r7, #16
 8006a76:	46bd      	mov	sp, r7
 8006a78:	bd80      	pop	{r7, pc}

08006a7a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8006a7a:	b580      	push	{r7, lr}
 8006a7c:	b084      	sub	sp, #16
 8006a7e:	af00      	add	r7, sp, #0
 8006a80:	6078      	str	r0, [r7, #4]
 8006a82:	4608      	mov	r0, r1
 8006a84:	4611      	mov	r1, r2
 8006a86:	461a      	mov	r2, r3
 8006a88:	4603      	mov	r3, r0
 8006a8a:	70fb      	strb	r3, [r7, #3]
 8006a8c:	460b      	mov	r3, r1
 8006a8e:	70bb      	strb	r3, [r7, #2]
 8006a90:	4613      	mov	r3, r2
 8006a92:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006a94:	2300      	movs	r3, #0
 8006a96:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006a98:	2300      	movs	r3, #0
 8006a9a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8006aa2:	78bb      	ldrb	r3, [r7, #2]
 8006aa4:	883a      	ldrh	r2, [r7, #0]
 8006aa6:	78f9      	ldrb	r1, [r7, #3]
 8006aa8:	f7fb f812 	bl	8001ad0 <HAL_PCD_EP_Open>
 8006aac:	4603      	mov	r3, r0
 8006aae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006ab0:	7bfb      	ldrb	r3, [r7, #15]
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	f000 f91c 	bl	8006cf0 <USBD_Get_USB_Status>
 8006ab8:	4603      	mov	r3, r0
 8006aba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006abc:	7bbb      	ldrb	r3, [r7, #14]
}
 8006abe:	4618      	mov	r0, r3
 8006ac0:	3710      	adds	r7, #16
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	bd80      	pop	{r7, pc}

08006ac6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006ac6:	b580      	push	{r7, lr}
 8006ac8:	b084      	sub	sp, #16
 8006aca:	af00      	add	r7, sp, #0
 8006acc:	6078      	str	r0, [r7, #4]
 8006ace:	460b      	mov	r3, r1
 8006ad0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006ae0:	78fa      	ldrb	r2, [r7, #3]
 8006ae2:	4611      	mov	r1, r2
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	f7fb f85b 	bl	8001ba0 <HAL_PCD_EP_Close>
 8006aea:	4603      	mov	r3, r0
 8006aec:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006aee:	7bfb      	ldrb	r3, [r7, #15]
 8006af0:	4618      	mov	r0, r3
 8006af2:	f000 f8fd 	bl	8006cf0 <USBD_Get_USB_Status>
 8006af6:	4603      	mov	r3, r0
 8006af8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006afa:	7bbb      	ldrb	r3, [r7, #14]
}
 8006afc:	4618      	mov	r0, r3
 8006afe:	3710      	adds	r7, #16
 8006b00:	46bd      	mov	sp, r7
 8006b02:	bd80      	pop	{r7, pc}

08006b04 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b084      	sub	sp, #16
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
 8006b0c:	460b      	mov	r3, r1
 8006b0e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006b10:	2300      	movs	r3, #0
 8006b12:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006b14:	2300      	movs	r3, #0
 8006b16:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006b1e:	78fa      	ldrb	r2, [r7, #3]
 8006b20:	4611      	mov	r1, r2
 8006b22:	4618      	mov	r0, r3
 8006b24:	f7fb f933 	bl	8001d8e <HAL_PCD_EP_SetStall>
 8006b28:	4603      	mov	r3, r0
 8006b2a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006b2c:	7bfb      	ldrb	r3, [r7, #15]
 8006b2e:	4618      	mov	r0, r3
 8006b30:	f000 f8de 	bl	8006cf0 <USBD_Get_USB_Status>
 8006b34:	4603      	mov	r3, r0
 8006b36:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006b38:	7bbb      	ldrb	r3, [r7, #14]
}
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	3710      	adds	r7, #16
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	bd80      	pop	{r7, pc}

08006b42 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006b42:	b580      	push	{r7, lr}
 8006b44:	b084      	sub	sp, #16
 8006b46:	af00      	add	r7, sp, #0
 8006b48:	6078      	str	r0, [r7, #4]
 8006b4a:	460b      	mov	r3, r1
 8006b4c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006b4e:	2300      	movs	r3, #0
 8006b50:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006b52:	2300      	movs	r3, #0
 8006b54:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006b5c:	78fa      	ldrb	r2, [r7, #3]
 8006b5e:	4611      	mov	r1, r2
 8006b60:	4618      	mov	r0, r3
 8006b62:	f7fb f978 	bl	8001e56 <HAL_PCD_EP_ClrStall>
 8006b66:	4603      	mov	r3, r0
 8006b68:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006b6a:	7bfb      	ldrb	r3, [r7, #15]
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	f000 f8bf 	bl	8006cf0 <USBD_Get_USB_Status>
 8006b72:	4603      	mov	r3, r0
 8006b74:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006b76:	7bbb      	ldrb	r3, [r7, #14]
}
 8006b78:	4618      	mov	r0, r3
 8006b7a:	3710      	adds	r7, #16
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	bd80      	pop	{r7, pc}

08006b80 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006b80:	b480      	push	{r7}
 8006b82:	b085      	sub	sp, #20
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
 8006b88:	460b      	mov	r3, r1
 8006b8a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006b92:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8006b94:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	da0b      	bge.n	8006bb4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8006b9c:	78fb      	ldrb	r3, [r7, #3]
 8006b9e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006ba2:	68f9      	ldr	r1, [r7, #12]
 8006ba4:	4613      	mov	r3, r2
 8006ba6:	00db      	lsls	r3, r3, #3
 8006ba8:	1a9b      	subs	r3, r3, r2
 8006baa:	009b      	lsls	r3, r3, #2
 8006bac:	440b      	add	r3, r1
 8006bae:	333e      	adds	r3, #62	; 0x3e
 8006bb0:	781b      	ldrb	r3, [r3, #0]
 8006bb2:	e00b      	b.n	8006bcc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8006bb4:	78fb      	ldrb	r3, [r7, #3]
 8006bb6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006bba:	68f9      	ldr	r1, [r7, #12]
 8006bbc:	4613      	mov	r3, r2
 8006bbe:	00db      	lsls	r3, r3, #3
 8006bc0:	1a9b      	subs	r3, r3, r2
 8006bc2:	009b      	lsls	r3, r3, #2
 8006bc4:	440b      	add	r3, r1
 8006bc6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006bca:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006bcc:	4618      	mov	r0, r3
 8006bce:	3714      	adds	r7, #20
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd6:	4770      	bx	lr

08006bd8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b084      	sub	sp, #16
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
 8006be0:	460b      	mov	r3, r1
 8006be2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006be4:	2300      	movs	r3, #0
 8006be6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006be8:	2300      	movs	r3, #0
 8006bea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006bf2:	78fa      	ldrb	r2, [r7, #3]
 8006bf4:	4611      	mov	r1, r2
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	f7fa ff45 	bl	8001a86 <HAL_PCD_SetAddress>
 8006bfc:	4603      	mov	r3, r0
 8006bfe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006c00:	7bfb      	ldrb	r3, [r7, #15]
 8006c02:	4618      	mov	r0, r3
 8006c04:	f000 f874 	bl	8006cf0 <USBD_Get_USB_Status>
 8006c08:	4603      	mov	r3, r0
 8006c0a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006c0c:	7bbb      	ldrb	r3, [r7, #14]
}
 8006c0e:	4618      	mov	r0, r3
 8006c10:	3710      	adds	r7, #16
 8006c12:	46bd      	mov	sp, r7
 8006c14:	bd80      	pop	{r7, pc}

08006c16 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006c16:	b580      	push	{r7, lr}
 8006c18:	b086      	sub	sp, #24
 8006c1a:	af00      	add	r7, sp, #0
 8006c1c:	60f8      	str	r0, [r7, #12]
 8006c1e:	607a      	str	r2, [r7, #4]
 8006c20:	603b      	str	r3, [r7, #0]
 8006c22:	460b      	mov	r3, r1
 8006c24:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006c26:	2300      	movs	r3, #0
 8006c28:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8006c34:	7af9      	ldrb	r1, [r7, #11]
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	687a      	ldr	r2, [r7, #4]
 8006c3a:	f7fb f85e 	bl	8001cfa <HAL_PCD_EP_Transmit>
 8006c3e:	4603      	mov	r3, r0
 8006c40:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006c42:	7dfb      	ldrb	r3, [r7, #23]
 8006c44:	4618      	mov	r0, r3
 8006c46:	f000 f853 	bl	8006cf0 <USBD_Get_USB_Status>
 8006c4a:	4603      	mov	r3, r0
 8006c4c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006c4e:	7dbb      	ldrb	r3, [r7, #22]
}
 8006c50:	4618      	mov	r0, r3
 8006c52:	3718      	adds	r7, #24
 8006c54:	46bd      	mov	sp, r7
 8006c56:	bd80      	pop	{r7, pc}

08006c58 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b086      	sub	sp, #24
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	60f8      	str	r0, [r7, #12]
 8006c60:	607a      	str	r2, [r7, #4]
 8006c62:	603b      	str	r3, [r7, #0]
 8006c64:	460b      	mov	r3, r1
 8006c66:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006c68:	2300      	movs	r3, #0
 8006c6a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8006c76:	7af9      	ldrb	r1, [r7, #11]
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	687a      	ldr	r2, [r7, #4]
 8006c7c:	f7fa ffda 	bl	8001c34 <HAL_PCD_EP_Receive>
 8006c80:	4603      	mov	r3, r0
 8006c82:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006c84:	7dfb      	ldrb	r3, [r7, #23]
 8006c86:	4618      	mov	r0, r3
 8006c88:	f000 f832 	bl	8006cf0 <USBD_Get_USB_Status>
 8006c8c:	4603      	mov	r3, r0
 8006c8e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006c90:	7dbb      	ldrb	r3, [r7, #22]
}
 8006c92:	4618      	mov	r0, r3
 8006c94:	3718      	adds	r7, #24
 8006c96:	46bd      	mov	sp, r7
 8006c98:	bd80      	pop	{r7, pc}

08006c9a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006c9a:	b580      	push	{r7, lr}
 8006c9c:	b082      	sub	sp, #8
 8006c9e:	af00      	add	r7, sp, #0
 8006ca0:	6078      	str	r0, [r7, #4]
 8006ca2:	460b      	mov	r3, r1
 8006ca4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006cac:	78fa      	ldrb	r2, [r7, #3]
 8006cae:	4611      	mov	r1, r2
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	f7fb f80a 	bl	8001cca <HAL_PCD_EP_GetRxCount>
 8006cb6:	4603      	mov	r3, r0
}
 8006cb8:	4618      	mov	r0, r3
 8006cba:	3708      	adds	r7, #8
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	bd80      	pop	{r7, pc}

08006cc0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8006cc0:	b480      	push	{r7}
 8006cc2:	b083      	sub	sp, #12
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8006cc8:	4b03      	ldr	r3, [pc, #12]	; (8006cd8 <USBD_static_malloc+0x18>)
}
 8006cca:	4618      	mov	r0, r3
 8006ccc:	370c      	adds	r7, #12
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd4:	4770      	bx	lr
 8006cd6:	bf00      	nop
 8006cd8:	20001294 	.word	0x20001294

08006cdc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8006cdc:	b480      	push	{r7}
 8006cde:	b083      	sub	sp, #12
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]

}
 8006ce4:	bf00      	nop
 8006ce6:	370c      	adds	r7, #12
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cee:	4770      	bx	lr

08006cf0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8006cf0:	b480      	push	{r7}
 8006cf2:	b085      	sub	sp, #20
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	4603      	mov	r3, r0
 8006cf8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8006cfe:	79fb      	ldrb	r3, [r7, #7]
 8006d00:	2b03      	cmp	r3, #3
 8006d02:	d817      	bhi.n	8006d34 <USBD_Get_USB_Status+0x44>
 8006d04:	a201      	add	r2, pc, #4	; (adr r2, 8006d0c <USBD_Get_USB_Status+0x1c>)
 8006d06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d0a:	bf00      	nop
 8006d0c:	08006d1d 	.word	0x08006d1d
 8006d10:	08006d23 	.word	0x08006d23
 8006d14:	08006d29 	.word	0x08006d29
 8006d18:	08006d2f 	.word	0x08006d2f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	73fb      	strb	r3, [r7, #15]
    break;
 8006d20:	e00b      	b.n	8006d3a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006d22:	2303      	movs	r3, #3
 8006d24:	73fb      	strb	r3, [r7, #15]
    break;
 8006d26:	e008      	b.n	8006d3a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006d28:	2301      	movs	r3, #1
 8006d2a:	73fb      	strb	r3, [r7, #15]
    break;
 8006d2c:	e005      	b.n	8006d3a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006d2e:	2303      	movs	r3, #3
 8006d30:	73fb      	strb	r3, [r7, #15]
    break;
 8006d32:	e002      	b.n	8006d3a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8006d34:	2303      	movs	r3, #3
 8006d36:	73fb      	strb	r3, [r7, #15]
    break;
 8006d38:	bf00      	nop
  }
  return usb_status;
 8006d3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	3714      	adds	r7, #20
 8006d40:	46bd      	mov	sp, r7
 8006d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d46:	4770      	bx	lr

08006d48 <_init>:
 8006d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d4a:	bf00      	nop
 8006d4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d4e:	bc08      	pop	{r3}
 8006d50:	469e      	mov	lr, r3
 8006d52:	4770      	bx	lr

08006d54 <_fini>:
 8006d54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d56:	bf00      	nop
 8006d58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d5a:	bc08      	pop	{r3}
 8006d5c:	469e      	mov	lr, r3
 8006d5e:	4770      	bx	lr
